include /etc/nginx/modules-enabled/*.conf;

error_log /dev/stdout info;
worker_processes 1;

env CUSTOMIZATION;

# user nobody nogroup;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
    accept_mutex off;
}

http {
    include mime.types;
    default_type application/octet-stream;
    access_log /dev/stdout combined;
    sendfile on;

    # don't send the nginx version number in error pages and Server header
    server_tokens off;

    # Expires map
    map ${DOLLAR}sent_http_content_type ${DOLLAR}expires {
        default                    off;
        text/html                  epoch;
        text/css                   epoch;
        application/javascript     epoch;
    }

    map $request_uri $fopts {
        ~^/embed/ "";
        default "SAMEORIGIN";
    }

    upstream app_server {
        # For a TCP configuration:
        server $PORTAL_HOST:5000 fail_timeout=0;
    }

    server {
        listen 80 default;

        expires ${DOLLAR}expires;

        client_max_body_size 4G;
        server_name _;

        keepalive_timeout 5;

        # path for static files
        root /app/app/static/$CUSTOMIZATION;
        error_page 503 /static/503.html;
        error_page 502 /static/503.html;

        if (${DOLLAR}http_x_forwarded_proto != "https") {
            return 301 https://${DOLLAR}host${DOLLAR}request_uri;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header Host ${DOLLAR}http_host;
            proxy_redirect off;

            proxy_connect_timeout 300s;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            send_timeout 300s;

            proxy_pass   http://app_server;
        }

        location @proxy_to_app_no_auth {
            proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
            proxy_set_header Host ${DOLLAR}http_host;
            proxy_set_header Authorization  "";
            proxy_redirect off;

            proxy_pass   http://app_server;
        }

        location / {
            index static/index.html;

            # checks for static file, if not found proxy to app
            try_files ${DOLLAR}uri ${DOLLAR}uri/ @proxy_to_app;
        }

        location /api/cloud_modules {
            index static/index.html;

            # checks for static file, if not found proxy to app
            try_files ${DOLLAR}uri ${DOLLAR}uri/ @proxy_to_app;
        }

        location /notifications {
            index static/index.html;

            auth_basic           "Cloud Portal Notification Module";
            auth_basic_user_file /etc/nginx/notification.passwd;

            # checks for static file, if not found proxy to app
            try_files ${DOLLAR}uri ${DOLLAR}uri/ @proxy_to_app_no_auth;
        }

        location /static/help/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;
        }

        location /static/fonts/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;
        }

        location /static/admin/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;
        }

        location /static/autocomplete_light/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;
        }

        location /static/tiny_mce/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;
        }

        location /static/admin_tools/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;   
        }

        location /static/css/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;   
        }

        location /static/cms_images/ {
            root /app/app/static/common;
            error_page 404 /static/index.html;   
        }

        location /static/bootstrap {
            root /app/app/static/common;
            error_page 404 /static/index.html;
        }

        location /fonts/ {
            root /app/app/static/common/static;
            error_page 404 /static/index.html;
        }

        location /preview/ {
            root /app/app/static/$CUSTOMIZATION/;
            error_page 404 /static/index.html;
            expires -1;
        }

        location /static {
            error_page 404 /static/index.html;
        }

        # Add HTTP Strict Transport Security for good measure.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";

        # config to don't allow the browser to render the page inside an frame or iframe
        # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
        # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
        add_header X-Frame-Options $fopts;

        # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
        # to disable content-type sniffing on some browsers.
        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
        # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
        # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
        add_header X-Content-Type-Options nosniff;

        # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
        # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
        # this particular website if it was disabled by the user.
        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        add_header X-XSS-Protection "1; mode=block";

        # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
        # you can tell the browser that it can only download content from the domains you explicitly allow
        # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
        # https://www.owasp.org/index.php/Content_Security_Policy
        # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
        # directives for css and js(if you have inline css or js, you will need to keep it too).
        # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
        add_header Content-Security-Policy "default-src blob: 'self'; script-src 'self' blob: 'unsafe-inline' 'unsafe-eval' https://*.hotjar.com https://*.google-analytics.com https://www.googletagmanager.com https://sjs.bizographics.com; img-src 'self' blob: data: $TRAFFIC_RELAY_HOSTS_STR https://*.google-analytics.com https://*.hotjar.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://themes.googleusercontent.com https://static.hotjar.com; frame-src * cox-vms://* demo-vms://* dtv-vms://* dw-vms://* ez-vms://* fly-vms://* hanwha-vms://* mvss-vms://* nvision-vms://* nx-vms://* pcms-vms://* qulu-vms://* ras-vms://* sentry-vms://* sk-vms://* https://*; connect-src 'self' https://*.google-analytics.com https://*.hotjar.com:* wss://*.hotjar.com $TRAFFIC_RELAY_HOSTS_STR; object-src 'none'; media-src 'self' blob: $TRAFFIC_RELAY_HOSTS_STR";
    }
}
