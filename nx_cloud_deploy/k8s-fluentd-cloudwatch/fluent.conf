<match fluent.**>
  @type null
</match>

<source>
  @type unix
  path /tmp/fluentd/socket.sock
</source>

<source>
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/es-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag kubernetes.*
  format json
  read_from_head true
</source>

<filter kubernetes.**>
  @type kubernetes_metadata
</filter>

<filter kubernetes.**>
  @type record_transformer
  enable_ruby true
  <record>
    kubehost ${record.fetch("kubernetes", Hash.new).fetch("host", "unknown_host")}
    log_group_name ${ENV.fetch("INSTANCE_NAME", "unknown_instance")}-${record.fetch("kubernetes", Hash.new).fetch("labels", Hash.new).fetch("app", "unknown_app")}
    log_stream_name ${record.fetch("kubernetes", Hash.new).fetch("container_name", "unknown")}-${record.fetch("kubernetes", Hash.new).fetch("host", "unknown_host")}
  </record>
</filter>

<filter docker.**>
  @type record_transformer
  enable_ruby true
  <record>
    log_group_name ${ENV.fetch("INSTANCE_NAME", "unknown_instance")}-${ENV.fetch("MODULE_NAME", "unknown_module")}
    log_stream_name ${ENV.fetch("MODULE_NAME", "unknown_module")}
  </record>
</filter>

<match docker.**>
    @type copy
    <store>
      @type cloudwatch_logs
      log_group_name_key log_group_name
      log_stream_name_key log_stream_name
      auto_create_stream true
      put_log_events_retry_limit 20
      message_keys log
    </store>

    <store>
      @type stdout
      format single_value
      message_key log
    </store>
</match>


<match kubernetes.**>
  @type cloudwatch_logs
  log_group_name_key log_group_name
  log_stream_name_key log_stream_name
  remove_log_group_name_key true
  remove_log_stream_name_key true
  auto_create_stream true
  put_log_events_retry_limit 20
  message_keys log
</match>


