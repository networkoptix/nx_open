#include "authentication_manager.h"

#include <algorithm>
#include <future>
#include <limits>

#include <boost/optional.hpp>

#include <nx/cloud/cdb/client/data/types.h>

#include <nx/fusion/serialization/lexical.h>
#include <nx/network/http/auth_restriction_list.h>
#include <nx/network/http/auth_tools.h>
#include <nx/network/http/buffer_source.h>
#include <nx/network/http/custom_headers.h>
#include <nx/network/http/server/http_server_connection.h>
#include <nx/utils/cryptographic_random_device.h>
#include <nx/utils/random.h>
#include <nx/utils/scope_guard.h>
#include <nx/utils/time.h>

#include "abstract_authentication_data_provider.h"
#include "../managers/account_manager.h"
#include "../managers/temporary_account_password_manager.h"
#include "../managers/system_manager.h"
#include "../stree/cdb_ns.h"
#include "../stree/http_request_attr_reader.h"
#include "../stree/socket_attr_reader.h"
#include "../stree/stree_manager.h"

namespace nx {
namespace cdb {

using namespace nx::network::http;

AuthenticationManager::AuthenticationManager(
    std::vector<AbstractAuthenticationDataProvider*> authDataProviders,
    const nx::network::http::AuthMethodRestrictionList& authRestrictionList,
    const StreeManager& stree)
:
    m_authRestrictionList(authRestrictionList),
    m_stree(stree),
    m_authDataProviders(std::move(authDataProviders))
{
}

void AuthenticationManager::authenticate(
    const nx::network::http::HttpServerConnection& connection,
    const nx::network::http::Request& request,
    nx::network::http::server::AuthenticationCompletionHandler completionHandler)
{
    const auto allowedAuthMethods = m_authRestrictionList.getAllowedAuthMethods(request);
    if (allowedAuthMethods & AuthMethod::noAuth)
        return completionHandler(prepareSuccessResponse());

    if (!(allowedAuthMethods & AuthMethod::httpDigest))
        return completionHandler(prepareUnauthorizedResponse(api::ResultCode::notAuthorized));

    const auto authHeaderIter = request.headers.find(header::Authorization::NAME);

    // Checking header.
    std::optional<header::DigestAuthorization> authzHeader;
    if (authHeaderIter != request.headers.end())
    {
        authzHeader.emplace(header::DigestAuthorization());
        if (!authzHeader->parse(authHeaderIter->second))
            authzHeader.reset();
    }

    // Performing stree search.
    nx::utils::stree::ResourceContainer authTraversalResult;
    nx::utils::stree::ResourceContainer inputRes;
    if (authzHeader && !authzHeader->userid().isEmpty())
        inputRes.put(attr::userName, authzHeader->userid());
    SocketResourceReader socketResources(*connection.socket());
    HttpRequestResourceReader httpRequestResources(request);
    const auto authSearchInputData = nx::utils::stree::MultiSourceResourceReader(
        socketResources,
        httpRequestResources,
        inputRes,
        authTraversalResult);
    m_stree.search(
        StreeOperation::authentication,
        authSearchInputData,
        &authTraversalResult);
    if (auto authenticated = authTraversalResult.get(attr::authenticated))
    {
        if (authenticated.get().toBool())
            return completionHandler(prepareSuccessResponse());
    }

    if (!authzHeader ||
        (authzHeader->authScheme != header::AuthScheme::digest) ||
        (authzHeader->userid().isEmpty()) ||
        !validateNonce(authzHeader->digest->params["nonce"]))
    {
        return completionHandler(prepareUnauthorizedResponse(
            api::ResultCode::notAuthorized,
            prepareWwwAuthenticateHeader()));
    }

    const auto userId = authzHeader->userid();
    std::function<bool(const nx::Buffer& /*ha1*/)> validateHa1Func = std::bind(
        &validateAuthorization,
        request.requestLine.method,
        userId,
        boost::none,
        std::placeholders::_1,
        std::move(authzHeader.value()));

    if (checkUserPasswordByAuthResult(validateHa1Func, userId, authTraversalResult))
        return completionHandler(prepareSuccessResponse());

    nx::utils::stree::ResourceContainer authProperties;
    const auto authResult = authenticateInDataManagers(
        userId,
        std::move(validateHa1Func),
        authSearchInputData,
        &authProperties);

    if (authResult == api::ResultCode::ok)
        return completionHandler(prepareSuccessResponse(std::move(authProperties)));

    return completionHandler(prepareUnauthorizedResponse(authResult));
}

nx::String AuthenticationManager::realm()
{
    return nx::network::AppInfo::realm().toUtf8();
}

bool AuthenticationManager::validateNonce(const nx::network::http::StringType& nonce)
{
    // TODO: #ak introduce more strong nonce validation.
    // Currently, forbidding authentication with nonce, generated by /auth/get_nonce request.
    return nonce.size() < 31;
}

api::ResultCode AuthenticationManager::authenticateInDataManagers(
    const nx::network::http::StringType& username,
    std::function<bool(const nx::Buffer&)> validateHa1Func,
    const nx::utils::stree::AbstractResourceReader& authSearchInputData,
    nx::utils::stree::ResourceContainer* const authProperties)
{
    // TODO: #ak AuthenticationManager has to become async some time...

    std::vector<api::ResultCode> authDataProvidersResults;
    authDataProvidersResults.reserve(m_authDataProviders.size());
    for (AbstractAuthenticationDataProvider* authDataProvider: m_authDataProviders)
    {
        nx::utils::promise<api::ResultCode> authPromise;
        auto authFuture = authPromise.get_future();
        authDataProvider->authenticateByName(
            username,
            validateHa1Func,
            authSearchInputData,
            authProperties,
            [&authPromise](api::ResultCode authResult)
            {
                authPromise.set_value(authResult);
            });
        authFuture.wait();
        const auto result = authFuture.get();
        if (result == api::ResultCode::ok ||
            result == api::ResultCode::credentialsRemovedPermanently)
        {
            return result;
        }
        authDataProvidersResults.push_back(result);
    }

    if (std::all_of(
            authDataProvidersResults.begin(),
            authDataProvidersResults.end(),
            [](auto result) { return result == api::ResultCode::badUsername; }))
    {
        return api::ResultCode::badUsername;
    }

    return api::ResultCode::notAuthorized;
}

nx::network::http::header::WWWAuthenticate
    AuthenticationManager::prepareWwwAuthenticateHeader()
{
    nx::network::http::header::WWWAuthenticate wwwAuthenticate;

    wwwAuthenticate.authScheme = header::AuthScheme::digest;
    wwwAuthenticate.params.insert("nonce", generateNonce());
    wwwAuthenticate.params.insert("realm", realm());
    wwwAuthenticate.params.insert("algorithm", "MD5");

    return wwwAuthenticate;
}

nx::Buffer AuthenticationManager::generateNonce()
{
    const auto nonce =
        nx::utils::random::number<nx::utils::random::CryptographicRandomDevice, uint64_t>(
            nx::utils::random::CryptographicRandomDevice::instance())
        | nx::utils::timeSinceEpoch().count();
    return nx::Buffer::number((qulonglong)nonce);
}

nx::network::http::server::AuthenticationResult
    AuthenticationManager::prepareSuccessResponse(
        std::optional<nx::utils::stree::ResourceContainer> authProperties)
{
    nx::network::http::server::AuthenticationResult authResponse;
    authResponse.isSucceeded = true;
    if (authProperties)
        authResponse.authInfo = std::move(*authProperties);
    return authResponse;
}

nx::network::http::server::AuthenticationResult
    AuthenticationManager::prepareUnauthorizedResponse(
        api::ResultCode authResult,
        std::optional<nx::network::http::header::WWWAuthenticate> wwwAuthenticate)
{
    nx::network::http::server::AuthenticationResult authResponse;
    prepareUnauthorizedResponse(authResult, &authResponse);
    if (wwwAuthenticate)
        authResponse.wwwAuthenticate = wwwAuthenticate;
    return authResponse;
}

void AuthenticationManager::prepareUnauthorizedResponse(
    api::ResultCode authResult,
    nx::network::http::server::AuthenticationResult* authResponse)
{
    authResponse->responseHeaders.emplace(
        Qn::API_RESULT_CODE_HEADER_NAME,
        QnLexical::serialized(authResult).toLatin1());

    nx::network::http::FusionRequestResult result(
        nx::network::http::FusionRequestErrorClass::unauthorized,
        QnLexical::serialized(authResult),
        static_cast<int>(authResult),
        "unauthorized");

    authResponse->msgBody = std::make_unique<nx::network::http::BufferSource>(
        Qn::serializationFormatToHttpContentType(Qn::JsonFormat),
        QJson::serialized(result));
}

bool AuthenticationManager::checkUserPasswordByAuthResult(
    const std::function<bool(const nx::Buffer& /*ha1*/)>& validateHa1Func,
    const nx::String& userId,
    const nx::utils::stree::ResourceContainer& authTraversalResult)
{
    if (auto foundHa1 = authTraversalResult.get(attr::ha1))
    {
        if (validateHa1Func(foundHa1.get().toString().toLatin1()))
            return true;
    }

    if (auto password = authTraversalResult.get(attr::userPassword))
    {
        if (validateHa1Func(calcHa1(
                userId,
                realm(),
                password.get().toString())))
        {
            return true;
        }
    }

    return false;
}

} // namespace cdb
} // namespace nx
