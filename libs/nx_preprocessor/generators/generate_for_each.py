#!/bin/env python

## Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

import argparse
import os
import sys


MACRO_NAME = "NX_PP_FOR_EACH"
HELPER_MACRO_PREFIX = "_NX_PP_FOR_EACH_"
INDENT = " " * 4


def generate(n: int):
    yield f"// This file is generated by {os.path.basename(__file__)}. DO NOT EDIT BY HAND!\n"
    yield "#pragma once\n\n"

    yield "#include \"count.h\"\n"
    yield "#include \"misc.h\"\n\n"

    yield f"#define {MACRO_NAME}(Macro, Data, ...) \\\n"
    yield f"{INDENT}NX_PP_EXPAND(NX_PP_CAT( \\\n" \
        f"{INDENT * 2}{HELPER_MACRO_PREFIX}, NX_PP_ARGS_COUNT(__VA_ARGS__))" \
            "(Macro, Data, __VA_ARGS__))\n\n"

    yield f"#define {HELPER_MACRO_PREFIX}1(Macro, Data, Item) Macro(Data, Item)\n"
    for i in range(2, n + 1):
        yield f"#define {HELPER_MACRO_PREFIX}{i}(Macro, Data, Item, ...) \\\n"
        yield f"{INDENT}Macro(Data, Item) " \
            f"NX_PP_EXPAND({HELPER_MACRO_PREFIX}{i - 1}(Macro, Data, __VA_ARGS__))\n"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("n", type=int, help="Maximum number of items")
    parser.add_argument(
        "--output", "-o", type=argparse.FileType("w"), default=sys.stdout, help="Output file name")
    args = parser.parse_args()
    args.output.writelines(generate(args.n))


if __name__ == "__main__":
    main()
