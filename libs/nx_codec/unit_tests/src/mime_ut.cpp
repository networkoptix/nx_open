// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

#include <gtest/gtest.h>

#include <nx/codec/mime.h>

TEST(CodecMime, H264)
{
    const uint8_t avcc[]   = {0x01, 0x4d, 0x00, 0x28, 0xff, 0xe1, 0x00, 0x15, 0x67, 0x4d, 0x00, 0x28,
        0x9d, 0xa8, 0x1e, 0x00, 0x89, 0xf9, 0x61, 0x00, 0x00, 0x03, 0x03, 0xe8, 0x00, 0x00, 0x75,
        0x30, 0x84, 0x01, 0x00, 0x04, 0x68, 0xea, 0x8f, 0x20};
    const uint8_t annexb[] = {0x00, 0x00, 0x00, 0x01, 0x67, 0x42, 0xc0, 0x29, 0x8c, 0x8d, 0x40, 0x50,
        0x1e, 0x98, 0x08, 0x0f, 0x08, 0x84, 0x6a, 0x00, 0x00, 0x00, 0x01, 0x68, 0xce, 0x3c, 0x80};

    AVCodecParameters avccPar;
    avccPar.extradata = (uint8_t*) &avcc;
    avccPar.extradata_size = sizeof(avcc);
    avccPar.codec_id = AV_CODEC_ID_H264;
    ASSERT_EQ("avc1.4d0028", nx::media::getMimeType(&avccPar));

    AVCodecParameters annexbPar;
    annexbPar.extradata = (uint8_t*) &annexb;
    annexbPar.extradata_size = sizeof(annexb);
    annexbPar.codec_id = AV_CODEC_ID_H264;
    ASSERT_EQ("avc1.42c029", nx::media::getMimeType(&annexbPar));

    AVCodecParameters nullPar;
    nullPar.extradata = nullptr;
    nullPar.extradata_size = 0;
    nullPar.codec_id = AV_CODEC_ID_H264;
    ASSERT_EQ("avc1", nx::media::getMimeType(&nullPar));
}

TEST(CodecMime, H265)
{
    // Check only HVCC.
    const uint8_t hvcc[] = {0x01, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x96, 0xf0, 0x00, 0xfd, 0xfd, 0xf8, 0xf8, 0x00, 0x00, 0x0f, 0x03, 0x20, 0x00, 0x01, 0x00,
        0x23, 0x40, 0x01, 0x0c, 0x01, 0xff, 0xff, 0x01, 0x60, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x96, 0xac, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x04,
        0x00, 0x00, 0x03, 0x00, 0x3d, 0x40, 0x21, 0x00, 0x01, 0x00, 0x2c, 0x42, 0x01, 0x01, 0x01,
        0x60, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x96,
        0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5, 0x8d, 0xae, 0x49, 0x32, 0x6b, 0x96, 0x70, 0x08, 0x00,
        0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x03, 0x00, 0x78, 0x40, 0x22, 0x00, 0x01, 0x00, 0x07,
        0x44, 0x01, 0xe0, 0x76, 0xb0, 0x26, 0x40};

    AVCodecParameters hvccPar;
    hvccPar.extradata = (uint8_t*) &hvcc;
    hvccPar.extradata_size = sizeof(hvcc);
    hvccPar.codec_id = AV_CODEC_ID_H265;
    ASSERT_EQ("hvc1.1.6.L150.0", nx::media::getMimeType(&hvccPar));

    AVCodecParameters nullPar;
    nullPar.extradata = nullptr;
    nullPar.extradata_size = 0;
    nullPar.codec_id = AV_CODEC_ID_H265;
    ASSERT_EQ("hvc1", nx::media::getMimeType(&nullPar));
}

TEST(CodecMime, MP2)
{
    AVCodecParameters par;
    par.codec_id = AV_CODEC_ID_MP2;
    ASSERT_EQ("mp4a.40.33", nx::media::getMimeType(&par));
}

TEST(CodecMime, MP3)
{
    AVCodecParameters par;
    par.codec_id = AV_CODEC_ID_MP3;
    ASSERT_EQ("mp4a.40.34", nx::media::getMimeType(&par));
}

TEST(CodecMime, AAC)
{
    AVCodecParameters par;
    par.codec_id = AV_CODEC_ID_AAC;
    ASSERT_EQ("mp4a.40.2", nx::media::getMimeType(&par));
}

TEST(CodecMime, AC3)
{
    AVCodecParameters par;
    par.codec_id = AV_CODEC_ID_AC3;
    ASSERT_EQ("ac-3", nx::media::getMimeType(&par));
}

TEST(CodecMime, EAC3)
{
    AVCodecParameters par;
    par.codec_id = AV_CODEC_ID_EAC3;
    ASSERT_EQ("ec-3", nx::media::getMimeType(&par));
}
