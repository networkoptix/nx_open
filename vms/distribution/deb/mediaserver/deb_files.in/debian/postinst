#!/bin/bash -e

COMPANY_NAME=@deb.customization.company.name@

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }

UPGRADING=${2:+yes}

export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

BASE_DIR="/opt/$COMPANY_NAME/mediaserver"

ETC_DIR="$BASE_DIR/etc"
BIN_DIR="$BASE_DIR/bin"

CONFIG_FILE="$ETC_DIR/mediaserver.conf"
RUNTIME_CONFIG_FILE="$ETC_DIR/running_time.conf"
DB_PATH="$BASE_DIR/var/ecs.sqlite"

CFG_HELPER="$BIN_DIR/config_helper.py $CONFIG_FILE"

# Default MS parameters
PORT_DEFAULT="7001"
TRANSPORT_DEAULT="auto"
PUBLIC_IP_ENABLED_DEFAULT="auto"
CAMERA_SETTINGS_OPTIMIZATION_DEFAULT=true
STATISTICS_REPORT_ALLOWED_DEFAULT=true
SYSTEM_USER=$COMPANY_NAME

function is_local_addr {
    local hostname=$1;
    local addr=$(gethostip $hostname -d)

    if [ $? -ne 0 ]; then
    addr=$hostname
    fi

    [[ "$addr" =~ ^127.[0-9]+.[0-9]+.[0-9]+$ ]] && return 0

    ip -4 -o addr | awk '{gsub("/", " "); print $4;}' | grep "^$addr$" > /dev/null 2>&1
}

function find_free_port {
    local port=$1

    while :
    do
        netstat -nl4t | awk '{print $4;}' | grep ":$port" > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo $port
            return
        else
            port=$((port+10))
        fi
    done
}

function check_new_system {
    local port=$1

    for ((i = 1; i <= 5; i++))
    do
        sleep 1
        echo "[$i] Checking if the server is running..."
        INFO=$(wget "http://localhost:$port/api/moduleInformation" --quiet -O-) && break
    done

    echo "$INFO" | grep -q '"localSystemId":\s*"{00000000-0000-0000-0000-000000000000}"'
}

function display_complete_setup_hint {
    local port=$1

    [ -n "$UPGRADING" ] && return

    if check_new_system $port
    then
        db_fset @deb.customization.company.name@-mediaserver/complete-setup-hint seen false
        db_input critical @deb.customization.company.name@-mediaserver/complete-setup-hint || true
        db_go
    fi
}

if [ $(which systemctl) ]
then
    # Systemd has a recursion problem with forwarding init.d script.
    # The script in init.d is for Ubuntu < 16.04 (with Upstart initialization system).
    [ -f "/etc/init.d/$COMPANY_NAME-mediaserver" ] && rm "/etc/init.d/$COMPANY_NAME-mediaserver"
    [ -f "/etc/init.d/$COMPANY_NAME-root-tool" ] && rm "/etc/init.d/$COMPANY_NAME-root-tool"
fi

# This is necessary because changed configuration options should take effect
# immediately.

service $COMPANY_NAME-mediaserver stop || true
service $COMPANY_NAME-root-tool stop || true

case "$1" in
    configure)
        SYSTEM_NAME_DEFAULT=System_$RANDOM

        ECS_HOST="$($CFG_HELPER appserverHost)"
        if [ -n "$ECS_HOST" ]; then
            if is_local_addr "$ECS_HOST"; then
                $CFG_HELPER appserverHost -d
                $CFG_HELPER appserverPort -d
                $CFG_HELPER appserverLogin -d
                $CFG_HELPER appserverPassword -d
            else
                $CFG_HELPER pendingSwitchToClusterMode "yes"
                $CFG_HELPER appserverPassword -d
            fi
        fi

        [ ! -d "$BASE_DIR/var" ] && mkdir -p "$BASE_DIR/var"

        if [ -z "$UPGRADING" ]
        then
            PORT="$($CFG_HELPER port)"
            [ -z "$PORT" ] && PORT=$(find_free_port $PORT_DEFAULT)
            $CFG_HELPER port "$PORT"

            if [ ! -f $DB_PATH ]
            then
                APPSERVER_PASSWORD="admin"
                $CFG_HELPER appserverPassword "$APPSERVER_PASSWORD"
                $CFG_HELPER lowPriorityPassword 1
            fi

            TRANSPORT="$($CFG_HELPER rtspTransport)"
            [ -z "$TRANSPORT" ] && TRANSPORT=$TRANSPORT_DEFAULT
            $CFG_HELPER rtspTransport "$TRANSPORT"

            $CFG_HELPER systemName ""

            CAMERA_SETTINGS_OPTIMIZATION="$($CFG_HELPER cameraSettingsOptimization)"
            [ -z "$CAMERA_SETTINGS_OPTIMIZATION" ] && CAMERA_SETTINGS_OPTIMIZATION=$CAMERA_SETTINGS_OPTIMIZATION_DEFAULT
            $CFG_HELPER cameraSettingsOptimization "$CAMERA_SETTINGS_OPTIMIZATION"

            STATISTICS_REPORT_ALLOWED="$($CFG_HELPER statisticsReportAllowed)"
            [ -z "$STATISTICS_REPORT_ALLOWED" ] && STATISTICS_REPORT_ALLOWED=$STATISTICS_REPORT_ALLOWED_DEFAULT
            $CFG_HELPER statisticsReportAllowed "$STATISTICS_REPORT_ALLOWED"
        else
            PORT="$($CFG_HELPER port)"
            [ -z "$PORT" ] && PORT=$(find_free_port $PORT_DEFAULT)
            $CFG_HELPER port "$PORT"

            SYSTEM_NAME="$($CFG_HELPER systemName)"
            [ -z "$SYSTEM_NAME" ] && $CFG_HELPER systemName "$SYSTEM_NAME_DEFAULT"
        fi

        useradd --system "$SYSTEM_USER" || true

        # Allow core dumps creation.
        chown "$SYSTEM_USER:$SYSTEM_USER" "$BIN_DIR"

        if [ '@withRootTool@' = 'true' ]
        then
            chown "root:${SYSTEM_USER}" "${BIN_DIR}/root-tool-bin"
            chmod u+s "${BIN_DIR}/root-tool-bin"
            setcap CAP_NET_BIND_SERVICE=+eip "$BIN_DIR/mediaserver-bin"
        fi

        touch "$RUNTIME_CONFIG_FILE"

  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

# Dirty hack to prevent apport from catching our crash dumps.
echo manual > /etc/init/apport.override
systemctl disable apport >/dev/null 2>&1 || true
service apport stop >/dev/null 2>&1 || true

if [ $(which systemctl) ]; then
    # Systemd requires explicit enabling of the service to start it on boot.
    systemctl enable $COMPANY_NAME-root-tool || exit $?
    systemctl enable $COMPANY_NAME-mediaserver || exit $?
else
    update-rc.d $COMPANY_NAME-root-tool defaults || exit $?
    update-rc.d $COMPANY_NAME-mediaserver defaults || exit $?
fi

if service $COMPANY_NAME-root-tool start && service $COMPANY_NAME-mediaserver start; then
    sleep 1
    echo Start service $(ps aux | grep "mediaserver-bin -e" | grep -v grep)
else
    # We do not fail installation process because in this case dpkg makes a package hard to remove.
    echo WARNING: Unable to start service >&2
fi

display_complete_setup_hint $PORT
