#!/bin/bash -e

COMPANY_NAME=@deb.customization.company.name@

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }

UPGRADING=${2:+yes}

export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

BASE_DIR="/opt/$COMPANY_NAME/mediaserver"

ETC_DIR="$BASE_DIR/etc"
BIN_DIR="$BASE_DIR/bin"

CONFIG_FILE="$ETC_DIR/mediaserver.conf"
RUNTIME_CONFIG_FILE="$ETC_DIR/running_time.conf"
DB_PATH="$BASE_DIR/var/ecs.sqlite"

CFG_HELPER="$BIN_DIR/config_helper.py $CONFIG_FILE"

# Default MS parameters
PORT_DEFAULT="7001"
TRANSPORT_DEAULT="auto"
PUBLIC_IP_ENABLED_DEFAULT="auto"
CAMERA_SETTINGS_OPTIMIZATION_DEFAULT=true
STATISTICS_REPORT_ALLOWED_DEFAULT=true
SYSTEM_USER=$COMPANY_NAME

TARGET_DEVICE='@targetDevice@'
WITH_ROOT_TOOL='@withRootTool@'

isSystemdUsed()
{
    [[ $(readlink -m /sbin/init) =~ .*systemd$ ]]
}

isRpi()
{
    if [[ $TARGET_DEVICE == "linux_arm32" ]]
    then
        grep '^Hardware.*:.*BCM2835[[:space:]]*$' /proc/cpuinfo &>/dev/null
    else
        false
    fi
}

isLocalAddr()
{
    local -r hostname="$1"
    local addr=$(gethostip "$hostname" -d)

    if (( $? != 0 ))
    then
        addr="$hostname"
    fi

    [[ "$addr" =~ ^127.[0-9]+.[0-9]+.[0-9]+$ ]] && return 0

    ip -4 -o addr | awk '{gsub("/", " "); print $4;}' | grep "^$addr$" > /dev/null 2>&1
}

findFreePort()
{
    local -i port="$1"

    while true
    do
        netstat -nl4t | awk '{print $4;}' | grep ":$port" > /dev/null 2>&1
        if (( $? != 0 ))
        then
            echo "$port"
            return
        else
            port=$((port+10))
        fi
    done
}

checkNewSystem()
{
    local -r -i RETRY_COUNT=20
    local -i port="$1"
    local response

    for ((i = 1; i <= $RETRY_COUNT; i++))
    do
        echo "Checking if the server is running (attempt #$i)." >&2
        response=$(wget --quiet "http://localhost:$port/api/moduleInformation" -O-) && break
        sleep 1
    done

    if (( i > $RETRY_COUNT ))
    then
        echo "ERROR: Request GET /api/moduleInformation has failed." >&2
        return 1
    fi

    local -r c="[0-9a-z]"
    local -r localSystemIdRegex="\\{$c{8}-$c{4}-$c{4}-$c{4}-$c{12}\\}"
    # Find `"localSystemId": "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"` pattern in the JSON
    # response and assign the match to the variable. If no match was found, assign an empty string
    # to it.
    local -r localSystemIdDefinition=$(
        echo "$response" \
            |grep --extended-regexp --only-matching "\"localSystemId\":\s*\"$localSystemIdRegex\""
    )

    if [[ -z $localSystemIdDefinition ]]
    then
        echo "ERROR: Request GET /api/moduleInformation returned unexpected result." >&2
        return 1
    fi

    # Extract the value from `"localSystemId": "..."` and assign it to the variable.
    local -r localSystemIdValue=$(
        echo "$localSystemIdDefinition" \
            |grep --extended-regexp --only-matching "$localSystemIdRegex"
    )

    if [[ $localSystemIdValue != "{00000000-0000-0000-0000-000000000000}" ]]
    then
        return 1
    fi

    return 0
}

displayCompleteSetupHint()
{
    local -i port="$1"

    [ -n "$UPGRADING" ] && return

    if checkNewSystem $port
    then
        db_fset @deb.customization.company.name@-mediaserver/complete-setup-hint seen false
        db_input critical @deb.customization.company.name@-mediaserver/complete-setup-hint || true
        db_go
    fi
}

installModificationSpecificConfig()
{
    local -r config_file_path="${BASE_DIR}/share/configs/mediaserver.conf.$TARGET_DEVICE.template"

    if [[ -f ${config_file_path} ]]
    then
        cp  "${config_file_path}" "${BASE_DIR}/etc/mediaserver.conf"
    fi
}

# This is necessary because changed configuration options should take effect
# immediately.

service $COMPANY_NAME-mediaserver stop || true

if [[ $WITH_ROOT_TOOL == 'true' ]]
then
    service $COMPANY_NAME-root-tool stop || true
fi

case "$1" in
    configure)
        SYSTEM_NAME_DEFAULT=System_$RANDOM

        ECS_HOST="$($CFG_HELPER appserverHost)"
        if [ -n "$ECS_HOST" ]; then
            if isLocalAddr "$ECS_HOST"; then
                $CFG_HELPER appserverHost -d
                $CFG_HELPER appserverPort -d
                $CFG_HELPER appserverLogin -d
                $CFG_HELPER appserverPassword -d
            else
                $CFG_HELPER pendingSwitchToClusterMode "yes"
                $CFG_HELPER appserverPassword -d
            fi
        fi

        [ ! -d "$BASE_DIR/var" ] && mkdir -p "$BASE_DIR/var"

        if [ -z "$UPGRADING" ]
        then
            PORT="$($CFG_HELPER port)"
            [ -z "$PORT" ] && PORT=$(findFreePort $PORT_DEFAULT)
            $CFG_HELPER port "$PORT"

            if [ ! -f $DB_PATH ]
            then
                APPSERVER_PASSWORD="admin"
                $CFG_HELPER appserverPassword "$APPSERVER_PASSWORD"
                $CFG_HELPER lowPriorityPassword 1
            fi

            TRANSPORT="$($CFG_HELPER rtspTransport)"
            [ -z "$TRANSPORT" ] && TRANSPORT=$TRANSPORT_DEFAULT
            $CFG_HELPER rtspTransport "$TRANSPORT"

            $CFG_HELPER systemName ""

            CAMERA_SETTINGS_OPTIMIZATION="$($CFG_HELPER cameraSettingsOptimization)"
            [ -z "$CAMERA_SETTINGS_OPTIMIZATION" ] && CAMERA_SETTINGS_OPTIMIZATION=$CAMERA_SETTINGS_OPTIMIZATION_DEFAULT
            $CFG_HELPER cameraSettingsOptimization "$CAMERA_SETTINGS_OPTIMIZATION"

            STATISTICS_REPORT_ALLOWED="$($CFG_HELPER statisticsReportAllowed)"
            [ -z "$STATISTICS_REPORT_ALLOWED" ] && STATISTICS_REPORT_ALLOWED=$STATISTICS_REPORT_ALLOWED_DEFAULT
            $CFG_HELPER statisticsReportAllowed "$STATISTICS_REPORT_ALLOWED"
        else
            PORT="$($CFG_HELPER port)"
            [ -z "$PORT" ] && PORT=$(findFreePort $PORT_DEFAULT)
            $CFG_HELPER port "$PORT"

            SYSTEM_NAME="$($CFG_HELPER systemName)"
            [ -z "$SYSTEM_NAME" ] && $CFG_HELPER systemName "$SYSTEM_NAME_DEFAULT"
        fi

        useradd --system "$SYSTEM_USER" || true

        # Allow core dumps creation.
        chown "$SYSTEM_USER:$SYSTEM_USER" "$BIN_DIR"

        if [[ $WITH_ROOT_TOOL == 'true' ]]
        then
            chown "root:${SYSTEM_USER}" "${BIN_DIR}/root-tool-bin"
            chmod u+s "${BIN_DIR}/root-tool-bin"
            setcap CAP_NET_BIND_SERVICE=+eip "$BIN_DIR/mediaserver-bin"
        fi

        touch "$RUNTIME_CONFIG_FILE"

  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

# Dirty hack to prevent apport from catching our crash dumps.
echo manual > /etc/init/apport.override
systemctl disable apport >/dev/null 2>&1 || true
service apport stop >/dev/null 2>&1 || true

[[ -L "${BASE_DIR}/lib/ffmpeg" ]] && unlink "${BASE_DIR}/lib/ffmpeg"

if isRpi
then
    # RPi requires specially compiled ffmpeg with mmal support - for RPi camera.
    ( cd "${BASE_DIR}/lib"; ln -s ffmpeg-rpi ffmpeg )

    bash "${BASE_DIR}/var/scripts/rpi/cam_setup.sh"

    # Plan a reboot after the package installation. This mark will be processed in install.sh.
    touch "/var/run/reboot-required"
else
    ( cd "${BASE_DIR}/lib"; ln -s ffmpeg-arm32 ffmpeg )
fi

installModificationSpecificConfig

if isSystemdUsed
then
    # Systemd requires explicit enabling of the service to start it on boot.
    if [[ $WITH_ROOT_TOOL == 'true' ]]
    then
        systemctl enable $COMPANY_NAME-root-tool || exit $?
    fi

    systemctl enable $COMPANY_NAME-mediaserver || exit $?
fi

startServer()
{
    if [[ $WITH_ROOT_TOOL == 'true' ]]
    then
        service $COMPANY_NAME-root-tool start || return $?
    fi

    service $COMPANY_NAME-mediaserver start
}

startServer || exit $?

sleep 1
if ! PID=$(pidof mediaserver-bin)
then
    echo "ERROR: Server process not found though 'systemd ... start' reported success." >&2
    exit 1
fi

echo "Started service with PID $PID."

displayCompleteSetupHint $PORT
