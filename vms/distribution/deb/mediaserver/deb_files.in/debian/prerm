#!/bin/bash -e

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }

COMPANY_NAME="@customization.companyId@"
CLOUD_GROUP_SUFFIX="@cloud_group_suffix@"
CLOUD_NAME="@customization.cloudName@"

BASE_DIR="/opt/$COMPANY_NAME/mediaserver"
ETC_DIR="$BASE_DIR/etc"
BIN_DIR="$BASE_DIR/bin"

CONFIG_FILE="$ETC_DIR/mediaserver.conf"
CFG_HELPER_SCRIPT="$BIN_DIR/config_helper.sh"
CFG_HELPER="$CFG_HELPER_SCRIPT $CONFIG_FILE"

WITH_ROOT_TOOL='@withRootTool@'

declare RUNTIME #< The assignment is placed hereinafter.

# Acquire the runtime type (real, docker, chroot and so on) and store its name to the variable
# named outputVariableName.
getRuntimeType() #< outputVariableName
{
    local -r outputVariableName="$1"; shift
    local -r runtime=$(systemd-detect-virt)

    if [[ $runtime == "" ]]
    then
        echo "Error detecting type of runtime." >&2
        return 1
    fi

    if [[ $runtime != "none" ]]
    then
        echo "Detected runtime type: $runtime." >&2
        eval "${outputVariableName}=$runtime"
    else
        eval "${outputVariableName}=real"
    fi

    return 0
}

getRuntimeType RUNTIME

systemctl stop $COMPANY_NAME-mediaserver || true

if [[ $WITH_ROOT_TOOL == 'true' ]]
then
    systemctl stop $COMPANY_NAME-root-tool || true
fi

systemctl disable $COMPANY_NAME-mediaserver

if [[ $WITH_ROOT_TOOL == 'true' ]]
then
    systemctl disable $COMPANY_NAME-root-tool
fi

if [ "$1" = "remove" ]
then
    REMOVE="Remove the Database"
    KEEP="Keep current version"
    CHOICES="$REMOVE, $KEEP"

    db_subst @customization.companyId@-mediaserver/removeDatabase choices $CHOICES
    db_set @customization.companyId@-mediaserver/removeDatabase "$KEEP"
    db_fset @customization.companyId@-mediaserver/removeDatabase seen false

    db_input high @customization.companyId@-mediaserver/removeDatabase || true
    db_go || true
    db_get @customization.companyId@-mediaserver/removeDatabase

    # The following check is needed for the correct uninstallation
    # when the media server folder or some files were removed manually
    if [ -f "$CFG_HELPER_SCRIPT" ]; then
        $CFG_HELPER sysIdTime -d
    fi

    if [ "$RET" = "$REMOVE" ]
    then
        find "/opt/$COMPANY_NAME/mediaserver/var" -name "*.sqlite*" \
            -a ! -name "ecs_static.sqlite*" \
            |xargs rm -f
    fi
fi
