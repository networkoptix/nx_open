#!/bin/bash -e

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }

is_systemd_used() {
    [[ $(readlink -m /sbin/init) =~ .*systemd$ ]]
}

COMPANY_NAME="@deb.customization.company.name@"
CLOUD_GROUP_SUFFIX="@cloud_group_suffix@"
CLOUD_NAME="@cloudName@"

BASE_DIR="/opt/$COMPANY_NAME/mediaserver"
ETC_DIR="$BASE_DIR/etc"
BIN_DIR="$BASE_DIR/bin"

CONFIG_FILE="$ETC_DIR/mediaserver.conf"
CFG_HELPER="$BIN_DIR/config_helper.py $CONFIG_FILE"

WITH_ROOT_TOOL='@withRootTool@'

systemctl stop $COMPANY_NAME-mediaserver.service || true

if [[ $WITH_ROOT_TOOL == 'true' ]]
then
    systemctl stop $COMPANY_NAME-root-tool.service || true
fi

if [[ $1 == 'remove' ]]
then
    REMOVE="Remove the Database"
    KEEP="Keep current version"
    CHOICES="$REMOVE, $KEEP"

    db_subst @deb.customization.company.name@-mediaserver/removeDatabase choices $CHOICES
    db_set @deb.customization.company.name@-mediaserver/removeDatabase "$KEEP"
    db_fset @deb.customization.company.name@-mediaserver/removeDatabase seen false

    db_input high @deb.customization.company.name@-mediaserver/removeDatabase || true
    db_go || true
    db_get @deb.customization.company.name@-mediaserver/removeDatabase

    if [ "$RET" = "$KEEP" -a "$2" = "in-favour" ]
    then
        # Here we check cloud instances conflict prior to upgrade. Pre-installation script has a
        # similar check which is required for updates from old versions which do not have this
        # check.

        echo "Checking $CLOUD_NAME compatibility..." >&2

        NEW_CLOUD_GROUP_SUFFIX=$(echo "$3" | sed "s/$COMPANY_NAME-mediaserver//")
        IS_CONNECTED_TO_CLOUD=$($CFG_HELPER isConnectedToCloud)

        if [ "$IS_CONNECTED_TO_CLOUD" = "yes" \
            -a "$CLOUD_GROUP_SUFFIX" != "$NEW_CLOUD_GROUP_SUFFIX" ]
        then
            echo >&2
            echo "You are going to install a package for another cloud instance." >&2
            echo "Please unlink the system from $CLOUD_NAME first."
            echo "Exiting..." >&2
            echo >&2
            exit 1
        fi
    fi

    if is_systemd_used
    then
        systemctl disable $COMPANY_NAME-mediaserver.service

        if [[ $WITH_ROOT_TOOL == 'true' ]]
        then
            systemctl disable $COMPANY_NAME-root-tool.service
        fi
    fi

    $CFG_HELPER sysIdTime -d

    if [ "$RET" = "$REMOVE" ]
    then
        find "/opt/$COMPANY_NAME/mediaserver/var" -name "*.sqlite*" \
            -a ! -name "ecs_static.sqlite*" \
            |xargs rm -f
    fi
fi
