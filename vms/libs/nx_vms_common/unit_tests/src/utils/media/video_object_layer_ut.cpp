// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

#include <gtest/gtest.h>

#include <utils/media/mpeg4/video_object_layer.h>
#include <utils/media/mpeg4/utils.h>

TEST(MPEG4, VideoObjectLayer)
{
    nx::media::mpeg4::VideoObjectLayer vol;
    uint8_t data[] = {
        0x00, 0xc4, 0x95, 0x8b, 0x0d, 0x45, 0x0b, 0x04, 0x24, 0x14, 0x43, 0x00, 0x00, 0x01, 0xb2,
        0x65, 0x6d, 0x34, 0x76, 0x20, 0x34, 0x2e, 0x35, 0x2e, 0x30, 0x2e, 0x32, 0x00, 0xc7, 0xff };

    ASSERT_TRUE(vol.read(data, sizeof(data)));
    ASSERT_EQ(vol.video_object_layer_width, 352);
    ASSERT_EQ(vol.video_object_layer_height, 288);
}

TEST(MPEG4, VideoObjectLayerFind)
{
    uint8_t data[] = {
        0x00, 0x00, 0x01, 0xb0, 0xf5, 0x00, 0x00, 0x01, 0xb5, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x01, 0x20, 0x00, 0xc4, 0x95, 0x8b, 0x0d, 0x45, 0x0b, 0x04, 0x24, 0x14, 0x43, 0x00,
        0x00, 0x01, 0xb2, 0x65, 0x6d, 0x34, 0x76, 0x20, 0x34, 0x2e, 0x35, 0x2e, 0x30, 0x2e, 0x32,
        0x00, 0xc7, 0xff, 0x00, 0x00, 0x01, 0xb6, 0x1b, 0x92, 0x98, 0x23, 0xeb, 0x02, 0x18, 0x1d,
        0x03, 0xa0, 0xd5, 0xa0, 0x43, 0x61, 0x86, 0x84, 0x31, 0x2d, 0x2b, 0x6a, 0x3c, 0xd3, 0x5e,
        0x08, 0x3e, 0x1f, 0xe6, 0x67, 0xb2, 0x28, 0x93, 0x91, 0xb9, 0x48, 0x86, 0xf1, 0x96, 0x57,
        0xa0, 0xad, 0x6f, 0xe6, 0x43, 0x40, 0xfc, 0x7e, 0xad, 0x2b, 0x54, 0x0b, 0x99, 0x18, 0xb3,
        0x00, 0xd3, 0x7f, 0x69, 0x49, 0x44, 0xfe, 0x6d, 0xcc, 0xb4, 0xa4, 0xea, 0x91, 0x18, 0x4e};
    uint8_t dataEmpty[] = {
        0xb9, 0x46, 0x2e, 0x17, 0x27, 0x6e, 0x2d, 0x92, 0x21, 0xf7, 0x3b, 0xf1, 0x84, 0x0e, 0x41,
        0x34, 0x5a, 0x9d, 0x22, 0xa2, 0xff, 0x4c, 0xc0, 0xfb, 0xd9, 0x09, 0xc2, 0x68, 0x8d, 0x83,
        0x81, 0xf2, 0xa8, 0x2f, 0xd1, 0x16, 0x81, 0x32, 0x82, 0x21, 0xd9, 0x73, 0x7d, 0x66, 0xd3,
        0xaa, 0x7b, 0x5c, 0x3c, 0xb6, 0x10, 0xc7, 0xe0, 0x75, 0x84, 0xfc, 0xf0, 0xf5, 0x5b, 0x3b,
        0xcc, 0xc5, 0x16, 0xac, 0x16, 0x0d, 0xd2, 0x88, 0x21, 0xbf, 0xeb, 0xc5, 0xa5, 0xe1, 0x09,
        0xa1, 0xd6, 0xee, 0x59, 0xa5, 0x2a, 0x11, 0xc1, 0x72, 0x31, 0xa8, 0xd5, 0x5e, 0xd5, 0x4a,
        0x9b, 0xfc, 0x07, 0x07, 0x59, 0xba, 0x18, 0x39, 0xcf, 0xce, 0x5b, 0x59, 0x5b, 0x5f, 0x0d,
        0x9f, 0x3e, 0xdc, 0x9a, 0x55, 0xbb, 0x2a, 0x37, 0x27, 0xcb, 0x7a, 0x59, 0xb8, 0x57, 0x96,
        0x20, 0x33, 0x6d, 0xfb, 0xe0, 0xa8, 0xd7, 0x71, 0x5d, 0x82, 0x00, 0x14, 0x40, 0x80 };

    auto vol = nx::media::mpeg4::findAndParseVolHeader(data, sizeof(data));
    ASSERT_TRUE(vol.has_value());
    ASSERT_EQ(vol->video_object_layer_width, 352);
    ASSERT_EQ(vol->video_object_layer_height, 288);

    auto volEmpty = nx::media::mpeg4::findAndParseVolHeader(dataEmpty, sizeof(dataEmpty));
    ASSERT_TRUE(!volEmpty.has_value());
}
