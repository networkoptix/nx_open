// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

#include "auth_session.h"

#include <QtCore/QCryptographicHash>
#include <QtCore/QUrlQuery>

#include <nx/network/http/http_types.h>
#include <nx/network/http/custom_headers.h>
#include <nx/network/socket_common.h>
#include <nx/fusion/model_functions.h>

namespace {
    char DELIMITER = '$';
}

QnAuthSession::QnAuthSession(
    const QString& userName,
    const nx::network::http::Request& request,
    const nx::network::HostAddress& hostAddress)
    :
    id(QnUuid::fromStringSafe(
        nx::network::http::getHeaderValue(request.headers, Qn::EC2_RUNTIME_GUID_HEADER_NAME))),
    userName(userName),
    userHost(QString::fromStdString(
        nx::network::http::getHeaderValue(request.headers, Qn::USER_HOST_HEADER_NAME)))

{
    nx::String existSession =
        nx::network::http::getHeaderValue(request.headers, Qn::AUTH_SESSION_HEADER_NAME);
    if (!existSession.isEmpty())
    {
        fromString(existSession);
        return;
    }

    if (id.isNull())
        id = QnUuid::fromStringSafe(request.getCookieValue(Qn::EC2_RUNTIME_GUID_HEADER_NAME));
    const QUrlQuery query(request.requestLine.url.query());
    if (id.isNull())
    {
        id = QnUuid::fromStringSafe(
            query.queryItemValue(QLatin1String(Qn::EC2_RUNTIME_GUID_HEADER_NAME)));
    }
    if (id.isNull())
    {
        nx::String nonce = request.getCookieValue("auth");
        if (!nonce.isEmpty())
        {
            QCryptographicHash md5Hash(QCryptographicHash::Md5);
            md5Hash.addData(nonce);
            id = QnUuid::fromRfc4122(md5Hash.result());
        }
    }
    if (id.isNull())
    {
        id = QnUuid::createUuid();
        isAutoGenerated = true;
    }

    if (userHost.isEmpty())
        userHost = hostAddress.toString().c_str();
    userAgent = query.queryItemValue(QLatin1String(Qn::USER_AGENT_HEADER_NAME));
    if (userAgent.isEmpty())
    {
        userAgent = QString::fromStdString(
            nx::network::http::getHeaderValue(request.headers, Qn::USER_AGENT_HEADER_NAME));
    }

    int trimmedPos = userAgent.indexOf(lit("/"));
    if (trimmedPos != -1)
    {
        trimmedPos = userAgent.indexOf(lit(" "), trimmedPos);
        userAgent = userAgent.left(trimmedPos);
    }
}

nx::String QnAuthSession::toString() const
{
    auto encoded = [](QByteArray value) {
        return value.replace(DELIMITER, char('_'));
    };

    QByteArray result;
    result.append(id.toByteArray());
    result.append(DELIMITER);
    result.append(encoded(userName.toUtf8()));
    result.append(DELIMITER);
    result.append(encoded(userHost.toUtf8()));
    result.append(DELIMITER);
    result.append(encoded(userAgent.toUtf8()));

    return result;
}

void QnAuthSession::fromString(const nx::String& data)
{
    QnByteArrayConstRef ref(data);
    QList<QnByteArrayConstRef> params = ref.split(DELIMITER);
    if (params.size() > 0)
        id = QnUuid(params[0]);
    if (params.size() > 1)
        userName = QString::fromUtf8(params[1]);
    if (params.size() > 2)
        userHost = QString::fromUtf8(params[2]);
    if (params.size() > 3)
        userAgent = QString::fromUtf8(params[3]);
}

void serialize_field(const QnAuthSession&authData, QVariant *target)
{
    serialize_field(authData.toString(), target);
}

void deserialize_field(const QVariant &value, QnAuthSession *target)
{
    nx::String tmp;
    deserialize_field(value, &tmp);
    target->fromString(tmp);
}

