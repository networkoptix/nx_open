// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

#include <gtest/gtest.h>

#include <nx/rtp/parsers/h264_rtp_parser.h>

TEST (H264RtpParser, ZeroPacketSize)
{
    uint8_t rtpData[] = {
        0x7c, 0x85, // H264 FU_A + IDR pictrure NAL unit type(without nal unit data)
    };

    nx::rtp::RtpHeader header;
    memset(&header, 0, sizeof(header));
    header.version = nx::rtp::RtpHeader::kVersion;
    header.marker = 1;
    nx::rtp::H264Parser parser;
    bool gotData;
    auto result = parser.processData(
        header, rtpData, /*offset*/ 0, /*bytesRead*/ sizeof(rtpData), gotData);
    ASSERT_EQ(result.success, true);
}


TEST (H264RtpParser, SpsPpsInsideFragmentationUnit)
{
    // Some cameras send SPS and PPS together with IDR NAL unit in one fragmentation
    // unit.
    uint8_t rtpDataStartFragmentationUnit[] = {
        // SPS
        0x1c, 0x80, 0x00, 0x00, 0x01, 0x67, 0x42, 0xc0, 0x1f, 0x8d, 0x6a, 0x17, 0x05, 0x16, 0x5e,
        0x10, 0x00, 0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x02, 0x88, 0xf0, 0x88, 0x46, 0xa0,

        //PPS
        0x00, 0x00, 0x00, 0x01, 0x68, 0xce, 0x3c, 0x80,

        // SEI
        0x00, 0x00, 0x00, 0x01, 0x06, 0x05, 0x6b, 0x3d, 0x07, 0x6d, 0x45, 0x73, 0x0f, 0x41, 0xa8,
        0xb1, 0xc4, 0x25, 0xd7, 0x97, 0x6b, 0xf1, 0xac, 0x34, 0x63, 0x63, 0x33, 0x66, 0x62, 0x32,
        0x35, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0x6c, 0x65, 0x6f, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x30,
        0x34, 0x2d, 0x32, 0x36, 0x20, 0x66, 0x69, 0x78, 0x5b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
        0x74, 0x6f, 0x72, 0x5d, 0x3a, 0x20, 0x66, 0x69, 0x78, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
        0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x44, 0x4d, 0x41, 0x20, 0x68, 0x65, 0x61, 0x70, 0x20,
        0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x80,

        // SEI
        0x00, 0x00, 0x00, 0x01, 0x06, 0x05, 0x51, 0xd7, 0xdc, 0x03, 0xc3, 0xc5, 0x6f, 0x40, 0xe0,
        0x8e, 0xa9, 0x17, 0x1a, 0xd2, 0xef, 0x5e, 0x23, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
        0x3a, 0x63, 0x62, 0x72, 0x2d, 0x62, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5b,
        0x33, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x5d, 0x2d, 0x67, 0x3a, 0x34, 0x30, 0x2d, 0x71, 0x3a, 0x32, 0x36, 0x3a, 0x5b, 0x38, 0x3a,
        0x34, 0x38, 0x5d, 0x3a, 0x5b, 0x38, 0x3a, 0x34, 0x38, 0x5d, 0x3a, 0x32, 0x0a, 0x80,

        // IDR
        0x00, 0x00, 0x00, 0x01, 0x25, 0xb8, 0x00, 0x04, 0xff, 0xf7, 0xbe, 0x3f, 0x8a, 0x00, 0x02,
        0x01, 0x32, 0xe0, 0xaf, 0xb9, 0xb1, 0xa0, 0x75, 0x67, 0xf7, 0x5b, 0x3f, 0xf7, 0x7b, 0xff,
        0xf8, 0x6e, 0xd1, 0xb1, 0x74, 0x9d, 0xeb, 0xe8, 0x36, 0xae, 0x17, 0x50, 0xa0, 0xb1, 0xff,
        0xfe, 0x9a, 0x27, 0x5e, 0x91, 0x95, 0x7f, 0xff, 0xf5, 0xee, 0xef, 0xbe, 0xe2, 0xb2, 0xe5,
        0xf5, 0xf8, 0xd3, 0xff, 0xfd, 0xf7, 0xf7, 0xdd, 0xdd, 0xee, 0xf3, 0x62, 0x9b, 0x27, 0x73,
        0xf4, 0x76, 0xbf, 0xbb, 0xbb, 0xfe, 0xbe, 0xd6, 0x3c, 0xb9, 0xb2, 0x2d, 0xd9, 0xba, 0xfa,
        0x69, 0xa4, 0x96, 0xef, 0xe5, 0xff, 0xc7, 0x96, 0xa9, 0x9b, 0xf7, 0x2e, 0x7d, 0xde, 0xbf,
        0x47, 0xff, 0x44, 0xfa,
    };

    uint8_t rtpDataEndFragmentationUnit[] = {
        0x1c, 0x40, 0x7f, 0xff, 0xdd, 0x2e, 0xb2, 0xf3, 0xfa, 0xeb, 0xef, 0xff, 0xfb, 0xa0, 0x87,
        0xad, 0x55, 0x55, 0x57, 0x5f, 0xe8, 0xff, 0xfd, 0xfd, 0x6b, 0x56, 0xab, 0xeb, 0xd5, 0x58,
        0xfe, 0x9a, 0x7f, 0xff, 0xf4, 0xaa, 0xb5, 0x55, 0xd6, 0xab, 0xaa, 0xa7, 0x5f, 0xff, 0xf4,
        0xf5, 0xad, 0x75, 0xaa, 0xae, 0xa2, 0xd4, 0x0e, 0xe5, 0xd7, 0xff, 0x62, 0x16, 0xa9, 0x2f,
        0xe9, 0xa6, 0x23, 0x13, 0x20, 0xa6, 0x43, 0x35, 0x5f, 0xd9, 0xbf, 0xff, 0xfb, 0xa0, 0x4b,
        0xc1, 0x19, 0x9d, 0x05, 0xd2, 0x55, 0xff, 0xbb, 0xdd, 0xf4, 0x32, 0xb8, 0x17, 0xcd, 0x60,
        0x5c, 0x31, 0x57, 0x7f, 0x7e, 0xee, 0xef, 0xff, 0xa5, 0xc7, 0xf8, 0x5a, 0x01, 0x72, 0x8d,
        0x62, 0xf7, 0x7e, 0xab, 0xca, 0xa3, 0x7f, 0xeb, 0xfe, 0x37, 0xcf, 0xd7, 0xa9, 0xd3, 0xfd,
        0x46, 0x63, 0xcc, 0x51, 0x72, 0xfe, 0xd8, 0xb5, 0x5f, 0x7d, 0x15, 0x34, 0xff, 0xff, 0xec,
        0x77, 0xbe, 0xba, 0xae, 0x9f, 0xfb, 0x53, 0x38, 0x2f, 0x5d, 0xa8, 0xcc, 0x4d, 0x8f, 0x7b,
        0x2f, 0x19, 0xf2, 0xff, 0x51, 0x9a, 0xf3, 0x2f, 0xd9, 0xc6, 0x66, 0x26, 0xc7, 0xdf, 0x8c,
        0xe9, 0xcf, 0xf6, 0x1e, 0x7a, 0x53, 0xe9, 0x83, 0x15, 0xae, 0xda, 0xa1, 0xe0, 0xb3, 0x2c,
        0xa7, 0x14, 0xcf, 0xff, 0xfa, 0x7a, 0xaa, 0xaa, 0xaa, 0xce, 0x56, 0xab, 0x6a, 0x15, 0x3c,
        0xd4, 0x2e, 0x50, 0x35, 0x0b, 0x72, 0x26, 0x27, 0x84, 0xd8, 0x31, 0x9d, 0xbe, 0x97, 0xff,
        0xf7, 0xbb, 0xe1, 0x0d, 0x7c, 0x11, 0x9b, 0xa0, 0x7b, 0xc6, 0x40, 0x8c, 0x31, 0xc0, 0xd3,
        0x1f, 0x5f, 0xdb, 0xff, 0x77, 0x77, 0xfd, 0x7c, 0x11, 0x99, 0xd1, 0x95, 0xf9, 0x71, 0x76,
        0xb9, 0xfd, 0xfe, 0x9d, 0xdf, 0x7f, 0xbf, 0xd0, 0x2b, 0x81, 0x70, 0xc7, 0x5f, 0x55, 0xfd,
        0xb6, 0xda, 0x9b, 0x13, 0x88, 0x2c, 0x0a, 0x71, 0x3e, 0xdf, 0xd3, 0x71, 0x98, 0x9e, 0x78,
        0xff, 0x46, 0x4c, 0x79, 0x46, 0x66, 0xc6, 0x7d, 0x0c, 0x99, 0x8a, 0x72, 0x75, 0xfc, 0xcc,
        0x60
    };

    nx::rtp::RtpHeader header;
    memset(&header, 0, sizeof(header));
    header.version = nx::rtp::RtpHeader::kVersion;
    header.marker = 0;
    nx::rtp::H264Parser parser;
    bool gotData;
    std::vector<uint8_t> data;
    data.insert(data.end(), rtpDataStartFragmentationUnit,
        rtpDataStartFragmentationUnit + sizeof(rtpDataStartFragmentationUnit));
    auto result = parser.processData(
        header,
        data.data(),
        /*offset*/ 0,
        /*bytesRead*/ sizeof(rtpDataStartFragmentationUnit),
        gotData);

    ASSERT_EQ(result.success, true);
    ASSERT_EQ(gotData, false);
    header.marker = 1;
    data.insert(data.end(), rtpDataEndFragmentationUnit,
        rtpDataEndFragmentationUnit + sizeof(rtpDataEndFragmentationUnit));
    result = parser.processData(
        header,
        data.data(),
        /*offset*/ sizeof(rtpDataStartFragmentationUnit),
        /*bytesRead*/ sizeof(rtpDataEndFragmentationUnit),
        gotData);
    ASSERT_EQ(result.success, true);
    ASSERT_EQ(gotData, true);

    auto frame = parser.nextData();
    ASSERT_TRUE(frame);
    ASSERT_TRUE(frame->flags & QnAbstractMediaData::MediaFlags_AVKey);
    ASSERT_TRUE(frame->context != nullptr);
    ASSERT_TRUE(frame->context->getExtradata() != nullptr);
}
