/* soapH.h
   Generated by gSOAP 2.8.55 for generated_with_wsdl2h/axis_soap_event_action

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__FaultCodesType_DEFINED
#define SOAP_TYPE_ns6__FaultCodesType_DEFINED

inline void soap_default_ns6__FaultCodesType(struct soap *soap, ns6__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns6__FaultCodesType
	*a = SOAP_DEFAULT_ns6__FaultCodesType;
#else
	*a = (ns6__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__FaultCodesType(struct soap*, const char*, int, const ns6__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns6__FaultCodesType2s(struct soap*, ns6__FaultCodesType);
SOAP_FMAC3 ns6__FaultCodesType * SOAP_FMAC4 soap_in_ns6__FaultCodesType(struct soap*, const char*, ns6__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns6__FaultCodesType(struct soap*, const char*, ns6__FaultCodesType *);

SOAP_FMAC3 ns6__FaultCodesType * SOAP_FMAC4 soap_new_ns6__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__FaultCodesType(struct soap*, const ns6__FaultCodesType *, const char*, const char*);

inline int soap_write_ns6__FaultCodesType(struct soap *soap, ns6__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__FaultCodesType(soap, p, "ns6:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__FaultCodesType(struct soap *soap, const char *URL, ns6__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__FaultCodesType(soap, p, "ns6:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__FaultCodesType(struct soap *soap, const char *URL, ns6__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__FaultCodesType(soap, p, "ns6:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__FaultCodesType * SOAP_FMAC4 soap_get_ns6__FaultCodesType(struct soap*, ns6__FaultCodesType *, const char*, const char*);

inline int soap_read_ns6__FaultCodesType(struct soap *soap, ns6__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__FaultCodesType(struct soap *soap, const char *URL, ns6__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__FaultCodesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__FaultCodesType(struct soap *soap, ns6__FaultCodesType *p)
{
	if (soap_read_ns6__FaultCodesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__RelationshipType_DEFINED
#define SOAP_TYPE_ns6__RelationshipType_DEFINED

inline void soap_default_ns6__RelationshipType(struct soap *soap, ns6__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns6__RelationshipType
	*a = SOAP_DEFAULT_ns6__RelationshipType;
#else
	*a = (ns6__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__RelationshipType(struct soap*, const char*, int, const ns6__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns6__RelationshipType2s(struct soap*, ns6__RelationshipType);
SOAP_FMAC3 ns6__RelationshipType * SOAP_FMAC4 soap_in_ns6__RelationshipType(struct soap*, const char*, ns6__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns6__RelationshipType(struct soap*, const char*, ns6__RelationshipType *);

SOAP_FMAC3 ns6__RelationshipType * SOAP_FMAC4 soap_new_ns6__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__RelationshipType(struct soap*, const ns6__RelationshipType *, const char*, const char*);

inline int soap_write_ns6__RelationshipType(struct soap *soap, ns6__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__RelationshipType(soap, p, "ns6:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__RelationshipType(struct soap *soap, const char *URL, ns6__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__RelationshipType(soap, p, "ns6:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__RelationshipType(struct soap *soap, const char *URL, ns6__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__RelationshipType(soap, p, "ns6:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__RelationshipType * SOAP_FMAC4 soap_get_ns6__RelationshipType(struct soap*, ns6__RelationshipType *, const char*, const char*);

inline int soap_read_ns6__RelationshipType(struct soap *soap, ns6__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__RelationshipType(struct soap *soap, const char *URL, ns6__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__RelationshipType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__RelationshipType(struct soap *soap, ns6__RelationshipType *p)
{
	if (soap_read_ns6__RelationshipType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledType_DEFINED
#define SOAP_TYPE_ns1__ScheduledType_DEFINED

inline void soap_default_ns1__ScheduledType(struct soap *soap, ns1__ScheduledType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ScheduledType
	*a = SOAP_DEFAULT_ns1__ScheduledType;
#else
	*a = (ns1__ScheduledType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledType(struct soap*, const char*, int, const ns1__ScheduledType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ScheduledType2s(struct soap*, ns1__ScheduledType);
SOAP_FMAC3 ns1__ScheduledType * SOAP_FMAC4 soap_in_ns1__ScheduledType(struct soap*, const char*, ns1__ScheduledType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ScheduledType(struct soap*, const char*, ns1__ScheduledType *);

SOAP_FMAC3 ns1__ScheduledType * SOAP_FMAC4 soap_new_ns1__ScheduledType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ScheduledType(struct soap*, const ns1__ScheduledType *, const char*, const char*);

inline int soap_write_ns1__ScheduledType(struct soap *soap, ns1__ScheduledType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__ScheduledType(soap, p, "ns1:ScheduledType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledType(struct soap *soap, const char *URL, ns1__ScheduledType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__ScheduledType(soap, p, "ns1:ScheduledType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledType(struct soap *soap, const char *URL, ns1__ScheduledType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__ScheduledType(soap, p, "ns1:ScheduledType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledType * SOAP_FMAC4 soap_get_ns1__ScheduledType(struct soap*, ns1__ScheduledType *, const char*, const char*);

inline int soap_read_ns1__ScheduledType(struct soap *soap, ns1__ScheduledType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__ScheduledType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledType(struct soap *soap, const char *URL, ns1__ScheduledType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ScheduledType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScheduledType(struct soap *soap, ns1__ScheduledType *p)
{
	if (soap_read_ns1__ScheduledType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE__ns2__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__TopicNamespaceType_Topic(struct soap*, const char*, int, const _ns2__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC3 _ns2__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__ns2__TopicNamespaceType_Topic(struct soap*, const char*, _ns2__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC1 _ns2__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__ns2__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__TopicNamespaceType_Topic * soap_new__ns2__TopicNamespaceType_Topic(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL);
}

inline _ns2__TopicNamespaceType_Topic * soap_new_req__ns2__TopicNamespaceType_Topic(
	struct soap *soap,
	const std::string& name)
{
	_ns2__TopicNamespaceType_Topic *_p = soap_new__ns2__TopicNamespaceType_Topic(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__TopicNamespaceType_Topic::name = name;
	}
	return _p;
}

inline _ns2__TopicNamespaceType_Topic * soap_new_set__ns2__TopicNamespaceType_Topic(
	struct soap *soap,
	ns2__Documentation *documentation,
	const struct soap_dom_attribute& __anyAttribute,
	ns2__QueryExpressionType *MessagePattern,
	const std::vector<ns2__TopicType *> & Topic,
	const std::vector<struct soap_dom_element> & __any,
	const std::string& name,
	std::string *messageTypes,
	bool final_,
	std::string *parent)
{
	_ns2__TopicNamespaceType_Topic *_p = soap_new__ns2__TopicNamespaceType_Topic(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__TopicNamespaceType_Topic::documentation = documentation;
		_p->_ns2__TopicNamespaceType_Topic::__anyAttribute = __anyAttribute;
		_p->_ns2__TopicNamespaceType_Topic::MessagePattern = MessagePattern;
		_p->_ns2__TopicNamespaceType_Topic::Topic = Topic;
		_p->_ns2__TopicNamespaceType_Topic::__any = __any;
		_p->_ns2__TopicNamespaceType_Topic::name = name;
		_p->_ns2__TopicNamespaceType_Topic::messageTypes = messageTypes;
		_p->_ns2__TopicNamespaceType_Topic::final_ = final_;
		_p->_ns2__TopicNamespaceType_Topic::parent = parent;
	}
	return _p;
}

inline int soap_write__ns2__TopicNamespaceType_Topic(struct soap *soap, _ns2__TopicNamespaceType_Topic const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicNamespaceType-Topic", p->soap_type() == SOAP_TYPE__ns2__TopicNamespaceType_Topic ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__TopicNamespaceType_Topic(struct soap *soap, const char *URL, _ns2__TopicNamespaceType_Topic const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicNamespaceType-Topic", p->soap_type() == SOAP_TYPE__ns2__TopicNamespaceType_Topic ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__TopicNamespaceType_Topic(struct soap *soap, const char *URL, _ns2__TopicNamespaceType_Topic const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicNamespaceType-Topic", p->soap_type() == SOAP_TYPE__ns2__TopicNamespaceType_Topic ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__ns2__TopicNamespaceType_Topic(struct soap*, _ns2__TopicNamespaceType_Topic *, const char*, const char*);

inline int soap_read__ns2__TopicNamespaceType_Topic(struct soap *soap, _ns2__TopicNamespaceType_Topic *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__TopicNamespaceType_Topic(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__TopicNamespaceType_Topic(struct soap *soap, const char *URL, _ns2__TopicNamespaceType_Topic *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__TopicNamespaceType_Topic(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__TopicNamespaceType_Topic(struct soap *soap, _ns2__TopicNamespaceType_Topic *p)
{
	if (soap_read__ns2__TopicNamespaceType_Topic(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns4__BaseFaultType_FaultCause_DEFINED
#define SOAP_TYPE__ns4__BaseFaultType_FaultCause_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__BaseFaultType_FaultCause(struct soap*, const char*, int, const _ns4__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC3 _ns4__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__ns4__BaseFaultType_FaultCause(struct soap*, const char*, _ns4__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC1 _ns4__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__ns4__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__BaseFaultType_FaultCause * soap_new__ns4__BaseFaultType_FaultCause(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__BaseFaultType_FaultCause(soap, n, NULL, NULL, NULL);
}

inline _ns4__BaseFaultType_FaultCause * soap_new_req__ns4__BaseFaultType_FaultCause(
	struct soap *soap)
{
	_ns4__BaseFaultType_FaultCause *_p = soap_new__ns4__BaseFaultType_FaultCause(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns4__BaseFaultType_FaultCause * soap_new_set__ns4__BaseFaultType_FaultCause(
	struct soap *soap,
	const struct soap_dom_element& __any)
{
	_ns4__BaseFaultType_FaultCause *_p = soap_new__ns4__BaseFaultType_FaultCause(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__BaseFaultType_FaultCause::__any = __any;
	}
	return _p;
}

inline int soap_write__ns4__BaseFaultType_FaultCause(struct soap *soap, _ns4__BaseFaultType_FaultCause const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-FaultCause", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_FaultCause ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__BaseFaultType_FaultCause(struct soap *soap, const char *URL, _ns4__BaseFaultType_FaultCause const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-FaultCause", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_FaultCause ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__BaseFaultType_FaultCause(struct soap *soap, const char *URL, _ns4__BaseFaultType_FaultCause const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-FaultCause", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_FaultCause ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__ns4__BaseFaultType_FaultCause(struct soap*, _ns4__BaseFaultType_FaultCause *, const char*, const char*);

inline int soap_read__ns4__BaseFaultType_FaultCause(struct soap *soap, _ns4__BaseFaultType_FaultCause *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns4__BaseFaultType_FaultCause(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__BaseFaultType_FaultCause(struct soap *soap, const char *URL, _ns4__BaseFaultType_FaultCause *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns4__BaseFaultType_FaultCause(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns4__BaseFaultType_FaultCause(struct soap *soap, _ns4__BaseFaultType_FaultCause *p)
{
	if (soap_read__ns4__BaseFaultType_FaultCause(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns4__BaseFaultType_Description_DEFINED
#define SOAP_TYPE__ns4__BaseFaultType_Description_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__BaseFaultType_Description(struct soap*, const char*, int, const _ns4__BaseFaultType_Description *, const char*);
SOAP_FMAC3 _ns4__BaseFaultType_Description * SOAP_FMAC4 soap_in__ns4__BaseFaultType_Description(struct soap*, const char*, _ns4__BaseFaultType_Description *, const char*);
SOAP_FMAC1 _ns4__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__ns4__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__BaseFaultType_Description * soap_new__ns4__BaseFaultType_Description(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__BaseFaultType_Description(soap, n, NULL, NULL, NULL);
}

inline _ns4__BaseFaultType_Description * soap_new_req__ns4__BaseFaultType_Description(
	struct soap *soap,
	const std::string& __item)
{
	_ns4__BaseFaultType_Description *_p = soap_new__ns4__BaseFaultType_Description(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__BaseFaultType_Description::__item = __item;
	}
	return _p;
}

inline _ns4__BaseFaultType_Description * soap_new_set__ns4__BaseFaultType_Description(
	struct soap *soap,
	const std::string& __item,
	std::string *xml__lang)
{
	_ns4__BaseFaultType_Description *_p = soap_new__ns4__BaseFaultType_Description(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__BaseFaultType_Description::__item = __item;
		_p->_ns4__BaseFaultType_Description::xml__lang = xml__lang;
	}
	return _p;
}

inline int soap_write__ns4__BaseFaultType_Description(struct soap *soap, _ns4__BaseFaultType_Description const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-Description", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_Description ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__BaseFaultType_Description(struct soap *soap, const char *URL, _ns4__BaseFaultType_Description const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-Description", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_Description ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__BaseFaultType_Description(struct soap *soap, const char *URL, _ns4__BaseFaultType_Description const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-Description", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_Description ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__BaseFaultType_Description * SOAP_FMAC4 soap_get__ns4__BaseFaultType_Description(struct soap*, _ns4__BaseFaultType_Description *, const char*, const char*);

inline int soap_read__ns4__BaseFaultType_Description(struct soap *soap, _ns4__BaseFaultType_Description *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns4__BaseFaultType_Description(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__BaseFaultType_Description(struct soap *soap, const char *URL, _ns4__BaseFaultType_Description *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns4__BaseFaultType_Description(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns4__BaseFaultType_Description(struct soap *soap, _ns4__BaseFaultType_Description *p)
{
	if (soap_read__ns4__BaseFaultType_Description(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns4__BaseFaultType_ErrorCode_DEFINED
#define SOAP_TYPE__ns4__BaseFaultType_ErrorCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__BaseFaultType_ErrorCode(struct soap*, const char*, int, const _ns4__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _ns4__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__ns4__BaseFaultType_ErrorCode(struct soap*, const char*, _ns4__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC1 _ns4__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__ns4__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__BaseFaultType_ErrorCode * soap_new__ns4__BaseFaultType_ErrorCode(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__BaseFaultType_ErrorCode(soap, n, NULL, NULL, NULL);
}

inline _ns4__BaseFaultType_ErrorCode * soap_new_req__ns4__BaseFaultType_ErrorCode(
	struct soap *soap,
	const std::string& dialect)
{
	_ns4__BaseFaultType_ErrorCode *_p = soap_new__ns4__BaseFaultType_ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__BaseFaultType_ErrorCode::dialect = dialect;
	}
	return _p;
}

inline _ns4__BaseFaultType_ErrorCode * soap_new_set__ns4__BaseFaultType_ErrorCode(
	struct soap *soap,
	const std::string& dialect,
	const struct soap_dom_element& __mixed)
{
	_ns4__BaseFaultType_ErrorCode *_p = soap_new__ns4__BaseFaultType_ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__BaseFaultType_ErrorCode::dialect = dialect;
		_p->_ns4__BaseFaultType_ErrorCode::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write__ns4__BaseFaultType_ErrorCode(struct soap *soap, _ns4__BaseFaultType_ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-ErrorCode", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__BaseFaultType_ErrorCode(struct soap *soap, const char *URL, _ns4__BaseFaultType_ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-ErrorCode", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_ErrorCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__BaseFaultType_ErrorCode(struct soap *soap, const char *URL, _ns4__BaseFaultType_ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType-ErrorCode", p->soap_type() == SOAP_TYPE__ns4__BaseFaultType_ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__ns4__BaseFaultType_ErrorCode(struct soap*, _ns4__BaseFaultType_ErrorCode *, const char*, const char*);

inline int soap_read__ns4__BaseFaultType_ErrorCode(struct soap *soap, _ns4__BaseFaultType_ErrorCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns4__BaseFaultType_ErrorCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__BaseFaultType_ErrorCode(struct soap *soap, const char *URL, _ns4__BaseFaultType_ErrorCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns4__BaseFaultType_ErrorCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns4__BaseFaultType_ErrorCode(struct soap *soap, _ns4__BaseFaultType_ErrorCode *p)
{
	if (soap_read__ns4__BaseFaultType_ErrorCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy_DEFINED
#define SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Subscribe_SubscriptionPolicy(struct soap*, const char*, int, const _ns3__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__ns3__Subscribe_SubscriptionPolicy(struct soap*, const char*, _ns3__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC1 _ns3__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__ns3__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Subscribe_SubscriptionPolicy * soap_new__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__Subscribe_SubscriptionPolicy(soap, n, NULL, NULL, NULL);
}

inline _ns3__Subscribe_SubscriptionPolicy * soap_new_req__ns3__Subscribe_SubscriptionPolicy(
	struct soap *soap)
{
	_ns3__Subscribe_SubscriptionPolicy *_p = soap_new__ns3__Subscribe_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__Subscribe_SubscriptionPolicy * soap_new_set__ns3__Subscribe_SubscriptionPolicy(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__Subscribe_SubscriptionPolicy *_p = soap_new__ns3__Subscribe_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Subscribe_SubscriptionPolicy::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, _ns3__Subscribe_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Subscribe-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, const char *URL, _ns3__Subscribe_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Subscribe-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, const char *URL, _ns3__Subscribe_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Subscribe-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__ns3__Subscribe_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy *, const char*, const char*);

inline int soap_read__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, _ns3__Subscribe_SubscriptionPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__Subscribe_SubscriptionPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, const char *URL, _ns3__Subscribe_SubscriptionPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__Subscribe_SubscriptionPolicy(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__Subscribe_SubscriptionPolicy(struct soap *soap, _ns3__Subscribe_SubscriptionPolicy *p)
{
	if (soap_read__ns3__Subscribe_SubscriptionPolicy(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__NotificationMessageHolderType_Message_DEFINED
#define SOAP_TYPE__ns3__NotificationMessageHolderType_Message_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotificationMessageHolderType_Message(struct soap*, const char*, int, const _ns3__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC3 _ns3__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__ns3__NotificationMessageHolderType_Message(struct soap*, const char*, _ns3__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC1 _ns3__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__ns3__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotificationMessageHolderType_Message * soap_new__ns3__NotificationMessageHolderType_Message(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__NotificationMessageHolderType_Message(soap, n, NULL, NULL, NULL);
}

inline _ns3__NotificationMessageHolderType_Message * soap_new_req__ns3__NotificationMessageHolderType_Message(
	struct soap *soap)
{
	_ns3__NotificationMessageHolderType_Message *_p = soap_new__ns3__NotificationMessageHolderType_Message(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__NotificationMessageHolderType_Message * soap_new_set__ns3__NotificationMessageHolderType_Message(
	struct soap *soap,
	const struct soap_dom_element& __any)
{
	_ns3__NotificationMessageHolderType_Message *_p = soap_new__ns3__NotificationMessageHolderType_Message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__NotificationMessageHolderType_Message::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__NotificationMessageHolderType_Message(struct soap *soap, _ns3__NotificationMessageHolderType_Message const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationMessageHolderType-Message", p->soap_type() == SOAP_TYPE__ns3__NotificationMessageHolderType_Message ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__NotificationMessageHolderType_Message(struct soap *soap, const char *URL, _ns3__NotificationMessageHolderType_Message const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationMessageHolderType-Message", p->soap_type() == SOAP_TYPE__ns3__NotificationMessageHolderType_Message ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__NotificationMessageHolderType_Message(struct soap *soap, const char *URL, _ns3__NotificationMessageHolderType_Message const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationMessageHolderType-Message", p->soap_type() == SOAP_TYPE__ns3__NotificationMessageHolderType_Message ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__ns3__NotificationMessageHolderType_Message(struct soap*, _ns3__NotificationMessageHolderType_Message *, const char*, const char*);

inline int soap_read__ns3__NotificationMessageHolderType_Message(struct soap *soap, _ns3__NotificationMessageHolderType_Message *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__NotificationMessageHolderType_Message(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__NotificationMessageHolderType_Message(struct soap *soap, const char *URL, _ns3__NotificationMessageHolderType_Message *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__NotificationMessageHolderType_Message(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__NotificationMessageHolderType_Message(struct soap *soap, _ns3__NotificationMessageHolderType_Message *p)
{
	if (soap_read__ns3__NotificationMessageHolderType_Message(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__FaultCodesType___DEFINED
#define SOAP_TYPE_ns6__FaultCodesType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__FaultCodesType__(struct soap*, const char*, int, const ns6__FaultCodesType__ *, const char*);
SOAP_FMAC3 ns6__FaultCodesType__ * SOAP_FMAC4 soap_in_ns6__FaultCodesType__(struct soap*, const char*, ns6__FaultCodesType__ *, const char*);
SOAP_FMAC1 ns6__FaultCodesType__ * SOAP_FMAC2 soap_instantiate_ns6__FaultCodesType__(struct soap*, int, const char*, const char*, size_t*);

inline ns6__FaultCodesType__ * soap_new_ns6__FaultCodesType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__FaultCodesType__(soap, n, NULL, NULL, NULL);
}

inline ns6__FaultCodesType__ * soap_new_req_ns6__FaultCodesType__(
	struct soap *soap,
	ns6__FaultCodesType __item)
{
	ns6__FaultCodesType__ *_p = soap_new_ns6__FaultCodesType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__FaultCodesType__::__item = __item;
	}
	return _p;
}

inline ns6__FaultCodesType__ * soap_new_set_ns6__FaultCodesType__(
	struct soap *soap,
	ns6__FaultCodesType __item)
{
	ns6__FaultCodesType__ *_p = soap_new_ns6__FaultCodesType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__FaultCodesType__::__item = __item;
	}
	return _p;
}

inline int soap_write_ns6__FaultCodesType__(struct soap *soap, ns6__FaultCodesType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:FaultCodesType", p->soap_type() == SOAP_TYPE_ns6__FaultCodesType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__FaultCodesType__(struct soap *soap, const char *URL, ns6__FaultCodesType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:FaultCodesType", p->soap_type() == SOAP_TYPE_ns6__FaultCodesType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__FaultCodesType__(struct soap *soap, const char *URL, ns6__FaultCodesType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:FaultCodesType", p->soap_type() == SOAP_TYPE_ns6__FaultCodesType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__FaultCodesType__ * SOAP_FMAC4 soap_get_ns6__FaultCodesType__(struct soap*, ns6__FaultCodesType__ *, const char*, const char*);

inline int soap_read_ns6__FaultCodesType__(struct soap *soap, ns6__FaultCodesType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__FaultCodesType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__FaultCodesType__(struct soap *soap, const char *URL, ns6__FaultCodesType__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__FaultCodesType__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__FaultCodesType__(struct soap *soap, ns6__FaultCodesType__ *p)
{
	if (soap_read_ns6__FaultCodesType__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__RelationshipType___DEFINED
#define SOAP_TYPE_ns6__RelationshipType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__RelationshipType__(struct soap*, const char*, int, const ns6__RelationshipType__ *, const char*);
SOAP_FMAC3 ns6__RelationshipType__ * SOAP_FMAC4 soap_in_ns6__RelationshipType__(struct soap*, const char*, ns6__RelationshipType__ *, const char*);
SOAP_FMAC1 ns6__RelationshipType__ * SOAP_FMAC2 soap_instantiate_ns6__RelationshipType__(struct soap*, int, const char*, const char*, size_t*);

inline ns6__RelationshipType__ * soap_new_ns6__RelationshipType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__RelationshipType__(soap, n, NULL, NULL, NULL);
}

inline ns6__RelationshipType__ * soap_new_req_ns6__RelationshipType__(
	struct soap *soap,
	ns6__RelationshipType __item)
{
	ns6__RelationshipType__ *_p = soap_new_ns6__RelationshipType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__RelationshipType__::__item = __item;
	}
	return _p;
}

inline ns6__RelationshipType__ * soap_new_set_ns6__RelationshipType__(
	struct soap *soap,
	ns6__RelationshipType __item)
{
	ns6__RelationshipType__ *_p = soap_new_ns6__RelationshipType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__RelationshipType__::__item = __item;
	}
	return _p;
}

inline int soap_write_ns6__RelationshipType__(struct soap *soap, ns6__RelationshipType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RelationshipType", p->soap_type() == SOAP_TYPE_ns6__RelationshipType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__RelationshipType__(struct soap *soap, const char *URL, ns6__RelationshipType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RelationshipType", p->soap_type() == SOAP_TYPE_ns6__RelationshipType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__RelationshipType__(struct soap *soap, const char *URL, ns6__RelationshipType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RelationshipType", p->soap_type() == SOAP_TYPE_ns6__RelationshipType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__RelationshipType__ * SOAP_FMAC4 soap_get_ns6__RelationshipType__(struct soap*, ns6__RelationshipType__ *, const char*, const char*);

inline int soap_read_ns6__RelationshipType__(struct soap *soap, ns6__RelationshipType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__RelationshipType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__RelationshipType__(struct soap *soap, const char *URL, ns6__RelationshipType__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__RelationshipType__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__RelationshipType__(struct soap *soap, ns6__RelationshipType__ *p)
{
	if (soap_read_ns6__RelationshipType__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__SimpleTopicExpression___DEFINED
#define SOAP_TYPE_ns2__SimpleTopicExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SimpleTopicExpression__(struct soap*, const char*, int, const ns2__SimpleTopicExpression__ *, const char*);
SOAP_FMAC3 ns2__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_ns2__SimpleTopicExpression__(struct soap*, const char*, ns2__SimpleTopicExpression__ *, const char*);
SOAP_FMAC1 ns2__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_ns2__SimpleTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SimpleTopicExpression__ * soap_new_ns2__SimpleTopicExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__SimpleTopicExpression__(soap, n, NULL, NULL, NULL);
}

inline ns2__SimpleTopicExpression__ * soap_new_req_ns2__SimpleTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	ns2__SimpleTopicExpression__ *_p = soap_new_ns2__SimpleTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SimpleTopicExpression__::__item = __item;
	}
	return _p;
}

inline ns2__SimpleTopicExpression__ * soap_new_set_ns2__SimpleTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	ns2__SimpleTopicExpression__ *_p = soap_new_ns2__SimpleTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SimpleTopicExpression__::__item = __item;
	}
	return _p;
}

inline int soap_write_ns2__SimpleTopicExpression__(struct soap *soap, ns2__SimpleTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SimpleTopicExpression", p->soap_type() == SOAP_TYPE_ns2__SimpleTopicExpression__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__SimpleTopicExpression__(struct soap *soap, const char *URL, ns2__SimpleTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SimpleTopicExpression", p->soap_type() == SOAP_TYPE_ns2__SimpleTopicExpression__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SimpleTopicExpression__(struct soap *soap, const char *URL, ns2__SimpleTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SimpleTopicExpression", p->soap_type() == SOAP_TYPE_ns2__SimpleTopicExpression__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_ns2__SimpleTopicExpression__(struct soap*, ns2__SimpleTopicExpression__ *, const char*, const char*);

inline int soap_read_ns2__SimpleTopicExpression__(struct soap *soap, ns2__SimpleTopicExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__SimpleTopicExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SimpleTopicExpression__(struct soap *soap, const char *URL, ns2__SimpleTopicExpression__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__SimpleTopicExpression__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__SimpleTopicExpression__(struct soap *soap, ns2__SimpleTopicExpression__ *p)
{
	if (soap_read_ns2__SimpleTopicExpression__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* ns2__SimpleTopicExpression is a typedef synonym of xsd__QName */

#ifndef SOAP_TYPE_ns2__SimpleTopicExpression_DEFINED
#define SOAP_TYPE_ns2__SimpleTopicExpression_DEFINED

#define soap_default_ns2__SimpleTopicExpression soap_default_xsd__QName


#define soap_serialize_ns2__SimpleTopicExpression soap_serialize_xsd__QName


#define soap_ns2__SimpleTopicExpression2s(soap, a) soap_QName2s((soap), (a).c_str())

#define soap_out_ns2__SimpleTopicExpression soap_out_xsd__QName


#define soap_s2ns2__SimpleTopicExpression(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)

#define soap_in_ns2__SimpleTopicExpression soap_in_xsd__QName


#define soap_instantiate_ns2__SimpleTopicExpression soap_instantiate_xsd__QName


#define soap_new_ns2__SimpleTopicExpression soap_new_xsd__QName


#define soap_put_ns2__SimpleTopicExpression soap_put_xsd__QName


#define soap_write_ns2__SimpleTopicExpression soap_write_xsd__QName


#define soap_PUT_ns2__SimpleTopicExpression soap_PUT_xsd__QName


#define soap_POST_send_ns2__SimpleTopicExpression soap_POST_send_xsd__QName


#define soap_get_ns2__SimpleTopicExpression soap_get_xsd__QName


#define soap_read_ns2__SimpleTopicExpression soap_read_xsd__QName


#define soap_GET_ns2__SimpleTopicExpression soap_GET_xsd__QName


#define soap_POST_recv_ns2__SimpleTopicExpression soap_POST_recv_xsd__QName

#endif

#ifndef SOAP_TYPE_ns2__ConcreteTopicExpression___DEFINED
#define SOAP_TYPE_ns2__ConcreteTopicExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConcreteTopicExpression__(struct soap*, const char*, int, const ns2__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC3 ns2__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_ns2__ConcreteTopicExpression__(struct soap*, const char*, ns2__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC1 ns2__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_ns2__ConcreteTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ConcreteTopicExpression__ * soap_new_ns2__ConcreteTopicExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ConcreteTopicExpression__(soap, n, NULL, NULL, NULL);
}

inline ns2__ConcreteTopicExpression__ * soap_new_req_ns2__ConcreteTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	ns2__ConcreteTopicExpression__ *_p = soap_new_ns2__ConcreteTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ConcreteTopicExpression__::__item = __item;
	}
	return _p;
}

inline ns2__ConcreteTopicExpression__ * soap_new_set_ns2__ConcreteTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	ns2__ConcreteTopicExpression__ *_p = soap_new_ns2__ConcreteTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ConcreteTopicExpression__::__item = __item;
	}
	return _p;
}

inline int soap_write_ns2__ConcreteTopicExpression__(struct soap *soap, ns2__ConcreteTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ConcreteTopicExpression", p->soap_type() == SOAP_TYPE_ns2__ConcreteTopicExpression__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConcreteTopicExpression__(struct soap *soap, const char *URL, ns2__ConcreteTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ConcreteTopicExpression", p->soap_type() == SOAP_TYPE_ns2__ConcreteTopicExpression__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConcreteTopicExpression__(struct soap *soap, const char *URL, ns2__ConcreteTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ConcreteTopicExpression", p->soap_type() == SOAP_TYPE_ns2__ConcreteTopicExpression__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_ns2__ConcreteTopicExpression__(struct soap*, ns2__ConcreteTopicExpression__ *, const char*, const char*);

inline int soap_read_ns2__ConcreteTopicExpression__(struct soap *soap, ns2__ConcreteTopicExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ConcreteTopicExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConcreteTopicExpression__(struct soap *soap, const char *URL, ns2__ConcreteTopicExpression__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConcreteTopicExpression__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConcreteTopicExpression__(struct soap *soap, ns2__ConcreteTopicExpression__ *p)
{
	if (soap_read_ns2__ConcreteTopicExpression__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* ns2__ConcreteTopicExpression is a typedef restriction of xsd__token */

#ifndef SOAP_TYPE_ns2__ConcreteTopicExpression_DEFINED
#define SOAP_TYPE_ns2__ConcreteTopicExpression_DEFINED

#define soap_default_ns2__ConcreteTopicExpression soap_default_xsd__token


#define soap_serialize_ns2__ConcreteTopicExpression soap_serialize_xsd__token


#define soap_ns2__ConcreteTopicExpression2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConcreteTopicExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__ConcreteTopicExpression(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__ConcreteTopicExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__ConcreteTopicExpression soap_instantiate_xsd__token


#define soap_new_ns2__ConcreteTopicExpression soap_new_xsd__token

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConcreteTopicExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__ConcreteTopicExpression(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns2__ConcreteTopicExpression(soap, p, "ns2:ConcreteTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConcreteTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns2__ConcreteTopicExpression(soap, p, "ns2:ConcreteTopicExpression", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConcreteTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns2__ConcreteTopicExpression(soap, p, "ns2:ConcreteTopicExpression", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__ConcreteTopicExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__ConcreteTopicExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns2__ConcreteTopicExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConcreteTopicExpression(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConcreteTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConcreteTopicExpression(struct soap *soap, std::string *p)
{
	if (soap_read_ns2__ConcreteTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__FullTopicExpression___DEFINED
#define SOAP_TYPE_ns2__FullTopicExpression___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FullTopicExpression__(struct soap*, const char*, int, const ns2__FullTopicExpression__ *, const char*);
SOAP_FMAC3 ns2__FullTopicExpression__ * SOAP_FMAC4 soap_in_ns2__FullTopicExpression__(struct soap*, const char*, ns2__FullTopicExpression__ *, const char*);
SOAP_FMAC1 ns2__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_ns2__FullTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline ns2__FullTopicExpression__ * soap_new_ns2__FullTopicExpression__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__FullTopicExpression__(soap, n, NULL, NULL, NULL);
}

inline ns2__FullTopicExpression__ * soap_new_req_ns2__FullTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	ns2__FullTopicExpression__ *_p = soap_new_ns2__FullTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FullTopicExpression__::__item = __item;
	}
	return _p;
}

inline ns2__FullTopicExpression__ * soap_new_set_ns2__FullTopicExpression__(
	struct soap *soap,
	const std::string& __item)
{
	ns2__FullTopicExpression__ *_p = soap_new_ns2__FullTopicExpression__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__FullTopicExpression__::__item = __item;
	}
	return _p;
}

inline int soap_write_ns2__FullTopicExpression__(struct soap *soap, ns2__FullTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FullTopicExpression", p->soap_type() == SOAP_TYPE_ns2__FullTopicExpression__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__FullTopicExpression__(struct soap *soap, const char *URL, ns2__FullTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FullTopicExpression", p->soap_type() == SOAP_TYPE_ns2__FullTopicExpression__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FullTopicExpression__(struct soap *soap, const char *URL, ns2__FullTopicExpression__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:FullTopicExpression", p->soap_type() == SOAP_TYPE_ns2__FullTopicExpression__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__FullTopicExpression__ * SOAP_FMAC4 soap_get_ns2__FullTopicExpression__(struct soap*, ns2__FullTopicExpression__ *, const char*, const char*);

inline int soap_read_ns2__FullTopicExpression__(struct soap *soap, ns2__FullTopicExpression__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__FullTopicExpression__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FullTopicExpression__(struct soap *soap, const char *URL, ns2__FullTopicExpression__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__FullTopicExpression__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__FullTopicExpression__(struct soap *soap, ns2__FullTopicExpression__ *p)
{
	if (soap_read_ns2__FullTopicExpression__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* ns2__FullTopicExpression is a typedef restriction of xsd__token */

#ifndef SOAP_TYPE_ns2__FullTopicExpression_DEFINED
#define SOAP_TYPE_ns2__FullTopicExpression_DEFINED

#define soap_default_ns2__FullTopicExpression soap_default_xsd__token


#define soap_serialize_ns2__FullTopicExpression soap_serialize_xsd__token


#define soap_ns2__FullTopicExpression2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__FullTopicExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__FullTopicExpression(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__FullTopicExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__FullTopicExpression soap_instantiate_xsd__token


#define soap_new_ns2__FullTopicExpression soap_new_xsd__token

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__FullTopicExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__FullTopicExpression(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns2__FullTopicExpression(soap, p, "ns2:FullTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__FullTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns2__FullTopicExpression(soap, p, "ns2:FullTopicExpression", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__FullTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns2__FullTopicExpression(soap, p, "ns2:FullTopicExpression", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__FullTopicExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__FullTopicExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns2__FullTopicExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__FullTopicExpression(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__FullTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__FullTopicExpression(struct soap *soap, std::string *p)
{
	if (soap_read_ns2__FullTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledType___DEFINED
#define SOAP_TYPE_ns1__ScheduledType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledType__(struct soap*, const char*, int, const ns1__ScheduledType__ *, const char*);
SOAP_FMAC3 ns1__ScheduledType__ * SOAP_FMAC4 soap_in_ns1__ScheduledType__(struct soap*, const char*, ns1__ScheduledType__ *, const char*);
SOAP_FMAC1 ns1__ScheduledType__ * SOAP_FMAC2 soap_instantiate_ns1__ScheduledType__(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduledType__ * soap_new_ns1__ScheduledType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduledType__(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduledType__ * soap_new_req_ns1__ScheduledType__(
	struct soap *soap,
	ns1__ScheduledType __item)
{
	ns1__ScheduledType__ *_p = soap_new_ns1__ScheduledType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledType__::__item = __item;
	}
	return _p;
}

inline ns1__ScheduledType__ * soap_new_set_ns1__ScheduledType__(
	struct soap *soap,
	ns1__ScheduledType __item)
{
	ns1__ScheduledType__ *_p = soap_new_ns1__ScheduledType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledType__::__item = __item;
	}
	return _p;
}

inline int soap_write_ns1__ScheduledType__(struct soap *soap, ns1__ScheduledType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledType", p->soap_type() == SOAP_TYPE_ns1__ScheduledType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledType__(struct soap *soap, const char *URL, ns1__ScheduledType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledType", p->soap_type() == SOAP_TYPE_ns1__ScheduledType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledType__(struct soap *soap, const char *URL, ns1__ScheduledType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledType", p->soap_type() == SOAP_TYPE_ns1__ScheduledType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledType__ * SOAP_FMAC4 soap_get_ns1__ScheduledType__(struct soap*, ns1__ScheduledType__ *, const char*, const char*);

inline int soap_read_ns1__ScheduledType__(struct soap *soap, ns1__ScheduledType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ScheduledType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledType__(struct soap *soap, const char *URL, ns1__ScheduledType__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ScheduledType__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScheduledType__(struct soap *soap, ns1__ScheduledType__ *p)
{
	if (soap_read_ns1__ScheduledType__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_ns6__FaultCodesOpenEnumType_DEFINED

inline void soap_default_ns6__FaultCodesOpenEnumType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__FaultCodesOpenEnumType(struct soap*, const std::string *);

#define soap_ns6__FaultCodesOpenEnumType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__FaultCodesOpenEnumType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns6__FaultCodesOpenEnumType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__FaultCodesOpenEnumType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns6__FaultCodesOpenEnumType soap_instantiate_std__string


#define soap_new_ns6__FaultCodesOpenEnumType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__FaultCodesOpenEnumType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns6__FaultCodesOpenEnumType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__FaultCodesOpenEnumType(soap, p, "ns6:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__FaultCodesOpenEnumType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__FaultCodesOpenEnumType(soap, p, "ns6:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__FaultCodesOpenEnumType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__FaultCodesOpenEnumType(soap, p, "ns6:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__FaultCodesOpenEnumType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns6__FaultCodesOpenEnumType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__FaultCodesOpenEnumType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__FaultCodesOpenEnumType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__FaultCodesOpenEnumType(struct soap *soap, std::string *p)
{
	if (soap_read_ns6__FaultCodesOpenEnumType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_ns6__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_ns6__RelationshipTypeOpenEnum(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__RelationshipTypeOpenEnum(struct soap*, const std::string *);

#define soap_ns6__RelationshipTypeOpenEnum2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__RelationshipTypeOpenEnum(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns6__RelationshipTypeOpenEnum(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__RelationshipTypeOpenEnum(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns6__RelationshipTypeOpenEnum soap_instantiate_std__string


#define soap_new_ns6__RelationshipTypeOpenEnum soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__RelationshipTypeOpenEnum(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns6__RelationshipTypeOpenEnum(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__RelationshipTypeOpenEnum(soap, p, "ns6:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__RelationshipTypeOpenEnum(soap, p, "ns6:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns6__RelationshipTypeOpenEnum(soap, p, "ns6:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__RelationshipTypeOpenEnum(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns6__RelationshipTypeOpenEnum(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__RelationshipTypeOpenEnum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__RelationshipTypeOpenEnum(struct soap *soap, std::string *p)
{
	if (soap_read_ns6__RelationshipTypeOpenEnum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AbsoluteOrRelativeTimeType_DEFINED
#define SOAP_TYPE_ns3__AbsoluteOrRelativeTimeType_DEFINED

inline void soap_default_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__AbsoluteOrRelativeTimeType(struct soap*, const std::string *);

#define soap_ns3__AbsoluteOrRelativeTimeType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AbsoluteOrRelativeTimeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns3__AbsoluteOrRelativeTimeType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns3__AbsoluteOrRelativeTimeType soap_instantiate_std__string


#define soap_new_ns3__AbsoluteOrRelativeTimeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__AbsoluteOrRelativeTimeType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__AbsoluteOrRelativeTimeType(soap, p, "ns3:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AbsoluteOrRelativeTimeType(soap, p, "ns3:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__AbsoluteOrRelativeTimeType(soap, p, "ns3:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__AbsoluteOrRelativeTimeType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__AbsoluteOrRelativeTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AbsoluteOrRelativeTimeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	if (soap_read_ns3__AbsoluteOrRelativeTimeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ProblemActionType_DEFINED
#define SOAP_TYPE_ns6__ProblemActionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ProblemActionType(struct soap*, const char*, int, const ns6__ProblemActionType *, const char*);
SOAP_FMAC3 ns6__ProblemActionType * SOAP_FMAC4 soap_in_ns6__ProblemActionType(struct soap*, const char*, ns6__ProblemActionType *, const char*);
SOAP_FMAC1 ns6__ProblemActionType * SOAP_FMAC2 soap_instantiate_ns6__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ProblemActionType * soap_new_ns6__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline ns6__ProblemActionType * soap_new_req_ns6__ProblemActionType(
	struct soap *soap)
{
	ns6__ProblemActionType *_p = soap_new_ns6__ProblemActionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns6__ProblemActionType * soap_new_set_ns6__ProblemActionType(
	struct soap *soap,
	ns6__AttributedURIType *Action,
	std::string *SoapAction,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__ProblemActionType *_p = soap_new_ns6__ProblemActionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ProblemActionType::Action = Action;
		_p->ns6__ProblemActionType::SoapAction = SoapAction;
		_p->ns6__ProblemActionType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__ProblemActionType(struct soap *soap, ns6__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ProblemActionType", p->soap_type() == SOAP_TYPE_ns6__ProblemActionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__ProblemActionType(struct soap *soap, const char *URL, ns6__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ProblemActionType", p->soap_type() == SOAP_TYPE_ns6__ProblemActionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ProblemActionType(struct soap *soap, const char *URL, ns6__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ProblemActionType", p->soap_type() == SOAP_TYPE_ns6__ProblemActionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__ProblemActionType * SOAP_FMAC4 soap_get_ns6__ProblemActionType(struct soap*, ns6__ProblemActionType *, const char*, const char*);

inline int soap_read_ns6__ProblemActionType(struct soap *soap, ns6__ProblemActionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ProblemActionType(struct soap *soap, const char *URL, ns6__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ProblemActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ProblemActionType(struct soap *soap, ns6__ProblemActionType *p)
{
	if (soap_read_ns6__ProblemActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__AttributedQNameType_DEFINED
#define SOAP_TYPE_ns6__AttributedQNameType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__AttributedQNameType(struct soap*, const char*, int, const ns6__AttributedQNameType *, const char*);
SOAP_FMAC3 ns6__AttributedQNameType * SOAP_FMAC4 soap_in_ns6__AttributedQNameType(struct soap*, const char*, ns6__AttributedQNameType *, const char*);
SOAP_FMAC1 ns6__AttributedQNameType * SOAP_FMAC2 soap_instantiate_ns6__AttributedQNameType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__AttributedQNameType * soap_new_ns6__AttributedQNameType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__AttributedQNameType(soap, n, NULL, NULL, NULL);
}

inline ns6__AttributedQNameType * soap_new_req_ns6__AttributedQNameType(
	struct soap *soap,
	const std::string& __item)
{
	ns6__AttributedQNameType *_p = soap_new_ns6__AttributedQNameType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__AttributedQNameType::__item = __item;
	}
	return _p;
}

inline ns6__AttributedQNameType * soap_new_set_ns6__AttributedQNameType(
	struct soap *soap,
	const std::string& __item,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__AttributedQNameType *_p = soap_new_ns6__AttributedQNameType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__AttributedQNameType::__item = __item;
		_p->ns6__AttributedQNameType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__AttributedQNameType(struct soap *soap, ns6__AttributedQNameType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedQNameType", p->soap_type() == SOAP_TYPE_ns6__AttributedQNameType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__AttributedQNameType(struct soap *soap, const char *URL, ns6__AttributedQNameType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedQNameType", p->soap_type() == SOAP_TYPE_ns6__AttributedQNameType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__AttributedQNameType(struct soap *soap, const char *URL, ns6__AttributedQNameType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedQNameType", p->soap_type() == SOAP_TYPE_ns6__AttributedQNameType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__AttributedQNameType * SOAP_FMAC4 soap_get_ns6__AttributedQNameType(struct soap*, ns6__AttributedQNameType *, const char*, const char*);

inline int soap_read_ns6__AttributedQNameType(struct soap *soap, ns6__AttributedQNameType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__AttributedQNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__AttributedQNameType(struct soap *soap, const char *URL, ns6__AttributedQNameType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__AttributedQNameType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__AttributedQNameType(struct soap *soap, ns6__AttributedQNameType *p)
{
	if (soap_read_ns6__AttributedQNameType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__AttributedUnsignedLongType_DEFINED
#define SOAP_TYPE_ns6__AttributedUnsignedLongType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__AttributedUnsignedLongType(struct soap*, const char*, int, const ns6__AttributedUnsignedLongType *, const char*);
SOAP_FMAC3 ns6__AttributedUnsignedLongType * SOAP_FMAC4 soap_in_ns6__AttributedUnsignedLongType(struct soap*, const char*, ns6__AttributedUnsignedLongType *, const char*);
SOAP_FMAC1 ns6__AttributedUnsignedLongType * SOAP_FMAC2 soap_instantiate_ns6__AttributedUnsignedLongType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__AttributedUnsignedLongType * soap_new_ns6__AttributedUnsignedLongType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__AttributedUnsignedLongType(soap, n, NULL, NULL, NULL);
}

inline ns6__AttributedUnsignedLongType * soap_new_req_ns6__AttributedUnsignedLongType(
	struct soap *soap,
	ULONG64 __item)
{
	ns6__AttributedUnsignedLongType *_p = soap_new_ns6__AttributedUnsignedLongType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__AttributedUnsignedLongType::__item = __item;
	}
	return _p;
}

inline ns6__AttributedUnsignedLongType * soap_new_set_ns6__AttributedUnsignedLongType(
	struct soap *soap,
	ULONG64 __item,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__AttributedUnsignedLongType *_p = soap_new_ns6__AttributedUnsignedLongType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__AttributedUnsignedLongType::__item = __item;
		_p->ns6__AttributedUnsignedLongType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__AttributedUnsignedLongType(struct soap *soap, ns6__AttributedUnsignedLongType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedUnsignedLongType", p->soap_type() == SOAP_TYPE_ns6__AttributedUnsignedLongType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__AttributedUnsignedLongType(struct soap *soap, const char *URL, ns6__AttributedUnsignedLongType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedUnsignedLongType", p->soap_type() == SOAP_TYPE_ns6__AttributedUnsignedLongType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__AttributedUnsignedLongType(struct soap *soap, const char *URL, ns6__AttributedUnsignedLongType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedUnsignedLongType", p->soap_type() == SOAP_TYPE_ns6__AttributedUnsignedLongType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__AttributedUnsignedLongType * SOAP_FMAC4 soap_get_ns6__AttributedUnsignedLongType(struct soap*, ns6__AttributedUnsignedLongType *, const char*, const char*);

inline int soap_read_ns6__AttributedUnsignedLongType(struct soap *soap, ns6__AttributedUnsignedLongType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__AttributedUnsignedLongType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__AttributedUnsignedLongType(struct soap *soap, const char *URL, ns6__AttributedUnsignedLongType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__AttributedUnsignedLongType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__AttributedUnsignedLongType(struct soap *soap, ns6__AttributedUnsignedLongType *p)
{
	if (soap_read_ns6__AttributedUnsignedLongType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__AttributedURIType_DEFINED
#define SOAP_TYPE_ns6__AttributedURIType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__AttributedURIType(struct soap*, const char*, int, const ns6__AttributedURIType *, const char*);
SOAP_FMAC3 ns6__AttributedURIType * SOAP_FMAC4 soap_in_ns6__AttributedURIType(struct soap*, const char*, ns6__AttributedURIType *, const char*);
SOAP_FMAC1 ns6__AttributedURIType * SOAP_FMAC2 soap_instantiate_ns6__AttributedURIType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__AttributedURIType * soap_new_ns6__AttributedURIType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__AttributedURIType(soap, n, NULL, NULL, NULL);
}

inline ns6__AttributedURIType * soap_new_req_ns6__AttributedURIType(
	struct soap *soap,
	const std::string& __item)
{
	ns6__AttributedURIType *_p = soap_new_ns6__AttributedURIType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__AttributedURIType::__item = __item;
	}
	return _p;
}

inline ns6__AttributedURIType * soap_new_set_ns6__AttributedURIType(
	struct soap *soap,
	const std::string& __item,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__AttributedURIType *_p = soap_new_ns6__AttributedURIType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__AttributedURIType::__item = __item;
		_p->ns6__AttributedURIType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__AttributedURIType(struct soap *soap, ns6__AttributedURIType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedURIType", p->soap_type() == SOAP_TYPE_ns6__AttributedURIType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__AttributedURIType(struct soap *soap, const char *URL, ns6__AttributedURIType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedURIType", p->soap_type() == SOAP_TYPE_ns6__AttributedURIType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__AttributedURIType(struct soap *soap, const char *URL, ns6__AttributedURIType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:AttributedURIType", p->soap_type() == SOAP_TYPE_ns6__AttributedURIType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__AttributedURIType * SOAP_FMAC4 soap_get_ns6__AttributedURIType(struct soap*, ns6__AttributedURIType *, const char*, const char*);

inline int soap_read_ns6__AttributedURIType(struct soap *soap, ns6__AttributedURIType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__AttributedURIType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__AttributedURIType(struct soap *soap, const char *URL, ns6__AttributedURIType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__AttributedURIType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__AttributedURIType(struct soap *soap, ns6__AttributedURIType *p)
{
	if (soap_read_ns6__AttributedURIType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__RelatesToType_DEFINED
#define SOAP_TYPE_ns6__RelatesToType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__RelatesToType(struct soap*, const char*, int, const ns6__RelatesToType *, const char*);
SOAP_FMAC3 ns6__RelatesToType * SOAP_FMAC4 soap_in_ns6__RelatesToType(struct soap*, const char*, ns6__RelatesToType *, const char*);
SOAP_FMAC1 ns6__RelatesToType * SOAP_FMAC2 soap_instantiate_ns6__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__RelatesToType * soap_new_ns6__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline ns6__RelatesToType * soap_new_req_ns6__RelatesToType(
	struct soap *soap,
	const std::string& __item)
{
	ns6__RelatesToType *_p = soap_new_ns6__RelatesToType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__RelatesToType::__item = __item;
	}
	return _p;
}

inline ns6__RelatesToType * soap_new_set_ns6__RelatesToType(
	struct soap *soap,
	const std::string& __item,
	const std::string& RelationshipType,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__RelatesToType *_p = soap_new_ns6__RelatesToType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__RelatesToType::__item = __item;
		_p->ns6__RelatesToType::RelationshipType = RelationshipType;
		_p->ns6__RelatesToType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__RelatesToType(struct soap *soap, ns6__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RelatesToType", p->soap_type() == SOAP_TYPE_ns6__RelatesToType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__RelatesToType(struct soap *soap, const char *URL, ns6__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RelatesToType", p->soap_type() == SOAP_TYPE_ns6__RelatesToType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__RelatesToType(struct soap *soap, const char *URL, ns6__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RelatesToType", p->soap_type() == SOAP_TYPE_ns6__RelatesToType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__RelatesToType * SOAP_FMAC4 soap_get_ns6__RelatesToType(struct soap*, ns6__RelatesToType *, const char*, const char*);

inline int soap_read_ns6__RelatesToType(struct soap *soap, ns6__RelatesToType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__RelatesToType(struct soap *soap, const char *URL, ns6__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__RelatesToType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__RelatesToType(struct soap *soap, ns6__RelatesToType *p)
{
	if (soap_read_ns6__RelatesToType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__MetadataType_DEFINED
#define SOAP_TYPE_ns6__MetadataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__MetadataType(struct soap*, const char*, int, const ns6__MetadataType *, const char*);
SOAP_FMAC3 ns6__MetadataType * SOAP_FMAC4 soap_in_ns6__MetadataType(struct soap*, const char*, ns6__MetadataType *, const char*);
SOAP_FMAC1 ns6__MetadataType * SOAP_FMAC2 soap_instantiate_ns6__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__MetadataType * soap_new_ns6__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__MetadataType(soap, n, NULL, NULL, NULL);
}

inline ns6__MetadataType * soap_new_req_ns6__MetadataType(
	struct soap *soap)
{
	ns6__MetadataType *_p = soap_new_ns6__MetadataType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns6__MetadataType * soap_new_set_ns6__MetadataType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__MetadataType *_p = soap_new_ns6__MetadataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__MetadataType::__any = __any;
		_p->ns6__MetadataType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__MetadataType(struct soap *soap, ns6__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:MetadataType", p->soap_type() == SOAP_TYPE_ns6__MetadataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__MetadataType(struct soap *soap, const char *URL, ns6__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:MetadataType", p->soap_type() == SOAP_TYPE_ns6__MetadataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__MetadataType(struct soap *soap, const char *URL, ns6__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:MetadataType", p->soap_type() == SOAP_TYPE_ns6__MetadataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__MetadataType * SOAP_FMAC4 soap_get_ns6__MetadataType(struct soap*, ns6__MetadataType *, const char*, const char*);

inline int soap_read_ns6__MetadataType(struct soap *soap, ns6__MetadataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__MetadataType(struct soap *soap, const char *URL, ns6__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__MetadataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__MetadataType(struct soap *soap, ns6__MetadataType *p)
{
	if (soap_read_ns6__MetadataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ReferenceParametersType_DEFINED
#define SOAP_TYPE_ns6__ReferenceParametersType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ReferenceParametersType(struct soap*, const char*, int, const ns6__ReferenceParametersType *, const char*);
SOAP_FMAC3 ns6__ReferenceParametersType * SOAP_FMAC4 soap_in_ns6__ReferenceParametersType(struct soap*, const char*, ns6__ReferenceParametersType *, const char*);
SOAP_FMAC1 ns6__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_ns6__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ReferenceParametersType * soap_new_ns6__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline ns6__ReferenceParametersType * soap_new_req_ns6__ReferenceParametersType(
	struct soap *soap)
{
	ns6__ReferenceParametersType *_p = soap_new_ns6__ReferenceParametersType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns6__ReferenceParametersType * soap_new_set_ns6__ReferenceParametersType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__ReferenceParametersType *_p = soap_new_ns6__ReferenceParametersType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ReferenceParametersType::__any = __any;
		_p->ns6__ReferenceParametersType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__ReferenceParametersType(struct soap *soap, ns6__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ReferenceParametersType", p->soap_type() == SOAP_TYPE_ns6__ReferenceParametersType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__ReferenceParametersType(struct soap *soap, const char *URL, ns6__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ReferenceParametersType", p->soap_type() == SOAP_TYPE_ns6__ReferenceParametersType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ReferenceParametersType(struct soap *soap, const char *URL, ns6__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ReferenceParametersType", p->soap_type() == SOAP_TYPE_ns6__ReferenceParametersType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__ReferenceParametersType * SOAP_FMAC4 soap_get_ns6__ReferenceParametersType(struct soap*, ns6__ReferenceParametersType *, const char*, const char*);

inline int soap_read_ns6__ReferenceParametersType(struct soap *soap, ns6__ReferenceParametersType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ReferenceParametersType(struct soap *soap, const char *URL, ns6__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ReferenceParametersType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ReferenceParametersType(struct soap *soap, ns6__ReferenceParametersType *p)
{
	if (soap_read_ns6__ReferenceParametersType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__EndpointReferenceType_DEFINED
#define SOAP_TYPE_ns6__EndpointReferenceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__EndpointReferenceType(struct soap*, const char*, int, const ns6__EndpointReferenceType *, const char*);
SOAP_FMAC3 ns6__EndpointReferenceType * SOAP_FMAC4 soap_in_ns6__EndpointReferenceType(struct soap*, const char*, ns6__EndpointReferenceType *, const char*);
SOAP_FMAC1 ns6__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_ns6__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__EndpointReferenceType * soap_new_ns6__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline ns6__EndpointReferenceType * soap_new_req_ns6__EndpointReferenceType(
	struct soap *soap,
	ns6__AttributedURIType *Address)
{
	ns6__EndpointReferenceType *_p = soap_new_ns6__EndpointReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EndpointReferenceType::Address = Address;
	}
	return _p;
}

inline ns6__EndpointReferenceType * soap_new_set_ns6__EndpointReferenceType(
	struct soap *soap,
	ns6__AttributedURIType *Address,
	ns6__ReferenceParametersType *ReferenceParameters,
	ns6__MetadataType *Metadata,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns6__EndpointReferenceType *_p = soap_new_ns6__EndpointReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EndpointReferenceType::Address = Address;
		_p->ns6__EndpointReferenceType::ReferenceParameters = ReferenceParameters;
		_p->ns6__EndpointReferenceType::Metadata = Metadata;
		_p->ns6__EndpointReferenceType::__any = __any;
		_p->ns6__EndpointReferenceType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns6__EndpointReferenceType(struct soap *soap, ns6__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EndpointReferenceType", p->soap_type() == SOAP_TYPE_ns6__EndpointReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__EndpointReferenceType(struct soap *soap, const char *URL, ns6__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EndpointReferenceType", p->soap_type() == SOAP_TYPE_ns6__EndpointReferenceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__EndpointReferenceType(struct soap *soap, const char *URL, ns6__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EndpointReferenceType", p->soap_type() == SOAP_TYPE_ns6__EndpointReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__EndpointReferenceType * SOAP_FMAC4 soap_get_ns6__EndpointReferenceType(struct soap*, ns6__EndpointReferenceType *, const char*, const char*);

inline int soap_read_ns6__EndpointReferenceType(struct soap *soap, ns6__EndpointReferenceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__EndpointReferenceType(struct soap *soap, const char *URL, ns6__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__EndpointReferenceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__EndpointReferenceType(struct soap *soap, ns6__EndpointReferenceType *p)
{
	if (soap_read_ns6__EndpointReferenceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__InvalidActivationTimeoutFault_DEFINED
#define SOAP_TYPE__ns5__InvalidActivationTimeoutFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__InvalidActivationTimeoutFault(struct soap*, const char*, int, const _ns5__InvalidActivationTimeoutFault *, const char*);
SOAP_FMAC3 _ns5__InvalidActivationTimeoutFault * SOAP_FMAC4 soap_in__ns5__InvalidActivationTimeoutFault(struct soap*, const char*, _ns5__InvalidActivationTimeoutFault *, const char*);
SOAP_FMAC1 _ns5__InvalidActivationTimeoutFault * SOAP_FMAC2 soap_instantiate__ns5__InvalidActivationTimeoutFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__InvalidActivationTimeoutFault * soap_new__ns5__InvalidActivationTimeoutFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__InvalidActivationTimeoutFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__InvalidActivationTimeoutFault * soap_new_req__ns5__InvalidActivationTimeoutFault(
	struct soap *soap,
	const std::string& MaximumTimeout)
{
	_ns5__InvalidActivationTimeoutFault *_p = soap_new__ns5__InvalidActivationTimeoutFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__InvalidActivationTimeoutFault::MaximumTimeout = MaximumTimeout;
	}
	return _p;
}

inline _ns5__InvalidActivationTimeoutFault * soap_new_set__ns5__InvalidActivationTimeoutFault(
	struct soap *soap,
	const std::string& MaximumTimeout)
{
	_ns5__InvalidActivationTimeoutFault *_p = soap_new__ns5__InvalidActivationTimeoutFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__InvalidActivationTimeoutFault::MaximumTimeout = MaximumTimeout;
	}
	return _p;
}

inline int soap_write__ns5__InvalidActivationTimeoutFault(struct soap *soap, _ns5__InvalidActivationTimeoutFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidActivationTimeoutFault", p->soap_type() == SOAP_TYPE__ns5__InvalidActivationTimeoutFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__InvalidActivationTimeoutFault(struct soap *soap, const char *URL, _ns5__InvalidActivationTimeoutFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidActivationTimeoutFault", p->soap_type() == SOAP_TYPE__ns5__InvalidActivationTimeoutFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__InvalidActivationTimeoutFault(struct soap *soap, const char *URL, _ns5__InvalidActivationTimeoutFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidActivationTimeoutFault", p->soap_type() == SOAP_TYPE__ns5__InvalidActivationTimeoutFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__InvalidActivationTimeoutFault * SOAP_FMAC4 soap_get__ns5__InvalidActivationTimeoutFault(struct soap*, _ns5__InvalidActivationTimeoutFault *, const char*, const char*);

inline int soap_read__ns5__InvalidActivationTimeoutFault(struct soap *soap, _ns5__InvalidActivationTimeoutFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__InvalidActivationTimeoutFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__InvalidActivationTimeoutFault(struct soap *soap, const char *URL, _ns5__InvalidActivationTimeoutFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__InvalidActivationTimeoutFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__InvalidActivationTimeoutFault(struct soap *soap, _ns5__InvalidActivationTimeoutFault *p)
{
	if (soap_read__ns5__InvalidActivationTimeoutFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ActionRuleNotFoundFault_DEFINED
#define SOAP_TYPE__ns5__ActionRuleNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ActionRuleNotFoundFault(struct soap*, const char*, int, const _ns5__ActionRuleNotFoundFault *, const char*);
SOAP_FMAC3 _ns5__ActionRuleNotFoundFault * SOAP_FMAC4 soap_in__ns5__ActionRuleNotFoundFault(struct soap*, const char*, _ns5__ActionRuleNotFoundFault *, const char*);
SOAP_FMAC1 _ns5__ActionRuleNotFoundFault * SOAP_FMAC2 soap_instantiate__ns5__ActionRuleNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ActionRuleNotFoundFault * soap_new__ns5__ActionRuleNotFoundFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ActionRuleNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__ActionRuleNotFoundFault * soap_new_req__ns5__ActionRuleNotFoundFault(
	struct soap *soap)
{
	_ns5__ActionRuleNotFoundFault *_p = soap_new__ns5__ActionRuleNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__ActionRuleNotFoundFault * soap_new_set__ns5__ActionRuleNotFoundFault(
	struct soap *soap)
{
	_ns5__ActionRuleNotFoundFault *_p = soap_new__ns5__ActionRuleNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__ActionRuleNotFoundFault(struct soap *soap, _ns5__ActionRuleNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRuleNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionRuleNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__ActionRuleNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionRuleNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRuleNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionRuleNotFoundFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__ActionRuleNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionRuleNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRuleNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionRuleNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ActionRuleNotFoundFault * SOAP_FMAC4 soap_get__ns5__ActionRuleNotFoundFault(struct soap*, _ns5__ActionRuleNotFoundFault *, const char*, const char*);

inline int soap_read__ns5__ActionRuleNotFoundFault(struct soap *soap, _ns5__ActionRuleNotFoundFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ActionRuleNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__ActionRuleNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionRuleNotFoundFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__ActionRuleNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__ActionRuleNotFoundFault(struct soap *soap, _ns5__ActionRuleNotFoundFault *p)
{
	if (soap_read__ns5__ActionRuleNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__InsufficientActivationRuleFault_DEFINED
#define SOAP_TYPE__ns5__InsufficientActivationRuleFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__InsufficientActivationRuleFault(struct soap*, const char*, int, const _ns5__InsufficientActivationRuleFault *, const char*);
SOAP_FMAC3 _ns5__InsufficientActivationRuleFault * SOAP_FMAC4 soap_in__ns5__InsufficientActivationRuleFault(struct soap*, const char*, _ns5__InsufficientActivationRuleFault *, const char*);
SOAP_FMAC1 _ns5__InsufficientActivationRuleFault * SOAP_FMAC2 soap_instantiate__ns5__InsufficientActivationRuleFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__InsufficientActivationRuleFault * soap_new__ns5__InsufficientActivationRuleFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__InsufficientActivationRuleFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__InsufficientActivationRuleFault * soap_new_req__ns5__InsufficientActivationRuleFault(
	struct soap *soap)
{
	_ns5__InsufficientActivationRuleFault *_p = soap_new__ns5__InsufficientActivationRuleFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__InsufficientActivationRuleFault * soap_new_set__ns5__InsufficientActivationRuleFault(
	struct soap *soap)
{
	_ns5__InsufficientActivationRuleFault *_p = soap_new__ns5__InsufficientActivationRuleFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__InsufficientActivationRuleFault(struct soap *soap, _ns5__InsufficientActivationRuleFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InsufficientActivationRuleFault", p->soap_type() == SOAP_TYPE__ns5__InsufficientActivationRuleFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__InsufficientActivationRuleFault(struct soap *soap, const char *URL, _ns5__InsufficientActivationRuleFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InsufficientActivationRuleFault", p->soap_type() == SOAP_TYPE__ns5__InsufficientActivationRuleFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__InsufficientActivationRuleFault(struct soap *soap, const char *URL, _ns5__InsufficientActivationRuleFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InsufficientActivationRuleFault", p->soap_type() == SOAP_TYPE__ns5__InsufficientActivationRuleFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__InsufficientActivationRuleFault * SOAP_FMAC4 soap_get__ns5__InsufficientActivationRuleFault(struct soap*, _ns5__InsufficientActivationRuleFault *, const char*, const char*);

inline int soap_read__ns5__InsufficientActivationRuleFault(struct soap *soap, _ns5__InsufficientActivationRuleFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__InsufficientActivationRuleFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__InsufficientActivationRuleFault(struct soap *soap, const char *URL, _ns5__InsufficientActivationRuleFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__InsufficientActivationRuleFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__InsufficientActivationRuleFault(struct soap *soap, _ns5__InsufficientActivationRuleFault *p)
{
	if (soap_read__ns5__InsufficientActivationRuleFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__InvalidConditionFilterFault_DEFINED
#define SOAP_TYPE__ns5__InvalidConditionFilterFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__InvalidConditionFilterFault(struct soap*, const char*, int, const _ns5__InvalidConditionFilterFault *, const char*);
SOAP_FMAC3 _ns5__InvalidConditionFilterFault * SOAP_FMAC4 soap_in__ns5__InvalidConditionFilterFault(struct soap*, const char*, _ns5__InvalidConditionFilterFault *, const char*);
SOAP_FMAC1 _ns5__InvalidConditionFilterFault * SOAP_FMAC2 soap_instantiate__ns5__InvalidConditionFilterFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__InvalidConditionFilterFault * soap_new__ns5__InvalidConditionFilterFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__InvalidConditionFilterFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__InvalidConditionFilterFault * soap_new_req__ns5__InvalidConditionFilterFault(
	struct soap *soap)
{
	_ns5__InvalidConditionFilterFault *_p = soap_new__ns5__InvalidConditionFilterFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__InvalidConditionFilterFault * soap_new_set__ns5__InvalidConditionFilterFault(
	struct soap *soap)
{
	_ns5__InvalidConditionFilterFault *_p = soap_new__ns5__InvalidConditionFilterFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__InvalidConditionFilterFault(struct soap *soap, _ns5__InvalidConditionFilterFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidConditionFilterFault", p->soap_type() == SOAP_TYPE__ns5__InvalidConditionFilterFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__InvalidConditionFilterFault(struct soap *soap, const char *URL, _ns5__InvalidConditionFilterFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidConditionFilterFault", p->soap_type() == SOAP_TYPE__ns5__InvalidConditionFilterFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__InvalidConditionFilterFault(struct soap *soap, const char *URL, _ns5__InvalidConditionFilterFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidConditionFilterFault", p->soap_type() == SOAP_TYPE__ns5__InvalidConditionFilterFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__InvalidConditionFilterFault * SOAP_FMAC4 soap_get__ns5__InvalidConditionFilterFault(struct soap*, _ns5__InvalidConditionFilterFault *, const char*, const char*);

inline int soap_read__ns5__InvalidConditionFilterFault(struct soap *soap, _ns5__InvalidConditionFilterFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__InvalidConditionFilterFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__InvalidConditionFilterFault(struct soap *soap, const char *URL, _ns5__InvalidConditionFilterFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__InvalidConditionFilterFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__InvalidConditionFilterFault(struct soap *soap, _ns5__InvalidConditionFilterFault *p)
{
	if (soap_read__ns5__InvalidConditionFilterFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ActionConfigurationIsInUseFault_DEFINED
#define SOAP_TYPE__ns5__ActionConfigurationIsInUseFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ActionConfigurationIsInUseFault(struct soap*, const char*, int, const _ns5__ActionConfigurationIsInUseFault *, const char*);
SOAP_FMAC3 _ns5__ActionConfigurationIsInUseFault * SOAP_FMAC4 soap_in__ns5__ActionConfigurationIsInUseFault(struct soap*, const char*, _ns5__ActionConfigurationIsInUseFault *, const char*);
SOAP_FMAC1 _ns5__ActionConfigurationIsInUseFault * SOAP_FMAC2 soap_instantiate__ns5__ActionConfigurationIsInUseFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ActionConfigurationIsInUseFault * soap_new__ns5__ActionConfigurationIsInUseFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ActionConfigurationIsInUseFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__ActionConfigurationIsInUseFault * soap_new_req__ns5__ActionConfigurationIsInUseFault(
	struct soap *soap,
	ns5__UsedByActionRules *UsedByActionRules)
{
	_ns5__ActionConfigurationIsInUseFault *_p = soap_new__ns5__ActionConfigurationIsInUseFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__ActionConfigurationIsInUseFault::UsedByActionRules = UsedByActionRules;
	}
	return _p;
}

inline _ns5__ActionConfigurationIsInUseFault * soap_new_set__ns5__ActionConfigurationIsInUseFault(
	struct soap *soap,
	ns5__UsedByActionRules *UsedByActionRules)
{
	_ns5__ActionConfigurationIsInUseFault *_p = soap_new__ns5__ActionConfigurationIsInUseFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__ActionConfigurationIsInUseFault::UsedByActionRules = UsedByActionRules;
	}
	return _p;
}

inline int soap_write__ns5__ActionConfigurationIsInUseFault(struct soap *soap, _ns5__ActionConfigurationIsInUseFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurationIsInUseFault", p->soap_type() == SOAP_TYPE__ns5__ActionConfigurationIsInUseFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__ActionConfigurationIsInUseFault(struct soap *soap, const char *URL, _ns5__ActionConfigurationIsInUseFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurationIsInUseFault", p->soap_type() == SOAP_TYPE__ns5__ActionConfigurationIsInUseFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__ActionConfigurationIsInUseFault(struct soap *soap, const char *URL, _ns5__ActionConfigurationIsInUseFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurationIsInUseFault", p->soap_type() == SOAP_TYPE__ns5__ActionConfigurationIsInUseFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ActionConfigurationIsInUseFault * SOAP_FMAC4 soap_get__ns5__ActionConfigurationIsInUseFault(struct soap*, _ns5__ActionConfigurationIsInUseFault *, const char*, const char*);

inline int soap_read__ns5__ActionConfigurationIsInUseFault(struct soap *soap, _ns5__ActionConfigurationIsInUseFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ActionConfigurationIsInUseFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__ActionConfigurationIsInUseFault(struct soap *soap, const char *URL, _ns5__ActionConfigurationIsInUseFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__ActionConfigurationIsInUseFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__ActionConfigurationIsInUseFault(struct soap *soap, _ns5__ActionConfigurationIsInUseFault *p)
{
	if (soap_read__ns5__ActionConfigurationIsInUseFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RecipientTemplateNotFoundFault_DEFINED
#define SOAP_TYPE__ns5__RecipientTemplateNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RecipientTemplateNotFoundFault(struct soap*, const char*, int, const _ns5__RecipientTemplateNotFoundFault *, const char*);
SOAP_FMAC3 _ns5__RecipientTemplateNotFoundFault * SOAP_FMAC4 soap_in__ns5__RecipientTemplateNotFoundFault(struct soap*, const char*, _ns5__RecipientTemplateNotFoundFault *, const char*);
SOAP_FMAC1 _ns5__RecipientTemplateNotFoundFault * SOAP_FMAC2 soap_instantiate__ns5__RecipientTemplateNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RecipientTemplateNotFoundFault * soap_new__ns5__RecipientTemplateNotFoundFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RecipientTemplateNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__RecipientTemplateNotFoundFault * soap_new_req__ns5__RecipientTemplateNotFoundFault(
	struct soap *soap)
{
	_ns5__RecipientTemplateNotFoundFault *_p = soap_new__ns5__RecipientTemplateNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__RecipientTemplateNotFoundFault * soap_new_set__ns5__RecipientTemplateNotFoundFault(
	struct soap *soap)
{
	_ns5__RecipientTemplateNotFoundFault *_p = soap_new__ns5__RecipientTemplateNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__RecipientTemplateNotFoundFault(struct soap *soap, _ns5__RecipientTemplateNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplateNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__RecipientTemplateNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RecipientTemplateNotFoundFault(struct soap *soap, const char *URL, _ns5__RecipientTemplateNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplateNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__RecipientTemplateNotFoundFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RecipientTemplateNotFoundFault(struct soap *soap, const char *URL, _ns5__RecipientTemplateNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplateNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__RecipientTemplateNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RecipientTemplateNotFoundFault * SOAP_FMAC4 soap_get__ns5__RecipientTemplateNotFoundFault(struct soap*, _ns5__RecipientTemplateNotFoundFault *, const char*, const char*);

inline int soap_read__ns5__RecipientTemplateNotFoundFault(struct soap *soap, _ns5__RecipientTemplateNotFoundFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RecipientTemplateNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RecipientTemplateNotFoundFault(struct soap *soap, const char *URL, _ns5__RecipientTemplateNotFoundFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RecipientTemplateNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RecipientTemplateNotFoundFault(struct soap *soap, _ns5__RecipientTemplateNotFoundFault *p)
{
	if (soap_read__ns5__RecipientTemplateNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ActionConfigurationNotFoundFault_DEFINED
#define SOAP_TYPE__ns5__ActionConfigurationNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ActionConfigurationNotFoundFault(struct soap*, const char*, int, const _ns5__ActionConfigurationNotFoundFault *, const char*);
SOAP_FMAC3 _ns5__ActionConfigurationNotFoundFault * SOAP_FMAC4 soap_in__ns5__ActionConfigurationNotFoundFault(struct soap*, const char*, _ns5__ActionConfigurationNotFoundFault *, const char*);
SOAP_FMAC1 _ns5__ActionConfigurationNotFoundFault * SOAP_FMAC2 soap_instantiate__ns5__ActionConfigurationNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ActionConfigurationNotFoundFault * soap_new__ns5__ActionConfigurationNotFoundFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ActionConfigurationNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__ActionConfigurationNotFoundFault * soap_new_req__ns5__ActionConfigurationNotFoundFault(
	struct soap *soap)
{
	_ns5__ActionConfigurationNotFoundFault *_p = soap_new__ns5__ActionConfigurationNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__ActionConfigurationNotFoundFault * soap_new_set__ns5__ActionConfigurationNotFoundFault(
	struct soap *soap)
{
	_ns5__ActionConfigurationNotFoundFault *_p = soap_new__ns5__ActionConfigurationNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__ActionConfigurationNotFoundFault(struct soap *soap, _ns5__ActionConfigurationNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurationNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionConfigurationNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__ActionConfigurationNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionConfigurationNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurationNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionConfigurationNotFoundFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__ActionConfigurationNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionConfigurationNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurationNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionConfigurationNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ActionConfigurationNotFoundFault * SOAP_FMAC4 soap_get__ns5__ActionConfigurationNotFoundFault(struct soap*, _ns5__ActionConfigurationNotFoundFault *, const char*, const char*);

inline int soap_read__ns5__ActionConfigurationNotFoundFault(struct soap *soap, _ns5__ActionConfigurationNotFoundFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ActionConfigurationNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__ActionConfigurationNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionConfigurationNotFoundFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__ActionConfigurationNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__ActionConfigurationNotFoundFault(struct soap *soap, _ns5__ActionConfigurationNotFoundFault *p)
{
	if (soap_read__ns5__ActionConfigurationNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__InvalidActionConfigurationFault_DEFINED
#define SOAP_TYPE__ns5__InvalidActionConfigurationFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__InvalidActionConfigurationFault(struct soap*, const char*, int, const _ns5__InvalidActionConfigurationFault *, const char*);
SOAP_FMAC3 _ns5__InvalidActionConfigurationFault * SOAP_FMAC4 soap_in__ns5__InvalidActionConfigurationFault(struct soap*, const char*, _ns5__InvalidActionConfigurationFault *, const char*);
SOAP_FMAC1 _ns5__InvalidActionConfigurationFault * SOAP_FMAC2 soap_instantiate__ns5__InvalidActionConfigurationFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__InvalidActionConfigurationFault * soap_new__ns5__InvalidActionConfigurationFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__InvalidActionConfigurationFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__InvalidActionConfigurationFault * soap_new_req__ns5__InvalidActionConfigurationFault(
	struct soap *soap)
{
	_ns5__InvalidActionConfigurationFault *_p = soap_new__ns5__InvalidActionConfigurationFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__InvalidActionConfigurationFault * soap_new_set__ns5__InvalidActionConfigurationFault(
	struct soap *soap)
{
	_ns5__InvalidActionConfigurationFault *_p = soap_new__ns5__InvalidActionConfigurationFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__InvalidActionConfigurationFault(struct soap *soap, _ns5__InvalidActionConfigurationFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidActionConfigurationFault", p->soap_type() == SOAP_TYPE__ns5__InvalidActionConfigurationFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__InvalidActionConfigurationFault(struct soap *soap, const char *URL, _ns5__InvalidActionConfigurationFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidActionConfigurationFault", p->soap_type() == SOAP_TYPE__ns5__InvalidActionConfigurationFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__InvalidActionConfigurationFault(struct soap *soap, const char *URL, _ns5__InvalidActionConfigurationFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:InvalidActionConfigurationFault", p->soap_type() == SOAP_TYPE__ns5__InvalidActionConfigurationFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__InvalidActionConfigurationFault * SOAP_FMAC4 soap_get__ns5__InvalidActionConfigurationFault(struct soap*, _ns5__InvalidActionConfigurationFault *, const char*, const char*);

inline int soap_read__ns5__InvalidActionConfigurationFault(struct soap *soap, _ns5__InvalidActionConfigurationFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__InvalidActionConfigurationFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__InvalidActionConfigurationFault(struct soap *soap, const char *URL, _ns5__InvalidActionConfigurationFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__InvalidActionConfigurationFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__InvalidActionConfigurationFault(struct soap *soap, _ns5__InvalidActionConfigurationFault *p)
{
	if (soap_read__ns5__InvalidActionConfigurationFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ParametersMissmatchFault_DEFINED
#define SOAP_TYPE__ns5__ParametersMissmatchFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ParametersMissmatchFault(struct soap*, const char*, int, const _ns5__ParametersMissmatchFault *, const char*);
SOAP_FMAC3 _ns5__ParametersMissmatchFault * SOAP_FMAC4 soap_in__ns5__ParametersMissmatchFault(struct soap*, const char*, _ns5__ParametersMissmatchFault *, const char*);
SOAP_FMAC1 _ns5__ParametersMissmatchFault * SOAP_FMAC2 soap_instantiate__ns5__ParametersMissmatchFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ParametersMissmatchFault * soap_new__ns5__ParametersMissmatchFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ParametersMissmatchFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__ParametersMissmatchFault * soap_new_req__ns5__ParametersMissmatchFault(
	struct soap *soap)
{
	_ns5__ParametersMissmatchFault *_p = soap_new__ns5__ParametersMissmatchFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__ParametersMissmatchFault * soap_new_set__ns5__ParametersMissmatchFault(
	struct soap *soap)
{
	_ns5__ParametersMissmatchFault *_p = soap_new__ns5__ParametersMissmatchFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__ParametersMissmatchFault(struct soap *soap, _ns5__ParametersMissmatchFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ParametersMissmatchFault", p->soap_type() == SOAP_TYPE__ns5__ParametersMissmatchFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__ParametersMissmatchFault(struct soap *soap, const char *URL, _ns5__ParametersMissmatchFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ParametersMissmatchFault", p->soap_type() == SOAP_TYPE__ns5__ParametersMissmatchFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__ParametersMissmatchFault(struct soap *soap, const char *URL, _ns5__ParametersMissmatchFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ParametersMissmatchFault", p->soap_type() == SOAP_TYPE__ns5__ParametersMissmatchFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ParametersMissmatchFault * SOAP_FMAC4 soap_get__ns5__ParametersMissmatchFault(struct soap*, _ns5__ParametersMissmatchFault *, const char*, const char*);

inline int soap_read__ns5__ParametersMissmatchFault(struct soap *soap, _ns5__ParametersMissmatchFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ParametersMissmatchFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__ParametersMissmatchFault(struct soap *soap, const char *URL, _ns5__ParametersMissmatchFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__ParametersMissmatchFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__ParametersMissmatchFault(struct soap *soap, _ns5__ParametersMissmatchFault *p)
{
	if (soap_read__ns5__ParametersMissmatchFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RecipientConfigurationNotFoundFault_DEFINED
#define SOAP_TYPE__ns5__RecipientConfigurationNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RecipientConfigurationNotFoundFault(struct soap*, const char*, int, const _ns5__RecipientConfigurationNotFoundFault *, const char*);
SOAP_FMAC3 _ns5__RecipientConfigurationNotFoundFault * SOAP_FMAC4 soap_in__ns5__RecipientConfigurationNotFoundFault(struct soap*, const char*, _ns5__RecipientConfigurationNotFoundFault *, const char*);
SOAP_FMAC1 _ns5__RecipientConfigurationNotFoundFault * SOAP_FMAC2 soap_instantiate__ns5__RecipientConfigurationNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RecipientConfigurationNotFoundFault * soap_new__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RecipientConfigurationNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__RecipientConfigurationNotFoundFault * soap_new_req__ns5__RecipientConfigurationNotFoundFault(
	struct soap *soap)
{
	_ns5__RecipientConfigurationNotFoundFault *_p = soap_new__ns5__RecipientConfigurationNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__RecipientConfigurationNotFoundFault * soap_new_set__ns5__RecipientConfigurationNotFoundFault(
	struct soap *soap)
{
	_ns5__RecipientConfigurationNotFoundFault *_p = soap_new__ns5__RecipientConfigurationNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, _ns5__RecipientConfigurationNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfigurationNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__RecipientConfigurationNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, const char *URL, _ns5__RecipientConfigurationNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfigurationNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__RecipientConfigurationNotFoundFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, const char *URL, _ns5__RecipientConfigurationNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfigurationNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__RecipientConfigurationNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RecipientConfigurationNotFoundFault * SOAP_FMAC4 soap_get__ns5__RecipientConfigurationNotFoundFault(struct soap*, _ns5__RecipientConfigurationNotFoundFault *, const char*, const char*);

inline int soap_read__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, _ns5__RecipientConfigurationNotFoundFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RecipientConfigurationNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, const char *URL, _ns5__RecipientConfigurationNotFoundFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RecipientConfigurationNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RecipientConfigurationNotFoundFault(struct soap *soap, _ns5__RecipientConfigurationNotFoundFault *p)
{
	if (soap_read__ns5__RecipientConfigurationNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__ActionTemplateNotFoundFault_DEFINED
#define SOAP_TYPE__ns5__ActionTemplateNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__ActionTemplateNotFoundFault(struct soap*, const char*, int, const _ns5__ActionTemplateNotFoundFault *, const char*);
SOAP_FMAC3 _ns5__ActionTemplateNotFoundFault * SOAP_FMAC4 soap_in__ns5__ActionTemplateNotFoundFault(struct soap*, const char*, _ns5__ActionTemplateNotFoundFault *, const char*);
SOAP_FMAC1 _ns5__ActionTemplateNotFoundFault * SOAP_FMAC2 soap_instantiate__ns5__ActionTemplateNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__ActionTemplateNotFoundFault * soap_new__ns5__ActionTemplateNotFoundFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__ActionTemplateNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns5__ActionTemplateNotFoundFault * soap_new_req__ns5__ActionTemplateNotFoundFault(
	struct soap *soap)
{
	_ns5__ActionTemplateNotFoundFault *_p = soap_new__ns5__ActionTemplateNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__ActionTemplateNotFoundFault * soap_new_set__ns5__ActionTemplateNotFoundFault(
	struct soap *soap)
{
	_ns5__ActionTemplateNotFoundFault *_p = soap_new__ns5__ActionTemplateNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__ActionTemplateNotFoundFault(struct soap *soap, _ns5__ActionTemplateNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionTemplateNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__ActionTemplateNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionTemplateNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionTemplateNotFoundFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__ActionTemplateNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionTemplateNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateNotFoundFault", p->soap_type() == SOAP_TYPE__ns5__ActionTemplateNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__ActionTemplateNotFoundFault * SOAP_FMAC4 soap_get__ns5__ActionTemplateNotFoundFault(struct soap*, _ns5__ActionTemplateNotFoundFault *, const char*, const char*);

inline int soap_read__ns5__ActionTemplateNotFoundFault(struct soap *soap, _ns5__ActionTemplateNotFoundFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__ActionTemplateNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__ActionTemplateNotFoundFault(struct soap *soap, const char *URL, _ns5__ActionTemplateNotFoundFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__ActionTemplateNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__ActionTemplateNotFoundFault(struct soap *soap, _ns5__ActionTemplateNotFoundFault *p)
{
	if (soap_read__ns5__ActionTemplateNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RemoveActionRuleResponse_DEFINED
#define SOAP_TYPE__ns5__RemoveActionRuleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RemoveActionRuleResponse(struct soap*, const char*, int, const _ns5__RemoveActionRuleResponse *, const char*);
SOAP_FMAC3 _ns5__RemoveActionRuleResponse * SOAP_FMAC4 soap_in__ns5__RemoveActionRuleResponse(struct soap*, const char*, _ns5__RemoveActionRuleResponse *, const char*);
SOAP_FMAC1 _ns5__RemoveActionRuleResponse * SOAP_FMAC2 soap_instantiate__ns5__RemoveActionRuleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RemoveActionRuleResponse * soap_new__ns5__RemoveActionRuleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RemoveActionRuleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__RemoveActionRuleResponse * soap_new_req__ns5__RemoveActionRuleResponse(
	struct soap *soap)
{
	_ns5__RemoveActionRuleResponse *_p = soap_new__ns5__RemoveActionRuleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__RemoveActionRuleResponse * soap_new_set__ns5__RemoveActionRuleResponse(
	struct soap *soap)
{
	_ns5__RemoveActionRuleResponse *_p = soap_new__ns5__RemoveActionRuleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__RemoveActionRuleResponse(struct soap *soap, _ns5__RemoveActionRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionRuleResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveActionRuleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RemoveActionRuleResponse(struct soap *soap, const char *URL, _ns5__RemoveActionRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionRuleResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveActionRuleResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RemoveActionRuleResponse(struct soap *soap, const char *URL, _ns5__RemoveActionRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionRuleResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveActionRuleResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RemoveActionRuleResponse * SOAP_FMAC4 soap_get__ns5__RemoveActionRuleResponse(struct soap*, _ns5__RemoveActionRuleResponse *, const char*, const char*);

inline int soap_read__ns5__RemoveActionRuleResponse(struct soap *soap, _ns5__RemoveActionRuleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RemoveActionRuleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RemoveActionRuleResponse(struct soap *soap, const char *URL, _ns5__RemoveActionRuleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RemoveActionRuleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RemoveActionRuleResponse(struct soap *soap, _ns5__RemoveActionRuleResponse *p)
{
	if (soap_read__ns5__RemoveActionRuleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RemoveActionRule_DEFINED
#define SOAP_TYPE__ns5__RemoveActionRule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RemoveActionRule(struct soap*, const char*, int, const _ns5__RemoveActionRule *, const char*);
SOAP_FMAC3 _ns5__RemoveActionRule * SOAP_FMAC4 soap_in__ns5__RemoveActionRule(struct soap*, const char*, _ns5__RemoveActionRule *, const char*);
SOAP_FMAC1 _ns5__RemoveActionRule * SOAP_FMAC2 soap_instantiate__ns5__RemoveActionRule(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RemoveActionRule * soap_new__ns5__RemoveActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RemoveActionRule(soap, n, NULL, NULL, NULL);
}

inline _ns5__RemoveActionRule * soap_new_req__ns5__RemoveActionRule(
	struct soap *soap,
	const std::string& RuleID)
{
	_ns5__RemoveActionRule *_p = soap_new__ns5__RemoveActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__RemoveActionRule::RuleID = RuleID;
	}
	return _p;
}

inline _ns5__RemoveActionRule * soap_new_set__ns5__RemoveActionRule(
	struct soap *soap,
	const std::string& RuleID)
{
	_ns5__RemoveActionRule *_p = soap_new__ns5__RemoveActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__RemoveActionRule::RuleID = RuleID;
	}
	return _p;
}

inline int soap_write__ns5__RemoveActionRule(struct soap *soap, _ns5__RemoveActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionRule", p->soap_type() == SOAP_TYPE__ns5__RemoveActionRule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RemoveActionRule(struct soap *soap, const char *URL, _ns5__RemoveActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionRule", p->soap_type() == SOAP_TYPE__ns5__RemoveActionRule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RemoveActionRule(struct soap *soap, const char *URL, _ns5__RemoveActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionRule", p->soap_type() == SOAP_TYPE__ns5__RemoveActionRule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RemoveActionRule * SOAP_FMAC4 soap_get__ns5__RemoveActionRule(struct soap*, _ns5__RemoveActionRule *, const char*, const char*);

inline int soap_read__ns5__RemoveActionRule(struct soap *soap, _ns5__RemoveActionRule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RemoveActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RemoveActionRule(struct soap *soap, const char *URL, _ns5__RemoveActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RemoveActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RemoveActionRule(struct soap *soap, _ns5__RemoveActionRule *p)
{
	if (soap_read__ns5__RemoveActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetActionRulesResponse_DEFINED
#define SOAP_TYPE__ns5__GetActionRulesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetActionRulesResponse(struct soap*, const char*, int, const _ns5__GetActionRulesResponse *, const char*);
SOAP_FMAC3 _ns5__GetActionRulesResponse * SOAP_FMAC4 soap_in__ns5__GetActionRulesResponse(struct soap*, const char*, _ns5__GetActionRulesResponse *, const char*);
SOAP_FMAC1 _ns5__GetActionRulesResponse * SOAP_FMAC2 soap_instantiate__ns5__GetActionRulesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetActionRulesResponse * soap_new__ns5__GetActionRulesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetActionRulesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetActionRulesResponse * soap_new_req__ns5__GetActionRulesResponse(
	struct soap *soap,
	ns5__ActionRules *ActionRules)
{
	_ns5__GetActionRulesResponse *_p = soap_new__ns5__GetActionRulesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetActionRulesResponse::ActionRules = ActionRules;
	}
	return _p;
}

inline _ns5__GetActionRulesResponse * soap_new_set__ns5__GetActionRulesResponse(
	struct soap *soap,
	ns5__ActionRules *ActionRules)
{
	_ns5__GetActionRulesResponse *_p = soap_new__ns5__GetActionRulesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetActionRulesResponse::ActionRules = ActionRules;
	}
	return _p;
}

inline int soap_write__ns5__GetActionRulesResponse(struct soap *soap, _ns5__GetActionRulesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionRulesResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionRulesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetActionRulesResponse(struct soap *soap, const char *URL, _ns5__GetActionRulesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionRulesResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionRulesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetActionRulesResponse(struct soap *soap, const char *URL, _ns5__GetActionRulesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionRulesResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionRulesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetActionRulesResponse * SOAP_FMAC4 soap_get__ns5__GetActionRulesResponse(struct soap*, _ns5__GetActionRulesResponse *, const char*, const char*);

inline int soap_read__ns5__GetActionRulesResponse(struct soap *soap, _ns5__GetActionRulesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetActionRulesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetActionRulesResponse(struct soap *soap, const char *URL, _ns5__GetActionRulesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetActionRulesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetActionRulesResponse(struct soap *soap, _ns5__GetActionRulesResponse *p)
{
	if (soap_read__ns5__GetActionRulesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetActionRules_DEFINED
#define SOAP_TYPE__ns5__GetActionRules_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetActionRules(struct soap*, const char*, int, const _ns5__GetActionRules *, const char*);
SOAP_FMAC3 _ns5__GetActionRules * SOAP_FMAC4 soap_in__ns5__GetActionRules(struct soap*, const char*, _ns5__GetActionRules *, const char*);
SOAP_FMAC1 _ns5__GetActionRules * SOAP_FMAC2 soap_instantiate__ns5__GetActionRules(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetActionRules * soap_new__ns5__GetActionRules(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetActionRules(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetActionRules * soap_new_req__ns5__GetActionRules(
	struct soap *soap)
{
	_ns5__GetActionRules *_p = soap_new__ns5__GetActionRules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__GetActionRules * soap_new_set__ns5__GetActionRules(
	struct soap *soap)
{
	_ns5__GetActionRules *_p = soap_new__ns5__GetActionRules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__GetActionRules(struct soap *soap, _ns5__GetActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionRules", p->soap_type() == SOAP_TYPE__ns5__GetActionRules ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetActionRules(struct soap *soap, const char *URL, _ns5__GetActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionRules", p->soap_type() == SOAP_TYPE__ns5__GetActionRules ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetActionRules(struct soap *soap, const char *URL, _ns5__GetActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionRules", p->soap_type() == SOAP_TYPE__ns5__GetActionRules ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetActionRules * SOAP_FMAC4 soap_get__ns5__GetActionRules(struct soap*, _ns5__GetActionRules *, const char*, const char*);

inline int soap_read__ns5__GetActionRules(struct soap *soap, _ns5__GetActionRules *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetActionRules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetActionRules(struct soap *soap, const char *URL, _ns5__GetActionRules *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetActionRules(struct soap *soap, _ns5__GetActionRules *p)
{
	if (soap_read__ns5__GetActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__AddActionRuleResponse_DEFINED
#define SOAP_TYPE__ns5__AddActionRuleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__AddActionRuleResponse(struct soap*, const char*, int, const _ns5__AddActionRuleResponse *, const char*);
SOAP_FMAC3 _ns5__AddActionRuleResponse * SOAP_FMAC4 soap_in__ns5__AddActionRuleResponse(struct soap*, const char*, _ns5__AddActionRuleResponse *, const char*);
SOAP_FMAC1 _ns5__AddActionRuleResponse * SOAP_FMAC2 soap_instantiate__ns5__AddActionRuleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__AddActionRuleResponse * soap_new__ns5__AddActionRuleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__AddActionRuleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__AddActionRuleResponse * soap_new_req__ns5__AddActionRuleResponse(
	struct soap *soap,
	const std::string& RuleID)
{
	_ns5__AddActionRuleResponse *_p = soap_new__ns5__AddActionRuleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionRuleResponse::RuleID = RuleID;
	}
	return _p;
}

inline _ns5__AddActionRuleResponse * soap_new_set__ns5__AddActionRuleResponse(
	struct soap *soap,
	const std::string& RuleID)
{
	_ns5__AddActionRuleResponse *_p = soap_new__ns5__AddActionRuleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionRuleResponse::RuleID = RuleID;
	}
	return _p;
}

inline int soap_write__ns5__AddActionRuleResponse(struct soap *soap, _ns5__AddActionRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionRuleResponse", p->soap_type() == SOAP_TYPE__ns5__AddActionRuleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__AddActionRuleResponse(struct soap *soap, const char *URL, _ns5__AddActionRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionRuleResponse", p->soap_type() == SOAP_TYPE__ns5__AddActionRuleResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__AddActionRuleResponse(struct soap *soap, const char *URL, _ns5__AddActionRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionRuleResponse", p->soap_type() == SOAP_TYPE__ns5__AddActionRuleResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__AddActionRuleResponse * SOAP_FMAC4 soap_get__ns5__AddActionRuleResponse(struct soap*, _ns5__AddActionRuleResponse *, const char*, const char*);

inline int soap_read__ns5__AddActionRuleResponse(struct soap *soap, _ns5__AddActionRuleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__AddActionRuleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__AddActionRuleResponse(struct soap *soap, const char *URL, _ns5__AddActionRuleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__AddActionRuleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__AddActionRuleResponse(struct soap *soap, _ns5__AddActionRuleResponse *p)
{
	if (soap_read__ns5__AddActionRuleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__AddActionRule_DEFINED
#define SOAP_TYPE__ns5__AddActionRule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__AddActionRule(struct soap*, const char*, int, const _ns5__AddActionRule *, const char*);
SOAP_FMAC3 _ns5__AddActionRule * SOAP_FMAC4 soap_in__ns5__AddActionRule(struct soap*, const char*, _ns5__AddActionRule *, const char*);
SOAP_FMAC1 _ns5__AddActionRule * SOAP_FMAC2 soap_instantiate__ns5__AddActionRule(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__AddActionRule * soap_new__ns5__AddActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__AddActionRule(soap, n, NULL, NULL, NULL);
}

inline _ns5__AddActionRule * soap_new_req__ns5__AddActionRule(
	struct soap *soap,
	ns5__NewActionRule *NewActionRule)
{
	_ns5__AddActionRule *_p = soap_new__ns5__AddActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionRule::NewActionRule = NewActionRule;
	}
	return _p;
}

inline _ns5__AddActionRule * soap_new_set__ns5__AddActionRule(
	struct soap *soap,
	ns5__NewActionRule *NewActionRule)
{
	_ns5__AddActionRule *_p = soap_new__ns5__AddActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionRule::NewActionRule = NewActionRule;
	}
	return _p;
}

inline int soap_write__ns5__AddActionRule(struct soap *soap, _ns5__AddActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionRule", p->soap_type() == SOAP_TYPE__ns5__AddActionRule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__AddActionRule(struct soap *soap, const char *URL, _ns5__AddActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionRule", p->soap_type() == SOAP_TYPE__ns5__AddActionRule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__AddActionRule(struct soap *soap, const char *URL, _ns5__AddActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionRule", p->soap_type() == SOAP_TYPE__ns5__AddActionRule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__AddActionRule * SOAP_FMAC4 soap_get__ns5__AddActionRule(struct soap*, _ns5__AddActionRule *, const char*, const char*);

inline int soap_read__ns5__AddActionRule(struct soap *soap, _ns5__AddActionRule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__AddActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__AddActionRule(struct soap *soap, const char *URL, _ns5__AddActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__AddActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__AddActionRule(struct soap *soap, _ns5__AddActionRule *p)
{
	if (soap_read__ns5__AddActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetRecipientConfigurationsResponse_DEFINED
#define SOAP_TYPE__ns5__GetRecipientConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetRecipientConfigurationsResponse(struct soap*, const char*, int, const _ns5__GetRecipientConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns5__GetRecipientConfigurationsResponse * SOAP_FMAC4 soap_in__ns5__GetRecipientConfigurationsResponse(struct soap*, const char*, _ns5__GetRecipientConfigurationsResponse *, const char*);
SOAP_FMAC1 _ns5__GetRecipientConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns5__GetRecipientConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetRecipientConfigurationsResponse * soap_new__ns5__GetRecipientConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetRecipientConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetRecipientConfigurationsResponse * soap_new_req__ns5__GetRecipientConfigurationsResponse(
	struct soap *soap,
	ns5__RecipientConfigurations *RecipientConfigurations)
{
	_ns5__GetRecipientConfigurationsResponse *_p = soap_new__ns5__GetRecipientConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetRecipientConfigurationsResponse::RecipientConfigurations = RecipientConfigurations;
	}
	return _p;
}

inline _ns5__GetRecipientConfigurationsResponse * soap_new_set__ns5__GetRecipientConfigurationsResponse(
	struct soap *soap,
	ns5__RecipientConfigurations *RecipientConfigurations)
{
	_ns5__GetRecipientConfigurationsResponse *_p = soap_new__ns5__GetRecipientConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetRecipientConfigurationsResponse::RecipientConfigurations = RecipientConfigurations;
	}
	return _p;
}

inline int soap_write__ns5__GetRecipientConfigurationsResponse(struct soap *soap, _ns5__GetRecipientConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns5__GetRecipientConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetRecipientConfigurationsResponse(struct soap *soap, const char *URL, _ns5__GetRecipientConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns5__GetRecipientConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetRecipientConfigurationsResponse(struct soap *soap, const char *URL, _ns5__GetRecipientConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns5__GetRecipientConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetRecipientConfigurationsResponse * SOAP_FMAC4 soap_get__ns5__GetRecipientConfigurationsResponse(struct soap*, _ns5__GetRecipientConfigurationsResponse *, const char*, const char*);

inline int soap_read__ns5__GetRecipientConfigurationsResponse(struct soap *soap, _ns5__GetRecipientConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetRecipientConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetRecipientConfigurationsResponse(struct soap *soap, const char *URL, _ns5__GetRecipientConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetRecipientConfigurationsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetRecipientConfigurationsResponse(struct soap *soap, _ns5__GetRecipientConfigurationsResponse *p)
{
	if (soap_read__ns5__GetRecipientConfigurationsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetRecipientConfigurations_DEFINED
#define SOAP_TYPE__ns5__GetRecipientConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetRecipientConfigurations(struct soap*, const char*, int, const _ns5__GetRecipientConfigurations *, const char*);
SOAP_FMAC3 _ns5__GetRecipientConfigurations * SOAP_FMAC4 soap_in__ns5__GetRecipientConfigurations(struct soap*, const char*, _ns5__GetRecipientConfigurations *, const char*);
SOAP_FMAC1 _ns5__GetRecipientConfigurations * SOAP_FMAC2 soap_instantiate__ns5__GetRecipientConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetRecipientConfigurations * soap_new__ns5__GetRecipientConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetRecipientConfigurations(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetRecipientConfigurations * soap_new_req__ns5__GetRecipientConfigurations(
	struct soap *soap)
{
	_ns5__GetRecipientConfigurations *_p = soap_new__ns5__GetRecipientConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__GetRecipientConfigurations * soap_new_set__ns5__GetRecipientConfigurations(
	struct soap *soap)
{
	_ns5__GetRecipientConfigurations *_p = soap_new__ns5__GetRecipientConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__GetRecipientConfigurations(struct soap *soap, _ns5__GetRecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientConfigurations", p->soap_type() == SOAP_TYPE__ns5__GetRecipientConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetRecipientConfigurations(struct soap *soap, const char *URL, _ns5__GetRecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientConfigurations", p->soap_type() == SOAP_TYPE__ns5__GetRecipientConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetRecipientConfigurations(struct soap *soap, const char *URL, _ns5__GetRecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientConfigurations", p->soap_type() == SOAP_TYPE__ns5__GetRecipientConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetRecipientConfigurations * SOAP_FMAC4 soap_get__ns5__GetRecipientConfigurations(struct soap*, _ns5__GetRecipientConfigurations *, const char*, const char*);

inline int soap_read__ns5__GetRecipientConfigurations(struct soap *soap, _ns5__GetRecipientConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetRecipientConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetRecipientConfigurations(struct soap *soap, const char *URL, _ns5__GetRecipientConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetRecipientConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetRecipientConfigurations(struct soap *soap, _ns5__GetRecipientConfigurations *p)
{
	if (soap_read__ns5__GetRecipientConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RemoveRecipientConfigurationResponse_DEFINED
#define SOAP_TYPE__ns5__RemoveRecipientConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RemoveRecipientConfigurationResponse(struct soap*, const char*, int, const _ns5__RemoveRecipientConfigurationResponse *, const char*);
SOAP_FMAC3 _ns5__RemoveRecipientConfigurationResponse * SOAP_FMAC4 soap_in__ns5__RemoveRecipientConfigurationResponse(struct soap*, const char*, _ns5__RemoveRecipientConfigurationResponse *, const char*);
SOAP_FMAC1 _ns5__RemoveRecipientConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns5__RemoveRecipientConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RemoveRecipientConfigurationResponse * soap_new__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RemoveRecipientConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__RemoveRecipientConfigurationResponse * soap_new_req__ns5__RemoveRecipientConfigurationResponse(
	struct soap *soap)
{
	_ns5__RemoveRecipientConfigurationResponse *_p = soap_new__ns5__RemoveRecipientConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__RemoveRecipientConfigurationResponse * soap_new_set__ns5__RemoveRecipientConfigurationResponse(
	struct soap *soap)
{
	_ns5__RemoveRecipientConfigurationResponse *_p = soap_new__ns5__RemoveRecipientConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, _ns5__RemoveRecipientConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveRecipientConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveRecipientConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, const char *URL, _ns5__RemoveRecipientConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveRecipientConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveRecipientConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, const char *URL, _ns5__RemoveRecipientConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveRecipientConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveRecipientConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RemoveRecipientConfigurationResponse * SOAP_FMAC4 soap_get__ns5__RemoveRecipientConfigurationResponse(struct soap*, _ns5__RemoveRecipientConfigurationResponse *, const char*, const char*);

inline int soap_read__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, _ns5__RemoveRecipientConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RemoveRecipientConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, const char *URL, _ns5__RemoveRecipientConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RemoveRecipientConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RemoveRecipientConfigurationResponse(struct soap *soap, _ns5__RemoveRecipientConfigurationResponse *p)
{
	if (soap_read__ns5__RemoveRecipientConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RemoveRecipientConfiguration_DEFINED
#define SOAP_TYPE__ns5__RemoveRecipientConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RemoveRecipientConfiguration(struct soap*, const char*, int, const _ns5__RemoveRecipientConfiguration *, const char*);
SOAP_FMAC3 _ns5__RemoveRecipientConfiguration * SOAP_FMAC4 soap_in__ns5__RemoveRecipientConfiguration(struct soap*, const char*, _ns5__RemoveRecipientConfiguration *, const char*);
SOAP_FMAC1 _ns5__RemoveRecipientConfiguration * SOAP_FMAC2 soap_instantiate__ns5__RemoveRecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RemoveRecipientConfiguration * soap_new__ns5__RemoveRecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RemoveRecipientConfiguration(soap, n, NULL, NULL, NULL);
}

inline _ns5__RemoveRecipientConfiguration * soap_new_req__ns5__RemoveRecipientConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__RemoveRecipientConfiguration *_p = soap_new__ns5__RemoveRecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__RemoveRecipientConfiguration::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline _ns5__RemoveRecipientConfiguration * soap_new_set__ns5__RemoveRecipientConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__RemoveRecipientConfiguration *_p = soap_new__ns5__RemoveRecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__RemoveRecipientConfiguration::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline int soap_write__ns5__RemoveRecipientConfiguration(struct soap *soap, _ns5__RemoveRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveRecipientConfiguration", p->soap_type() == SOAP_TYPE__ns5__RemoveRecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RemoveRecipientConfiguration(struct soap *soap, const char *URL, _ns5__RemoveRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveRecipientConfiguration", p->soap_type() == SOAP_TYPE__ns5__RemoveRecipientConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RemoveRecipientConfiguration(struct soap *soap, const char *URL, _ns5__RemoveRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveRecipientConfiguration", p->soap_type() == SOAP_TYPE__ns5__RemoveRecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RemoveRecipientConfiguration * SOAP_FMAC4 soap_get__ns5__RemoveRecipientConfiguration(struct soap*, _ns5__RemoveRecipientConfiguration *, const char*, const char*);

inline int soap_read__ns5__RemoveRecipientConfiguration(struct soap *soap, _ns5__RemoveRecipientConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RemoveRecipientConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RemoveRecipientConfiguration(struct soap *soap, const char *URL, _ns5__RemoveRecipientConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RemoveRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RemoveRecipientConfiguration(struct soap *soap, _ns5__RemoveRecipientConfiguration *p)
{
	if (soap_read__ns5__RemoveRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__AddRecipientConfigurationResponse_DEFINED
#define SOAP_TYPE__ns5__AddRecipientConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__AddRecipientConfigurationResponse(struct soap*, const char*, int, const _ns5__AddRecipientConfigurationResponse *, const char*);
SOAP_FMAC3 _ns5__AddRecipientConfigurationResponse * SOAP_FMAC4 soap_in__ns5__AddRecipientConfigurationResponse(struct soap*, const char*, _ns5__AddRecipientConfigurationResponse *, const char*);
SOAP_FMAC1 _ns5__AddRecipientConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns5__AddRecipientConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__AddRecipientConfigurationResponse * soap_new__ns5__AddRecipientConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__AddRecipientConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__AddRecipientConfigurationResponse * soap_new_req__ns5__AddRecipientConfigurationResponse(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__AddRecipientConfigurationResponse *_p = soap_new__ns5__AddRecipientConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddRecipientConfigurationResponse::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline _ns5__AddRecipientConfigurationResponse * soap_new_set__ns5__AddRecipientConfigurationResponse(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__AddRecipientConfigurationResponse *_p = soap_new__ns5__AddRecipientConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddRecipientConfigurationResponse::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline int soap_write__ns5__AddRecipientConfigurationResponse(struct soap *soap, _ns5__AddRecipientConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddRecipientConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__AddRecipientConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__AddRecipientConfigurationResponse(struct soap *soap, const char *URL, _ns5__AddRecipientConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddRecipientConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__AddRecipientConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__AddRecipientConfigurationResponse(struct soap *soap, const char *URL, _ns5__AddRecipientConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddRecipientConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__AddRecipientConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__AddRecipientConfigurationResponse * SOAP_FMAC4 soap_get__ns5__AddRecipientConfigurationResponse(struct soap*, _ns5__AddRecipientConfigurationResponse *, const char*, const char*);

inline int soap_read__ns5__AddRecipientConfigurationResponse(struct soap *soap, _ns5__AddRecipientConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__AddRecipientConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__AddRecipientConfigurationResponse(struct soap *soap, const char *URL, _ns5__AddRecipientConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__AddRecipientConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__AddRecipientConfigurationResponse(struct soap *soap, _ns5__AddRecipientConfigurationResponse *p)
{
	if (soap_read__ns5__AddRecipientConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__AddRecipientConfiguration_DEFINED
#define SOAP_TYPE__ns5__AddRecipientConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__AddRecipientConfiguration(struct soap*, const char*, int, const _ns5__AddRecipientConfiguration *, const char*);
SOAP_FMAC3 _ns5__AddRecipientConfiguration * SOAP_FMAC4 soap_in__ns5__AddRecipientConfiguration(struct soap*, const char*, _ns5__AddRecipientConfiguration *, const char*);
SOAP_FMAC1 _ns5__AddRecipientConfiguration * SOAP_FMAC2 soap_instantiate__ns5__AddRecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__AddRecipientConfiguration * soap_new__ns5__AddRecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__AddRecipientConfiguration(soap, n, NULL, NULL, NULL);
}

inline _ns5__AddRecipientConfiguration * soap_new_req__ns5__AddRecipientConfiguration(
	struct soap *soap,
	ns5__NewRecipientConfiguration *NewRecipientConfiguration)
{
	_ns5__AddRecipientConfiguration *_p = soap_new__ns5__AddRecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddRecipientConfiguration::NewRecipientConfiguration = NewRecipientConfiguration;
	}
	return _p;
}

inline _ns5__AddRecipientConfiguration * soap_new_set__ns5__AddRecipientConfiguration(
	struct soap *soap,
	ns5__NewRecipientConfiguration *NewRecipientConfiguration)
{
	_ns5__AddRecipientConfiguration *_p = soap_new__ns5__AddRecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddRecipientConfiguration::NewRecipientConfiguration = NewRecipientConfiguration;
	}
	return _p;
}

inline int soap_write__ns5__AddRecipientConfiguration(struct soap *soap, _ns5__AddRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddRecipientConfiguration", p->soap_type() == SOAP_TYPE__ns5__AddRecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__AddRecipientConfiguration(struct soap *soap, const char *URL, _ns5__AddRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddRecipientConfiguration", p->soap_type() == SOAP_TYPE__ns5__AddRecipientConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__AddRecipientConfiguration(struct soap *soap, const char *URL, _ns5__AddRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddRecipientConfiguration", p->soap_type() == SOAP_TYPE__ns5__AddRecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__AddRecipientConfiguration * SOAP_FMAC4 soap_get__ns5__AddRecipientConfiguration(struct soap*, _ns5__AddRecipientConfiguration *, const char*, const char*);

inline int soap_read__ns5__AddRecipientConfiguration(struct soap *soap, _ns5__AddRecipientConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__AddRecipientConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__AddRecipientConfiguration(struct soap *soap, const char *URL, _ns5__AddRecipientConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__AddRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__AddRecipientConfiguration(struct soap *soap, _ns5__AddRecipientConfiguration *p)
{
	if (soap_read__ns5__AddRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetRecipientTemplatesResponse_DEFINED
#define SOAP_TYPE__ns5__GetRecipientTemplatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetRecipientTemplatesResponse(struct soap*, const char*, int, const _ns5__GetRecipientTemplatesResponse *, const char*);
SOAP_FMAC3 _ns5__GetRecipientTemplatesResponse * SOAP_FMAC4 soap_in__ns5__GetRecipientTemplatesResponse(struct soap*, const char*, _ns5__GetRecipientTemplatesResponse *, const char*);
SOAP_FMAC1 _ns5__GetRecipientTemplatesResponse * SOAP_FMAC2 soap_instantiate__ns5__GetRecipientTemplatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetRecipientTemplatesResponse * soap_new__ns5__GetRecipientTemplatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetRecipientTemplatesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetRecipientTemplatesResponse * soap_new_req__ns5__GetRecipientTemplatesResponse(
	struct soap *soap,
	ns5__RecipientTemplates *RecipientTemplates)
{
	_ns5__GetRecipientTemplatesResponse *_p = soap_new__ns5__GetRecipientTemplatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetRecipientTemplatesResponse::RecipientTemplates = RecipientTemplates;
	}
	return _p;
}

inline _ns5__GetRecipientTemplatesResponse * soap_new_set__ns5__GetRecipientTemplatesResponse(
	struct soap *soap,
	ns5__RecipientTemplates *RecipientTemplates)
{
	_ns5__GetRecipientTemplatesResponse *_p = soap_new__ns5__GetRecipientTemplatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetRecipientTemplatesResponse::RecipientTemplates = RecipientTemplates;
	}
	return _p;
}

inline int soap_write__ns5__GetRecipientTemplatesResponse(struct soap *soap, _ns5__GetRecipientTemplatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientTemplatesResponse", p->soap_type() == SOAP_TYPE__ns5__GetRecipientTemplatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetRecipientTemplatesResponse(struct soap *soap, const char *URL, _ns5__GetRecipientTemplatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientTemplatesResponse", p->soap_type() == SOAP_TYPE__ns5__GetRecipientTemplatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetRecipientTemplatesResponse(struct soap *soap, const char *URL, _ns5__GetRecipientTemplatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientTemplatesResponse", p->soap_type() == SOAP_TYPE__ns5__GetRecipientTemplatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetRecipientTemplatesResponse * SOAP_FMAC4 soap_get__ns5__GetRecipientTemplatesResponse(struct soap*, _ns5__GetRecipientTemplatesResponse *, const char*, const char*);

inline int soap_read__ns5__GetRecipientTemplatesResponse(struct soap *soap, _ns5__GetRecipientTemplatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetRecipientTemplatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetRecipientTemplatesResponse(struct soap *soap, const char *URL, _ns5__GetRecipientTemplatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetRecipientTemplatesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetRecipientTemplatesResponse(struct soap *soap, _ns5__GetRecipientTemplatesResponse *p)
{
	if (soap_read__ns5__GetRecipientTemplatesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetRecipientTemplates_DEFINED
#define SOAP_TYPE__ns5__GetRecipientTemplates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetRecipientTemplates(struct soap*, const char*, int, const _ns5__GetRecipientTemplates *, const char*);
SOAP_FMAC3 _ns5__GetRecipientTemplates * SOAP_FMAC4 soap_in__ns5__GetRecipientTemplates(struct soap*, const char*, _ns5__GetRecipientTemplates *, const char*);
SOAP_FMAC1 _ns5__GetRecipientTemplates * SOAP_FMAC2 soap_instantiate__ns5__GetRecipientTemplates(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetRecipientTemplates * soap_new__ns5__GetRecipientTemplates(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetRecipientTemplates(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetRecipientTemplates * soap_new_req__ns5__GetRecipientTemplates(
	struct soap *soap)
{
	_ns5__GetRecipientTemplates *_p = soap_new__ns5__GetRecipientTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__GetRecipientTemplates * soap_new_set__ns5__GetRecipientTemplates(
	struct soap *soap)
{
	_ns5__GetRecipientTemplates *_p = soap_new__ns5__GetRecipientTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__GetRecipientTemplates(struct soap *soap, _ns5__GetRecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientTemplates", p->soap_type() == SOAP_TYPE__ns5__GetRecipientTemplates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetRecipientTemplates(struct soap *soap, const char *URL, _ns5__GetRecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientTemplates", p->soap_type() == SOAP_TYPE__ns5__GetRecipientTemplates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetRecipientTemplates(struct soap *soap, const char *URL, _ns5__GetRecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetRecipientTemplates", p->soap_type() == SOAP_TYPE__ns5__GetRecipientTemplates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetRecipientTemplates * SOAP_FMAC4 soap_get__ns5__GetRecipientTemplates(struct soap*, _ns5__GetRecipientTemplates *, const char*, const char*);

inline int soap_read__ns5__GetRecipientTemplates(struct soap *soap, _ns5__GetRecipientTemplates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetRecipientTemplates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetRecipientTemplates(struct soap *soap, const char *URL, _ns5__GetRecipientTemplates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetRecipientTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetRecipientTemplates(struct soap *soap, _ns5__GetRecipientTemplates *p)
{
	if (soap_read__ns5__GetRecipientTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetActionConfigurationsResponse_DEFINED
#define SOAP_TYPE__ns5__GetActionConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetActionConfigurationsResponse(struct soap*, const char*, int, const _ns5__GetActionConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns5__GetActionConfigurationsResponse * SOAP_FMAC4 soap_in__ns5__GetActionConfigurationsResponse(struct soap*, const char*, _ns5__GetActionConfigurationsResponse *, const char*);
SOAP_FMAC1 _ns5__GetActionConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns5__GetActionConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetActionConfigurationsResponse * soap_new__ns5__GetActionConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetActionConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetActionConfigurationsResponse * soap_new_req__ns5__GetActionConfigurationsResponse(
	struct soap *soap,
	ns5__ActionConfigurations *ActionConfigurations)
{
	_ns5__GetActionConfigurationsResponse *_p = soap_new__ns5__GetActionConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetActionConfigurationsResponse::ActionConfigurations = ActionConfigurations;
	}
	return _p;
}

inline _ns5__GetActionConfigurationsResponse * soap_new_set__ns5__GetActionConfigurationsResponse(
	struct soap *soap,
	ns5__ActionConfigurations *ActionConfigurations)
{
	_ns5__GetActionConfigurationsResponse *_p = soap_new__ns5__GetActionConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetActionConfigurationsResponse::ActionConfigurations = ActionConfigurations;
	}
	return _p;
}

inline int soap_write__ns5__GetActionConfigurationsResponse(struct soap *soap, _ns5__GetActionConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetActionConfigurationsResponse(struct soap *soap, const char *URL, _ns5__GetActionConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetActionConfigurationsResponse(struct soap *soap, const char *URL, _ns5__GetActionConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetActionConfigurationsResponse * SOAP_FMAC4 soap_get__ns5__GetActionConfigurationsResponse(struct soap*, _ns5__GetActionConfigurationsResponse *, const char*, const char*);

inline int soap_read__ns5__GetActionConfigurationsResponse(struct soap *soap, _ns5__GetActionConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetActionConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetActionConfigurationsResponse(struct soap *soap, const char *URL, _ns5__GetActionConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetActionConfigurationsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetActionConfigurationsResponse(struct soap *soap, _ns5__GetActionConfigurationsResponse *p)
{
	if (soap_read__ns5__GetActionConfigurationsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetActionConfigurations_DEFINED
#define SOAP_TYPE__ns5__GetActionConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetActionConfigurations(struct soap*, const char*, int, const _ns5__GetActionConfigurations *, const char*);
SOAP_FMAC3 _ns5__GetActionConfigurations * SOAP_FMAC4 soap_in__ns5__GetActionConfigurations(struct soap*, const char*, _ns5__GetActionConfigurations *, const char*);
SOAP_FMAC1 _ns5__GetActionConfigurations * SOAP_FMAC2 soap_instantiate__ns5__GetActionConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetActionConfigurations * soap_new__ns5__GetActionConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetActionConfigurations(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetActionConfigurations * soap_new_req__ns5__GetActionConfigurations(
	struct soap *soap)
{
	_ns5__GetActionConfigurations *_p = soap_new__ns5__GetActionConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__GetActionConfigurations * soap_new_set__ns5__GetActionConfigurations(
	struct soap *soap)
{
	_ns5__GetActionConfigurations *_p = soap_new__ns5__GetActionConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__GetActionConfigurations(struct soap *soap, _ns5__GetActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionConfigurations", p->soap_type() == SOAP_TYPE__ns5__GetActionConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetActionConfigurations(struct soap *soap, const char *URL, _ns5__GetActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionConfigurations", p->soap_type() == SOAP_TYPE__ns5__GetActionConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetActionConfigurations(struct soap *soap, const char *URL, _ns5__GetActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionConfigurations", p->soap_type() == SOAP_TYPE__ns5__GetActionConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetActionConfigurations * SOAP_FMAC4 soap_get__ns5__GetActionConfigurations(struct soap*, _ns5__GetActionConfigurations *, const char*, const char*);

inline int soap_read__ns5__GetActionConfigurations(struct soap *soap, _ns5__GetActionConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetActionConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetActionConfigurations(struct soap *soap, const char *URL, _ns5__GetActionConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetActionConfigurations(struct soap *soap, _ns5__GetActionConfigurations *p)
{
	if (soap_read__ns5__GetActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RemoveActionConfigurationResponse_DEFINED
#define SOAP_TYPE__ns5__RemoveActionConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RemoveActionConfigurationResponse(struct soap*, const char*, int, const _ns5__RemoveActionConfigurationResponse *, const char*);
SOAP_FMAC3 _ns5__RemoveActionConfigurationResponse * SOAP_FMAC4 soap_in__ns5__RemoveActionConfigurationResponse(struct soap*, const char*, _ns5__RemoveActionConfigurationResponse *, const char*);
SOAP_FMAC1 _ns5__RemoveActionConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns5__RemoveActionConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RemoveActionConfigurationResponse * soap_new__ns5__RemoveActionConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RemoveActionConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__RemoveActionConfigurationResponse * soap_new_req__ns5__RemoveActionConfigurationResponse(
	struct soap *soap)
{
	_ns5__RemoveActionConfigurationResponse *_p = soap_new__ns5__RemoveActionConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__RemoveActionConfigurationResponse * soap_new_set__ns5__RemoveActionConfigurationResponse(
	struct soap *soap)
{
	_ns5__RemoveActionConfigurationResponse *_p = soap_new__ns5__RemoveActionConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__RemoveActionConfigurationResponse(struct soap *soap, _ns5__RemoveActionConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveActionConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RemoveActionConfigurationResponse(struct soap *soap, const char *URL, _ns5__RemoveActionConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveActionConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RemoveActionConfigurationResponse(struct soap *soap, const char *URL, _ns5__RemoveActionConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__RemoveActionConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RemoveActionConfigurationResponse * SOAP_FMAC4 soap_get__ns5__RemoveActionConfigurationResponse(struct soap*, _ns5__RemoveActionConfigurationResponse *, const char*, const char*);

inline int soap_read__ns5__RemoveActionConfigurationResponse(struct soap *soap, _ns5__RemoveActionConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RemoveActionConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RemoveActionConfigurationResponse(struct soap *soap, const char *URL, _ns5__RemoveActionConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RemoveActionConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RemoveActionConfigurationResponse(struct soap *soap, _ns5__RemoveActionConfigurationResponse *p)
{
	if (soap_read__ns5__RemoveActionConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__RemoveActionConfiguration_DEFINED
#define SOAP_TYPE__ns5__RemoveActionConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__RemoveActionConfiguration(struct soap*, const char*, int, const _ns5__RemoveActionConfiguration *, const char*);
SOAP_FMAC3 _ns5__RemoveActionConfiguration * SOAP_FMAC4 soap_in__ns5__RemoveActionConfiguration(struct soap*, const char*, _ns5__RemoveActionConfiguration *, const char*);
SOAP_FMAC1 _ns5__RemoveActionConfiguration * SOAP_FMAC2 soap_instantiate__ns5__RemoveActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__RemoveActionConfiguration * soap_new__ns5__RemoveActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__RemoveActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline _ns5__RemoveActionConfiguration * soap_new_req__ns5__RemoveActionConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__RemoveActionConfiguration *_p = soap_new__ns5__RemoveActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__RemoveActionConfiguration::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline _ns5__RemoveActionConfiguration * soap_new_set__ns5__RemoveActionConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__RemoveActionConfiguration *_p = soap_new__ns5__RemoveActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__RemoveActionConfiguration::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline int soap_write__ns5__RemoveActionConfiguration(struct soap *soap, _ns5__RemoveActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionConfiguration", p->soap_type() == SOAP_TYPE__ns5__RemoveActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__RemoveActionConfiguration(struct soap *soap, const char *URL, _ns5__RemoveActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionConfiguration", p->soap_type() == SOAP_TYPE__ns5__RemoveActionConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__RemoveActionConfiguration(struct soap *soap, const char *URL, _ns5__RemoveActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RemoveActionConfiguration", p->soap_type() == SOAP_TYPE__ns5__RemoveActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__RemoveActionConfiguration * SOAP_FMAC4 soap_get__ns5__RemoveActionConfiguration(struct soap*, _ns5__RemoveActionConfiguration *, const char*, const char*);

inline int soap_read__ns5__RemoveActionConfiguration(struct soap *soap, _ns5__RemoveActionConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__RemoveActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__RemoveActionConfiguration(struct soap *soap, const char *URL, _ns5__RemoveActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__RemoveActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__RemoveActionConfiguration(struct soap *soap, _ns5__RemoveActionConfiguration *p)
{
	if (soap_read__ns5__RemoveActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__AddActionConfigurationResponse_DEFINED
#define SOAP_TYPE__ns5__AddActionConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__AddActionConfigurationResponse(struct soap*, const char*, int, const _ns5__AddActionConfigurationResponse *, const char*);
SOAP_FMAC3 _ns5__AddActionConfigurationResponse * SOAP_FMAC4 soap_in__ns5__AddActionConfigurationResponse(struct soap*, const char*, _ns5__AddActionConfigurationResponse *, const char*);
SOAP_FMAC1 _ns5__AddActionConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns5__AddActionConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__AddActionConfigurationResponse * soap_new__ns5__AddActionConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__AddActionConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__AddActionConfigurationResponse * soap_new_req__ns5__AddActionConfigurationResponse(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__AddActionConfigurationResponse *_p = soap_new__ns5__AddActionConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionConfigurationResponse::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline _ns5__AddActionConfigurationResponse * soap_new_set__ns5__AddActionConfigurationResponse(
	struct soap *soap,
	const std::string& ConfigurationID)
{
	_ns5__AddActionConfigurationResponse *_p = soap_new__ns5__AddActionConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionConfigurationResponse::ConfigurationID = ConfigurationID;
	}
	return _p;
}

inline int soap_write__ns5__AddActionConfigurationResponse(struct soap *soap, _ns5__AddActionConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__AddActionConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__AddActionConfigurationResponse(struct soap *soap, const char *URL, _ns5__AddActionConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__AddActionConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__AddActionConfigurationResponse(struct soap *soap, const char *URL, _ns5__AddActionConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionConfigurationResponse", p->soap_type() == SOAP_TYPE__ns5__AddActionConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__AddActionConfigurationResponse * SOAP_FMAC4 soap_get__ns5__AddActionConfigurationResponse(struct soap*, _ns5__AddActionConfigurationResponse *, const char*, const char*);

inline int soap_read__ns5__AddActionConfigurationResponse(struct soap *soap, _ns5__AddActionConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__AddActionConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__AddActionConfigurationResponse(struct soap *soap, const char *URL, _ns5__AddActionConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__AddActionConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__AddActionConfigurationResponse(struct soap *soap, _ns5__AddActionConfigurationResponse *p)
{
	if (soap_read__ns5__AddActionConfigurationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__AddActionConfiguration_DEFINED
#define SOAP_TYPE__ns5__AddActionConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__AddActionConfiguration(struct soap*, const char*, int, const _ns5__AddActionConfiguration *, const char*);
SOAP_FMAC3 _ns5__AddActionConfiguration * SOAP_FMAC4 soap_in__ns5__AddActionConfiguration(struct soap*, const char*, _ns5__AddActionConfiguration *, const char*);
SOAP_FMAC1 _ns5__AddActionConfiguration * SOAP_FMAC2 soap_instantiate__ns5__AddActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__AddActionConfiguration * soap_new__ns5__AddActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__AddActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline _ns5__AddActionConfiguration * soap_new_req__ns5__AddActionConfiguration(
	struct soap *soap,
	ns5__NewActionConfiguration *NewActionConfiguration)
{
	_ns5__AddActionConfiguration *_p = soap_new__ns5__AddActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionConfiguration::NewActionConfiguration = NewActionConfiguration;
	}
	return _p;
}

inline _ns5__AddActionConfiguration * soap_new_set__ns5__AddActionConfiguration(
	struct soap *soap,
	ns5__NewActionConfiguration *NewActionConfiguration)
{
	_ns5__AddActionConfiguration *_p = soap_new__ns5__AddActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__AddActionConfiguration::NewActionConfiguration = NewActionConfiguration;
	}
	return _p;
}

inline int soap_write__ns5__AddActionConfiguration(struct soap *soap, _ns5__AddActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionConfiguration", p->soap_type() == SOAP_TYPE__ns5__AddActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__AddActionConfiguration(struct soap *soap, const char *URL, _ns5__AddActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionConfiguration", p->soap_type() == SOAP_TYPE__ns5__AddActionConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__AddActionConfiguration(struct soap *soap, const char *URL, _ns5__AddActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:AddActionConfiguration", p->soap_type() == SOAP_TYPE__ns5__AddActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__AddActionConfiguration * SOAP_FMAC4 soap_get__ns5__AddActionConfiguration(struct soap*, _ns5__AddActionConfiguration *, const char*, const char*);

inline int soap_read__ns5__AddActionConfiguration(struct soap *soap, _ns5__AddActionConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__AddActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__AddActionConfiguration(struct soap *soap, const char *URL, _ns5__AddActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__AddActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__AddActionConfiguration(struct soap *soap, _ns5__AddActionConfiguration *p)
{
	if (soap_read__ns5__AddActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetActionTemplatesResponse_DEFINED
#define SOAP_TYPE__ns5__GetActionTemplatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetActionTemplatesResponse(struct soap*, const char*, int, const _ns5__GetActionTemplatesResponse *, const char*);
SOAP_FMAC3 _ns5__GetActionTemplatesResponse * SOAP_FMAC4 soap_in__ns5__GetActionTemplatesResponse(struct soap*, const char*, _ns5__GetActionTemplatesResponse *, const char*);
SOAP_FMAC1 _ns5__GetActionTemplatesResponse * SOAP_FMAC2 soap_instantiate__ns5__GetActionTemplatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetActionTemplatesResponse * soap_new__ns5__GetActionTemplatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetActionTemplatesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetActionTemplatesResponse * soap_new_req__ns5__GetActionTemplatesResponse(
	struct soap *soap,
	ns5__ActionTemplates *ActionTemplates)
{
	_ns5__GetActionTemplatesResponse *_p = soap_new__ns5__GetActionTemplatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetActionTemplatesResponse::ActionTemplates = ActionTemplates;
	}
	return _p;
}

inline _ns5__GetActionTemplatesResponse * soap_new_set__ns5__GetActionTemplatesResponse(
	struct soap *soap,
	ns5__ActionTemplates *ActionTemplates)
{
	_ns5__GetActionTemplatesResponse *_p = soap_new__ns5__GetActionTemplatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns5__GetActionTemplatesResponse::ActionTemplates = ActionTemplates;
	}
	return _p;
}

inline int soap_write__ns5__GetActionTemplatesResponse(struct soap *soap, _ns5__GetActionTemplatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionTemplatesResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionTemplatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetActionTemplatesResponse(struct soap *soap, const char *URL, _ns5__GetActionTemplatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionTemplatesResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionTemplatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetActionTemplatesResponse(struct soap *soap, const char *URL, _ns5__GetActionTemplatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionTemplatesResponse", p->soap_type() == SOAP_TYPE__ns5__GetActionTemplatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetActionTemplatesResponse * SOAP_FMAC4 soap_get__ns5__GetActionTemplatesResponse(struct soap*, _ns5__GetActionTemplatesResponse *, const char*, const char*);

inline int soap_read__ns5__GetActionTemplatesResponse(struct soap *soap, _ns5__GetActionTemplatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetActionTemplatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetActionTemplatesResponse(struct soap *soap, const char *URL, _ns5__GetActionTemplatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetActionTemplatesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetActionTemplatesResponse(struct soap *soap, _ns5__GetActionTemplatesResponse *p)
{
	if (soap_read__ns5__GetActionTemplatesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__GetActionTemplates_DEFINED
#define SOAP_TYPE__ns5__GetActionTemplates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetActionTemplates(struct soap*, const char*, int, const _ns5__GetActionTemplates *, const char*);
SOAP_FMAC3 _ns5__GetActionTemplates * SOAP_FMAC4 soap_in__ns5__GetActionTemplates(struct soap*, const char*, _ns5__GetActionTemplates *, const char*);
SOAP_FMAC1 _ns5__GetActionTemplates * SOAP_FMAC2 soap_instantiate__ns5__GetActionTemplates(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetActionTemplates * soap_new__ns5__GetActionTemplates(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns5__GetActionTemplates(soap, n, NULL, NULL, NULL);
}

inline _ns5__GetActionTemplates * soap_new_req__ns5__GetActionTemplates(
	struct soap *soap)
{
	_ns5__GetActionTemplates *_p = soap_new__ns5__GetActionTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns5__GetActionTemplates * soap_new_set__ns5__GetActionTemplates(
	struct soap *soap)
{
	_ns5__GetActionTemplates *_p = soap_new__ns5__GetActionTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns5__GetActionTemplates(struct soap *soap, _ns5__GetActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionTemplates", p->soap_type() == SOAP_TYPE__ns5__GetActionTemplates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns5__GetActionTemplates(struct soap *soap, const char *URL, _ns5__GetActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionTemplates", p->soap_type() == SOAP_TYPE__ns5__GetActionTemplates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns5__GetActionTemplates(struct soap *soap, const char *URL, _ns5__GetActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:GetActionTemplates", p->soap_type() == SOAP_TYPE__ns5__GetActionTemplates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns5__GetActionTemplates * SOAP_FMAC4 soap_get__ns5__GetActionTemplates(struct soap*, _ns5__GetActionTemplates *, const char*, const char*);

inline int soap_read__ns5__GetActionTemplates(struct soap *soap, _ns5__GetActionTemplates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns5__GetActionTemplates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns5__GetActionTemplates(struct soap *soap, const char *URL, _ns5__GetActionTemplates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns5__GetActionTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns5__GetActionTemplates(struct soap *soap, _ns5__GetActionTemplates *p)
{
	if (soap_read__ns5__GetActionTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__UsedActionRule_DEFINED
#define SOAP_TYPE_ns5__UsedActionRule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__UsedActionRule(struct soap*, const char*, int, const ns5__UsedActionRule *, const char*);
SOAP_FMAC3 ns5__UsedActionRule * SOAP_FMAC4 soap_in_ns5__UsedActionRule(struct soap*, const char*, ns5__UsedActionRule *, const char*);
SOAP_FMAC1 ns5__UsedActionRule * SOAP_FMAC2 soap_instantiate_ns5__UsedActionRule(struct soap*, int, const char*, const char*, size_t*);

inline ns5__UsedActionRule * soap_new_ns5__UsedActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__UsedActionRule(soap, n, NULL, NULL, NULL);
}

inline ns5__UsedActionRule * soap_new_req_ns5__UsedActionRule(
	struct soap *soap,
	const std::string& ActionRuleID)
{
	ns5__UsedActionRule *_p = soap_new_ns5__UsedActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__UsedActionRule::ActionRuleID = ActionRuleID;
	}
	return _p;
}

inline ns5__UsedActionRule * soap_new_set_ns5__UsedActionRule(
	struct soap *soap,
	const std::string& ActionRuleID,
	std::string *ActionRuleName)
{
	ns5__UsedActionRule *_p = soap_new_ns5__UsedActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__UsedActionRule::ActionRuleID = ActionRuleID;
		_p->ns5__UsedActionRule::ActionRuleName = ActionRuleName;
	}
	return _p;
}

inline int soap_write_ns5__UsedActionRule(struct soap *soap, ns5__UsedActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedActionRule", p->soap_type() == SOAP_TYPE_ns5__UsedActionRule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__UsedActionRule(struct soap *soap, const char *URL, ns5__UsedActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedActionRule", p->soap_type() == SOAP_TYPE_ns5__UsedActionRule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__UsedActionRule(struct soap *soap, const char *URL, ns5__UsedActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedActionRule", p->soap_type() == SOAP_TYPE_ns5__UsedActionRule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__UsedActionRule * SOAP_FMAC4 soap_get_ns5__UsedActionRule(struct soap*, ns5__UsedActionRule *, const char*, const char*);

inline int soap_read_ns5__UsedActionRule(struct soap *soap, ns5__UsedActionRule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__UsedActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__UsedActionRule(struct soap *soap, const char *URL, ns5__UsedActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__UsedActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__UsedActionRule(struct soap *soap, ns5__UsedActionRule *p)
{
	if (soap_read_ns5__UsedActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__UsedByActionRules_DEFINED
#define SOAP_TYPE_ns5__UsedByActionRules_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__UsedByActionRules(struct soap*, const char*, int, const ns5__UsedByActionRules *, const char*);
SOAP_FMAC3 ns5__UsedByActionRules * SOAP_FMAC4 soap_in_ns5__UsedByActionRules(struct soap*, const char*, ns5__UsedByActionRules *, const char*);
SOAP_FMAC1 ns5__UsedByActionRules * SOAP_FMAC2 soap_instantiate_ns5__UsedByActionRules(struct soap*, int, const char*, const char*, size_t*);

inline ns5__UsedByActionRules * soap_new_ns5__UsedByActionRules(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__UsedByActionRules(soap, n, NULL, NULL, NULL);
}

inline ns5__UsedByActionRules * soap_new_req_ns5__UsedByActionRules(
	struct soap *soap)
{
	ns5__UsedByActionRules *_p = soap_new_ns5__UsedByActionRules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__UsedByActionRules * soap_new_set_ns5__UsedByActionRules(
	struct soap *soap,
	const std::vector<ns5__UsedActionRule *> & ActionRule)
{
	ns5__UsedByActionRules *_p = soap_new_ns5__UsedByActionRules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__UsedByActionRules::ActionRule = ActionRule;
	}
	return _p;
}

inline int soap_write_ns5__UsedByActionRules(struct soap *soap, ns5__UsedByActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedByActionRules", p->soap_type() == SOAP_TYPE_ns5__UsedByActionRules ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__UsedByActionRules(struct soap *soap, const char *URL, ns5__UsedByActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedByActionRules", p->soap_type() == SOAP_TYPE_ns5__UsedByActionRules ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__UsedByActionRules(struct soap *soap, const char *URL, ns5__UsedByActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedByActionRules", p->soap_type() == SOAP_TYPE_ns5__UsedByActionRules ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__UsedByActionRules * SOAP_FMAC4 soap_get_ns5__UsedByActionRules(struct soap*, ns5__UsedByActionRules *, const char*, const char*);

inline int soap_read_ns5__UsedByActionRules(struct soap *soap, ns5__UsedByActionRules *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__UsedByActionRules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__UsedByActionRules(struct soap *soap, const char *URL, ns5__UsedByActionRules *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__UsedByActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__UsedByActionRules(struct soap *soap, ns5__UsedByActionRules *p)
{
	if (soap_read_ns5__UsedByActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__UsedActionConfiguration_DEFINED
#define SOAP_TYPE_ns5__UsedActionConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__UsedActionConfiguration(struct soap*, const char*, int, const ns5__UsedActionConfiguration *, const char*);
SOAP_FMAC3 ns5__UsedActionConfiguration * SOAP_FMAC4 soap_in_ns5__UsedActionConfiguration(struct soap*, const char*, ns5__UsedActionConfiguration *, const char*);
SOAP_FMAC1 ns5__UsedActionConfiguration * SOAP_FMAC2 soap_instantiate_ns5__UsedActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns5__UsedActionConfiguration * soap_new_ns5__UsedActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__UsedActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns5__UsedActionConfiguration * soap_new_req_ns5__UsedActionConfiguration(
	struct soap *soap,
	const std::string& ActionConfigurationID)
{
	ns5__UsedActionConfiguration *_p = soap_new_ns5__UsedActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__UsedActionConfiguration::ActionConfigurationID = ActionConfigurationID;
	}
	return _p;
}

inline ns5__UsedActionConfiguration * soap_new_set_ns5__UsedActionConfiguration(
	struct soap *soap,
	const std::string& ActionConfigurationID,
	std::string *ActionConfigurationName)
{
	ns5__UsedActionConfiguration *_p = soap_new_ns5__UsedActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__UsedActionConfiguration::ActionConfigurationID = ActionConfigurationID;
		_p->ns5__UsedActionConfiguration::ActionConfigurationName = ActionConfigurationName;
	}
	return _p;
}

inline int soap_write_ns5__UsedActionConfiguration(struct soap *soap, ns5__UsedActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__UsedActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__UsedActionConfiguration(struct soap *soap, const char *URL, ns5__UsedActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__UsedActionConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__UsedActionConfiguration(struct soap *soap, const char *URL, ns5__UsedActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__UsedActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__UsedActionConfiguration * SOAP_FMAC4 soap_get_ns5__UsedActionConfiguration(struct soap*, ns5__UsedActionConfiguration *, const char*, const char*);

inline int soap_read_ns5__UsedActionConfiguration(struct soap *soap, ns5__UsedActionConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__UsedActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__UsedActionConfiguration(struct soap *soap, const char *URL, ns5__UsedActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__UsedActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__UsedActionConfiguration(struct soap *soap, ns5__UsedActionConfiguration *p)
{
	if (soap_read_ns5__UsedActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__UsedByActionConfigurations_DEFINED
#define SOAP_TYPE_ns5__UsedByActionConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__UsedByActionConfigurations(struct soap*, const char*, int, const ns5__UsedByActionConfigurations *, const char*);
SOAP_FMAC3 ns5__UsedByActionConfigurations * SOAP_FMAC4 soap_in_ns5__UsedByActionConfigurations(struct soap*, const char*, ns5__UsedByActionConfigurations *, const char*);
SOAP_FMAC1 ns5__UsedByActionConfigurations * SOAP_FMAC2 soap_instantiate_ns5__UsedByActionConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline ns5__UsedByActionConfigurations * soap_new_ns5__UsedByActionConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__UsedByActionConfigurations(soap, n, NULL, NULL, NULL);
}

inline ns5__UsedByActionConfigurations * soap_new_req_ns5__UsedByActionConfigurations(
	struct soap *soap)
{
	ns5__UsedByActionConfigurations *_p = soap_new_ns5__UsedByActionConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__UsedByActionConfigurations * soap_new_set_ns5__UsedByActionConfigurations(
	struct soap *soap,
	const std::vector<ns5__UsedActionConfiguration *> & ActionConfiguration)
{
	ns5__UsedByActionConfigurations *_p = soap_new_ns5__UsedByActionConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__UsedByActionConfigurations::ActionConfiguration = ActionConfiguration;
	}
	return _p;
}

inline int soap_write_ns5__UsedByActionConfigurations(struct soap *soap, ns5__UsedByActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedByActionConfigurations", p->soap_type() == SOAP_TYPE_ns5__UsedByActionConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__UsedByActionConfigurations(struct soap *soap, const char *URL, ns5__UsedByActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedByActionConfigurations", p->soap_type() == SOAP_TYPE_ns5__UsedByActionConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__UsedByActionConfigurations(struct soap *soap, const char *URL, ns5__UsedByActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:UsedByActionConfigurations", p->soap_type() == SOAP_TYPE_ns5__UsedByActionConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__UsedByActionConfigurations * SOAP_FMAC4 soap_get_ns5__UsedByActionConfigurations(struct soap*, ns5__UsedByActionConfigurations *, const char*, const char*);

inline int soap_read_ns5__UsedByActionConfigurations(struct soap *soap, ns5__UsedByActionConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__UsedByActionConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__UsedByActionConfigurations(struct soap *soap, const char *URL, ns5__UsedByActionConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__UsedByActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__UsedByActionConfigurations(struct soap *soap, ns5__UsedByActionConfigurations *p)
{
	if (soap_read_ns5__UsedByActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionTemplateParameter_DEFINED
#define SOAP_TYPE_ns5__ActionTemplateParameter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionTemplateParameter(struct soap*, const char*, int, const ns5__ActionTemplateParameter *, const char*);
SOAP_FMAC3 ns5__ActionTemplateParameter * SOAP_FMAC4 soap_in_ns5__ActionTemplateParameter(struct soap*, const char*, ns5__ActionTemplateParameter *, const char*);
SOAP_FMAC1 ns5__ActionTemplateParameter * SOAP_FMAC2 soap_instantiate_ns5__ActionTemplateParameter(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionTemplateParameter * soap_new_ns5__ActionTemplateParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionTemplateParameter(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionTemplateParameter * soap_new_req_ns5__ActionTemplateParameter(
	struct soap *soap,
	const std::string& Name,
	const std::string& Type)
{
	ns5__ActionTemplateParameter *_p = soap_new_ns5__ActionTemplateParameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplateParameter::Name = Name;
		_p->ns5__ActionTemplateParameter::Type = Type;
	}
	return _p;
}

inline ns5__ActionTemplateParameter * soap_new_set_ns5__ActionTemplateParameter(
	struct soap *soap,
	const std::string& Name,
	const std::string& Type)
{
	ns5__ActionTemplateParameter *_p = soap_new_ns5__ActionTemplateParameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplateParameter::Name = Name;
		_p->ns5__ActionTemplateParameter::Type = Type;
	}
	return _p;
}

inline int soap_write_ns5__ActionTemplateParameter(struct soap *soap, ns5__ActionTemplateParameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateParameter", p->soap_type() == SOAP_TYPE_ns5__ActionTemplateParameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionTemplateParameter(struct soap *soap, const char *URL, ns5__ActionTemplateParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateParameter", p->soap_type() == SOAP_TYPE_ns5__ActionTemplateParameter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionTemplateParameter(struct soap *soap, const char *URL, ns5__ActionTemplateParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateParameter", p->soap_type() == SOAP_TYPE_ns5__ActionTemplateParameter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionTemplateParameter * SOAP_FMAC4 soap_get_ns5__ActionTemplateParameter(struct soap*, ns5__ActionTemplateParameter *, const char*, const char*);

inline int soap_read_ns5__ActionTemplateParameter(struct soap *soap, ns5__ActionTemplateParameter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionTemplateParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionTemplateParameter(struct soap *soap, const char *URL, ns5__ActionTemplateParameter *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionTemplateParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionTemplateParameter(struct soap *soap, ns5__ActionTemplateParameter *p)
{
	if (soap_read_ns5__ActionTemplateParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionTemplateParameters_DEFINED
#define SOAP_TYPE_ns5__ActionTemplateParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionTemplateParameters(struct soap*, const char*, int, const ns5__ActionTemplateParameters *, const char*);
SOAP_FMAC3 ns5__ActionTemplateParameters * SOAP_FMAC4 soap_in_ns5__ActionTemplateParameters(struct soap*, const char*, ns5__ActionTemplateParameters *, const char*);
SOAP_FMAC1 ns5__ActionTemplateParameters * SOAP_FMAC2 soap_instantiate_ns5__ActionTemplateParameters(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionTemplateParameters * soap_new_ns5__ActionTemplateParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionTemplateParameters(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionTemplateParameters * soap_new_req_ns5__ActionTemplateParameters(
	struct soap *soap,
	const std::vector<ns5__ActionTemplateParameter *> & Parameter)
{
	ns5__ActionTemplateParameters *_p = soap_new_ns5__ActionTemplateParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplateParameters::Parameter = Parameter;
	}
	return _p;
}

inline ns5__ActionTemplateParameters * soap_new_set_ns5__ActionTemplateParameters(
	struct soap *soap,
	const std::vector<ns5__ActionTemplateParameter *> & Parameter)
{
	ns5__ActionTemplateParameters *_p = soap_new_ns5__ActionTemplateParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplateParameters::Parameter = Parameter;
	}
	return _p;
}

inline int soap_write_ns5__ActionTemplateParameters(struct soap *soap, ns5__ActionTemplateParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateParameters", p->soap_type() == SOAP_TYPE_ns5__ActionTemplateParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionTemplateParameters(struct soap *soap, const char *URL, ns5__ActionTemplateParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateParameters", p->soap_type() == SOAP_TYPE_ns5__ActionTemplateParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionTemplateParameters(struct soap *soap, const char *URL, ns5__ActionTemplateParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplateParameters", p->soap_type() == SOAP_TYPE_ns5__ActionTemplateParameters ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionTemplateParameters * SOAP_FMAC4 soap_get_ns5__ActionTemplateParameters(struct soap*, ns5__ActionTemplateParameters *, const char*, const char*);

inline int soap_read_ns5__ActionTemplateParameters(struct soap *soap, ns5__ActionTemplateParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionTemplateParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionTemplateParameters(struct soap *soap, const char *URL, ns5__ActionTemplateParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionTemplateParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionTemplateParameters(struct soap *soap, ns5__ActionTemplateParameters *p)
{
	if (soap_read_ns5__ActionTemplateParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionTemplate_DEFINED
#define SOAP_TYPE_ns5__ActionTemplate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionTemplate(struct soap*, const char*, int, const ns5__ActionTemplate *, const char*);
SOAP_FMAC3 ns5__ActionTemplate * SOAP_FMAC4 soap_in_ns5__ActionTemplate(struct soap*, const char*, ns5__ActionTemplate *, const char*);
SOAP_FMAC1 ns5__ActionTemplate * SOAP_FMAC2 soap_instantiate_ns5__ActionTemplate(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionTemplate * soap_new_ns5__ActionTemplate(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionTemplate(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionTemplate * soap_new_req_ns5__ActionTemplate(
	struct soap *soap,
	const std::string& TemplateToken)
{
	ns5__ActionTemplate *_p = soap_new_ns5__ActionTemplate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplate::TemplateToken = TemplateToken;
	}
	return _p;
}

inline ns5__ActionTemplate * soap_new_set_ns5__ActionTemplate(
	struct soap *soap,
	const std::string& TemplateToken,
	std::string *RecipientTemplate,
	ns5__ActionTemplateParameters *Parameters)
{
	ns5__ActionTemplate *_p = soap_new_ns5__ActionTemplate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplate::TemplateToken = TemplateToken;
		_p->ns5__ActionTemplate::RecipientTemplate = RecipientTemplate;
		_p->ns5__ActionTemplate::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__ActionTemplate(struct soap *soap, ns5__ActionTemplate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplate", p->soap_type() == SOAP_TYPE_ns5__ActionTemplate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionTemplate(struct soap *soap, const char *URL, ns5__ActionTemplate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplate", p->soap_type() == SOAP_TYPE_ns5__ActionTemplate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionTemplate(struct soap *soap, const char *URL, ns5__ActionTemplate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplate", p->soap_type() == SOAP_TYPE_ns5__ActionTemplate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionTemplate * SOAP_FMAC4 soap_get_ns5__ActionTemplate(struct soap*, ns5__ActionTemplate *, const char*, const char*);

inline int soap_read_ns5__ActionTemplate(struct soap *soap, ns5__ActionTemplate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionTemplate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionTemplate(struct soap *soap, const char *URL, ns5__ActionTemplate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionTemplate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionTemplate(struct soap *soap, ns5__ActionTemplate *p)
{
	if (soap_read_ns5__ActionTemplate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionParameter_DEFINED
#define SOAP_TYPE_ns5__ActionParameter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionParameter(struct soap*, const char*, int, const ns5__ActionParameter *, const char*);
SOAP_FMAC3 ns5__ActionParameter * SOAP_FMAC4 soap_in_ns5__ActionParameter(struct soap*, const char*, ns5__ActionParameter *, const char*);
SOAP_FMAC1 ns5__ActionParameter * SOAP_FMAC2 soap_instantiate_ns5__ActionParameter(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionParameter * soap_new_ns5__ActionParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionParameter(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionParameter * soap_new_req_ns5__ActionParameter(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	ns5__ActionParameter *_p = soap_new_ns5__ActionParameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionParameter::Name = Name;
		_p->ns5__ActionParameter::Value = Value;
	}
	return _p;
}

inline ns5__ActionParameter * soap_new_set_ns5__ActionParameter(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	ns5__ActionParameter *_p = soap_new_ns5__ActionParameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionParameter::Name = Name;
		_p->ns5__ActionParameter::Value = Value;
	}
	return _p;
}

inline int soap_write_ns5__ActionParameter(struct soap *soap, ns5__ActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionParameter", p->soap_type() == SOAP_TYPE_ns5__ActionParameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionParameter(struct soap *soap, const char *URL, ns5__ActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionParameter", p->soap_type() == SOAP_TYPE_ns5__ActionParameter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionParameter(struct soap *soap, const char *URL, ns5__ActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionParameter", p->soap_type() == SOAP_TYPE_ns5__ActionParameter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionParameter * SOAP_FMAC4 soap_get_ns5__ActionParameter(struct soap*, ns5__ActionParameter *, const char*, const char*);

inline int soap_read_ns5__ActionParameter(struct soap *soap, ns5__ActionParameter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionParameter(struct soap *soap, const char *URL, ns5__ActionParameter *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionParameter(struct soap *soap, ns5__ActionParameter *p)
{
	if (soap_read_ns5__ActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionTemplates_DEFINED
#define SOAP_TYPE_ns5__ActionTemplates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionTemplates(struct soap*, const char*, int, const ns5__ActionTemplates *, const char*);
SOAP_FMAC3 ns5__ActionTemplates * SOAP_FMAC4 soap_in_ns5__ActionTemplates(struct soap*, const char*, ns5__ActionTemplates *, const char*);
SOAP_FMAC1 ns5__ActionTemplates * SOAP_FMAC2 soap_instantiate_ns5__ActionTemplates(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionTemplates * soap_new_ns5__ActionTemplates(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionTemplates(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionTemplates * soap_new_req_ns5__ActionTemplates(
	struct soap *soap)
{
	ns5__ActionTemplates *_p = soap_new_ns5__ActionTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ActionTemplates * soap_new_set_ns5__ActionTemplates(
	struct soap *soap,
	const std::vector<ns5__ActionTemplate *> & ActionTemplate)
{
	ns5__ActionTemplates *_p = soap_new_ns5__ActionTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionTemplates::ActionTemplate = ActionTemplate;
	}
	return _p;
}

inline int soap_write_ns5__ActionTemplates(struct soap *soap, ns5__ActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplates", p->soap_type() == SOAP_TYPE_ns5__ActionTemplates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionTemplates(struct soap *soap, const char *URL, ns5__ActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplates", p->soap_type() == SOAP_TYPE_ns5__ActionTemplates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionTemplates(struct soap *soap, const char *URL, ns5__ActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionTemplates", p->soap_type() == SOAP_TYPE_ns5__ActionTemplates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionTemplates * SOAP_FMAC4 soap_get_ns5__ActionTemplates(struct soap*, ns5__ActionTemplates *, const char*, const char*);

inline int soap_read_ns5__ActionTemplates(struct soap *soap, ns5__ActionTemplates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionTemplates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionTemplates(struct soap *soap, const char *URL, ns5__ActionTemplates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionTemplates(struct soap *soap, ns5__ActionTemplates *p)
{
	if (soap_read_ns5__ActionTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionParameters_DEFINED
#define SOAP_TYPE_ns5__ActionParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionParameters(struct soap*, const char*, int, const ns5__ActionParameters *, const char*);
SOAP_FMAC3 ns5__ActionParameters * SOAP_FMAC4 soap_in_ns5__ActionParameters(struct soap*, const char*, ns5__ActionParameters *, const char*);
SOAP_FMAC1 ns5__ActionParameters * SOAP_FMAC2 soap_instantiate_ns5__ActionParameters(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionParameters * soap_new_ns5__ActionParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionParameters(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionParameters * soap_new_req_ns5__ActionParameters(
	struct soap *soap)
{
	ns5__ActionParameters *_p = soap_new_ns5__ActionParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ActionParameters * soap_new_set_ns5__ActionParameters(
	struct soap *soap,
	const std::vector<ns5__ActionParameter *> & Parameter,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns5__ActionParameters *_p = soap_new_ns5__ActionParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionParameters::Parameter = Parameter;
		_p->ns5__ActionParameters::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns5__ActionParameters(struct soap *soap, ns5__ActionParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionParameters", p->soap_type() == SOAP_TYPE_ns5__ActionParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionParameters(struct soap *soap, const char *URL, ns5__ActionParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionParameters", p->soap_type() == SOAP_TYPE_ns5__ActionParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionParameters(struct soap *soap, const char *URL, ns5__ActionParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionParameters", p->soap_type() == SOAP_TYPE_ns5__ActionParameters ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionParameters * SOAP_FMAC4 soap_get_ns5__ActionParameters(struct soap*, ns5__ActionParameters *, const char*, const char*);

inline int soap_read_ns5__ActionParameters(struct soap *soap, ns5__ActionParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionParameters(struct soap *soap, const char *URL, ns5__ActionParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionParameters(struct soap *soap, ns5__ActionParameters *p)
{
	if (soap_read_ns5__ActionParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionConfiguration_DEFINED
#define SOAP_TYPE_ns5__ActionConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionConfiguration(struct soap*, const char*, int, const ns5__ActionConfiguration *, const char*);
SOAP_FMAC3 ns5__ActionConfiguration * SOAP_FMAC4 soap_in_ns5__ActionConfiguration(struct soap*, const char*, ns5__ActionConfiguration *, const char*);
SOAP_FMAC1 ns5__ActionConfiguration * SOAP_FMAC2 soap_instantiate_ns5__ActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionConfiguration * soap_new_ns5__ActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionConfiguration * soap_new_req_ns5__ActionConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID,
	const std::string& TemplateToken)
{
	ns5__ActionConfiguration *_p = soap_new_ns5__ActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionConfiguration::ConfigurationID = ConfigurationID;
		_p->ns5__ActionConfiguration::TemplateToken = TemplateToken;
	}
	return _p;
}

inline ns5__ActionConfiguration * soap_new_set_ns5__ActionConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID,
	std::string *Name,
	const std::string& TemplateToken,
	ns5__ActionParameters *Parameters)
{
	ns5__ActionConfiguration *_p = soap_new_ns5__ActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionConfiguration::ConfigurationID = ConfigurationID;
		_p->ns5__ActionConfiguration::Name = Name;
		_p->ns5__ActionConfiguration::TemplateToken = TemplateToken;
		_p->ns5__ActionConfiguration::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__ActionConfiguration(struct soap *soap, ns5__ActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__ActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionConfiguration(struct soap *soap, const char *URL, ns5__ActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__ActionConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionConfiguration(struct soap *soap, const char *URL, ns5__ActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__ActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionConfiguration * SOAP_FMAC4 soap_get_ns5__ActionConfiguration(struct soap*, ns5__ActionConfiguration *, const char*, const char*);

inline int soap_read_ns5__ActionConfiguration(struct soap *soap, ns5__ActionConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionConfiguration(struct soap *soap, const char *URL, ns5__ActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionConfiguration(struct soap *soap, ns5__ActionConfiguration *p)
{
	if (soap_read_ns5__ActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__NewActionConfiguration_DEFINED
#define SOAP_TYPE_ns5__NewActionConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__NewActionConfiguration(struct soap*, const char*, int, const ns5__NewActionConfiguration *, const char*);
SOAP_FMAC3 ns5__NewActionConfiguration * SOAP_FMAC4 soap_in_ns5__NewActionConfiguration(struct soap*, const char*, ns5__NewActionConfiguration *, const char*);
SOAP_FMAC1 ns5__NewActionConfiguration * SOAP_FMAC2 soap_instantiate_ns5__NewActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns5__NewActionConfiguration * soap_new_ns5__NewActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__NewActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns5__NewActionConfiguration * soap_new_req_ns5__NewActionConfiguration(
	struct soap *soap,
	const std::string& TemplateToken)
{
	ns5__NewActionConfiguration *_p = soap_new_ns5__NewActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__NewActionConfiguration::TemplateToken = TemplateToken;
	}
	return _p;
}

inline ns5__NewActionConfiguration * soap_new_set_ns5__NewActionConfiguration(
	struct soap *soap,
	std::string *Name,
	const std::string& TemplateToken,
	ns5__ActionParameters *Parameters)
{
	ns5__NewActionConfiguration *_p = soap_new_ns5__NewActionConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__NewActionConfiguration::Name = Name;
		_p->ns5__NewActionConfiguration::TemplateToken = TemplateToken;
		_p->ns5__NewActionConfiguration::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__NewActionConfiguration(struct soap *soap, ns5__NewActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__NewActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__NewActionConfiguration(struct soap *soap, const char *URL, ns5__NewActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__NewActionConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__NewActionConfiguration(struct soap *soap, const char *URL, ns5__NewActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewActionConfiguration", p->soap_type() == SOAP_TYPE_ns5__NewActionConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__NewActionConfiguration * SOAP_FMAC4 soap_get_ns5__NewActionConfiguration(struct soap*, ns5__NewActionConfiguration *, const char*, const char*);

inline int soap_read_ns5__NewActionConfiguration(struct soap *soap, ns5__NewActionConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__NewActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__NewActionConfiguration(struct soap *soap, const char *URL, ns5__NewActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__NewActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__NewActionConfiguration(struct soap *soap, ns5__NewActionConfiguration *p)
{
	if (soap_read_ns5__NewActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionConfigurations_DEFINED
#define SOAP_TYPE_ns5__ActionConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionConfigurations(struct soap*, const char*, int, const ns5__ActionConfigurations *, const char*);
SOAP_FMAC3 ns5__ActionConfigurations * SOAP_FMAC4 soap_in_ns5__ActionConfigurations(struct soap*, const char*, ns5__ActionConfigurations *, const char*);
SOAP_FMAC1 ns5__ActionConfigurations * SOAP_FMAC2 soap_instantiate_ns5__ActionConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionConfigurations * soap_new_ns5__ActionConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionConfigurations(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionConfigurations * soap_new_req_ns5__ActionConfigurations(
	struct soap *soap)
{
	ns5__ActionConfigurations *_p = soap_new_ns5__ActionConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ActionConfigurations * soap_new_set_ns5__ActionConfigurations(
	struct soap *soap,
	const std::vector<ns5__ActionConfiguration *> & ActionConfiguration)
{
	ns5__ActionConfigurations *_p = soap_new_ns5__ActionConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionConfigurations::ActionConfiguration = ActionConfiguration;
	}
	return _p;
}

inline int soap_write_ns5__ActionConfigurations(struct soap *soap, ns5__ActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurations", p->soap_type() == SOAP_TYPE_ns5__ActionConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionConfigurations(struct soap *soap, const char *URL, ns5__ActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurations", p->soap_type() == SOAP_TYPE_ns5__ActionConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionConfigurations(struct soap *soap, const char *URL, ns5__ActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionConfigurations", p->soap_type() == SOAP_TYPE_ns5__ActionConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionConfigurations * SOAP_FMAC4 soap_get_ns5__ActionConfigurations(struct soap*, ns5__ActionConfigurations *, const char*, const char*);

inline int soap_read_ns5__ActionConfigurations(struct soap *soap, ns5__ActionConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionConfigurations(struct soap *soap, const char *URL, ns5__ActionConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionConfigurations(struct soap *soap, ns5__ActionConfigurations *p)
{
	if (soap_read_ns5__ActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__RecipientTemplate_DEFINED
#define SOAP_TYPE_ns5__RecipientTemplate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RecipientTemplate(struct soap*, const char*, int, const ns5__RecipientTemplate *, const char*);
SOAP_FMAC3 ns5__RecipientTemplate * SOAP_FMAC4 soap_in_ns5__RecipientTemplate(struct soap*, const char*, ns5__RecipientTemplate *, const char*);
SOAP_FMAC1 ns5__RecipientTemplate * SOAP_FMAC2 soap_instantiate_ns5__RecipientTemplate(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RecipientTemplate * soap_new_ns5__RecipientTemplate(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__RecipientTemplate(soap, n, NULL, NULL, NULL);
}

inline ns5__RecipientTemplate * soap_new_req_ns5__RecipientTemplate(
	struct soap *soap,
	const std::string& TemplateToken)
{
	ns5__RecipientTemplate *_p = soap_new_ns5__RecipientTemplate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__RecipientTemplate::TemplateToken = TemplateToken;
	}
	return _p;
}

inline ns5__RecipientTemplate * soap_new_set_ns5__RecipientTemplate(
	struct soap *soap,
	const std::string& TemplateToken,
	ns5__ActionTemplateParameters *Parameters)
{
	ns5__RecipientTemplate *_p = soap_new_ns5__RecipientTemplate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__RecipientTemplate::TemplateToken = TemplateToken;
		_p->ns5__RecipientTemplate::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__RecipientTemplate(struct soap *soap, ns5__RecipientTemplate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplate", p->soap_type() == SOAP_TYPE_ns5__RecipientTemplate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__RecipientTemplate(struct soap *soap, const char *URL, ns5__RecipientTemplate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplate", p->soap_type() == SOAP_TYPE_ns5__RecipientTemplate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__RecipientTemplate(struct soap *soap, const char *URL, ns5__RecipientTemplate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplate", p->soap_type() == SOAP_TYPE_ns5__RecipientTemplate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__RecipientTemplate * SOAP_FMAC4 soap_get_ns5__RecipientTemplate(struct soap*, ns5__RecipientTemplate *, const char*, const char*);

inline int soap_read_ns5__RecipientTemplate(struct soap *soap, ns5__RecipientTemplate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__RecipientTemplate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__RecipientTemplate(struct soap *soap, const char *URL, ns5__RecipientTemplate *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__RecipientTemplate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__RecipientTemplate(struct soap *soap, ns5__RecipientTemplate *p)
{
	if (soap_read_ns5__RecipientTemplate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__RecipientTemplates_DEFINED
#define SOAP_TYPE_ns5__RecipientTemplates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RecipientTemplates(struct soap*, const char*, int, const ns5__RecipientTemplates *, const char*);
SOAP_FMAC3 ns5__RecipientTemplates * SOAP_FMAC4 soap_in_ns5__RecipientTemplates(struct soap*, const char*, ns5__RecipientTemplates *, const char*);
SOAP_FMAC1 ns5__RecipientTemplates * SOAP_FMAC2 soap_instantiate_ns5__RecipientTemplates(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RecipientTemplates * soap_new_ns5__RecipientTemplates(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__RecipientTemplates(soap, n, NULL, NULL, NULL);
}

inline ns5__RecipientTemplates * soap_new_req_ns5__RecipientTemplates(
	struct soap *soap)
{
	ns5__RecipientTemplates *_p = soap_new_ns5__RecipientTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__RecipientTemplates * soap_new_set_ns5__RecipientTemplates(
	struct soap *soap,
	const std::vector<ns5__RecipientTemplate *> & RecipientTemplate)
{
	ns5__RecipientTemplates *_p = soap_new_ns5__RecipientTemplates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__RecipientTemplates::RecipientTemplate = RecipientTemplate;
	}
	return _p;
}

inline int soap_write_ns5__RecipientTemplates(struct soap *soap, ns5__RecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplates", p->soap_type() == SOAP_TYPE_ns5__RecipientTemplates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__RecipientTemplates(struct soap *soap, const char *URL, ns5__RecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplates", p->soap_type() == SOAP_TYPE_ns5__RecipientTemplates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__RecipientTemplates(struct soap *soap, const char *URL, ns5__RecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientTemplates", p->soap_type() == SOAP_TYPE_ns5__RecipientTemplates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__RecipientTemplates * SOAP_FMAC4 soap_get_ns5__RecipientTemplates(struct soap*, ns5__RecipientTemplates *, const char*, const char*);

inline int soap_read_ns5__RecipientTemplates(struct soap *soap, ns5__RecipientTemplates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__RecipientTemplates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__RecipientTemplates(struct soap *soap, const char *URL, ns5__RecipientTemplates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__RecipientTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__RecipientTemplates(struct soap *soap, ns5__RecipientTemplates *p)
{
	if (soap_read_ns5__RecipientTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__RecipientConfigurations_DEFINED
#define SOAP_TYPE_ns5__RecipientConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RecipientConfigurations(struct soap*, const char*, int, const ns5__RecipientConfigurations *, const char*);
SOAP_FMAC3 ns5__RecipientConfigurations * SOAP_FMAC4 soap_in_ns5__RecipientConfigurations(struct soap*, const char*, ns5__RecipientConfigurations *, const char*);
SOAP_FMAC1 ns5__RecipientConfigurations * SOAP_FMAC2 soap_instantiate_ns5__RecipientConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RecipientConfigurations * soap_new_ns5__RecipientConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__RecipientConfigurations(soap, n, NULL, NULL, NULL);
}

inline ns5__RecipientConfigurations * soap_new_req_ns5__RecipientConfigurations(
	struct soap *soap)
{
	ns5__RecipientConfigurations *_p = soap_new_ns5__RecipientConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__RecipientConfigurations * soap_new_set_ns5__RecipientConfigurations(
	struct soap *soap,
	const std::vector<ns5__RecipientConfiguration *> & RecipientConfiguration)
{
	ns5__RecipientConfigurations *_p = soap_new_ns5__RecipientConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__RecipientConfigurations::RecipientConfiguration = RecipientConfiguration;
	}
	return _p;
}

inline int soap_write_ns5__RecipientConfigurations(struct soap *soap, ns5__RecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfigurations", p->soap_type() == SOAP_TYPE_ns5__RecipientConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__RecipientConfigurations(struct soap *soap, const char *URL, ns5__RecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfigurations", p->soap_type() == SOAP_TYPE_ns5__RecipientConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__RecipientConfigurations(struct soap *soap, const char *URL, ns5__RecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfigurations", p->soap_type() == SOAP_TYPE_ns5__RecipientConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__RecipientConfigurations * SOAP_FMAC4 soap_get_ns5__RecipientConfigurations(struct soap*, ns5__RecipientConfigurations *, const char*, const char*);

inline int soap_read_ns5__RecipientConfigurations(struct soap *soap, ns5__RecipientConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__RecipientConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__RecipientConfigurations(struct soap *soap, const char *URL, ns5__RecipientConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__RecipientConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__RecipientConfigurations(struct soap *soap, ns5__RecipientConfigurations *p)
{
	if (soap_read_ns5__RecipientConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__RecipientConfiguration_DEFINED
#define SOAP_TYPE_ns5__RecipientConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RecipientConfiguration(struct soap*, const char*, int, const ns5__RecipientConfiguration *, const char*);
SOAP_FMAC3 ns5__RecipientConfiguration * SOAP_FMAC4 soap_in_ns5__RecipientConfiguration(struct soap*, const char*, ns5__RecipientConfiguration *, const char*);
SOAP_FMAC1 ns5__RecipientConfiguration * SOAP_FMAC2 soap_instantiate_ns5__RecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RecipientConfiguration * soap_new_ns5__RecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__RecipientConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns5__RecipientConfiguration * soap_new_req_ns5__RecipientConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID,
	const std::string& TemplateToken)
{
	ns5__RecipientConfiguration *_p = soap_new_ns5__RecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__RecipientConfiguration::ConfigurationID = ConfigurationID;
		_p->ns5__RecipientConfiguration::TemplateToken = TemplateToken;
	}
	return _p;
}

inline ns5__RecipientConfiguration * soap_new_set_ns5__RecipientConfiguration(
	struct soap *soap,
	const std::string& ConfigurationID,
	const std::string& TemplateToken,
	std::string *Name,
	ns5__ActionParameters *Parameters)
{
	ns5__RecipientConfiguration *_p = soap_new_ns5__RecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__RecipientConfiguration::ConfigurationID = ConfigurationID;
		_p->ns5__RecipientConfiguration::TemplateToken = TemplateToken;
		_p->ns5__RecipientConfiguration::Name = Name;
		_p->ns5__RecipientConfiguration::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__RecipientConfiguration(struct soap *soap, ns5__RecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfiguration", p->soap_type() == SOAP_TYPE_ns5__RecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__RecipientConfiguration(struct soap *soap, const char *URL, ns5__RecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfiguration", p->soap_type() == SOAP_TYPE_ns5__RecipientConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__RecipientConfiguration(struct soap *soap, const char *URL, ns5__RecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:RecipientConfiguration", p->soap_type() == SOAP_TYPE_ns5__RecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__RecipientConfiguration * SOAP_FMAC4 soap_get_ns5__RecipientConfiguration(struct soap*, ns5__RecipientConfiguration *, const char*, const char*);

inline int soap_read_ns5__RecipientConfiguration(struct soap *soap, ns5__RecipientConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__RecipientConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__RecipientConfiguration(struct soap *soap, const char *URL, ns5__RecipientConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__RecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__RecipientConfiguration(struct soap *soap, ns5__RecipientConfiguration *p)
{
	if (soap_read_ns5__RecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__NewRecipientConfiguration_DEFINED
#define SOAP_TYPE_ns5__NewRecipientConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__NewRecipientConfiguration(struct soap*, const char*, int, const ns5__NewRecipientConfiguration *, const char*);
SOAP_FMAC3 ns5__NewRecipientConfiguration * SOAP_FMAC4 soap_in_ns5__NewRecipientConfiguration(struct soap*, const char*, ns5__NewRecipientConfiguration *, const char*);
SOAP_FMAC1 ns5__NewRecipientConfiguration * SOAP_FMAC2 soap_instantiate_ns5__NewRecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns5__NewRecipientConfiguration * soap_new_ns5__NewRecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__NewRecipientConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns5__NewRecipientConfiguration * soap_new_req_ns5__NewRecipientConfiguration(
	struct soap *soap,
	const std::string& TemplateToken)
{
	ns5__NewRecipientConfiguration *_p = soap_new_ns5__NewRecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__NewRecipientConfiguration::TemplateToken = TemplateToken;
	}
	return _p;
}

inline ns5__NewRecipientConfiguration * soap_new_set_ns5__NewRecipientConfiguration(
	struct soap *soap,
	std::string *Name,
	const std::string& TemplateToken,
	ns5__ActionParameters *Parameters)
{
	ns5__NewRecipientConfiguration *_p = soap_new_ns5__NewRecipientConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__NewRecipientConfiguration::Name = Name;
		_p->ns5__NewRecipientConfiguration::TemplateToken = TemplateToken;
		_p->ns5__NewRecipientConfiguration::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__NewRecipientConfiguration(struct soap *soap, ns5__NewRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewRecipientConfiguration", p->soap_type() == SOAP_TYPE_ns5__NewRecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__NewRecipientConfiguration(struct soap *soap, const char *URL, ns5__NewRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewRecipientConfiguration", p->soap_type() == SOAP_TYPE_ns5__NewRecipientConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__NewRecipientConfiguration(struct soap *soap, const char *URL, ns5__NewRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewRecipientConfiguration", p->soap_type() == SOAP_TYPE_ns5__NewRecipientConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__NewRecipientConfiguration * SOAP_FMAC4 soap_get_ns5__NewRecipientConfiguration(struct soap*, ns5__NewRecipientConfiguration *, const char*, const char*);

inline int soap_read_ns5__NewRecipientConfiguration(struct soap *soap, ns5__NewRecipientConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__NewRecipientConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__NewRecipientConfiguration(struct soap *soap, const char *URL, ns5__NewRecipientConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__NewRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__NewRecipientConfiguration(struct soap *soap, ns5__NewRecipientConfiguration *p)
{
	if (soap_read_ns5__NewRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionRule_DEFINED
#define SOAP_TYPE_ns5__ActionRule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionRule(struct soap*, const char*, int, const ns5__ActionRule *, const char*);
SOAP_FMAC3 ns5__ActionRule * SOAP_FMAC4 soap_in_ns5__ActionRule(struct soap*, const char*, ns5__ActionRule *, const char*);
SOAP_FMAC1 ns5__ActionRule * SOAP_FMAC2 soap_instantiate_ns5__ActionRule(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionRule * soap_new_ns5__ActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionRule(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionRule * soap_new_req_ns5__ActionRule(
	struct soap *soap,
	const std::string& RuleID,
	bool Enabled,
	const std::string& PrimaryAction)
{
	ns5__ActionRule *_p = soap_new_ns5__ActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionRule::RuleID = RuleID;
		_p->ns5__ActionRule::Enabled = Enabled;
		_p->ns5__ActionRule::PrimaryAction = PrimaryAction;
	}
	return _p;
}

inline ns5__ActionRule * soap_new_set_ns5__ActionRule(
	struct soap *soap,
	const std::string& RuleID,
	std::string *Name,
	bool Enabled,
	ns3__FilterType *StartEvent,
	ns5__Conditions *Conditions,
	std::string *ActivationTimeout,
	const std::string& PrimaryAction,
	std::string *FailoverAction)
{
	ns5__ActionRule *_p = soap_new_ns5__ActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionRule::RuleID = RuleID;
		_p->ns5__ActionRule::Name = Name;
		_p->ns5__ActionRule::Enabled = Enabled;
		_p->ns5__ActionRule::StartEvent = StartEvent;
		_p->ns5__ActionRule::Conditions = Conditions;
		_p->ns5__ActionRule::ActivationTimeout = ActivationTimeout;
		_p->ns5__ActionRule::PrimaryAction = PrimaryAction;
		_p->ns5__ActionRule::FailoverAction = FailoverAction;
	}
	return _p;
}

inline int soap_write_ns5__ActionRule(struct soap *soap, ns5__ActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRule", p->soap_type() == SOAP_TYPE_ns5__ActionRule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionRule(struct soap *soap, const char *URL, ns5__ActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRule", p->soap_type() == SOAP_TYPE_ns5__ActionRule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionRule(struct soap *soap, const char *URL, ns5__ActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRule", p->soap_type() == SOAP_TYPE_ns5__ActionRule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionRule * SOAP_FMAC4 soap_get_ns5__ActionRule(struct soap*, ns5__ActionRule *, const char*, const char*);

inline int soap_read_ns5__ActionRule(struct soap *soap, ns5__ActionRule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionRule(struct soap *soap, const char *URL, ns5__ActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionRule(struct soap *soap, ns5__ActionRule *p)
{
	if (soap_read_ns5__ActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ActionRules_DEFINED
#define SOAP_TYPE_ns5__ActionRules_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ActionRules(struct soap*, const char*, int, const ns5__ActionRules *, const char*);
SOAP_FMAC3 ns5__ActionRules * SOAP_FMAC4 soap_in_ns5__ActionRules(struct soap*, const char*, ns5__ActionRules *, const char*);
SOAP_FMAC1 ns5__ActionRules * SOAP_FMAC2 soap_instantiate_ns5__ActionRules(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ActionRules * soap_new_ns5__ActionRules(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__ActionRules(soap, n, NULL, NULL, NULL);
}

inline ns5__ActionRules * soap_new_req_ns5__ActionRules(
	struct soap *soap)
{
	ns5__ActionRules *_p = soap_new_ns5__ActionRules(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__ActionRules * soap_new_set_ns5__ActionRules(
	struct soap *soap,
	const std::vector<ns5__ActionRule *> & ActionRule)
{
	ns5__ActionRules *_p = soap_new_ns5__ActionRules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ActionRules::ActionRule = ActionRule;
	}
	return _p;
}

inline int soap_write_ns5__ActionRules(struct soap *soap, ns5__ActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRules", p->soap_type() == SOAP_TYPE_ns5__ActionRules ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ActionRules(struct soap *soap, const char *URL, ns5__ActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRules", p->soap_type() == SOAP_TYPE_ns5__ActionRules ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ActionRules(struct soap *soap, const char *URL, ns5__ActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ActionRules", p->soap_type() == SOAP_TYPE_ns5__ActionRules ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ActionRules * SOAP_FMAC4 soap_get_ns5__ActionRules(struct soap*, ns5__ActionRules *, const char*, const char*);

inline int soap_read_ns5__ActionRules(struct soap *soap, ns5__ActionRules *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ActionRules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ActionRules(struct soap *soap, const char *URL, ns5__ActionRules *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ActionRules(struct soap *soap, ns5__ActionRules *p)
{
	if (soap_read_ns5__ActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__Conditions_DEFINED
#define SOAP_TYPE_ns5__Conditions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Conditions(struct soap*, const char*, int, const ns5__Conditions *, const char*);
SOAP_FMAC3 ns5__Conditions * SOAP_FMAC4 soap_in_ns5__Conditions(struct soap*, const char*, ns5__Conditions *, const char*);
SOAP_FMAC1 ns5__Conditions * SOAP_FMAC2 soap_instantiate_ns5__Conditions(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Conditions * soap_new_ns5__Conditions(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__Conditions(soap, n, NULL, NULL, NULL);
}

inline ns5__Conditions * soap_new_req_ns5__Conditions(
	struct soap *soap,
	const std::vector<ns3__FilterType *> & Condition)
{
	ns5__Conditions *_p = soap_new_ns5__Conditions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__Conditions::Condition = Condition;
	}
	return _p;
}

inline ns5__Conditions * soap_new_set_ns5__Conditions(
	struct soap *soap,
	const std::vector<ns3__FilterType *> & Condition)
{
	ns5__Conditions *_p = soap_new_ns5__Conditions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__Conditions::Condition = Condition;
	}
	return _p;
}

inline int soap_write_ns5__Conditions(struct soap *soap, ns5__Conditions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Conditions", p->soap_type() == SOAP_TYPE_ns5__Conditions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__Conditions(struct soap *soap, const char *URL, ns5__Conditions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Conditions", p->soap_type() == SOAP_TYPE_ns5__Conditions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__Conditions(struct soap *soap, const char *URL, ns5__Conditions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Conditions", p->soap_type() == SOAP_TYPE_ns5__Conditions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__Conditions * SOAP_FMAC4 soap_get_ns5__Conditions(struct soap*, ns5__Conditions *, const char*, const char*);

inline int soap_read_ns5__Conditions(struct soap *soap, ns5__Conditions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__Conditions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__Conditions(struct soap *soap, const char *URL, ns5__Conditions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__Conditions(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__Conditions(struct soap *soap, ns5__Conditions *p)
{
	if (soap_read_ns5__Conditions(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__NewActionRule_DEFINED
#define SOAP_TYPE_ns5__NewActionRule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__NewActionRule(struct soap*, const char*, int, const ns5__NewActionRule *, const char*);
SOAP_FMAC3 ns5__NewActionRule * SOAP_FMAC4 soap_in_ns5__NewActionRule(struct soap*, const char*, ns5__NewActionRule *, const char*);
SOAP_FMAC1 ns5__NewActionRule * SOAP_FMAC2 soap_instantiate_ns5__NewActionRule(struct soap*, int, const char*, const char*, size_t*);

inline ns5__NewActionRule * soap_new_ns5__NewActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__NewActionRule(soap, n, NULL, NULL, NULL);
}

inline ns5__NewActionRule * soap_new_req_ns5__NewActionRule(
	struct soap *soap,
	bool Enabled,
	const std::string& PrimaryAction)
{
	ns5__NewActionRule *_p = soap_new_ns5__NewActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__NewActionRule::Enabled = Enabled;
		_p->ns5__NewActionRule::PrimaryAction = PrimaryAction;
	}
	return _p;
}

inline ns5__NewActionRule * soap_new_set_ns5__NewActionRule(
	struct soap *soap,
	std::string *Name,
	bool Enabled,
	ns3__FilterType *StartEvent,
	ns5__Conditions *Conditions,
	std::string *ActivationTimeout,
	const std::string& PrimaryAction,
	std::string *FailoverAction)
{
	ns5__NewActionRule *_p = soap_new_ns5__NewActionRule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__NewActionRule::Name = Name;
		_p->ns5__NewActionRule::Enabled = Enabled;
		_p->ns5__NewActionRule::StartEvent = StartEvent;
		_p->ns5__NewActionRule::Conditions = Conditions;
		_p->ns5__NewActionRule::ActivationTimeout = ActivationTimeout;
		_p->ns5__NewActionRule::PrimaryAction = PrimaryAction;
		_p->ns5__NewActionRule::FailoverAction = FailoverAction;
	}
	return _p;
}

inline int soap_write_ns5__NewActionRule(struct soap *soap, ns5__NewActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewActionRule", p->soap_type() == SOAP_TYPE_ns5__NewActionRule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__NewActionRule(struct soap *soap, const char *URL, ns5__NewActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewActionRule", p->soap_type() == SOAP_TYPE_ns5__NewActionRule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__NewActionRule(struct soap *soap, const char *URL, ns5__NewActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:NewActionRule", p->soap_type() == SOAP_TYPE_ns5__NewActionRule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__NewActionRule * SOAP_FMAC4 soap_get_ns5__NewActionRule(struct soap*, ns5__NewActionRule *, const char*, const char*);

inline int soap_read_ns5__NewActionRule(struct soap *soap, ns5__NewActionRule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__NewActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__NewActionRule(struct soap *soap, const char *URL, ns5__NewActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__NewActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__NewActionRule(struct soap *soap, ns5__NewActionRule *p)
{
	if (soap_read_ns5__NewActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__BaseFaultType_DEFINED
#define SOAP_TYPE_ns4__BaseFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__BaseFaultType(struct soap*, const char*, int, const ns4__BaseFaultType *, const char*);
SOAP_FMAC3 ns4__BaseFaultType * SOAP_FMAC4 soap_in_ns4__BaseFaultType(struct soap*, const char*, ns4__BaseFaultType *, const char*);
SOAP_FMAC1 ns4__BaseFaultType * SOAP_FMAC2 soap_instantiate_ns4__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__BaseFaultType * soap_new_ns4__BaseFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__BaseFaultType(soap, n, NULL, NULL, NULL);
}

inline ns4__BaseFaultType * soap_new_req_ns4__BaseFaultType(
	struct soap *soap,
	time_t Timestamp)
{
	ns4__BaseFaultType *_p = soap_new_ns4__BaseFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp;
	}
	return _p;
}

inline ns4__BaseFaultType * soap_new_set_ns4__BaseFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	time_t Timestamp,
	ns6__EndpointReferenceType *Originator,
	_ns4__BaseFaultType_ErrorCode *ErrorCode,
	const std::vector<_ns4__BaseFaultType_Description> & Description,
	_ns4__BaseFaultType_FaultCause *FaultCause,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns4__BaseFaultType *_p = soap_new_ns4__BaseFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any;
		_p->ns4__BaseFaultType::Timestamp = Timestamp;
		_p->ns4__BaseFaultType::Originator = Originator;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode;
		_p->ns4__BaseFaultType::Description = Description;
		_p->ns4__BaseFaultType::FaultCause = FaultCause;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns4__BaseFaultType(struct soap *soap, ns4__BaseFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType", p->soap_type() == SOAP_TYPE_ns4__BaseFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__BaseFaultType(struct soap *soap, const char *URL, ns4__BaseFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType", p->soap_type() == SOAP_TYPE_ns4__BaseFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__BaseFaultType(struct soap *soap, const char *URL, ns4__BaseFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:BaseFaultType", p->soap_type() == SOAP_TYPE_ns4__BaseFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__BaseFaultType * SOAP_FMAC4 soap_get_ns4__BaseFaultType(struct soap*, ns4__BaseFaultType *, const char*, const char*);

inline int soap_read_ns4__BaseFaultType(struct soap *soap, ns4__BaseFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__BaseFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__BaseFaultType(struct soap *soap, const char *URL, ns4__BaseFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__BaseFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__BaseFaultType(struct soap *soap, ns4__BaseFaultType *p)
{
	if (soap_read_ns4__BaseFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__ResumeSubscriptionResponse_DEFINED
#define SOAP_TYPE__ns3__ResumeSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeSubscriptionResponse(struct soap*, const char*, int, const _ns3__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC3 _ns3__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__ns3__ResumeSubscriptionResponse(struct soap*, const char*, _ns3__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC1 _ns3__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__ns3__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeSubscriptionResponse * soap_new__ns3__ResumeSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__ResumeSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__ResumeSubscriptionResponse * soap_new_req__ns3__ResumeSubscriptionResponse(
	struct soap *soap)
{
	_ns3__ResumeSubscriptionResponse *_p = soap_new__ns3__ResumeSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__ResumeSubscriptionResponse * soap_new_set__ns3__ResumeSubscriptionResponse(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__ResumeSubscriptionResponse *_p = soap_new__ns3__ResumeSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__ResumeSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__ResumeSubscriptionResponse(struct soap *soap, _ns3__ResumeSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeSubscriptionResponse", p->soap_type() == SOAP_TYPE__ns3__ResumeSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__ResumeSubscriptionResponse(struct soap *soap, const char *URL, _ns3__ResumeSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeSubscriptionResponse", p->soap_type() == SOAP_TYPE__ns3__ResumeSubscriptionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__ResumeSubscriptionResponse(struct soap *soap, const char *URL, _ns3__ResumeSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeSubscriptionResponse", p->soap_type() == SOAP_TYPE__ns3__ResumeSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__ns3__ResumeSubscriptionResponse(struct soap*, _ns3__ResumeSubscriptionResponse *, const char*, const char*);

inline int soap_read__ns3__ResumeSubscriptionResponse(struct soap *soap, _ns3__ResumeSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__ResumeSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__ResumeSubscriptionResponse(struct soap *soap, const char *URL, _ns3__ResumeSubscriptionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__ResumeSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__ResumeSubscriptionResponse(struct soap *soap, _ns3__ResumeSubscriptionResponse *p)
{
	if (soap_read__ns3__ResumeSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__ResumeSubscription_DEFINED
#define SOAP_TYPE__ns3__ResumeSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ResumeSubscription(struct soap*, const char*, int, const _ns3__ResumeSubscription *, const char*);
SOAP_FMAC3 _ns3__ResumeSubscription * SOAP_FMAC4 soap_in__ns3__ResumeSubscription(struct soap*, const char*, _ns3__ResumeSubscription *, const char*);
SOAP_FMAC1 _ns3__ResumeSubscription * SOAP_FMAC2 soap_instantiate__ns3__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ResumeSubscription * soap_new__ns3__ResumeSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__ResumeSubscription(soap, n, NULL, NULL, NULL);
}

inline _ns3__ResumeSubscription * soap_new_req__ns3__ResumeSubscription(
	struct soap *soap)
{
	_ns3__ResumeSubscription *_p = soap_new__ns3__ResumeSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__ResumeSubscription * soap_new_set__ns3__ResumeSubscription(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__ResumeSubscription *_p = soap_new__ns3__ResumeSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__ResumeSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__ResumeSubscription(struct soap *soap, _ns3__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeSubscription", p->soap_type() == SOAP_TYPE__ns3__ResumeSubscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__ResumeSubscription(struct soap *soap, const char *URL, _ns3__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeSubscription", p->soap_type() == SOAP_TYPE__ns3__ResumeSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__ResumeSubscription(struct soap *soap, const char *URL, _ns3__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeSubscription", p->soap_type() == SOAP_TYPE__ns3__ResumeSubscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__ResumeSubscription * SOAP_FMAC4 soap_get__ns3__ResumeSubscription(struct soap*, _ns3__ResumeSubscription *, const char*, const char*);

inline int soap_read__ns3__ResumeSubscription(struct soap *soap, _ns3__ResumeSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__ResumeSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__ResumeSubscription(struct soap *soap, const char *URL, _ns3__ResumeSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__ResumeSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__ResumeSubscription(struct soap *soap, _ns3__ResumeSubscription *p)
{
	if (soap_read__ns3__ResumeSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__PauseSubscriptionResponse_DEFINED
#define SOAP_TYPE__ns3__PauseSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseSubscriptionResponse(struct soap*, const char*, int, const _ns3__PauseSubscriptionResponse *, const char*);
SOAP_FMAC3 _ns3__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__ns3__PauseSubscriptionResponse(struct soap*, const char*, _ns3__PauseSubscriptionResponse *, const char*);
SOAP_FMAC1 _ns3__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__ns3__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseSubscriptionResponse * soap_new__ns3__PauseSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__PauseSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__PauseSubscriptionResponse * soap_new_req__ns3__PauseSubscriptionResponse(
	struct soap *soap)
{
	_ns3__PauseSubscriptionResponse *_p = soap_new__ns3__PauseSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__PauseSubscriptionResponse * soap_new_set__ns3__PauseSubscriptionResponse(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__PauseSubscriptionResponse *_p = soap_new__ns3__PauseSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__PauseSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__PauseSubscriptionResponse(struct soap *soap, _ns3__PauseSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseSubscriptionResponse", p->soap_type() == SOAP_TYPE__ns3__PauseSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__PauseSubscriptionResponse(struct soap *soap, const char *URL, _ns3__PauseSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseSubscriptionResponse", p->soap_type() == SOAP_TYPE__ns3__PauseSubscriptionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__PauseSubscriptionResponse(struct soap *soap, const char *URL, _ns3__PauseSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseSubscriptionResponse", p->soap_type() == SOAP_TYPE__ns3__PauseSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__ns3__PauseSubscriptionResponse(struct soap*, _ns3__PauseSubscriptionResponse *, const char*, const char*);

inline int soap_read__ns3__PauseSubscriptionResponse(struct soap *soap, _ns3__PauseSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__PauseSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__PauseSubscriptionResponse(struct soap *soap, const char *URL, _ns3__PauseSubscriptionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__PauseSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__PauseSubscriptionResponse(struct soap *soap, _ns3__PauseSubscriptionResponse *p)
{
	if (soap_read__ns3__PauseSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__PauseSubscription_DEFINED
#define SOAP_TYPE__ns3__PauseSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__PauseSubscription(struct soap*, const char*, int, const _ns3__PauseSubscription *, const char*);
SOAP_FMAC3 _ns3__PauseSubscription * SOAP_FMAC4 soap_in__ns3__PauseSubscription(struct soap*, const char*, _ns3__PauseSubscription *, const char*);
SOAP_FMAC1 _ns3__PauseSubscription * SOAP_FMAC2 soap_instantiate__ns3__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__PauseSubscription * soap_new__ns3__PauseSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__PauseSubscription(soap, n, NULL, NULL, NULL);
}

inline _ns3__PauseSubscription * soap_new_req__ns3__PauseSubscription(
	struct soap *soap)
{
	_ns3__PauseSubscription *_p = soap_new__ns3__PauseSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__PauseSubscription * soap_new_set__ns3__PauseSubscription(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__PauseSubscription *_p = soap_new__ns3__PauseSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__PauseSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__PauseSubscription(struct soap *soap, _ns3__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseSubscription", p->soap_type() == SOAP_TYPE__ns3__PauseSubscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__PauseSubscription(struct soap *soap, const char *URL, _ns3__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseSubscription", p->soap_type() == SOAP_TYPE__ns3__PauseSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__PauseSubscription(struct soap *soap, const char *URL, _ns3__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseSubscription", p->soap_type() == SOAP_TYPE__ns3__PauseSubscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__PauseSubscription * SOAP_FMAC4 soap_get__ns3__PauseSubscription(struct soap*, _ns3__PauseSubscription *, const char*, const char*);

inline int soap_read__ns3__PauseSubscription(struct soap *soap, _ns3__PauseSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__PauseSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__PauseSubscription(struct soap *soap, const char *URL, _ns3__PauseSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__PauseSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__PauseSubscription(struct soap *soap, _ns3__PauseSubscription *p)
{
	if (soap_read__ns3__PauseSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__UnsubscribeResponse_DEFINED
#define SOAP_TYPE__ns3__UnsubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UnsubscribeResponse(struct soap*, const char*, int, const _ns3__UnsubscribeResponse *, const char*);
SOAP_FMAC3 _ns3__UnsubscribeResponse * SOAP_FMAC4 soap_in__ns3__UnsubscribeResponse(struct soap*, const char*, _ns3__UnsubscribeResponse *, const char*);
SOAP_FMAC1 _ns3__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__ns3__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UnsubscribeResponse * soap_new__ns3__UnsubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__UnsubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__UnsubscribeResponse * soap_new_req__ns3__UnsubscribeResponse(
	struct soap *soap)
{
	_ns3__UnsubscribeResponse *_p = soap_new__ns3__UnsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__UnsubscribeResponse * soap_new_set__ns3__UnsubscribeResponse(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__UnsubscribeResponse *_p = soap_new__ns3__UnsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__UnsubscribeResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__UnsubscribeResponse(struct soap *soap, _ns3__UnsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnsubscribeResponse", p->soap_type() == SOAP_TYPE__ns3__UnsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__UnsubscribeResponse(struct soap *soap, const char *URL, _ns3__UnsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnsubscribeResponse", p->soap_type() == SOAP_TYPE__ns3__UnsubscribeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__UnsubscribeResponse(struct soap *soap, const char *URL, _ns3__UnsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnsubscribeResponse", p->soap_type() == SOAP_TYPE__ns3__UnsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__UnsubscribeResponse * SOAP_FMAC4 soap_get__ns3__UnsubscribeResponse(struct soap*, _ns3__UnsubscribeResponse *, const char*, const char*);

inline int soap_read__ns3__UnsubscribeResponse(struct soap *soap, _ns3__UnsubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__UnsubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__UnsubscribeResponse(struct soap *soap, const char *URL, _ns3__UnsubscribeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__UnsubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__UnsubscribeResponse(struct soap *soap, _ns3__UnsubscribeResponse *p)
{
	if (soap_read__ns3__UnsubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__Unsubscribe_DEFINED
#define SOAP_TYPE__ns3__Unsubscribe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Unsubscribe(struct soap*, const char*, int, const _ns3__Unsubscribe *, const char*);
SOAP_FMAC3 _ns3__Unsubscribe * SOAP_FMAC4 soap_in__ns3__Unsubscribe(struct soap*, const char*, _ns3__Unsubscribe *, const char*);
SOAP_FMAC1 _ns3__Unsubscribe * SOAP_FMAC2 soap_instantiate__ns3__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Unsubscribe * soap_new__ns3__Unsubscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__Unsubscribe(soap, n, NULL, NULL, NULL);
}

inline _ns3__Unsubscribe * soap_new_req__ns3__Unsubscribe(
	struct soap *soap)
{
	_ns3__Unsubscribe *_p = soap_new__ns3__Unsubscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__Unsubscribe * soap_new_set__ns3__Unsubscribe(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__Unsubscribe *_p = soap_new__ns3__Unsubscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Unsubscribe::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__Unsubscribe(struct soap *soap, _ns3__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Unsubscribe", p->soap_type() == SOAP_TYPE__ns3__Unsubscribe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__Unsubscribe(struct soap *soap, const char *URL, _ns3__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Unsubscribe", p->soap_type() == SOAP_TYPE__ns3__Unsubscribe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__Unsubscribe(struct soap *soap, const char *URL, _ns3__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Unsubscribe", p->soap_type() == SOAP_TYPE__ns3__Unsubscribe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__Unsubscribe * SOAP_FMAC4 soap_get__ns3__Unsubscribe(struct soap*, _ns3__Unsubscribe *, const char*, const char*);

inline int soap_read__ns3__Unsubscribe(struct soap *soap, _ns3__Unsubscribe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__Unsubscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__Unsubscribe(struct soap *soap, const char *URL, _ns3__Unsubscribe *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__Unsubscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__Unsubscribe(struct soap *soap, _ns3__Unsubscribe *p)
{
	if (soap_read__ns3__Unsubscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__RenewResponse_DEFINED
#define SOAP_TYPE__ns3__RenewResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RenewResponse(struct soap*, const char*, int, const _ns3__RenewResponse *, const char*);
SOAP_FMAC3 _ns3__RenewResponse * SOAP_FMAC4 soap_in__ns3__RenewResponse(struct soap*, const char*, _ns3__RenewResponse *, const char*);
SOAP_FMAC1 _ns3__RenewResponse * SOAP_FMAC2 soap_instantiate__ns3__RenewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RenewResponse * soap_new__ns3__RenewResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__RenewResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__RenewResponse * soap_new_req__ns3__RenewResponse(
	struct soap *soap,
	time_t TerminationTime)
{
	_ns3__RenewResponse *_p = soap_new__ns3__RenewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__RenewResponse::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _ns3__RenewResponse * soap_new_set__ns3__RenewResponse(
	struct soap *soap,
	time_t TerminationTime,
	time_t *CurrentTime,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__RenewResponse *_p = soap_new__ns3__RenewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__RenewResponse::TerminationTime = TerminationTime;
		_p->_ns3__RenewResponse::CurrentTime = CurrentTime;
		_p->_ns3__RenewResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__RenewResponse(struct soap *soap, _ns3__RenewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RenewResponse", p->soap_type() == SOAP_TYPE__ns3__RenewResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__RenewResponse(struct soap *soap, const char *URL, _ns3__RenewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RenewResponse", p->soap_type() == SOAP_TYPE__ns3__RenewResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__RenewResponse(struct soap *soap, const char *URL, _ns3__RenewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:RenewResponse", p->soap_type() == SOAP_TYPE__ns3__RenewResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__RenewResponse * SOAP_FMAC4 soap_get__ns3__RenewResponse(struct soap*, _ns3__RenewResponse *, const char*, const char*);

inline int soap_read__ns3__RenewResponse(struct soap *soap, _ns3__RenewResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__RenewResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__RenewResponse(struct soap *soap, const char *URL, _ns3__RenewResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__RenewResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__RenewResponse(struct soap *soap, _ns3__RenewResponse *p)
{
	if (soap_read__ns3__RenewResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__Renew_DEFINED
#define SOAP_TYPE__ns3__Renew_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Renew(struct soap*, const char*, int, const _ns3__Renew *, const char*);
SOAP_FMAC3 _ns3__Renew * SOAP_FMAC4 soap_in__ns3__Renew(struct soap*, const char*, _ns3__Renew *, const char*);
SOAP_FMAC1 _ns3__Renew * SOAP_FMAC2 soap_instantiate__ns3__Renew(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Renew * soap_new__ns3__Renew(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__Renew(soap, n, NULL, NULL, NULL);
}

inline _ns3__Renew * soap_new_req__ns3__Renew(
	struct soap *soap,
	std::string *TerminationTime)
{
	_ns3__Renew *_p = soap_new__ns3__Renew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Renew::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _ns3__Renew * soap_new_set__ns3__Renew(
	struct soap *soap,
	std::string *TerminationTime,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__Renew *_p = soap_new__ns3__Renew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Renew::TerminationTime = TerminationTime;
		_p->_ns3__Renew::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__Renew(struct soap *soap, _ns3__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Renew", p->soap_type() == SOAP_TYPE__ns3__Renew ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__Renew(struct soap *soap, const char *URL, _ns3__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Renew", p->soap_type() == SOAP_TYPE__ns3__Renew ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__Renew(struct soap *soap, const char *URL, _ns3__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Renew", p->soap_type() == SOAP_TYPE__ns3__Renew ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__Renew * SOAP_FMAC4 soap_get__ns3__Renew(struct soap*, _ns3__Renew *, const char*, const char*);

inline int soap_read__ns3__Renew(struct soap *soap, _ns3__Renew *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__Renew(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__Renew(struct soap *soap, const char *URL, _ns3__Renew *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__Renew(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__Renew(struct soap *soap, _ns3__Renew *p)
{
	if (soap_read__ns3__Renew(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__CreatePullPointResponse_DEFINED
#define SOAP_TYPE__ns3__CreatePullPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__CreatePullPointResponse(struct soap*, const char*, int, const _ns3__CreatePullPointResponse *, const char*);
SOAP_FMAC3 _ns3__CreatePullPointResponse * SOAP_FMAC4 soap_in__ns3__CreatePullPointResponse(struct soap*, const char*, _ns3__CreatePullPointResponse *, const char*);
SOAP_FMAC1 _ns3__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__ns3__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__CreatePullPointResponse * soap_new__ns3__CreatePullPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__CreatePullPointResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__CreatePullPointResponse * soap_new_req__ns3__CreatePullPointResponse(
	struct soap *soap,
	ns6__EndpointReferenceType *PullPoint)
{
	_ns3__CreatePullPointResponse *_p = soap_new__ns3__CreatePullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__CreatePullPointResponse::PullPoint = PullPoint;
	}
	return _p;
}

inline _ns3__CreatePullPointResponse * soap_new_set__ns3__CreatePullPointResponse(
	struct soap *soap,
	ns6__EndpointReferenceType *PullPoint,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	_ns3__CreatePullPointResponse *_p = soap_new__ns3__CreatePullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__CreatePullPointResponse::PullPoint = PullPoint;
		_p->_ns3__CreatePullPointResponse::__any = __any;
		_p->_ns3__CreatePullPointResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__ns3__CreatePullPointResponse(struct soap *soap, _ns3__CreatePullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreatePullPointResponse", p->soap_type() == SOAP_TYPE__ns3__CreatePullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__CreatePullPointResponse(struct soap *soap, const char *URL, _ns3__CreatePullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreatePullPointResponse", p->soap_type() == SOAP_TYPE__ns3__CreatePullPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__CreatePullPointResponse(struct soap *soap, const char *URL, _ns3__CreatePullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreatePullPointResponse", p->soap_type() == SOAP_TYPE__ns3__CreatePullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__CreatePullPointResponse * SOAP_FMAC4 soap_get__ns3__CreatePullPointResponse(struct soap*, _ns3__CreatePullPointResponse *, const char*, const char*);

inline int soap_read__ns3__CreatePullPointResponse(struct soap *soap, _ns3__CreatePullPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__CreatePullPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__CreatePullPointResponse(struct soap *soap, const char *URL, _ns3__CreatePullPointResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__CreatePullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__CreatePullPointResponse(struct soap *soap, _ns3__CreatePullPointResponse *p)
{
	if (soap_read__ns3__CreatePullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__CreatePullPoint_DEFINED
#define SOAP_TYPE__ns3__CreatePullPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__CreatePullPoint(struct soap*, const char*, int, const _ns3__CreatePullPoint *, const char*);
SOAP_FMAC3 _ns3__CreatePullPoint * SOAP_FMAC4 soap_in__ns3__CreatePullPoint(struct soap*, const char*, _ns3__CreatePullPoint *, const char*);
SOAP_FMAC1 _ns3__CreatePullPoint * SOAP_FMAC2 soap_instantiate__ns3__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__CreatePullPoint * soap_new__ns3__CreatePullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__CreatePullPoint(soap, n, NULL, NULL, NULL);
}

inline _ns3__CreatePullPoint * soap_new_req__ns3__CreatePullPoint(
	struct soap *soap)
{
	_ns3__CreatePullPoint *_p = soap_new__ns3__CreatePullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__CreatePullPoint * soap_new_set__ns3__CreatePullPoint(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	_ns3__CreatePullPoint *_p = soap_new__ns3__CreatePullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__CreatePullPoint::__any = __any;
		_p->_ns3__CreatePullPoint::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__ns3__CreatePullPoint(struct soap *soap, _ns3__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreatePullPoint", p->soap_type() == SOAP_TYPE__ns3__CreatePullPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__CreatePullPoint(struct soap *soap, const char *URL, _ns3__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreatePullPoint", p->soap_type() == SOAP_TYPE__ns3__CreatePullPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__CreatePullPoint(struct soap *soap, const char *URL, _ns3__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CreatePullPoint", p->soap_type() == SOAP_TYPE__ns3__CreatePullPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__CreatePullPoint * SOAP_FMAC4 soap_get__ns3__CreatePullPoint(struct soap*, _ns3__CreatePullPoint *, const char*, const char*);

inline int soap_read__ns3__CreatePullPoint(struct soap *soap, _ns3__CreatePullPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__CreatePullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__CreatePullPoint(struct soap *soap, const char *URL, _ns3__CreatePullPoint *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__CreatePullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__CreatePullPoint(struct soap *soap, _ns3__CreatePullPoint *p)
{
	if (soap_read__ns3__CreatePullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__DestroyPullPointResponse_DEFINED
#define SOAP_TYPE__ns3__DestroyPullPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DestroyPullPointResponse(struct soap*, const char*, int, const _ns3__DestroyPullPointResponse *, const char*);
SOAP_FMAC3 _ns3__DestroyPullPointResponse * SOAP_FMAC4 soap_in__ns3__DestroyPullPointResponse(struct soap*, const char*, _ns3__DestroyPullPointResponse *, const char*);
SOAP_FMAC1 _ns3__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__ns3__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__DestroyPullPointResponse * soap_new__ns3__DestroyPullPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__DestroyPullPointResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__DestroyPullPointResponse * soap_new_req__ns3__DestroyPullPointResponse(
	struct soap *soap)
{
	_ns3__DestroyPullPointResponse *_p = soap_new__ns3__DestroyPullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__DestroyPullPointResponse * soap_new_set__ns3__DestroyPullPointResponse(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	_ns3__DestroyPullPointResponse *_p = soap_new__ns3__DestroyPullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__DestroyPullPointResponse::__any = __any;
		_p->_ns3__DestroyPullPointResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__ns3__DestroyPullPointResponse(struct soap *soap, _ns3__DestroyPullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DestroyPullPointResponse", p->soap_type() == SOAP_TYPE__ns3__DestroyPullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__DestroyPullPointResponse(struct soap *soap, const char *URL, _ns3__DestroyPullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DestroyPullPointResponse", p->soap_type() == SOAP_TYPE__ns3__DestroyPullPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__DestroyPullPointResponse(struct soap *soap, const char *URL, _ns3__DestroyPullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DestroyPullPointResponse", p->soap_type() == SOAP_TYPE__ns3__DestroyPullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__DestroyPullPointResponse * SOAP_FMAC4 soap_get__ns3__DestroyPullPointResponse(struct soap*, _ns3__DestroyPullPointResponse *, const char*, const char*);

inline int soap_read__ns3__DestroyPullPointResponse(struct soap *soap, _ns3__DestroyPullPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__DestroyPullPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__DestroyPullPointResponse(struct soap *soap, const char *URL, _ns3__DestroyPullPointResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__DestroyPullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__DestroyPullPointResponse(struct soap *soap, _ns3__DestroyPullPointResponse *p)
{
	if (soap_read__ns3__DestroyPullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__DestroyPullPoint_DEFINED
#define SOAP_TYPE__ns3__DestroyPullPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DestroyPullPoint(struct soap*, const char*, int, const _ns3__DestroyPullPoint *, const char*);
SOAP_FMAC3 _ns3__DestroyPullPoint * SOAP_FMAC4 soap_in__ns3__DestroyPullPoint(struct soap*, const char*, _ns3__DestroyPullPoint *, const char*);
SOAP_FMAC1 _ns3__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__ns3__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__DestroyPullPoint * soap_new__ns3__DestroyPullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__DestroyPullPoint(soap, n, NULL, NULL, NULL);
}

inline _ns3__DestroyPullPoint * soap_new_req__ns3__DestroyPullPoint(
	struct soap *soap)
{
	_ns3__DestroyPullPoint *_p = soap_new__ns3__DestroyPullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__DestroyPullPoint * soap_new_set__ns3__DestroyPullPoint(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	_ns3__DestroyPullPoint *_p = soap_new__ns3__DestroyPullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__DestroyPullPoint::__any = __any;
		_p->_ns3__DestroyPullPoint::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__ns3__DestroyPullPoint(struct soap *soap, _ns3__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DestroyPullPoint", p->soap_type() == SOAP_TYPE__ns3__DestroyPullPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__DestroyPullPoint(struct soap *soap, const char *URL, _ns3__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DestroyPullPoint", p->soap_type() == SOAP_TYPE__ns3__DestroyPullPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__DestroyPullPoint(struct soap *soap, const char *URL, _ns3__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DestroyPullPoint", p->soap_type() == SOAP_TYPE__ns3__DestroyPullPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__DestroyPullPoint * SOAP_FMAC4 soap_get__ns3__DestroyPullPoint(struct soap*, _ns3__DestroyPullPoint *, const char*, const char*);

inline int soap_read__ns3__DestroyPullPoint(struct soap *soap, _ns3__DestroyPullPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__DestroyPullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__DestroyPullPoint(struct soap *soap, const char *URL, _ns3__DestroyPullPoint *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__DestroyPullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__DestroyPullPoint(struct soap *soap, _ns3__DestroyPullPoint *p)
{
	if (soap_read__ns3__DestroyPullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__GetMessagesResponse_DEFINED
#define SOAP_TYPE__ns3__GetMessagesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetMessagesResponse(struct soap*, const char*, int, const _ns3__GetMessagesResponse *, const char*);
SOAP_FMAC3 _ns3__GetMessagesResponse * SOAP_FMAC4 soap_in__ns3__GetMessagesResponse(struct soap*, const char*, _ns3__GetMessagesResponse *, const char*);
SOAP_FMAC1 _ns3__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__ns3__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetMessagesResponse * soap_new__ns3__GetMessagesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__GetMessagesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__GetMessagesResponse * soap_new_req__ns3__GetMessagesResponse(
	struct soap *soap)
{
	_ns3__GetMessagesResponse *_p = soap_new__ns3__GetMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__GetMessagesResponse * soap_new_set__ns3__GetMessagesResponse(
	struct soap *soap,
	const std::vector<ns3__NotificationMessageHolderType *> & NotificationMessage,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	_ns3__GetMessagesResponse *_p = soap_new__ns3__GetMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__GetMessagesResponse::NotificationMessage = NotificationMessage;
		_p->_ns3__GetMessagesResponse::__any = __any;
		_p->_ns3__GetMessagesResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__ns3__GetMessagesResponse(struct soap *soap, _ns3__GetMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMessagesResponse", p->soap_type() == SOAP_TYPE__ns3__GetMessagesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__GetMessagesResponse(struct soap *soap, const char *URL, _ns3__GetMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMessagesResponse", p->soap_type() == SOAP_TYPE__ns3__GetMessagesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__GetMessagesResponse(struct soap *soap, const char *URL, _ns3__GetMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMessagesResponse", p->soap_type() == SOAP_TYPE__ns3__GetMessagesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__GetMessagesResponse * SOAP_FMAC4 soap_get__ns3__GetMessagesResponse(struct soap*, _ns3__GetMessagesResponse *, const char*, const char*);

inline int soap_read__ns3__GetMessagesResponse(struct soap *soap, _ns3__GetMessagesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__GetMessagesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__GetMessagesResponse(struct soap *soap, const char *URL, _ns3__GetMessagesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__GetMessagesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__GetMessagesResponse(struct soap *soap, _ns3__GetMessagesResponse *p)
{
	if (soap_read__ns3__GetMessagesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__GetMessages_DEFINED
#define SOAP_TYPE__ns3__GetMessages_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetMessages(struct soap*, const char*, int, const _ns3__GetMessages *, const char*);
SOAP_FMAC3 _ns3__GetMessages * SOAP_FMAC4 soap_in__ns3__GetMessages(struct soap*, const char*, _ns3__GetMessages *, const char*);
SOAP_FMAC1 _ns3__GetMessages * SOAP_FMAC2 soap_instantiate__ns3__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetMessages * soap_new__ns3__GetMessages(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__GetMessages(soap, n, NULL, NULL, NULL);
}

inline _ns3__GetMessages * soap_new_req__ns3__GetMessages(
	struct soap *soap)
{
	_ns3__GetMessages *_p = soap_new__ns3__GetMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__GetMessages * soap_new_set__ns3__GetMessages(
	struct soap *soap,
	std::string *MaximumNumber,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_attribute& __anyAttribute)
{
	_ns3__GetMessages *_p = soap_new__ns3__GetMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__GetMessages::MaximumNumber = MaximumNumber;
		_p->_ns3__GetMessages::__any = __any;
		_p->_ns3__GetMessages::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__ns3__GetMessages(struct soap *soap, _ns3__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMessages", p->soap_type() == SOAP_TYPE__ns3__GetMessages ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__GetMessages(struct soap *soap, const char *URL, _ns3__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMessages", p->soap_type() == SOAP_TYPE__ns3__GetMessages ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__GetMessages(struct soap *soap, const char *URL, _ns3__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetMessages", p->soap_type() == SOAP_TYPE__ns3__GetMessages ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__GetMessages * SOAP_FMAC4 soap_get__ns3__GetMessages(struct soap*, _ns3__GetMessages *, const char*, const char*);

inline int soap_read__ns3__GetMessages(struct soap *soap, _ns3__GetMessages *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__GetMessages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__GetMessages(struct soap *soap, const char *URL, _ns3__GetMessages *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__GetMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__GetMessages(struct soap *soap, _ns3__GetMessages *p)
{
	if (soap_read__ns3__GetMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__GetCurrentMessageResponse_DEFINED
#define SOAP_TYPE__ns3__GetCurrentMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetCurrentMessageResponse(struct soap*, const char*, int, const _ns3__GetCurrentMessageResponse *, const char*);
SOAP_FMAC3 _ns3__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__ns3__GetCurrentMessageResponse(struct soap*, const char*, _ns3__GetCurrentMessageResponse *, const char*);
SOAP_FMAC1 _ns3__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__ns3__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetCurrentMessageResponse * soap_new__ns3__GetCurrentMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__GetCurrentMessageResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__GetCurrentMessageResponse * soap_new_req__ns3__GetCurrentMessageResponse(
	struct soap *soap)
{
	_ns3__GetCurrentMessageResponse *_p = soap_new__ns3__GetCurrentMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__GetCurrentMessageResponse * soap_new_set__ns3__GetCurrentMessageResponse(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__GetCurrentMessageResponse *_p = soap_new__ns3__GetCurrentMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__GetCurrentMessageResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__GetCurrentMessageResponse(struct soap *soap, _ns3__GetCurrentMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetCurrentMessageResponse", p->soap_type() == SOAP_TYPE__ns3__GetCurrentMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__GetCurrentMessageResponse(struct soap *soap, const char *URL, _ns3__GetCurrentMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetCurrentMessageResponse", p->soap_type() == SOAP_TYPE__ns3__GetCurrentMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__GetCurrentMessageResponse(struct soap *soap, const char *URL, _ns3__GetCurrentMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetCurrentMessageResponse", p->soap_type() == SOAP_TYPE__ns3__GetCurrentMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__ns3__GetCurrentMessageResponse(struct soap*, _ns3__GetCurrentMessageResponse *, const char*, const char*);

inline int soap_read__ns3__GetCurrentMessageResponse(struct soap *soap, _ns3__GetCurrentMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__GetCurrentMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__GetCurrentMessageResponse(struct soap *soap, const char *URL, _ns3__GetCurrentMessageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__GetCurrentMessageResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__GetCurrentMessageResponse(struct soap *soap, _ns3__GetCurrentMessageResponse *p)
{
	if (soap_read__ns3__GetCurrentMessageResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__GetCurrentMessage_DEFINED
#define SOAP_TYPE__ns3__GetCurrentMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetCurrentMessage(struct soap*, const char*, int, const _ns3__GetCurrentMessage *, const char*);
SOAP_FMAC3 _ns3__GetCurrentMessage * SOAP_FMAC4 soap_in__ns3__GetCurrentMessage(struct soap*, const char*, _ns3__GetCurrentMessage *, const char*);
SOAP_FMAC1 _ns3__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__ns3__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetCurrentMessage * soap_new__ns3__GetCurrentMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__GetCurrentMessage(soap, n, NULL, NULL, NULL);
}

inline _ns3__GetCurrentMessage * soap_new_req__ns3__GetCurrentMessage(
	struct soap *soap,
	ns3__TopicExpressionType *Topic)
{
	_ns3__GetCurrentMessage *_p = soap_new__ns3__GetCurrentMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__GetCurrentMessage::Topic = Topic;
	}
	return _p;
}

inline _ns3__GetCurrentMessage * soap_new_set__ns3__GetCurrentMessage(
	struct soap *soap,
	ns3__TopicExpressionType *Topic,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__GetCurrentMessage *_p = soap_new__ns3__GetCurrentMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__GetCurrentMessage::Topic = Topic;
		_p->_ns3__GetCurrentMessage::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__GetCurrentMessage(struct soap *soap, _ns3__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetCurrentMessage", p->soap_type() == SOAP_TYPE__ns3__GetCurrentMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__GetCurrentMessage(struct soap *soap, const char *URL, _ns3__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetCurrentMessage", p->soap_type() == SOAP_TYPE__ns3__GetCurrentMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__GetCurrentMessage(struct soap *soap, const char *URL, _ns3__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:GetCurrentMessage", p->soap_type() == SOAP_TYPE__ns3__GetCurrentMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__GetCurrentMessage * SOAP_FMAC4 soap_get__ns3__GetCurrentMessage(struct soap*, _ns3__GetCurrentMessage *, const char*, const char*);

inline int soap_read__ns3__GetCurrentMessage(struct soap *soap, _ns3__GetCurrentMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__GetCurrentMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__GetCurrentMessage(struct soap *soap, const char *URL, _ns3__GetCurrentMessage *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__GetCurrentMessage(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__GetCurrentMessage(struct soap *soap, _ns3__GetCurrentMessage *p)
{
	if (soap_read__ns3__GetCurrentMessage(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__SubscribeResponse_DEFINED
#define SOAP_TYPE__ns3__SubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscribeResponse(struct soap*, const char*, int, const _ns3__SubscribeResponse *, const char*);
SOAP_FMAC3 _ns3__SubscribeResponse * SOAP_FMAC4 soap_in__ns3__SubscribeResponse(struct soap*, const char*, _ns3__SubscribeResponse *, const char*);
SOAP_FMAC1 _ns3__SubscribeResponse * SOAP_FMAC2 soap_instantiate__ns3__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscribeResponse * soap_new__ns3__SubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__SubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__SubscribeResponse * soap_new_req__ns3__SubscribeResponse(
	struct soap *soap,
	ns6__EndpointReferenceType *SubscriptionReference)
{
	_ns3__SubscribeResponse *_p = soap_new__ns3__SubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__SubscribeResponse::SubscriptionReference = SubscriptionReference;
	}
	return _p;
}

inline _ns3__SubscribeResponse * soap_new_set__ns3__SubscribeResponse(
	struct soap *soap,
	ns6__EndpointReferenceType *SubscriptionReference,
	time_t *CurrentTime,
	time_t *TerminationTime,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__SubscribeResponse *_p = soap_new__ns3__SubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__SubscribeResponse::SubscriptionReference = SubscriptionReference;
		_p->_ns3__SubscribeResponse::CurrentTime = CurrentTime;
		_p->_ns3__SubscribeResponse::TerminationTime = TerminationTime;
		_p->_ns3__SubscribeResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__SubscribeResponse(struct soap *soap, _ns3__SubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscribeResponse", p->soap_type() == SOAP_TYPE__ns3__SubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__SubscribeResponse(struct soap *soap, const char *URL, _ns3__SubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscribeResponse", p->soap_type() == SOAP_TYPE__ns3__SubscribeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__SubscribeResponse(struct soap *soap, const char *URL, _ns3__SubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscribeResponse", p->soap_type() == SOAP_TYPE__ns3__SubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__SubscribeResponse * SOAP_FMAC4 soap_get__ns3__SubscribeResponse(struct soap*, _ns3__SubscribeResponse *, const char*, const char*);

inline int soap_read__ns3__SubscribeResponse(struct soap *soap, _ns3__SubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__SubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__SubscribeResponse(struct soap *soap, const char *URL, _ns3__SubscribeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__SubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__SubscribeResponse(struct soap *soap, _ns3__SubscribeResponse *p)
{
	if (soap_read__ns3__SubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__Subscribe_DEFINED
#define SOAP_TYPE__ns3__Subscribe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Subscribe(struct soap*, const char*, int, const _ns3__Subscribe *, const char*);
SOAP_FMAC3 _ns3__Subscribe * SOAP_FMAC4 soap_in__ns3__Subscribe(struct soap*, const char*, _ns3__Subscribe *, const char*);
SOAP_FMAC1 _ns3__Subscribe * SOAP_FMAC2 soap_instantiate__ns3__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Subscribe * soap_new__ns3__Subscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__Subscribe(soap, n, NULL, NULL, NULL);
}

inline _ns3__Subscribe * soap_new_req__ns3__Subscribe(
	struct soap *soap,
	ns6__EndpointReferenceType *ConsumerReference)
{
	_ns3__Subscribe *_p = soap_new__ns3__Subscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Subscribe::ConsumerReference = ConsumerReference;
	}
	return _p;
}

inline _ns3__Subscribe * soap_new_set__ns3__Subscribe(
	struct soap *soap,
	ns6__EndpointReferenceType *ConsumerReference,
	ns3__FilterType *Filter,
	std::string *InitialTerminationTime,
	_ns3__Subscribe_SubscriptionPolicy *SubscriptionPolicy,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__Subscribe *_p = soap_new__ns3__Subscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Subscribe::ConsumerReference = ConsumerReference;
		_p->_ns3__Subscribe::Filter = Filter;
		_p->_ns3__Subscribe::InitialTerminationTime = InitialTerminationTime;
		_p->_ns3__Subscribe::SubscriptionPolicy = SubscriptionPolicy;
		_p->_ns3__Subscribe::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__Subscribe(struct soap *soap, _ns3__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Subscribe", p->soap_type() == SOAP_TYPE__ns3__Subscribe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__Subscribe(struct soap *soap, const char *URL, _ns3__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Subscribe", p->soap_type() == SOAP_TYPE__ns3__Subscribe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__Subscribe(struct soap *soap, const char *URL, _ns3__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Subscribe", p->soap_type() == SOAP_TYPE__ns3__Subscribe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__Subscribe * SOAP_FMAC4 soap_get__ns3__Subscribe(struct soap*, _ns3__Subscribe *, const char*, const char*);

inline int soap_read__ns3__Subscribe(struct soap *soap, _ns3__Subscribe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__Subscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__Subscribe(struct soap *soap, const char *URL, _ns3__Subscribe *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__Subscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__Subscribe(struct soap *soap, _ns3__Subscribe *p)
{
	if (soap_read__ns3__Subscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__UseRaw_DEFINED
#define SOAP_TYPE__ns3__UseRaw_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__UseRaw(struct soap*, const char*, int, const _ns3__UseRaw *, const char*);
SOAP_FMAC3 _ns3__UseRaw * SOAP_FMAC4 soap_in__ns3__UseRaw(struct soap*, const char*, _ns3__UseRaw *, const char*);
SOAP_FMAC1 _ns3__UseRaw * SOAP_FMAC2 soap_instantiate__ns3__UseRaw(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__UseRaw * soap_new__ns3__UseRaw(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__UseRaw(soap, n, NULL, NULL, NULL);
}

inline _ns3__UseRaw * soap_new_req__ns3__UseRaw(
	struct soap *soap)
{
	_ns3__UseRaw *_p = soap_new__ns3__UseRaw(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__UseRaw * soap_new_set__ns3__UseRaw(
	struct soap *soap)
{
	_ns3__UseRaw *_p = soap_new__ns3__UseRaw(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns3__UseRaw(struct soap *soap, _ns3__UseRaw const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UseRaw", p->soap_type() == SOAP_TYPE__ns3__UseRaw ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__UseRaw(struct soap *soap, const char *URL, _ns3__UseRaw const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UseRaw", p->soap_type() == SOAP_TYPE__ns3__UseRaw ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__UseRaw(struct soap *soap, const char *URL, _ns3__UseRaw const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UseRaw", p->soap_type() == SOAP_TYPE__ns3__UseRaw ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__UseRaw * SOAP_FMAC4 soap_get__ns3__UseRaw(struct soap*, _ns3__UseRaw *, const char*, const char*);

inline int soap_read__ns3__UseRaw(struct soap *soap, _ns3__UseRaw *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__UseRaw(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__UseRaw(struct soap *soap, const char *URL, _ns3__UseRaw *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__UseRaw(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__UseRaw(struct soap *soap, _ns3__UseRaw *p)
{
	if (soap_read__ns3__UseRaw(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__Notify_DEFINED
#define SOAP_TYPE__ns3__Notify_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Notify(struct soap*, const char*, int, const _ns3__Notify *, const char*);
SOAP_FMAC3 _ns3__Notify * SOAP_FMAC4 soap_in__ns3__Notify(struct soap*, const char*, _ns3__Notify *, const char*);
SOAP_FMAC1 _ns3__Notify * SOAP_FMAC2 soap_instantiate__ns3__Notify(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__Notify * soap_new__ns3__Notify(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__Notify(soap, n, NULL, NULL, NULL);
}

inline _ns3__Notify * soap_new_req__ns3__Notify(
	struct soap *soap,
	const std::vector<ns3__NotificationMessageHolderType *> & NotificationMessage)
{
	_ns3__Notify *_p = soap_new__ns3__Notify(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Notify::NotificationMessage = NotificationMessage;
	}
	return _p;
}

inline _ns3__Notify * soap_new_set__ns3__Notify(
	struct soap *soap,
	const std::vector<ns3__NotificationMessageHolderType *> & NotificationMessage,
	const std::vector<struct soap_dom_element> & __any)
{
	_ns3__Notify *_p = soap_new__ns3__Notify(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__Notify::NotificationMessage = NotificationMessage;
		_p->_ns3__Notify::__any = __any;
	}
	return _p;
}

inline int soap_write__ns3__Notify(struct soap *soap, _ns3__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Notify", p->soap_type() == SOAP_TYPE__ns3__Notify ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__Notify(struct soap *soap, const char *URL, _ns3__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Notify", p->soap_type() == SOAP_TYPE__ns3__Notify ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__Notify(struct soap *soap, const char *URL, _ns3__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Notify", p->soap_type() == SOAP_TYPE__ns3__Notify ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__Notify * SOAP_FMAC4 soap_get__ns3__Notify(struct soap*, _ns3__Notify *, const char*, const char*);

inline int soap_read__ns3__Notify(struct soap *soap, _ns3__Notify *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__Notify(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__Notify(struct soap *soap, const char *URL, _ns3__Notify *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__Notify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__Notify(struct soap *soap, _ns3__Notify *p)
{
	if (soap_read__ns3__Notify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__SubscriptionManagerRP_DEFINED
#define SOAP_TYPE__ns3__SubscriptionManagerRP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SubscriptionManagerRP(struct soap*, const char*, int, const _ns3__SubscriptionManagerRP *, const char*);
SOAP_FMAC3 _ns3__SubscriptionManagerRP * SOAP_FMAC4 soap_in__ns3__SubscriptionManagerRP(struct soap*, const char*, _ns3__SubscriptionManagerRP *, const char*);
SOAP_FMAC1 _ns3__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__ns3__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SubscriptionManagerRP * soap_new__ns3__SubscriptionManagerRP(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__SubscriptionManagerRP(soap, n, NULL, NULL, NULL);
}

inline _ns3__SubscriptionManagerRP * soap_new_req__ns3__SubscriptionManagerRP(
	struct soap *soap,
	ns6__EndpointReferenceType *ConsumerReference)
{
	_ns3__SubscriptionManagerRP *_p = soap_new__ns3__SubscriptionManagerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__SubscriptionManagerRP::ConsumerReference = ConsumerReference;
	}
	return _p;
}

inline _ns3__SubscriptionManagerRP * soap_new_set__ns3__SubscriptionManagerRP(
	struct soap *soap,
	ns6__EndpointReferenceType *ConsumerReference,
	ns3__FilterType *Filter,
	ns3__SubscriptionPolicyType *SubscriptionPolicy,
	time_t *CreationTime)
{
	_ns3__SubscriptionManagerRP *_p = soap_new__ns3__SubscriptionManagerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__SubscriptionManagerRP::ConsumerReference = ConsumerReference;
		_p->_ns3__SubscriptionManagerRP::Filter = Filter;
		_p->_ns3__SubscriptionManagerRP::SubscriptionPolicy = SubscriptionPolicy;
		_p->_ns3__SubscriptionManagerRP::CreationTime = CreationTime;
	}
	return _p;
}

inline int soap_write__ns3__SubscriptionManagerRP(struct soap *soap, _ns3__SubscriptionManagerRP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionManagerRP", p->soap_type() == SOAP_TYPE__ns3__SubscriptionManagerRP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__SubscriptionManagerRP(struct soap *soap, const char *URL, _ns3__SubscriptionManagerRP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionManagerRP", p->soap_type() == SOAP_TYPE__ns3__SubscriptionManagerRP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__SubscriptionManagerRP(struct soap *soap, const char *URL, _ns3__SubscriptionManagerRP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionManagerRP", p->soap_type() == SOAP_TYPE__ns3__SubscriptionManagerRP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__SubscriptionManagerRP * SOAP_FMAC4 soap_get__ns3__SubscriptionManagerRP(struct soap*, _ns3__SubscriptionManagerRP *, const char*, const char*);

inline int soap_read__ns3__SubscriptionManagerRP(struct soap *soap, _ns3__SubscriptionManagerRP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__SubscriptionManagerRP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__SubscriptionManagerRP(struct soap *soap, const char *URL, _ns3__SubscriptionManagerRP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__SubscriptionManagerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__SubscriptionManagerRP(struct soap *soap, _ns3__SubscriptionManagerRP *p)
{
	if (soap_read__ns3__SubscriptionManagerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__NotificationProducerRP_DEFINED
#define SOAP_TYPE__ns3__NotificationProducerRP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__NotificationProducerRP(struct soap*, const char*, int, const _ns3__NotificationProducerRP *, const char*);
SOAP_FMAC3 _ns3__NotificationProducerRP * SOAP_FMAC4 soap_in__ns3__NotificationProducerRP(struct soap*, const char*, _ns3__NotificationProducerRP *, const char*);
SOAP_FMAC1 _ns3__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__ns3__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__NotificationProducerRP * soap_new__ns3__NotificationProducerRP(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__NotificationProducerRP(soap, n, NULL, NULL, NULL);
}

inline _ns3__NotificationProducerRP * soap_new_req__ns3__NotificationProducerRP(
	struct soap *soap)
{
	_ns3__NotificationProducerRP *_p = soap_new__ns3__NotificationProducerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__NotificationProducerRP * soap_new_set__ns3__NotificationProducerRP(
	struct soap *soap,
	const std::vector<ns3__TopicExpressionType *> & TopicExpression,
	bool *FixedTopicSet,
	const std::vector<std::string> & TopicExpressionDialect,
	ns2__TopicSetType *ns2__TopicSet)
{
	_ns3__NotificationProducerRP *_p = soap_new__ns3__NotificationProducerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__NotificationProducerRP::TopicExpression = TopicExpression;
		_p->_ns3__NotificationProducerRP::FixedTopicSet = FixedTopicSet;
		_p->_ns3__NotificationProducerRP::TopicExpressionDialect = TopicExpressionDialect;
		_p->_ns3__NotificationProducerRP::ns2__TopicSet = ns2__TopicSet;
	}
	return _p;
}

inline int soap_write__ns3__NotificationProducerRP(struct soap *soap, _ns3__NotificationProducerRP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationProducerRP", p->soap_type() == SOAP_TYPE__ns3__NotificationProducerRP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__NotificationProducerRP(struct soap *soap, const char *URL, _ns3__NotificationProducerRP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationProducerRP", p->soap_type() == SOAP_TYPE__ns3__NotificationProducerRP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__NotificationProducerRP(struct soap *soap, const char *URL, _ns3__NotificationProducerRP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationProducerRP", p->soap_type() == SOAP_TYPE__ns3__NotificationProducerRP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__NotificationProducerRP * SOAP_FMAC4 soap_get__ns3__NotificationProducerRP(struct soap*, _ns3__NotificationProducerRP *, const char*, const char*);

inline int soap_read__ns3__NotificationProducerRP(struct soap *soap, _ns3__NotificationProducerRP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__NotificationProducerRP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__NotificationProducerRP(struct soap *soap, const char *URL, _ns3__NotificationProducerRP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__NotificationProducerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__NotificationProducerRP(struct soap *soap, _ns3__NotificationProducerRP *p)
{
	if (soap_read__ns3__NotificationProducerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ResumeFailedFaultType_DEFINED
#define SOAP_TYPE_ns3__ResumeFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ResumeFailedFaultType(struct soap*, const char*, int, const ns3__ResumeFailedFaultType *, const char*);
SOAP_FMAC3 ns3__ResumeFailedFaultType * SOAP_FMAC4 soap_in_ns3__ResumeFailedFaultType(struct soap*, const char*, ns3__ResumeFailedFaultType *, const char*);
SOAP_FMAC1 ns3__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_ns3__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ResumeFailedFaultType * soap_new_ns3__ResumeFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ResumeFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__ResumeFailedFaultType * soap_new_req_ns3__ResumeFailedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__ResumeFailedFaultType *_p = soap_new_ns3__ResumeFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__ResumeFailedFaultType * soap_new_set_ns3__ResumeFailedFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__ResumeFailedFaultType *_p = soap_new_ns3__ResumeFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__ResumeFailedFaultType(struct soap *soap, ns3__ResumeFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__ResumeFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ResumeFailedFaultType(struct soap *soap, const char *URL, ns3__ResumeFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__ResumeFailedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ResumeFailedFaultType(struct soap *soap, const char *URL, ns3__ResumeFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResumeFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__ResumeFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ResumeFailedFaultType * SOAP_FMAC4 soap_get_ns3__ResumeFailedFaultType(struct soap*, ns3__ResumeFailedFaultType *, const char*, const char*);

inline int soap_read_ns3__ResumeFailedFaultType(struct soap *soap, ns3__ResumeFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ResumeFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ResumeFailedFaultType(struct soap *soap, const char *URL, ns3__ResumeFailedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ResumeFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ResumeFailedFaultType(struct soap *soap, ns3__ResumeFailedFaultType *p)
{
	if (soap_read_ns3__ResumeFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PauseFailedFaultType_DEFINED
#define SOAP_TYPE_ns3__PauseFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PauseFailedFaultType(struct soap*, const char*, int, const ns3__PauseFailedFaultType *, const char*);
SOAP_FMAC3 ns3__PauseFailedFaultType * SOAP_FMAC4 soap_in_ns3__PauseFailedFaultType(struct soap*, const char*, ns3__PauseFailedFaultType *, const char*);
SOAP_FMAC1 ns3__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_ns3__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PauseFailedFaultType * soap_new_ns3__PauseFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PauseFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__PauseFailedFaultType * soap_new_req_ns3__PauseFailedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__PauseFailedFaultType *_p = soap_new_ns3__PauseFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__PauseFailedFaultType * soap_new_set_ns3__PauseFailedFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__PauseFailedFaultType *_p = soap_new_ns3__PauseFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__PauseFailedFaultType(struct soap *soap, ns3__PauseFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__PauseFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PauseFailedFaultType(struct soap *soap, const char *URL, ns3__PauseFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__PauseFailedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PauseFailedFaultType(struct soap *soap, const char *URL, ns3__PauseFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PauseFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__PauseFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PauseFailedFaultType * SOAP_FMAC4 soap_get_ns3__PauseFailedFaultType(struct soap*, ns3__PauseFailedFaultType *, const char*, const char*);

inline int soap_read_ns3__PauseFailedFaultType(struct soap *soap, ns3__PauseFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PauseFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PauseFailedFaultType(struct soap *soap, const char *URL, ns3__PauseFailedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PauseFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PauseFailedFaultType(struct soap *soap, ns3__PauseFailedFaultType *p)
{
	if (soap_read_ns3__PauseFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType_DEFINED
#define SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToDestroySubscriptionFaultType(struct soap*, const char*, int, const ns3__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_ns3__UnableToDestroySubscriptionFaultType(struct soap*, const char*, ns3__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC1 ns3__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToDestroySubscriptionFaultType * soap_new_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnableToDestroySubscriptionFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnableToDestroySubscriptionFaultType * soap_new_req_ns3__UnableToDestroySubscriptionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__UnableToDestroySubscriptionFaultType *_p = soap_new_ns3__UnableToDestroySubscriptionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnableToDestroySubscriptionFaultType * soap_new_set_ns3__UnableToDestroySubscriptionFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnableToDestroySubscriptionFaultType *_p = soap_new_ns3__UnableToDestroySubscriptionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, ns3__UnableToDestroySubscriptionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *URL, ns3__UnableToDestroySubscriptionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *URL, ns3__UnableToDestroySubscriptionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToDestroySubscriptionFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToDestroySubscriptionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_ns3__UnableToDestroySubscriptionFaultType(struct soap*, ns3__UnableToDestroySubscriptionFaultType *, const char*, const char*);

inline int soap_read_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, ns3__UnableToDestroySubscriptionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnableToDestroySubscriptionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *URL, ns3__UnableToDestroySubscriptionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnableToDestroySubscriptionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnableToDestroySubscriptionFaultType(struct soap *soap, ns3__UnableToDestroySubscriptionFaultType *p)
{
	if (soap_read_ns3__UnableToDestroySubscriptionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnacceptableTerminationTimeFaultType(struct soap*, const char*, int, const ns3__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC3 ns3__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_ns3__UnacceptableTerminationTimeFaultType(struct soap*, const char*, ns3__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC1 ns3__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnacceptableTerminationTimeFaultType * soap_new_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnacceptableTerminationTimeFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnacceptableTerminationTimeFaultType * soap_new_req_ns3__UnacceptableTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t Timestamp__1)
{
	ns3__UnacceptableTerminationTimeFaultType *_p = soap_new_ns3__UnacceptableTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnacceptableTerminationTimeFaultType * soap_new_set_ns3__UnacceptableTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t *MaximumTime,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnacceptableTerminationTimeFaultType *_p = soap_new_ns3__UnacceptableTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->ns3__UnacceptableTerminationTimeFaultType::MaximumTime = MaximumTime;
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *URL, ns3__UnacceptableTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *URL, ns3__UnacceptableTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnacceptableTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_ns3__UnacceptableTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_ns3__UnacceptableTerminationTimeFaultType(struct soap*, ns3__UnacceptableTerminationTimeFaultType *, const char*, const char*);

inline int soap_read_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableTerminationTimeFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnacceptableTerminationTimeFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *URL, ns3__UnacceptableTerminationTimeFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnacceptableTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnacceptableTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableTerminationTimeFaultType *p)
{
	if (soap_read_ns3__UnacceptableTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnableToCreatePullPointFaultType_DEFINED
#define SOAP_TYPE_ns3__UnableToCreatePullPointFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToCreatePullPointFaultType(struct soap*, const char*, int, const ns3__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_ns3__UnableToCreatePullPointFaultType(struct soap*, const char*, ns3__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC1 ns3__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToCreatePullPointFaultType * soap_new_ns3__UnableToCreatePullPointFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnableToCreatePullPointFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnableToCreatePullPointFaultType * soap_new_req_ns3__UnableToCreatePullPointFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__UnableToCreatePullPointFaultType *_p = soap_new_ns3__UnableToCreatePullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnableToCreatePullPointFaultType * soap_new_set_ns3__UnableToCreatePullPointFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnableToCreatePullPointFaultType *_p = soap_new_ns3__UnableToCreatePullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnableToCreatePullPointFaultType(struct soap *soap, ns3__UnableToCreatePullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToCreatePullPointFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToCreatePullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnableToCreatePullPointFaultType(struct soap *soap, const char *URL, ns3__UnableToCreatePullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToCreatePullPointFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToCreatePullPointFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnableToCreatePullPointFaultType(struct soap *soap, const char *URL, ns3__UnableToCreatePullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToCreatePullPointFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToCreatePullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_ns3__UnableToCreatePullPointFaultType(struct soap*, ns3__UnableToCreatePullPointFaultType *, const char*, const char*);

inline int soap_read_ns3__UnableToCreatePullPointFaultType(struct soap *soap, ns3__UnableToCreatePullPointFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnableToCreatePullPointFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnableToCreatePullPointFaultType(struct soap *soap, const char *URL, ns3__UnableToCreatePullPointFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnableToCreatePullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnableToCreatePullPointFaultType(struct soap *soap, ns3__UnableToCreatePullPointFaultType *p)
{
	if (soap_read_ns3__UnableToCreatePullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType_DEFINED
#define SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToDestroyPullPointFaultType(struct soap*, const char*, int, const ns3__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_ns3__UnableToDestroyPullPointFaultType(struct soap*, const char*, ns3__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC1 ns3__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToDestroyPullPointFaultType * soap_new_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnableToDestroyPullPointFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnableToDestroyPullPointFaultType * soap_new_req_ns3__UnableToDestroyPullPointFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__UnableToDestroyPullPointFaultType *_p = soap_new_ns3__UnableToDestroyPullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnableToDestroyPullPointFaultType * soap_new_set_ns3__UnableToDestroyPullPointFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnableToDestroyPullPointFaultType *_p = soap_new_ns3__UnableToDestroyPullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, ns3__UnableToDestroyPullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, const char *URL, ns3__UnableToDestroyPullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, const char *URL, ns3__UnableToDestroyPullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToDestroyPullPointFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToDestroyPullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_ns3__UnableToDestroyPullPointFaultType(struct soap*, ns3__UnableToDestroyPullPointFaultType *, const char*, const char*);

inline int soap_read_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, ns3__UnableToDestroyPullPointFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnableToDestroyPullPointFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, const char *URL, ns3__UnableToDestroyPullPointFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnableToDestroyPullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnableToDestroyPullPointFaultType(struct soap *soap, ns3__UnableToDestroyPullPointFaultType *p)
{
	if (soap_read_ns3__UnableToDestroyPullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnableToGetMessagesFaultType_DEFINED
#define SOAP_TYPE_ns3__UnableToGetMessagesFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnableToGetMessagesFaultType(struct soap*, const char*, int, const ns3__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC3 ns3__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_ns3__UnableToGetMessagesFaultType(struct soap*, const char*, ns3__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC1 ns3__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnableToGetMessagesFaultType * soap_new_ns3__UnableToGetMessagesFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnableToGetMessagesFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnableToGetMessagesFaultType * soap_new_req_ns3__UnableToGetMessagesFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__UnableToGetMessagesFaultType *_p = soap_new_ns3__UnableToGetMessagesFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnableToGetMessagesFaultType * soap_new_set_ns3__UnableToGetMessagesFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnableToGetMessagesFaultType *_p = soap_new_ns3__UnableToGetMessagesFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnableToGetMessagesFaultType(struct soap *soap, ns3__UnableToGetMessagesFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToGetMessagesFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToGetMessagesFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnableToGetMessagesFaultType(struct soap *soap, const char *URL, ns3__UnableToGetMessagesFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToGetMessagesFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToGetMessagesFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnableToGetMessagesFaultType(struct soap *soap, const char *URL, ns3__UnableToGetMessagesFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnableToGetMessagesFaultType", p->soap_type() == SOAP_TYPE_ns3__UnableToGetMessagesFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_ns3__UnableToGetMessagesFaultType(struct soap*, ns3__UnableToGetMessagesFaultType *, const char*, const char*);

inline int soap_read_ns3__UnableToGetMessagesFaultType(struct soap *soap, ns3__UnableToGetMessagesFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnableToGetMessagesFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnableToGetMessagesFaultType(struct soap *soap, const char *URL, ns3__UnableToGetMessagesFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnableToGetMessagesFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnableToGetMessagesFaultType(struct soap *soap, ns3__UnableToGetMessagesFaultType *p)
{
	if (soap_read_ns3__UnableToGetMessagesFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType_DEFINED
#define SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, int, const ns3__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC3 ns3__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, ns3__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC1 ns3__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__NoCurrentMessageOnTopicFaultType * soap_new_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__NoCurrentMessageOnTopicFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__NoCurrentMessageOnTopicFaultType * soap_new_req_ns3__NoCurrentMessageOnTopicFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__NoCurrentMessageOnTopicFaultType *_p = soap_new_ns3__NoCurrentMessageOnTopicFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__NoCurrentMessageOnTopicFaultType * soap_new_set_ns3__NoCurrentMessageOnTopicFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__NoCurrentMessageOnTopicFaultType *_p = soap_new_ns3__NoCurrentMessageOnTopicFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, ns3__NoCurrentMessageOnTopicFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType", p->soap_type() == SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *URL, ns3__NoCurrentMessageOnTopicFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType", p->soap_type() == SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *URL, ns3__NoCurrentMessageOnTopicFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NoCurrentMessageOnTopicFaultType", p->soap_type() == SOAP_TYPE_ns3__NoCurrentMessageOnTopicFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_ns3__NoCurrentMessageOnTopicFaultType(struct soap*, ns3__NoCurrentMessageOnTopicFaultType *, const char*, const char*);

inline int soap_read_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, ns3__NoCurrentMessageOnTopicFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__NoCurrentMessageOnTopicFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *URL, ns3__NoCurrentMessageOnTopicFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__NoCurrentMessageOnTopicFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__NoCurrentMessageOnTopicFaultType(struct soap *soap, ns3__NoCurrentMessageOnTopicFaultType *p)
{
	if (soap_read_ns3__NoCurrentMessageOnTopicFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, int, const ns3__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC3 ns3__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, ns3__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC1 ns3__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnacceptableInitialTerminationTimeFaultType * soap_new_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnacceptableInitialTerminationTimeFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnacceptableInitialTerminationTimeFaultType * soap_new_req_ns3__UnacceptableInitialTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t Timestamp__1)
{
	ns3__UnacceptableInitialTerminationTimeFaultType *_p = soap_new_ns3__UnacceptableInitialTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnacceptableInitialTerminationTimeFaultType * soap_new_set_ns3__UnacceptableInitialTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t *MaximumTime,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnacceptableInitialTerminationTimeFaultType *_p = soap_new_ns3__UnacceptableInitialTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->ns3__UnacceptableInitialTerminationTimeFaultType::MaximumTime = MaximumTime;
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableInitialTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *URL, ns3__UnacceptableInitialTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *URL, ns3__UnacceptableInitialTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnacceptableInitialTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_ns3__UnacceptableInitialTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap*, ns3__UnacceptableInitialTerminationTimeFaultType *, const char*, const char*);

inline int soap_read_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnacceptableInitialTerminationTimeFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *URL, ns3__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnacceptableInitialTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, ns3__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (soap_read_ns3__UnacceptableInitialTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType_DEFINED
#define SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NotifyMessageNotSupportedFaultType(struct soap*, const char*, int, const ns3__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC3 ns3__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_ns3__NotifyMessageNotSupportedFaultType(struct soap*, const char*, ns3__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC1 ns3__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_ns3__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__NotifyMessageNotSupportedFaultType * soap_new_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__NotifyMessageNotSupportedFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__NotifyMessageNotSupportedFaultType * soap_new_req_ns3__NotifyMessageNotSupportedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__NotifyMessageNotSupportedFaultType *_p = soap_new_ns3__NotifyMessageNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__NotifyMessageNotSupportedFaultType * soap_new_set_ns3__NotifyMessageNotSupportedFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__NotifyMessageNotSupportedFaultType *_p = soap_new_ns3__NotifyMessageNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, ns3__NotifyMessageNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType", p->soap_type() == SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *URL, ns3__NotifyMessageNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType", p->soap_type() == SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *URL, ns3__NotifyMessageNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotifyMessageNotSupportedFaultType", p->soap_type() == SOAP_TYPE_ns3__NotifyMessageNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_ns3__NotifyMessageNotSupportedFaultType(struct soap*, ns3__NotifyMessageNotSupportedFaultType *, const char*, const char*);

inline int soap_read_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, ns3__NotifyMessageNotSupportedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__NotifyMessageNotSupportedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *URL, ns3__NotifyMessageNotSupportedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__NotifyMessageNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__NotifyMessageNotSupportedFaultType(struct soap *soap, ns3__NotifyMessageNotSupportedFaultType *p)
{
	if (soap_read_ns3__NotifyMessageNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnsupportedPolicyRequestFaultType(struct soap*, const char*, int, const ns3__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 ns3__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_ns3__UnsupportedPolicyRequestFaultType(struct soap*, const char*, ns3__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC1 ns3__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnsupportedPolicyRequestFaultType * soap_new_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnsupportedPolicyRequestFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnsupportedPolicyRequestFaultType * soap_new_req_ns3__UnsupportedPolicyRequestFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__UnsupportedPolicyRequestFaultType *_p = soap_new_ns3__UnsupportedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnsupportedPolicyRequestFaultType * soap_new_set_ns3__UnsupportedPolicyRequestFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnsupportedPolicy,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnsupportedPolicyRequestFaultType *_p = soap_new_ns3__UnsupportedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UnsupportedPolicyRequestFaultType::UnsupportedPolicy = UnsupportedPolicy;
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, ns3__UnsupportedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *URL, ns3__UnsupportedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *URL, ns3__UnsupportedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnsupportedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_ns3__UnsupportedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_ns3__UnsupportedPolicyRequestFaultType(struct soap*, ns3__UnsupportedPolicyRequestFaultType *, const char*, const char*);

inline int soap_read_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, ns3__UnsupportedPolicyRequestFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnsupportedPolicyRequestFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *URL, ns3__UnsupportedPolicyRequestFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnsupportedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnsupportedPolicyRequestFaultType(struct soap *soap, ns3__UnsupportedPolicyRequestFaultType *p)
{
	if (soap_read_ns3__UnsupportedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, int, const ns3__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 ns3__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, ns3__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC1 ns3__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__UnrecognizedPolicyRequestFaultType * soap_new_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__UnrecognizedPolicyRequestFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__UnrecognizedPolicyRequestFaultType * soap_new_req_ns3__UnrecognizedPolicyRequestFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__UnrecognizedPolicyRequestFaultType *_p = soap_new_ns3__UnrecognizedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__UnrecognizedPolicyRequestFaultType * soap_new_set_ns3__UnrecognizedPolicyRequestFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnrecognizedPolicy,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__UnrecognizedPolicyRequestFaultType *_p = soap_new_ns3__UnrecognizedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy = UnrecognizedPolicy;
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, ns3__UnrecognizedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *URL, ns3__UnrecognizedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *URL, ns3__UnrecognizedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:UnrecognizedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_ns3__UnrecognizedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_ns3__UnrecognizedPolicyRequestFaultType(struct soap*, ns3__UnrecognizedPolicyRequestFaultType *, const char*, const char*);

inline int soap_read_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, ns3__UnrecognizedPolicyRequestFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__UnrecognizedPolicyRequestFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *URL, ns3__UnrecognizedPolicyRequestFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__UnrecognizedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__UnrecognizedPolicyRequestFaultType(struct soap *soap, ns3__UnrecognizedPolicyRequestFaultType *p)
{
	if (soap_read_ns3__UnrecognizedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType_DEFINED
#define SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidMessageContentExpressionFaultType(struct soap*, const char*, int, const ns3__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_ns3__InvalidMessageContentExpressionFaultType(struct soap*, const char*, ns3__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC1 ns3__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidMessageContentExpressionFaultType * soap_new_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InvalidMessageContentExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__InvalidMessageContentExpressionFaultType * soap_new_req_ns3__InvalidMessageContentExpressionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__InvalidMessageContentExpressionFaultType *_p = soap_new_ns3__InvalidMessageContentExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__InvalidMessageContentExpressionFaultType * soap_new_set_ns3__InvalidMessageContentExpressionFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__InvalidMessageContentExpressionFaultType *_p = soap_new_ns3__InvalidMessageContentExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, ns3__InvalidMessageContentExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidMessageContentExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidMessageContentExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidMessageContentExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidMessageContentExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_ns3__InvalidMessageContentExpressionFaultType(struct soap*, ns3__InvalidMessageContentExpressionFaultType *, const char*, const char*);

inline int soap_read_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, ns3__InvalidMessageContentExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InvalidMessageContentExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidMessageContentExpressionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InvalidMessageContentExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InvalidMessageContentExpressionFaultType(struct soap *soap, ns3__InvalidMessageContentExpressionFaultType *p)
{
	if (soap_read_ns3__InvalidMessageContentExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType_DEFINED
#define SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, int, const ns3__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, ns3__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC1 ns3__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidProducerPropertiesExpressionFaultType * soap_new_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InvalidProducerPropertiesExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__InvalidProducerPropertiesExpressionFaultType * soap_new_req_ns3__InvalidProducerPropertiesExpressionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__InvalidProducerPropertiesExpressionFaultType *_p = soap_new_ns3__InvalidProducerPropertiesExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__InvalidProducerPropertiesExpressionFaultType * soap_new_set_ns3__InvalidProducerPropertiesExpressionFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__InvalidProducerPropertiesExpressionFaultType *_p = soap_new_ns3__InvalidProducerPropertiesExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, ns3__InvalidProducerPropertiesExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidProducerPropertiesExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidProducerPropertiesExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidProducerPropertiesExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidProducerPropertiesExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap*, ns3__InvalidProducerPropertiesExpressionFaultType *, const char*, const char*);

inline int soap_read_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, ns3__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InvalidProducerPropertiesExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InvalidProducerPropertiesExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, ns3__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (soap_read_ns3__InvalidProducerPropertiesExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType_DEFINED
#define SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, int, const ns3__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC3 ns3__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, ns3__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC1 ns3__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MultipleTopicsSpecifiedFaultType * soap_new_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MultipleTopicsSpecifiedFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__MultipleTopicsSpecifiedFaultType * soap_new_req_ns3__MultipleTopicsSpecifiedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__MultipleTopicsSpecifiedFaultType *_p = soap_new_ns3__MultipleTopicsSpecifiedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__MultipleTopicsSpecifiedFaultType * soap_new_set_ns3__MultipleTopicsSpecifiedFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__MultipleTopicsSpecifiedFaultType *_p = soap_new_ns3__MultipleTopicsSpecifiedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, ns3__MultipleTopicsSpecifiedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType", p->soap_type() == SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *URL, ns3__MultipleTopicsSpecifiedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType", p->soap_type() == SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *URL, ns3__MultipleTopicsSpecifiedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MultipleTopicsSpecifiedFaultType", p->soap_type() == SOAP_TYPE_ns3__MultipleTopicsSpecifiedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_ns3__MultipleTopicsSpecifiedFaultType(struct soap*, ns3__MultipleTopicsSpecifiedFaultType *, const char*, const char*);

inline int soap_read_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, ns3__MultipleTopicsSpecifiedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MultipleTopicsSpecifiedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *URL, ns3__MultipleTopicsSpecifiedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MultipleTopicsSpecifiedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MultipleTopicsSpecifiedFaultType(struct soap *soap, ns3__MultipleTopicsSpecifiedFaultType *p)
{
	if (soap_read_ns3__MultipleTopicsSpecifiedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TopicNotSupportedFaultType_DEFINED
#define SOAP_TYPE_ns3__TopicNotSupportedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TopicNotSupportedFaultType(struct soap*, const char*, int, const ns3__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC3 ns3__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_ns3__TopicNotSupportedFaultType(struct soap*, const char*, ns3__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC1 ns3__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_ns3__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TopicNotSupportedFaultType * soap_new_ns3__TopicNotSupportedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TopicNotSupportedFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__TopicNotSupportedFaultType * soap_new_req_ns3__TopicNotSupportedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__TopicNotSupportedFaultType *_p = soap_new_ns3__TopicNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__TopicNotSupportedFaultType * soap_new_set_ns3__TopicNotSupportedFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__TopicNotSupportedFaultType *_p = soap_new_ns3__TopicNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__TopicNotSupportedFaultType(struct soap *soap, ns3__TopicNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicNotSupportedFaultType", p->soap_type() == SOAP_TYPE_ns3__TopicNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TopicNotSupportedFaultType(struct soap *soap, const char *URL, ns3__TopicNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicNotSupportedFaultType", p->soap_type() == SOAP_TYPE_ns3__TopicNotSupportedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TopicNotSupportedFaultType(struct soap *soap, const char *URL, ns3__TopicNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicNotSupportedFaultType", p->soap_type() == SOAP_TYPE_ns3__TopicNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_ns3__TopicNotSupportedFaultType(struct soap*, ns3__TopicNotSupportedFaultType *, const char*, const char*);

inline int soap_read_ns3__TopicNotSupportedFaultType(struct soap *soap, ns3__TopicNotSupportedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TopicNotSupportedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TopicNotSupportedFaultType(struct soap *soap, const char *URL, ns3__TopicNotSupportedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TopicNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TopicNotSupportedFaultType(struct soap *soap, ns3__TopicNotSupportedFaultType *p)
{
	if (soap_read_ns3__TopicNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InvalidTopicExpressionFaultType_DEFINED
#define SOAP_TYPE_ns3__InvalidTopicExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidTopicExpressionFaultType(struct soap*, const char*, int, const ns3__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_ns3__InvalidTopicExpressionFaultType(struct soap*, const char*, ns3__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC1 ns3__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidTopicExpressionFaultType * soap_new_ns3__InvalidTopicExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InvalidTopicExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__InvalidTopicExpressionFaultType * soap_new_req_ns3__InvalidTopicExpressionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__InvalidTopicExpressionFaultType *_p = soap_new_ns3__InvalidTopicExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__InvalidTopicExpressionFaultType * soap_new_set_ns3__InvalidTopicExpressionFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__InvalidTopicExpressionFaultType *_p = soap_new_ns3__InvalidTopicExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__InvalidTopicExpressionFaultType(struct soap *soap, ns3__InvalidTopicExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidTopicExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidTopicExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InvalidTopicExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidTopicExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidTopicExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidTopicExpressionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InvalidTopicExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidTopicExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidTopicExpressionFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidTopicExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_ns3__InvalidTopicExpressionFaultType(struct soap*, ns3__InvalidTopicExpressionFaultType *, const char*, const char*);

inline int soap_read_ns3__InvalidTopicExpressionFaultType(struct soap *soap, ns3__InvalidTopicExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InvalidTopicExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InvalidTopicExpressionFaultType(struct soap *soap, const char *URL, ns3__InvalidTopicExpressionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InvalidTopicExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InvalidTopicExpressionFaultType(struct soap *soap, ns3__InvalidTopicExpressionFaultType *p)
{
	if (soap_read_ns3__InvalidTopicExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType_DEFINED
#define SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, int, const ns3__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC3 ns3__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, ns3__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC1 ns3__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TopicExpressionDialectUnknownFaultType * soap_new_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TopicExpressionDialectUnknownFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__TopicExpressionDialectUnknownFaultType * soap_new_req_ns3__TopicExpressionDialectUnknownFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__TopicExpressionDialectUnknownFaultType *_p = soap_new_ns3__TopicExpressionDialectUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__TopicExpressionDialectUnknownFaultType * soap_new_set_ns3__TopicExpressionDialectUnknownFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__TopicExpressionDialectUnknownFaultType *_p = soap_new_ns3__TopicExpressionDialectUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, ns3__TopicExpressionDialectUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType", p->soap_type() == SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *URL, ns3__TopicExpressionDialectUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType", p->soap_type() == SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *URL, ns3__TopicExpressionDialectUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicExpressionDialectUnknownFaultType", p->soap_type() == SOAP_TYPE_ns3__TopicExpressionDialectUnknownFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_ns3__TopicExpressionDialectUnknownFaultType(struct soap*, ns3__TopicExpressionDialectUnknownFaultType *, const char*, const char*);

inline int soap_read_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, ns3__TopicExpressionDialectUnknownFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TopicExpressionDialectUnknownFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *URL, ns3__TopicExpressionDialectUnknownFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TopicExpressionDialectUnknownFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TopicExpressionDialectUnknownFaultType(struct soap *soap, ns3__TopicExpressionDialectUnknownFaultType *p)
{
	if (soap_read_ns3__TopicExpressionDialectUnknownFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__InvalidFilterFaultType_DEFINED
#define SOAP_TYPE_ns3__InvalidFilterFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidFilterFaultType(struct soap*, const char*, int, const ns3__InvalidFilterFaultType *, const char*);
SOAP_FMAC3 ns3__InvalidFilterFaultType * SOAP_FMAC4 soap_in_ns3__InvalidFilterFaultType(struct soap*, const char*, ns3__InvalidFilterFaultType *, const char*);
SOAP_FMAC1 ns3__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_ns3__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__InvalidFilterFaultType * soap_new_ns3__InvalidFilterFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__InvalidFilterFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__InvalidFilterFaultType * soap_new_req_ns3__InvalidFilterFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnknownFilter,
	time_t Timestamp__1)
{
	ns3__InvalidFilterFaultType *_p = soap_new_ns3__InvalidFilterFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__InvalidFilterFaultType::UnknownFilter = UnknownFilter;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__InvalidFilterFaultType * soap_new_set_ns3__InvalidFilterFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnknownFilter,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__InvalidFilterFaultType *_p = soap_new_ns3__InvalidFilterFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__InvalidFilterFaultType::UnknownFilter = UnknownFilter;
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__InvalidFilterFaultType(struct soap *soap, ns3__InvalidFilterFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidFilterFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidFilterFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__InvalidFilterFaultType(struct soap *soap, const char *URL, ns3__InvalidFilterFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidFilterFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidFilterFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__InvalidFilterFaultType(struct soap *soap, const char *URL, ns3__InvalidFilterFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:InvalidFilterFaultType", p->soap_type() == SOAP_TYPE_ns3__InvalidFilterFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__InvalidFilterFaultType * SOAP_FMAC4 soap_get_ns3__InvalidFilterFaultType(struct soap*, ns3__InvalidFilterFaultType *, const char*, const char*);

inline int soap_read_ns3__InvalidFilterFaultType(struct soap *soap, ns3__InvalidFilterFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__InvalidFilterFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__InvalidFilterFaultType(struct soap *soap, const char *URL, ns3__InvalidFilterFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__InvalidFilterFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__InvalidFilterFaultType(struct soap *soap, ns3__InvalidFilterFaultType *p)
{
	if (soap_read_ns3__InvalidFilterFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubscribeCreationFailedFaultType_DEFINED
#define SOAP_TYPE_ns3__SubscribeCreationFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscribeCreationFailedFaultType(struct soap*, const char*, int, const ns3__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC3 ns3__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_ns3__SubscribeCreationFailedFaultType(struct soap*, const char*, ns3__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC1 ns3__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_ns3__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubscribeCreationFailedFaultType * soap_new_ns3__SubscribeCreationFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SubscribeCreationFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline ns3__SubscribeCreationFailedFaultType * soap_new_req_ns3__SubscribeCreationFailedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	ns3__SubscribeCreationFailedFaultType *_p = soap_new_ns3__SubscribeCreationFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline ns3__SubscribeCreationFailedFaultType * soap_new_set_ns3__SubscribeCreationFailedFaultType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any__1,
	time_t Timestamp__1,
	ns6__EndpointReferenceType *Originator__1,
	_ns4__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_ns4__BaseFaultType_Description> & Description__1,
	_ns4__BaseFaultType_FaultCause *FaultCause__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns3__SubscribeCreationFailedFaultType *_p = soap_new_ns3__SubscribeCreationFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__BaseFaultType::__any = __any__1;
		_p->ns4__BaseFaultType::Timestamp = Timestamp__1;
		_p->ns4__BaseFaultType::Originator = Originator__1;
		_p->ns4__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->ns4__BaseFaultType::Description = Description__1;
		_p->ns4__BaseFaultType::FaultCause = FaultCause__1;
		_p->ns4__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns3__SubscribeCreationFailedFaultType(struct soap *soap, ns3__SubscribeCreationFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscribeCreationFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__SubscribeCreationFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubscribeCreationFailedFaultType(struct soap *soap, const char *URL, ns3__SubscribeCreationFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscribeCreationFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__SubscribeCreationFailedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubscribeCreationFailedFaultType(struct soap *soap, const char *URL, ns3__SubscribeCreationFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscribeCreationFailedFaultType", p->soap_type() == SOAP_TYPE_ns3__SubscribeCreationFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_ns3__SubscribeCreationFailedFaultType(struct soap*, ns3__SubscribeCreationFailedFaultType *, const char*, const char*);

inline int soap_read_ns3__SubscribeCreationFailedFaultType(struct soap *soap, ns3__SubscribeCreationFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SubscribeCreationFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubscribeCreationFailedFaultType(struct soap *soap, const char *URL, ns3__SubscribeCreationFailedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubscribeCreationFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubscribeCreationFailedFaultType(struct soap *soap, ns3__SubscribeCreationFailedFaultType *p)
{
	if (soap_read_ns3__SubscribeCreationFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_ns3__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NotificationMessageHolderType(struct soap*, const char*, int, const ns3__NotificationMessageHolderType *, const char*);
SOAP_FMAC3 ns3__NotificationMessageHolderType * SOAP_FMAC4 soap_in_ns3__NotificationMessageHolderType(struct soap*, const char*, ns3__NotificationMessageHolderType *, const char*);
SOAP_FMAC1 ns3__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_ns3__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__NotificationMessageHolderType * soap_new_ns3__NotificationMessageHolderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__NotificationMessageHolderType(soap, n, NULL, NULL, NULL);
}

inline ns3__NotificationMessageHolderType * soap_new_req_ns3__NotificationMessageHolderType(
	struct soap *soap,
	const _ns3__NotificationMessageHolderType_Message& Message)
{
	ns3__NotificationMessageHolderType *_p = soap_new_ns3__NotificationMessageHolderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__NotificationMessageHolderType::Message = Message;
	}
	return _p;
}

inline ns3__NotificationMessageHolderType * soap_new_set_ns3__NotificationMessageHolderType(
	struct soap *soap,
	ns6__EndpointReferenceType *SubscriptionReference,
	ns3__TopicExpressionType *Topic,
	ns6__EndpointReferenceType *ProducerReference,
	const _ns3__NotificationMessageHolderType_Message& Message)
{
	ns3__NotificationMessageHolderType *_p = soap_new_ns3__NotificationMessageHolderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__NotificationMessageHolderType::SubscriptionReference = SubscriptionReference;
		_p->ns3__NotificationMessageHolderType::Topic = Topic;
		_p->ns3__NotificationMessageHolderType::ProducerReference = ProducerReference;
		_p->ns3__NotificationMessageHolderType::Message = Message;
	}
	return _p;
}

inline int soap_write_ns3__NotificationMessageHolderType(struct soap *soap, ns3__NotificationMessageHolderType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationMessageHolderType", p->soap_type() == SOAP_TYPE_ns3__NotificationMessageHolderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__NotificationMessageHolderType(struct soap *soap, const char *URL, ns3__NotificationMessageHolderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationMessageHolderType", p->soap_type() == SOAP_TYPE_ns3__NotificationMessageHolderType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__NotificationMessageHolderType(struct soap *soap, const char *URL, ns3__NotificationMessageHolderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:NotificationMessageHolderType", p->soap_type() == SOAP_TYPE_ns3__NotificationMessageHolderType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__NotificationMessageHolderType * SOAP_FMAC4 soap_get_ns3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType *, const char*, const char*);

inline int soap_read_ns3__NotificationMessageHolderType(struct soap *soap, ns3__NotificationMessageHolderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__NotificationMessageHolderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__NotificationMessageHolderType(struct soap *soap, const char *URL, ns3__NotificationMessageHolderType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__NotificationMessageHolderType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__NotificationMessageHolderType(struct soap *soap, ns3__NotificationMessageHolderType *p)
{
	if (soap_read_ns3__NotificationMessageHolderType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubscriptionPolicyType_DEFINED
#define SOAP_TYPE_ns3__SubscriptionPolicyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubscriptionPolicyType(struct soap*, const char*, int, const ns3__SubscriptionPolicyType *, const char*);
SOAP_FMAC3 ns3__SubscriptionPolicyType * SOAP_FMAC4 soap_in_ns3__SubscriptionPolicyType(struct soap*, const char*, ns3__SubscriptionPolicyType *, const char*);
SOAP_FMAC1 ns3__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_ns3__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubscriptionPolicyType * soap_new_ns3__SubscriptionPolicyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__SubscriptionPolicyType(soap, n, NULL, NULL, NULL);
}

inline ns3__SubscriptionPolicyType * soap_new_req_ns3__SubscriptionPolicyType(
	struct soap *soap)
{
	ns3__SubscriptionPolicyType *_p = soap_new_ns3__SubscriptionPolicyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__SubscriptionPolicyType * soap_new_set_ns3__SubscriptionPolicyType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	ns3__SubscriptionPolicyType *_p = soap_new_ns3__SubscriptionPolicyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubscriptionPolicyType::__any = __any;
	}
	return _p;
}

inline int soap_write_ns3__SubscriptionPolicyType(struct soap *soap, ns3__SubscriptionPolicyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionPolicyType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionPolicyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubscriptionPolicyType(struct soap *soap, const char *URL, ns3__SubscriptionPolicyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionPolicyType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionPolicyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubscriptionPolicyType(struct soap *soap, const char *URL, ns3__SubscriptionPolicyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubscriptionPolicyType", p->soap_type() == SOAP_TYPE_ns3__SubscriptionPolicyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SubscriptionPolicyType * SOAP_FMAC4 soap_get_ns3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType *, const char*, const char*);

inline int soap_read_ns3__SubscriptionPolicyType(struct soap *soap, ns3__SubscriptionPolicyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SubscriptionPolicyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubscriptionPolicyType(struct soap *soap, const char *URL, ns3__SubscriptionPolicyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubscriptionPolicyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubscriptionPolicyType(struct soap *soap, ns3__SubscriptionPolicyType *p)
{
	if (soap_read_ns3__SubscriptionPolicyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__FilterType_DEFINED
#define SOAP_TYPE_ns3__FilterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FilterType(struct soap*, const char*, int, const ns3__FilterType *, const char*);
SOAP_FMAC3 ns3__FilterType * SOAP_FMAC4 soap_in_ns3__FilterType(struct soap*, const char*, ns3__FilterType *, const char*);
SOAP_FMAC1 ns3__FilterType * SOAP_FMAC2 soap_instantiate_ns3__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FilterType * soap_new_ns3__FilterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FilterType(soap, n, NULL, NULL, NULL);
}

inline ns3__FilterType * soap_new_req_ns3__FilterType(
	struct soap *soap)
{
	ns3__FilterType *_p = soap_new_ns3__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FilterType * soap_new_set_ns3__FilterType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any)
{
	ns3__FilterType *_p = soap_new_ns3__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FilterType::__any = __any;
	}
	return _p;
}

inline int soap_write_ns3__FilterType(struct soap *soap, ns3__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FilterType", p->soap_type() == SOAP_TYPE_ns3__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FilterType(struct soap *soap, const char *URL, ns3__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FilterType", p->soap_type() == SOAP_TYPE_ns3__FilterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FilterType(struct soap *soap, const char *URL, ns3__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FilterType", p->soap_type() == SOAP_TYPE_ns3__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FilterType * SOAP_FMAC4 soap_get_ns3__FilterType(struct soap*, ns3__FilterType *, const char*, const char*);

inline int soap_read_ns3__FilterType(struct soap *soap, ns3__FilterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__FilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FilterType(struct soap *soap, const char *URL, ns3__FilterType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__FilterType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__FilterType(struct soap *soap, ns3__FilterType *p)
{
	if (soap_read_ns3__FilterType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__TopicExpressionType_DEFINED
#define SOAP_TYPE_ns3__TopicExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TopicExpressionType(struct soap*, const char*, int, const ns3__TopicExpressionType *, const char*);
SOAP_FMAC3 ns3__TopicExpressionType * SOAP_FMAC4 soap_in_ns3__TopicExpressionType(struct soap*, const char*, ns3__TopicExpressionType *, const char*);
SOAP_FMAC1 ns3__TopicExpressionType * SOAP_FMAC2 soap_instantiate_ns3__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TopicExpressionType * soap_new_ns3__TopicExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TopicExpressionType(soap, n, NULL, NULL, NULL);
}

inline ns3__TopicExpressionType * soap_new_req_ns3__TopicExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	ns3__TopicExpressionType *_p = soap_new_ns3__TopicExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TopicExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline ns3__TopicExpressionType * soap_new_set_ns3__TopicExpressionType(
	struct soap *soap,
	const struct soap_dom_element& __any,
	const std::string& Dialect,
	const struct soap_dom_attribute& __anyAttribute,
	const struct soap_dom_element& __mixed)
{
	ns3__TopicExpressionType *_p = soap_new_ns3__TopicExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TopicExpressionType::__any = __any;
		_p->ns3__TopicExpressionType::Dialect = Dialect;
		_p->ns3__TopicExpressionType::__anyAttribute = __anyAttribute;
		_p->ns3__TopicExpressionType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_ns3__TopicExpressionType(struct soap *soap, ns3__TopicExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicExpressionType", p->soap_type() == SOAP_TYPE_ns3__TopicExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TopicExpressionType(struct soap *soap, const char *URL, ns3__TopicExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicExpressionType", p->soap_type() == SOAP_TYPE_ns3__TopicExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TopicExpressionType(struct soap *soap, const char *URL, ns3__TopicExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TopicExpressionType", p->soap_type() == SOAP_TYPE_ns3__TopicExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TopicExpressionType * SOAP_FMAC4 soap_get_ns3__TopicExpressionType(struct soap*, ns3__TopicExpressionType *, const char*, const char*);

inline int soap_read_ns3__TopicExpressionType(struct soap *soap, ns3__TopicExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__TopicExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TopicExpressionType(struct soap *soap, const char *URL, ns3__TopicExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__TopicExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__TopicExpressionType(struct soap *soap, ns3__TopicExpressionType *p)
{
	if (soap_read_ns3__TopicExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__QueryExpressionType_DEFINED
#define SOAP_TYPE_ns3__QueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__QueryExpressionType(struct soap*, const char*, int, const ns3__QueryExpressionType *, const char*);
SOAP_FMAC3 ns3__QueryExpressionType * SOAP_FMAC4 soap_in_ns3__QueryExpressionType(struct soap*, const char*, ns3__QueryExpressionType *, const char*);
SOAP_FMAC1 ns3__QueryExpressionType * SOAP_FMAC2 soap_instantiate_ns3__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__QueryExpressionType * soap_new_ns3__QueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__QueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline ns3__QueryExpressionType * soap_new_req_ns3__QueryExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	ns3__QueryExpressionType *_p = soap_new_ns3__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__QueryExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline ns3__QueryExpressionType * soap_new_set_ns3__QueryExpressionType(
	struct soap *soap,
	const struct soap_dom_element& __any,
	const std::string& Dialect,
	const struct soap_dom_element& __mixed)
{
	ns3__QueryExpressionType *_p = soap_new_ns3__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__QueryExpressionType::__any = __any;
		_p->ns3__QueryExpressionType::Dialect = Dialect;
		_p->ns3__QueryExpressionType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_ns3__QueryExpressionType(struct soap *soap, ns3__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:QueryExpressionType", p->soap_type() == SOAP_TYPE_ns3__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__QueryExpressionType(struct soap *soap, const char *URL, ns3__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:QueryExpressionType", p->soap_type() == SOAP_TYPE_ns3__QueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__QueryExpressionType(struct soap *soap, const char *URL, ns3__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:QueryExpressionType", p->soap_type() == SOAP_TYPE_ns3__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__QueryExpressionType * SOAP_FMAC4 soap_get_ns3__QueryExpressionType(struct soap*, ns3__QueryExpressionType *, const char*, const char*);

inline int soap_read_ns3__QueryExpressionType(struct soap *soap, ns3__QueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__QueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__QueryExpressionType(struct soap *soap, const char *URL, ns3__QueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__QueryExpressionType(struct soap *soap, ns3__QueryExpressionType *p)
{
	if (soap_read_ns3__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__TopicSetType_DEFINED
#define SOAP_TYPE_ns2__TopicSetType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TopicSetType(struct soap*, const char*, int, const ns2__TopicSetType *, const char*);
SOAP_FMAC3 ns2__TopicSetType * SOAP_FMAC4 soap_in_ns2__TopicSetType(struct soap*, const char*, ns2__TopicSetType *, const char*);
SOAP_FMAC1 ns2__TopicSetType * SOAP_FMAC2 soap_instantiate_ns2__TopicSetType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TopicSetType * soap_new_ns2__TopicSetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TopicSetType(soap, n, NULL, NULL, NULL);
}

inline ns2__TopicSetType * soap_new_req_ns2__TopicSetType(
	struct soap *soap)
{
	ns2__TopicSetType *_p = soap_new_ns2__TopicSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__TopicSetType * soap_new_set_ns2__TopicSetType(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	ns2__Documentation *documentation__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns2__TopicSetType *_p = soap_new_ns2__TopicSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TopicSetType::__any = __any;
		_p->ns2__ExtensibleDocumented::documentation = documentation__1;
		_p->ns2__ExtensibleDocumented::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns2__TopicSetType(struct soap *soap, ns2__TopicSetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicSetType", p->soap_type() == SOAP_TYPE_ns2__TopicSetType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TopicSetType(struct soap *soap, const char *URL, ns2__TopicSetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicSetType", p->soap_type() == SOAP_TYPE_ns2__TopicSetType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TopicSetType(struct soap *soap, const char *URL, ns2__TopicSetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicSetType", p->soap_type() == SOAP_TYPE_ns2__TopicSetType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TopicSetType * SOAP_FMAC4 soap_get_ns2__TopicSetType(struct soap*, ns2__TopicSetType *, const char*, const char*);

inline int soap_read_ns2__TopicSetType(struct soap *soap, ns2__TopicSetType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__TopicSetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TopicSetType(struct soap *soap, const char *URL, ns2__TopicSetType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__TopicSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__TopicSetType(struct soap *soap, ns2__TopicSetType *p)
{
	if (soap_read_ns2__TopicSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__TopicType_DEFINED
#define SOAP_TYPE_ns2__TopicType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TopicType(struct soap*, const char*, int, const ns2__TopicType *, const char*);
SOAP_FMAC3 ns2__TopicType * SOAP_FMAC4 soap_in_ns2__TopicType(struct soap*, const char*, ns2__TopicType *, const char*);
SOAP_FMAC1 ns2__TopicType * SOAP_FMAC2 soap_instantiate_ns2__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TopicType * soap_new_ns2__TopicType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TopicType(soap, n, NULL, NULL, NULL);
}

inline ns2__TopicType * soap_new_req_ns2__TopicType(
	struct soap *soap,
	const std::string& name)
{
	ns2__TopicType *_p = soap_new_ns2__TopicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TopicType::name = name;
	}
	return _p;
}

inline ns2__TopicType * soap_new_set_ns2__TopicType(
	struct soap *soap,
	ns2__QueryExpressionType *MessagePattern,
	const std::vector<ns2__TopicType *> & Topic,
	const std::vector<struct soap_dom_element> & __any,
	const std::string& name,
	std::string *messageTypes,
	bool final_,
	ns2__Documentation *documentation__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns2__TopicType *_p = soap_new_ns2__TopicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TopicType::MessagePattern = MessagePattern;
		_p->ns2__TopicType::Topic = Topic;
		_p->ns2__TopicType::__any = __any;
		_p->ns2__TopicType::name = name;
		_p->ns2__TopicType::messageTypes = messageTypes;
		_p->ns2__TopicType::final_ = final_;
		_p->ns2__ExtensibleDocumented::documentation = documentation__1;
		_p->ns2__ExtensibleDocumented::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns2__TopicType(struct soap *soap, ns2__TopicType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicType", p->soap_type() == SOAP_TYPE_ns2__TopicType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TopicType(struct soap *soap, const char *URL, ns2__TopicType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicType", p->soap_type() == SOAP_TYPE_ns2__TopicType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TopicType(struct soap *soap, const char *URL, ns2__TopicType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicType", p->soap_type() == SOAP_TYPE_ns2__TopicType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TopicType * SOAP_FMAC4 soap_get_ns2__TopicType(struct soap*, ns2__TopicType *, const char*, const char*);

inline int soap_read_ns2__TopicType(struct soap *soap, ns2__TopicType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__TopicType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TopicType(struct soap *soap, const char *URL, ns2__TopicType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__TopicType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__TopicType(struct soap *soap, ns2__TopicType *p)
{
	if (soap_read_ns2__TopicType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__TopicNamespaceType_DEFINED
#define SOAP_TYPE_ns2__TopicNamespaceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TopicNamespaceType(struct soap*, const char*, int, const ns2__TopicNamespaceType *, const char*);
SOAP_FMAC3 ns2__TopicNamespaceType * SOAP_FMAC4 soap_in_ns2__TopicNamespaceType(struct soap*, const char*, ns2__TopicNamespaceType *, const char*);
SOAP_FMAC1 ns2__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_ns2__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TopicNamespaceType * soap_new_ns2__TopicNamespaceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__TopicNamespaceType(soap, n, NULL, NULL, NULL);
}

inline ns2__TopicNamespaceType * soap_new_req_ns2__TopicNamespaceType(
	struct soap *soap,
	const std::string& targetNamespace)
{
	ns2__TopicNamespaceType *_p = soap_new_ns2__TopicNamespaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TopicNamespaceType::targetNamespace = targetNamespace;
	}
	return _p;
}

inline ns2__TopicNamespaceType * soap_new_set_ns2__TopicNamespaceType(
	struct soap *soap,
	const std::vector<_ns2__TopicNamespaceType_Topic> & Topic,
	const std::vector<struct soap_dom_element> & __any,
	std::string *name,
	const std::string& targetNamespace,
	bool final_,
	ns2__Documentation *documentation__1,
	const struct soap_dom_attribute& __anyAttribute__1)
{
	ns2__TopicNamespaceType *_p = soap_new_ns2__TopicNamespaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__TopicNamespaceType::Topic = Topic;
		_p->ns2__TopicNamespaceType::__any = __any;
		_p->ns2__TopicNamespaceType::name = name;
		_p->ns2__TopicNamespaceType::targetNamespace = targetNamespace;
		_p->ns2__TopicNamespaceType::final_ = final_;
		_p->ns2__ExtensibleDocumented::documentation = documentation__1;
		_p->ns2__ExtensibleDocumented::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_ns2__TopicNamespaceType(struct soap *soap, ns2__TopicNamespaceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicNamespaceType", p->soap_type() == SOAP_TYPE_ns2__TopicNamespaceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__TopicNamespaceType(struct soap *soap, const char *URL, ns2__TopicNamespaceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicNamespaceType", p->soap_type() == SOAP_TYPE_ns2__TopicNamespaceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__TopicNamespaceType(struct soap *soap, const char *URL, ns2__TopicNamespaceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:TopicNamespaceType", p->soap_type() == SOAP_TYPE_ns2__TopicNamespaceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__TopicNamespaceType * SOAP_FMAC4 soap_get_ns2__TopicNamespaceType(struct soap*, ns2__TopicNamespaceType *, const char*, const char*);

inline int soap_read_ns2__TopicNamespaceType(struct soap *soap, ns2__TopicNamespaceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__TopicNamespaceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__TopicNamespaceType(struct soap *soap, const char *URL, ns2__TopicNamespaceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__TopicNamespaceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__TopicNamespaceType(struct soap *soap, ns2__TopicNamespaceType *p)
{
	if (soap_read_ns2__TopicNamespaceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__QueryExpressionType_DEFINED
#define SOAP_TYPE_ns2__QueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryExpressionType(struct soap*, const char*, int, const ns2__QueryExpressionType *, const char*);
SOAP_FMAC3 ns2__QueryExpressionType * SOAP_FMAC4 soap_in_ns2__QueryExpressionType(struct soap*, const char*, ns2__QueryExpressionType *, const char*);
SOAP_FMAC1 ns2__QueryExpressionType * SOAP_FMAC2 soap_instantiate_ns2__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__QueryExpressionType * soap_new_ns2__QueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__QueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline ns2__QueryExpressionType * soap_new_req_ns2__QueryExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	ns2__QueryExpressionType *_p = soap_new_ns2__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__QueryExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline ns2__QueryExpressionType * soap_new_set_ns2__QueryExpressionType(
	struct soap *soap,
	const struct soap_dom_element& __any,
	const std::string& Dialect,
	const struct soap_dom_element& __mixed)
{
	ns2__QueryExpressionType *_p = soap_new_ns2__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__QueryExpressionType::__any = __any;
		_p->ns2__QueryExpressionType::Dialect = Dialect;
		_p->ns2__QueryExpressionType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_ns2__QueryExpressionType(struct soap *soap, ns2__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:QueryExpressionType", p->soap_type() == SOAP_TYPE_ns2__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__QueryExpressionType(struct soap *soap, const char *URL, ns2__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:QueryExpressionType", p->soap_type() == SOAP_TYPE_ns2__QueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__QueryExpressionType(struct soap *soap, const char *URL, ns2__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:QueryExpressionType", p->soap_type() == SOAP_TYPE_ns2__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__QueryExpressionType * SOAP_FMAC4 soap_get_ns2__QueryExpressionType(struct soap*, ns2__QueryExpressionType *, const char*, const char*);

inline int soap_read_ns2__QueryExpressionType(struct soap *soap, ns2__QueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__QueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__QueryExpressionType(struct soap *soap, const char *URL, ns2__QueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__QueryExpressionType(struct soap *soap, ns2__QueryExpressionType *p)
{
	if (soap_read_ns2__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ExtensibleDocumented_DEFINED
#define SOAP_TYPE_ns2__ExtensibleDocumented_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ExtensibleDocumented(struct soap*, const char*, int, const ns2__ExtensibleDocumented *, const char*);
SOAP_FMAC3 ns2__ExtensibleDocumented * SOAP_FMAC4 soap_in_ns2__ExtensibleDocumented(struct soap*, const char*, ns2__ExtensibleDocumented *, const char*);
SOAP_FMAC1 ns2__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_ns2__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ExtensibleDocumented * soap_new_ns2__ExtensibleDocumented(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ExtensibleDocumented(soap, n, NULL, NULL, NULL);
}

inline ns2__ExtensibleDocumented * soap_new_req_ns2__ExtensibleDocumented(
	struct soap *soap)
{
	ns2__ExtensibleDocumented *_p = soap_new_ns2__ExtensibleDocumented(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__ExtensibleDocumented * soap_new_set_ns2__ExtensibleDocumented(
	struct soap *soap,
	ns2__Documentation *documentation,
	const struct soap_dom_attribute& __anyAttribute)
{
	ns2__ExtensibleDocumented *_p = soap_new_ns2__ExtensibleDocumented(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ExtensibleDocumented::documentation = documentation;
		_p->ns2__ExtensibleDocumented::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns2__ExtensibleDocumented(struct soap *soap, ns2__ExtensibleDocumented const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExtensibleDocumented", p->soap_type() == SOAP_TYPE_ns2__ExtensibleDocumented ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ExtensibleDocumented(struct soap *soap, const char *URL, ns2__ExtensibleDocumented const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExtensibleDocumented", p->soap_type() == SOAP_TYPE_ns2__ExtensibleDocumented ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ExtensibleDocumented(struct soap *soap, const char *URL, ns2__ExtensibleDocumented const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ExtensibleDocumented", p->soap_type() == SOAP_TYPE_ns2__ExtensibleDocumented ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ExtensibleDocumented * SOAP_FMAC4 soap_get_ns2__ExtensibleDocumented(struct soap*, ns2__ExtensibleDocumented *, const char*, const char*);

inline int soap_read_ns2__ExtensibleDocumented(struct soap *soap, ns2__ExtensibleDocumented *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ExtensibleDocumented(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ExtensibleDocumented(struct soap *soap, const char *URL, ns2__ExtensibleDocumented *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ExtensibleDocumented(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ExtensibleDocumented(struct soap *soap, ns2__ExtensibleDocumented *p)
{
	if (soap_read_ns2__ExtensibleDocumented(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Documentation_DEFINED
#define SOAP_TYPE_ns2__Documentation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Documentation(struct soap*, const char*, int, const ns2__Documentation *, const char*);
SOAP_FMAC3 ns2__Documentation * SOAP_FMAC4 soap_in_ns2__Documentation(struct soap*, const char*, ns2__Documentation *, const char*);
SOAP_FMAC1 ns2__Documentation * SOAP_FMAC2 soap_instantiate_ns2__Documentation(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Documentation * soap_new_ns2__Documentation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Documentation(soap, n, NULL, NULL, NULL);
}

inline ns2__Documentation * soap_new_req_ns2__Documentation(
	struct soap *soap)
{
	ns2__Documentation *_p = soap_new_ns2__Documentation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Documentation * soap_new_set_ns2__Documentation(
	struct soap *soap,
	const std::vector<struct soap_dom_element> & __any,
	const struct soap_dom_element& __mixed)
{
	ns2__Documentation *_p = soap_new_ns2__Documentation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Documentation::__any = __any;
		_p->ns2__Documentation::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_ns2__Documentation(struct soap *soap, ns2__Documentation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Documentation", p->soap_type() == SOAP_TYPE_ns2__Documentation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Documentation(struct soap *soap, const char *URL, ns2__Documentation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Documentation", p->soap_type() == SOAP_TYPE_ns2__Documentation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Documentation(struct soap *soap, const char *URL, ns2__Documentation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Documentation", p->soap_type() == SOAP_TYPE_ns2__Documentation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Documentation * SOAP_FMAC4 soap_get_ns2__Documentation(struct soap*, ns2__Documentation *, const char*, const char*);

inline int soap_read_ns2__Documentation(struct soap *soap, ns2__Documentation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__Documentation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Documentation(struct soap *soap, const char *URL, ns2__Documentation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Documentation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Documentation(struct soap *soap, ns2__Documentation *p)
{
	if (soap_read_ns2__Documentation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChangeVirtualInputStateResponse_DEFINED
#define SOAP_TYPE__ns1__ChangeVirtualInputStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeVirtualInputStateResponse(struct soap*, const char*, int, const _ns1__ChangeVirtualInputStateResponse *, const char*);
SOAP_FMAC3 _ns1__ChangeVirtualInputStateResponse * SOAP_FMAC4 soap_in__ns1__ChangeVirtualInputStateResponse(struct soap*, const char*, _ns1__ChangeVirtualInputStateResponse *, const char*);
SOAP_FMAC1 _ns1__ChangeVirtualInputStateResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeVirtualInputStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChangeVirtualInputStateResponse * soap_new__ns1__ChangeVirtualInputStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChangeVirtualInputStateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChangeVirtualInputStateResponse * soap_new_req__ns1__ChangeVirtualInputStateResponse(
	struct soap *soap,
	bool stateChanged)
{
	_ns1__ChangeVirtualInputStateResponse *_p = soap_new__ns1__ChangeVirtualInputStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChangeVirtualInputStateResponse::stateChanged = stateChanged;
	}
	return _p;
}

inline _ns1__ChangeVirtualInputStateResponse * soap_new_set__ns1__ChangeVirtualInputStateResponse(
	struct soap *soap,
	bool stateChanged)
{
	_ns1__ChangeVirtualInputStateResponse *_p = soap_new__ns1__ChangeVirtualInputStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChangeVirtualInputStateResponse::stateChanged = stateChanged;
	}
	return _p;
}

inline int soap_write__ns1__ChangeVirtualInputStateResponse(struct soap *soap, _ns1__ChangeVirtualInputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChangeVirtualInputStateResponse", p->soap_type() == SOAP_TYPE__ns1__ChangeVirtualInputStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChangeVirtualInputStateResponse(struct soap *soap, const char *URL, _ns1__ChangeVirtualInputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChangeVirtualInputStateResponse", p->soap_type() == SOAP_TYPE__ns1__ChangeVirtualInputStateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChangeVirtualInputStateResponse(struct soap *soap, const char *URL, _ns1__ChangeVirtualInputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChangeVirtualInputStateResponse", p->soap_type() == SOAP_TYPE__ns1__ChangeVirtualInputStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChangeVirtualInputStateResponse * SOAP_FMAC4 soap_get__ns1__ChangeVirtualInputStateResponse(struct soap*, _ns1__ChangeVirtualInputStateResponse *, const char*, const char*);

inline int soap_read__ns1__ChangeVirtualInputStateResponse(struct soap *soap, _ns1__ChangeVirtualInputStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChangeVirtualInputStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChangeVirtualInputStateResponse(struct soap *soap, const char *URL, _ns1__ChangeVirtualInputStateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChangeVirtualInputStateResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChangeVirtualInputStateResponse(struct soap *soap, _ns1__ChangeVirtualInputStateResponse *p)
{
	if (soap_read__ns1__ChangeVirtualInputStateResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ChangeVirtualInputState_DEFINED
#define SOAP_TYPE__ns1__ChangeVirtualInputState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeVirtualInputState(struct soap*, const char*, int, const _ns1__ChangeVirtualInputState *, const char*);
SOAP_FMAC3 _ns1__ChangeVirtualInputState * SOAP_FMAC4 soap_in__ns1__ChangeVirtualInputState(struct soap*, const char*, _ns1__ChangeVirtualInputState *, const char*);
SOAP_FMAC1 _ns1__ChangeVirtualInputState * SOAP_FMAC2 soap_instantiate__ns1__ChangeVirtualInputState(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ChangeVirtualInputState * soap_new__ns1__ChangeVirtualInputState(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ChangeVirtualInputState(soap, n, NULL, NULL, NULL);
}

inline _ns1__ChangeVirtualInputState * soap_new_req__ns1__ChangeVirtualInputState(
	struct soap *soap,
	int port,
	bool active)
{
	_ns1__ChangeVirtualInputState *_p = soap_new__ns1__ChangeVirtualInputState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChangeVirtualInputState::port = port;
		_p->_ns1__ChangeVirtualInputState::active = active;
	}
	return _p;
}

inline _ns1__ChangeVirtualInputState * soap_new_set__ns1__ChangeVirtualInputState(
	struct soap *soap,
	int port,
	bool active)
{
	_ns1__ChangeVirtualInputState *_p = soap_new__ns1__ChangeVirtualInputState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ChangeVirtualInputState::port = port;
		_p->_ns1__ChangeVirtualInputState::active = active;
	}
	return _p;
}

inline int soap_write__ns1__ChangeVirtualInputState(struct soap *soap, _ns1__ChangeVirtualInputState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChangeVirtualInputState", p->soap_type() == SOAP_TYPE__ns1__ChangeVirtualInputState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ChangeVirtualInputState(struct soap *soap, const char *URL, _ns1__ChangeVirtualInputState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChangeVirtualInputState", p->soap_type() == SOAP_TYPE__ns1__ChangeVirtualInputState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ChangeVirtualInputState(struct soap *soap, const char *URL, _ns1__ChangeVirtualInputState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChangeVirtualInputState", p->soap_type() == SOAP_TYPE__ns1__ChangeVirtualInputState ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ChangeVirtualInputState * SOAP_FMAC4 soap_get__ns1__ChangeVirtualInputState(struct soap*, _ns1__ChangeVirtualInputState *, const char*, const char*);

inline int soap_read__ns1__ChangeVirtualInputState(struct soap *soap, _ns1__ChangeVirtualInputState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ChangeVirtualInputState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ChangeVirtualInputState(struct soap *soap, const char *URL, _ns1__ChangeVirtualInputState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ChangeVirtualInputState(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ChangeVirtualInputState(struct soap *soap, _ns1__ChangeVirtualInputState *p)
{
	if (soap_read__ns1__ChangeVirtualInputState(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ScheduledEventAlreadyExistsFault_DEFINED
#define SOAP_TYPE__ns1__ScheduledEventAlreadyExistsFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ScheduledEventAlreadyExistsFault(struct soap*, const char*, int, const _ns1__ScheduledEventAlreadyExistsFault *, const char*);
SOAP_FMAC3 _ns1__ScheduledEventAlreadyExistsFault * SOAP_FMAC4 soap_in__ns1__ScheduledEventAlreadyExistsFault(struct soap*, const char*, _ns1__ScheduledEventAlreadyExistsFault *, const char*);
SOAP_FMAC1 _ns1__ScheduledEventAlreadyExistsFault * SOAP_FMAC2 soap_instantiate__ns1__ScheduledEventAlreadyExistsFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ScheduledEventAlreadyExistsFault * soap_new__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ScheduledEventAlreadyExistsFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__ScheduledEventAlreadyExistsFault * soap_new_req__ns1__ScheduledEventAlreadyExistsFault(
	struct soap *soap)
{
	_ns1__ScheduledEventAlreadyExistsFault *_p = soap_new__ns1__ScheduledEventAlreadyExistsFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ScheduledEventAlreadyExistsFault * soap_new_set__ns1__ScheduledEventAlreadyExistsFault(
	struct soap *soap)
{
	_ns1__ScheduledEventAlreadyExistsFault *_p = soap_new__ns1__ScheduledEventAlreadyExistsFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, _ns1__ScheduledEventAlreadyExistsFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEventAlreadyExistsFault", p->soap_type() == SOAP_TYPE__ns1__ScheduledEventAlreadyExistsFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, const char *URL, _ns1__ScheduledEventAlreadyExistsFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEventAlreadyExistsFault", p->soap_type() == SOAP_TYPE__ns1__ScheduledEventAlreadyExistsFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, const char *URL, _ns1__ScheduledEventAlreadyExistsFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEventAlreadyExistsFault", p->soap_type() == SOAP_TYPE__ns1__ScheduledEventAlreadyExistsFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ScheduledEventAlreadyExistsFault * SOAP_FMAC4 soap_get__ns1__ScheduledEventAlreadyExistsFault(struct soap*, _ns1__ScheduledEventAlreadyExistsFault *, const char*, const char*);

inline int soap_read__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, _ns1__ScheduledEventAlreadyExistsFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ScheduledEventAlreadyExistsFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, const char *URL, _ns1__ScheduledEventAlreadyExistsFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ScheduledEventAlreadyExistsFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ScheduledEventAlreadyExistsFault(struct soap *soap, _ns1__ScheduledEventAlreadyExistsFault *p)
{
	if (soap_read__ns1__ScheduledEventAlreadyExistsFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InvalidScheduledEventIDFault_DEFINED
#define SOAP_TYPE__ns1__InvalidScheduledEventIDFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InvalidScheduledEventIDFault(struct soap*, const char*, int, const _ns1__InvalidScheduledEventIDFault *, const char*);
SOAP_FMAC3 _ns1__InvalidScheduledEventIDFault * SOAP_FMAC4 soap_in__ns1__InvalidScheduledEventIDFault(struct soap*, const char*, _ns1__InvalidScheduledEventIDFault *, const char*);
SOAP_FMAC1 _ns1__InvalidScheduledEventIDFault * SOAP_FMAC2 soap_instantiate__ns1__InvalidScheduledEventIDFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InvalidScheduledEventIDFault * soap_new__ns1__InvalidScheduledEventIDFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InvalidScheduledEventIDFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__InvalidScheduledEventIDFault * soap_new_req__ns1__InvalidScheduledEventIDFault(
	struct soap *soap)
{
	_ns1__InvalidScheduledEventIDFault *_p = soap_new__ns1__InvalidScheduledEventIDFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InvalidScheduledEventIDFault * soap_new_set__ns1__InvalidScheduledEventIDFault(
	struct soap *soap)
{
	_ns1__InvalidScheduledEventIDFault *_p = soap_new__ns1__InvalidScheduledEventIDFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__InvalidScheduledEventIDFault(struct soap *soap, _ns1__InvalidScheduledEventIDFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidScheduledEventIDFault", p->soap_type() == SOAP_TYPE__ns1__InvalidScheduledEventIDFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InvalidScheduledEventIDFault(struct soap *soap, const char *URL, _ns1__InvalidScheduledEventIDFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidScheduledEventIDFault", p->soap_type() == SOAP_TYPE__ns1__InvalidScheduledEventIDFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InvalidScheduledEventIDFault(struct soap *soap, const char *URL, _ns1__InvalidScheduledEventIDFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidScheduledEventIDFault", p->soap_type() == SOAP_TYPE__ns1__InvalidScheduledEventIDFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InvalidScheduledEventIDFault * SOAP_FMAC4 soap_get__ns1__InvalidScheduledEventIDFault(struct soap*, _ns1__InvalidScheduledEventIDFault *, const char*, const char*);

inline int soap_read__ns1__InvalidScheduledEventIDFault(struct soap *soap, _ns1__InvalidScheduledEventIDFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InvalidScheduledEventIDFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InvalidScheduledEventIDFault(struct soap *soap, const char *URL, _ns1__InvalidScheduledEventIDFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InvalidScheduledEventIDFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InvalidScheduledEventIDFault(struct soap *soap, _ns1__InvalidScheduledEventIDFault *p)
{
	if (soap_read__ns1__InvalidScheduledEventIDFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InvalidScheduleFault_DEFINED
#define SOAP_TYPE__ns1__InvalidScheduleFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InvalidScheduleFault(struct soap*, const char*, int, const _ns1__InvalidScheduleFault *, const char*);
SOAP_FMAC3 _ns1__InvalidScheduleFault * SOAP_FMAC4 soap_in__ns1__InvalidScheduleFault(struct soap*, const char*, _ns1__InvalidScheduleFault *, const char*);
SOAP_FMAC1 _ns1__InvalidScheduleFault * SOAP_FMAC2 soap_instantiate__ns1__InvalidScheduleFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InvalidScheduleFault * soap_new__ns1__InvalidScheduleFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InvalidScheduleFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__InvalidScheduleFault * soap_new_req__ns1__InvalidScheduleFault(
	struct soap *soap)
{
	_ns1__InvalidScheduleFault *_p = soap_new__ns1__InvalidScheduleFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InvalidScheduleFault * soap_new_set__ns1__InvalidScheduleFault(
	struct soap *soap)
{
	_ns1__InvalidScheduleFault *_p = soap_new__ns1__InvalidScheduleFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__InvalidScheduleFault(struct soap *soap, _ns1__InvalidScheduleFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidScheduleFault", p->soap_type() == SOAP_TYPE__ns1__InvalidScheduleFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InvalidScheduleFault(struct soap *soap, const char *URL, _ns1__InvalidScheduleFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidScheduleFault", p->soap_type() == SOAP_TYPE__ns1__InvalidScheduleFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InvalidScheduleFault(struct soap *soap, const char *URL, _ns1__InvalidScheduleFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvalidScheduleFault", p->soap_type() == SOAP_TYPE__ns1__InvalidScheduleFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InvalidScheduleFault * SOAP_FMAC4 soap_get__ns1__InvalidScheduleFault(struct soap*, _ns1__InvalidScheduleFault *, const char*, const char*);

inline int soap_read__ns1__InvalidScheduleFault(struct soap *soap, _ns1__InvalidScheduleFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InvalidScheduleFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InvalidScheduleFault(struct soap *soap, const char *URL, _ns1__InvalidScheduleFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InvalidScheduleFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InvalidScheduleFault(struct soap *soap, _ns1__InvalidScheduleFault *p)
{
	if (soap_read__ns1__InvalidScheduleFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ScheduledEventNotFoundFault_DEFINED
#define SOAP_TYPE__ns1__ScheduledEventNotFoundFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ScheduledEventNotFoundFault(struct soap*, const char*, int, const _ns1__ScheduledEventNotFoundFault *, const char*);
SOAP_FMAC3 _ns1__ScheduledEventNotFoundFault * SOAP_FMAC4 soap_in__ns1__ScheduledEventNotFoundFault(struct soap*, const char*, _ns1__ScheduledEventNotFoundFault *, const char*);
SOAP_FMAC1 _ns1__ScheduledEventNotFoundFault * SOAP_FMAC2 soap_instantiate__ns1__ScheduledEventNotFoundFault(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ScheduledEventNotFoundFault * soap_new__ns1__ScheduledEventNotFoundFault(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ScheduledEventNotFoundFault(soap, n, NULL, NULL, NULL);
}

inline _ns1__ScheduledEventNotFoundFault * soap_new_req__ns1__ScheduledEventNotFoundFault(
	struct soap *soap)
{
	_ns1__ScheduledEventNotFoundFault *_p = soap_new__ns1__ScheduledEventNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ScheduledEventNotFoundFault * soap_new_set__ns1__ScheduledEventNotFoundFault(
	struct soap *soap)
{
	_ns1__ScheduledEventNotFoundFault *_p = soap_new__ns1__ScheduledEventNotFoundFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__ScheduledEventNotFoundFault(struct soap *soap, _ns1__ScheduledEventNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEventNotFoundFault", p->soap_type() == SOAP_TYPE__ns1__ScheduledEventNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ScheduledEventNotFoundFault(struct soap *soap, const char *URL, _ns1__ScheduledEventNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEventNotFoundFault", p->soap_type() == SOAP_TYPE__ns1__ScheduledEventNotFoundFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ScheduledEventNotFoundFault(struct soap *soap, const char *URL, _ns1__ScheduledEventNotFoundFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEventNotFoundFault", p->soap_type() == SOAP_TYPE__ns1__ScheduledEventNotFoundFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ScheduledEventNotFoundFault * SOAP_FMAC4 soap_get__ns1__ScheduledEventNotFoundFault(struct soap*, _ns1__ScheduledEventNotFoundFault *, const char*, const char*);

inline int soap_read__ns1__ScheduledEventNotFoundFault(struct soap *soap, _ns1__ScheduledEventNotFoundFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ScheduledEventNotFoundFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ScheduledEventNotFoundFault(struct soap *soap, const char *URL, _ns1__ScheduledEventNotFoundFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ScheduledEventNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ScheduledEventNotFoundFault(struct soap *soap, _ns1__ScheduledEventNotFoundFault *p)
{
	if (soap_read__ns1__ScheduledEventNotFoundFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetScheduledEventsResponse_DEFINED
#define SOAP_TYPE__ns1__GetScheduledEventsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetScheduledEventsResponse(struct soap*, const char*, int, const _ns1__GetScheduledEventsResponse *, const char*);
SOAP_FMAC3 _ns1__GetScheduledEventsResponse * SOAP_FMAC4 soap_in__ns1__GetScheduledEventsResponse(struct soap*, const char*, _ns1__GetScheduledEventsResponse *, const char*);
SOAP_FMAC1 _ns1__GetScheduledEventsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetScheduledEventsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetScheduledEventsResponse * soap_new__ns1__GetScheduledEventsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetScheduledEventsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetScheduledEventsResponse * soap_new_req__ns1__GetScheduledEventsResponse(
	struct soap *soap,
	ns1__ScheduledEvents *ScheduledEvents)
{
	_ns1__GetScheduledEventsResponse *_p = soap_new__ns1__GetScheduledEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetScheduledEventsResponse::ScheduledEvents = ScheduledEvents;
	}
	return _p;
}

inline _ns1__GetScheduledEventsResponse * soap_new_set__ns1__GetScheduledEventsResponse(
	struct soap *soap,
	ns1__ScheduledEvents *ScheduledEvents)
{
	_ns1__GetScheduledEventsResponse *_p = soap_new__ns1__GetScheduledEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetScheduledEventsResponse::ScheduledEvents = ScheduledEvents;
	}
	return _p;
}

inline int soap_write__ns1__GetScheduledEventsResponse(struct soap *soap, _ns1__GetScheduledEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetScheduledEventsResponse", p->soap_type() == SOAP_TYPE__ns1__GetScheduledEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetScheduledEventsResponse(struct soap *soap, const char *URL, _ns1__GetScheduledEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetScheduledEventsResponse", p->soap_type() == SOAP_TYPE__ns1__GetScheduledEventsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetScheduledEventsResponse(struct soap *soap, const char *URL, _ns1__GetScheduledEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetScheduledEventsResponse", p->soap_type() == SOAP_TYPE__ns1__GetScheduledEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetScheduledEventsResponse * SOAP_FMAC4 soap_get__ns1__GetScheduledEventsResponse(struct soap*, _ns1__GetScheduledEventsResponse *, const char*, const char*);

inline int soap_read__ns1__GetScheduledEventsResponse(struct soap *soap, _ns1__GetScheduledEventsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetScheduledEventsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetScheduledEventsResponse(struct soap *soap, const char *URL, _ns1__GetScheduledEventsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetScheduledEventsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetScheduledEventsResponse(struct soap *soap, _ns1__GetScheduledEventsResponse *p)
{
	if (soap_read__ns1__GetScheduledEventsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetScheduledEvents_DEFINED
#define SOAP_TYPE__ns1__GetScheduledEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetScheduledEvents(struct soap*, const char*, int, const _ns1__GetScheduledEvents *, const char*);
SOAP_FMAC3 _ns1__GetScheduledEvents * SOAP_FMAC4 soap_in__ns1__GetScheduledEvents(struct soap*, const char*, _ns1__GetScheduledEvents *, const char*);
SOAP_FMAC1 _ns1__GetScheduledEvents * SOAP_FMAC2 soap_instantiate__ns1__GetScheduledEvents(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetScheduledEvents * soap_new__ns1__GetScheduledEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetScheduledEvents(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetScheduledEvents * soap_new_req__ns1__GetScheduledEvents(
	struct soap *soap)
{
	_ns1__GetScheduledEvents *_p = soap_new__ns1__GetScheduledEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetScheduledEvents * soap_new_set__ns1__GetScheduledEvents(
	struct soap *soap,
	ns1__ScheduleFilter *ScheduleFilter)
{
	_ns1__GetScheduledEvents *_p = soap_new__ns1__GetScheduledEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetScheduledEvents::ScheduleFilter = ScheduleFilter;
	}
	return _p;
}

inline int soap_write__ns1__GetScheduledEvents(struct soap *soap, _ns1__GetScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetScheduledEvents", p->soap_type() == SOAP_TYPE__ns1__GetScheduledEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetScheduledEvents(struct soap *soap, const char *URL, _ns1__GetScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetScheduledEvents", p->soap_type() == SOAP_TYPE__ns1__GetScheduledEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetScheduledEvents(struct soap *soap, const char *URL, _ns1__GetScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetScheduledEvents", p->soap_type() == SOAP_TYPE__ns1__GetScheduledEvents ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetScheduledEvents * SOAP_FMAC4 soap_get__ns1__GetScheduledEvents(struct soap*, _ns1__GetScheduledEvents *, const char*, const char*);

inline int soap_read__ns1__GetScheduledEvents(struct soap *soap, _ns1__GetScheduledEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetScheduledEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetScheduledEvents(struct soap *soap, const char *URL, _ns1__GetScheduledEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetScheduledEvents(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetScheduledEvents(struct soap *soap, _ns1__GetScheduledEvents *p)
{
	if (soap_read__ns1__GetScheduledEvents(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveScheduledEventResponse_DEFINED
#define SOAP_TYPE__ns1__RemoveScheduledEventResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveScheduledEventResponse(struct soap*, const char*, int, const _ns1__RemoveScheduledEventResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveScheduledEventResponse * SOAP_FMAC4 soap_in__ns1__RemoveScheduledEventResponse(struct soap*, const char*, _ns1__RemoveScheduledEventResponse *, const char*);
SOAP_FMAC1 _ns1__RemoveScheduledEventResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveScheduledEventResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveScheduledEventResponse * soap_new__ns1__RemoveScheduledEventResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RemoveScheduledEventResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveScheduledEventResponse * soap_new_req__ns1__RemoveScheduledEventResponse(
	struct soap *soap)
{
	_ns1__RemoveScheduledEventResponse *_p = soap_new__ns1__RemoveScheduledEventResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RemoveScheduledEventResponse * soap_new_set__ns1__RemoveScheduledEventResponse(
	struct soap *soap)
{
	_ns1__RemoveScheduledEventResponse *_p = soap_new__ns1__RemoveScheduledEventResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__RemoveScheduledEventResponse(struct soap *soap, _ns1__RemoveScheduledEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveScheduledEventResponse", p->soap_type() == SOAP_TYPE__ns1__RemoveScheduledEventResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RemoveScheduledEventResponse(struct soap *soap, const char *URL, _ns1__RemoveScheduledEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveScheduledEventResponse", p->soap_type() == SOAP_TYPE__ns1__RemoveScheduledEventResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RemoveScheduledEventResponse(struct soap *soap, const char *URL, _ns1__RemoveScheduledEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveScheduledEventResponse", p->soap_type() == SOAP_TYPE__ns1__RemoveScheduledEventResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveScheduledEventResponse * SOAP_FMAC4 soap_get__ns1__RemoveScheduledEventResponse(struct soap*, _ns1__RemoveScheduledEventResponse *, const char*, const char*);

inline int soap_read__ns1__RemoveScheduledEventResponse(struct soap *soap, _ns1__RemoveScheduledEventResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveScheduledEventResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RemoveScheduledEventResponse(struct soap *soap, const char *URL, _ns1__RemoveScheduledEventResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RemoveScheduledEventResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RemoveScheduledEventResponse(struct soap *soap, _ns1__RemoveScheduledEventResponse *p)
{
	if (soap_read__ns1__RemoveScheduledEventResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RemoveScheduledEvent_DEFINED
#define SOAP_TYPE__ns1__RemoveScheduledEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveScheduledEvent(struct soap*, const char*, int, const _ns1__RemoveScheduledEvent *, const char*);
SOAP_FMAC3 _ns1__RemoveScheduledEvent * SOAP_FMAC4 soap_in__ns1__RemoveScheduledEvent(struct soap*, const char*, _ns1__RemoveScheduledEvent *, const char*);
SOAP_FMAC1 _ns1__RemoveScheduledEvent * SOAP_FMAC2 soap_instantiate__ns1__RemoveScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveScheduledEvent * soap_new__ns1__RemoveScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RemoveScheduledEvent(soap, n, NULL, NULL, NULL);
}

inline _ns1__RemoveScheduledEvent * soap_new_req__ns1__RemoveScheduledEvent(
	struct soap *soap,
	const std::string& EventID)
{
	_ns1__RemoveScheduledEvent *_p = soap_new__ns1__RemoveScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveScheduledEvent::EventID = EventID;
	}
	return _p;
}

inline _ns1__RemoveScheduledEvent * soap_new_set__ns1__RemoveScheduledEvent(
	struct soap *soap,
	const std::string& EventID)
{
	_ns1__RemoveScheduledEvent *_p = soap_new__ns1__RemoveScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RemoveScheduledEvent::EventID = EventID;
	}
	return _p;
}

inline int soap_write__ns1__RemoveScheduledEvent(struct soap *soap, _ns1__RemoveScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveScheduledEvent", p->soap_type() == SOAP_TYPE__ns1__RemoveScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RemoveScheduledEvent(struct soap *soap, const char *URL, _ns1__RemoveScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveScheduledEvent", p->soap_type() == SOAP_TYPE__ns1__RemoveScheduledEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RemoveScheduledEvent(struct soap *soap, const char *URL, _ns1__RemoveScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemoveScheduledEvent", p->soap_type() == SOAP_TYPE__ns1__RemoveScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RemoveScheduledEvent * SOAP_FMAC4 soap_get__ns1__RemoveScheduledEvent(struct soap*, _ns1__RemoveScheduledEvent *, const char*, const char*);

inline int soap_read__ns1__RemoveScheduledEvent(struct soap *soap, _ns1__RemoveScheduledEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RemoveScheduledEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RemoveScheduledEvent(struct soap *soap, const char *URL, _ns1__RemoveScheduledEvent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RemoveScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RemoveScheduledEvent(struct soap *soap, _ns1__RemoveScheduledEvent *p)
{
	if (soap_read__ns1__RemoveScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AddScheduledEventResponse_DEFINED
#define SOAP_TYPE__ns1__AddScheduledEventResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddScheduledEventResponse(struct soap*, const char*, int, const _ns1__AddScheduledEventResponse *, const char*);
SOAP_FMAC3 _ns1__AddScheduledEventResponse * SOAP_FMAC4 soap_in__ns1__AddScheduledEventResponse(struct soap*, const char*, _ns1__AddScheduledEventResponse *, const char*);
SOAP_FMAC1 _ns1__AddScheduledEventResponse * SOAP_FMAC2 soap_instantiate__ns1__AddScheduledEventResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddScheduledEventResponse * soap_new__ns1__AddScheduledEventResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AddScheduledEventResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddScheduledEventResponse * soap_new_req__ns1__AddScheduledEventResponse(
	struct soap *soap)
{
	_ns1__AddScheduledEventResponse *_p = soap_new__ns1__AddScheduledEventResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddScheduledEventResponse * soap_new_set__ns1__AddScheduledEventResponse(
	struct soap *soap,
	std::string *EventID)
{
	_ns1__AddScheduledEventResponse *_p = soap_new__ns1__AddScheduledEventResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddScheduledEventResponse::EventID = EventID;
	}
	return _p;
}

inline int soap_write__ns1__AddScheduledEventResponse(struct soap *soap, _ns1__AddScheduledEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddScheduledEventResponse", p->soap_type() == SOAP_TYPE__ns1__AddScheduledEventResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddScheduledEventResponse(struct soap *soap, const char *URL, _ns1__AddScheduledEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddScheduledEventResponse", p->soap_type() == SOAP_TYPE__ns1__AddScheduledEventResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddScheduledEventResponse(struct soap *soap, const char *URL, _ns1__AddScheduledEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddScheduledEventResponse", p->soap_type() == SOAP_TYPE__ns1__AddScheduledEventResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddScheduledEventResponse * SOAP_FMAC4 soap_get__ns1__AddScheduledEventResponse(struct soap*, _ns1__AddScheduledEventResponse *, const char*, const char*);

inline int soap_read__ns1__AddScheduledEventResponse(struct soap *soap, _ns1__AddScheduledEventResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AddScheduledEventResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddScheduledEventResponse(struct soap *soap, const char *URL, _ns1__AddScheduledEventResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AddScheduledEventResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AddScheduledEventResponse(struct soap *soap, _ns1__AddScheduledEventResponse *p)
{
	if (soap_read__ns1__AddScheduledEventResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AddScheduledEvent_DEFINED
#define SOAP_TYPE__ns1__AddScheduledEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddScheduledEvent(struct soap*, const char*, int, const _ns1__AddScheduledEvent *, const char*);
SOAP_FMAC3 _ns1__AddScheduledEvent * SOAP_FMAC4 soap_in__ns1__AddScheduledEvent(struct soap*, const char*, _ns1__AddScheduledEvent *, const char*);
SOAP_FMAC1 _ns1__AddScheduledEvent * SOAP_FMAC2 soap_instantiate__ns1__AddScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddScheduledEvent * soap_new__ns1__AddScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AddScheduledEvent(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddScheduledEvent * soap_new_req__ns1__AddScheduledEvent(
	struct soap *soap,
	ns1__NewScheduledEvent *NewScheduledEvent)
{
	_ns1__AddScheduledEvent *_p = soap_new__ns1__AddScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddScheduledEvent::NewScheduledEvent = NewScheduledEvent;
	}
	return _p;
}

inline _ns1__AddScheduledEvent * soap_new_set__ns1__AddScheduledEvent(
	struct soap *soap,
	ns1__NewScheduledEvent *NewScheduledEvent)
{
	_ns1__AddScheduledEvent *_p = soap_new__ns1__AddScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddScheduledEvent::NewScheduledEvent = NewScheduledEvent;
	}
	return _p;
}

inline int soap_write__ns1__AddScheduledEvent(struct soap *soap, _ns1__AddScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddScheduledEvent", p->soap_type() == SOAP_TYPE__ns1__AddScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddScheduledEvent(struct soap *soap, const char *URL, _ns1__AddScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddScheduledEvent", p->soap_type() == SOAP_TYPE__ns1__AddScheduledEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddScheduledEvent(struct soap *soap, const char *URL, _ns1__AddScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddScheduledEvent", p->soap_type() == SOAP_TYPE__ns1__AddScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddScheduledEvent * SOAP_FMAC4 soap_get__ns1__AddScheduledEvent(struct soap*, _ns1__AddScheduledEvent *, const char*, const char*);

inline int soap_read__ns1__AddScheduledEvent(struct soap *soap, _ns1__AddScheduledEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AddScheduledEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddScheduledEvent(struct soap *soap, const char *URL, _ns1__AddScheduledEvent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AddScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AddScheduledEvent(struct soap *soap, _ns1__AddScheduledEvent *p)
{
	if (soap_read__ns1__AddScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventInstancesResponse_DEFINED
#define SOAP_TYPE__ns1__GetEventInstancesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventInstancesResponse(struct soap*, const char*, int, const _ns1__GetEventInstancesResponse *, const char*);
SOAP_FMAC3 _ns1__GetEventInstancesResponse * SOAP_FMAC4 soap_in__ns1__GetEventInstancesResponse(struct soap*, const char*, _ns1__GetEventInstancesResponse *, const char*);
SOAP_FMAC1 _ns1__GetEventInstancesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEventInstancesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventInstancesResponse * soap_new__ns1__GetEventInstancesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventInstancesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventInstancesResponse * soap_new_req__ns1__GetEventInstancesResponse(
	struct soap *soap,
	ns2__TopicSetType *ns2__TopicSet)
{
	_ns1__GetEventInstancesResponse *_p = soap_new__ns1__GetEventInstancesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventInstancesResponse::ns2__TopicSet = ns2__TopicSet;
	}
	return _p;
}

inline _ns1__GetEventInstancesResponse * soap_new_set__ns1__GetEventInstancesResponse(
	struct soap *soap,
	ns2__TopicSetType *ns2__TopicSet)
{
	_ns1__GetEventInstancesResponse *_p = soap_new__ns1__GetEventInstancesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventInstancesResponse::ns2__TopicSet = ns2__TopicSet;
	}
	return _p;
}

inline int soap_write__ns1__GetEventInstancesResponse(struct soap *soap, _ns1__GetEventInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventInstancesResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventInstancesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventInstancesResponse(struct soap *soap, const char *URL, _ns1__GetEventInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventInstancesResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventInstancesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventInstancesResponse(struct soap *soap, const char *URL, _ns1__GetEventInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventInstancesResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventInstancesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventInstancesResponse * SOAP_FMAC4 soap_get__ns1__GetEventInstancesResponse(struct soap*, _ns1__GetEventInstancesResponse *, const char*, const char*);

inline int soap_read__ns1__GetEventInstancesResponse(struct soap *soap, _ns1__GetEventInstancesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventInstancesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventInstancesResponse(struct soap *soap, const char *URL, _ns1__GetEventInstancesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventInstancesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventInstancesResponse(struct soap *soap, _ns1__GetEventInstancesResponse *p)
{
	if (soap_read__ns1__GetEventInstancesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventInstances_DEFINED
#define SOAP_TYPE__ns1__GetEventInstances_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventInstances(struct soap*, const char*, int, const _ns1__GetEventInstances *, const char*);
SOAP_FMAC3 _ns1__GetEventInstances * SOAP_FMAC4 soap_in__ns1__GetEventInstances(struct soap*, const char*, _ns1__GetEventInstances *, const char*);
SOAP_FMAC1 _ns1__GetEventInstances * SOAP_FMAC2 soap_instantiate__ns1__GetEventInstances(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventInstances * soap_new__ns1__GetEventInstances(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventInstances(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventInstances * soap_new_req__ns1__GetEventInstances(
	struct soap *soap)
{
	_ns1__GetEventInstances *_p = soap_new__ns1__GetEventInstances(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventInstances * soap_new_set__ns1__GetEventInstances(
	struct soap *soap)
{
	_ns1__GetEventInstances *_p = soap_new__ns1__GetEventInstances(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetEventInstances(struct soap *soap, _ns1__GetEventInstances const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventInstances", p->soap_type() == SOAP_TYPE__ns1__GetEventInstances ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventInstances(struct soap *soap, const char *URL, _ns1__GetEventInstances const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventInstances", p->soap_type() == SOAP_TYPE__ns1__GetEventInstances ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventInstances(struct soap *soap, const char *URL, _ns1__GetEventInstances const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventInstances", p->soap_type() == SOAP_TYPE__ns1__GetEventInstances ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventInstances * SOAP_FMAC4 soap_get__ns1__GetEventInstances(struct soap*, _ns1__GetEventInstances *, const char*, const char*);

inline int soap_read__ns1__GetEventInstances(struct soap *soap, _ns1__GetEventInstances *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventInstances(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventInstances(struct soap *soap, const char *URL, _ns1__GetEventInstances *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventInstances(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventInstances(struct soap *soap, _ns1__GetEventInstances *p)
{
	if (soap_read__ns1__GetEventInstances(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduleFilter_DEFINED
#define SOAP_TYPE_ns1__ScheduleFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduleFilter(struct soap*, const char*, int, const ns1__ScheduleFilter *, const char*);
SOAP_FMAC3 ns1__ScheduleFilter * SOAP_FMAC4 soap_in_ns1__ScheduleFilter(struct soap*, const char*, ns1__ScheduleFilter *, const char*);
SOAP_FMAC1 ns1__ScheduleFilter * SOAP_FMAC2 soap_instantiate_ns1__ScheduleFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduleFilter * soap_new_ns1__ScheduleFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduleFilter(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduleFilter * soap_new_req_ns1__ScheduleFilter(
	struct soap *soap)
{
	ns1__ScheduleFilter *_p = soap_new_ns1__ScheduleFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ScheduleFilter * soap_new_set_ns1__ScheduleFilter(
	struct soap *soap,
	ns1__ScheduledType *ScheduleType)
{
	ns1__ScheduleFilter *_p = soap_new_ns1__ScheduleFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduleFilter::ScheduleType = ScheduleType;
	}
	return _p;
}

inline int soap_write_ns1__ScheduleFilter(struct soap *soap, ns1__ScheduleFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduleFilter", p->soap_type() == SOAP_TYPE_ns1__ScheduleFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduleFilter(struct soap *soap, const char *URL, ns1__ScheduleFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduleFilter", p->soap_type() == SOAP_TYPE_ns1__ScheduleFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduleFilter(struct soap *soap, const char *URL, ns1__ScheduleFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduleFilter", p->soap_type() == SOAP_TYPE_ns1__ScheduleFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduleFilter * SOAP_FMAC4 soap_get_ns1__ScheduleFilter(struct soap*, ns1__ScheduleFilter *, const char*, const char*);

inline int soap_read_ns1__ScheduleFilter(struct soap *soap, ns1__ScheduleFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ScheduleFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduleFilter(struct soap *soap, const char *URL, ns1__ScheduleFilter *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ScheduleFilter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScheduleFilter(struct soap *soap, ns1__ScheduleFilter *p)
{
	if (soap_read_ns1__ScheduleFilter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ICalendar_DEFINED
#define SOAP_TYPE_ns1__ICalendar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ICalendar(struct soap*, const char*, int, const ns1__ICalendar *, const char*);
SOAP_FMAC3 ns1__ICalendar * SOAP_FMAC4 soap_in_ns1__ICalendar(struct soap*, const char*, ns1__ICalendar *, const char*);
SOAP_FMAC1 ns1__ICalendar * SOAP_FMAC2 soap_instantiate_ns1__ICalendar(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ICalendar * soap_new_ns1__ICalendar(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ICalendar(soap, n, NULL, NULL, NULL);
}

inline ns1__ICalendar * soap_new_req_ns1__ICalendar(
	struct soap *soap,
	const std::string& __item)
{
	ns1__ICalendar *_p = soap_new_ns1__ICalendar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ICalendar::__item = __item;
	}
	return _p;
}

inline ns1__ICalendar * soap_new_set_ns1__ICalendar(
	struct soap *soap,
	const std::string& __item,
	const std::string& Dialect)
{
	ns1__ICalendar *_p = soap_new_ns1__ICalendar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ICalendar::__item = __item;
		_p->ns1__ICalendar::Dialect = Dialect;
	}
	return _p;
}

inline int soap_write_ns1__ICalendar(struct soap *soap, ns1__ICalendar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ICalendar", p->soap_type() == SOAP_TYPE_ns1__ICalendar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ICalendar(struct soap *soap, const char *URL, ns1__ICalendar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ICalendar", p->soap_type() == SOAP_TYPE_ns1__ICalendar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ICalendar(struct soap *soap, const char *URL, ns1__ICalendar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ICalendar", p->soap_type() == SOAP_TYPE_ns1__ICalendar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ICalendar * SOAP_FMAC4 soap_get_ns1__ICalendar(struct soap*, ns1__ICalendar *, const char*, const char*);

inline int soap_read_ns1__ICalendar(struct soap *soap, ns1__ICalendar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ICalendar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ICalendar(struct soap *soap, const char *URL, ns1__ICalendar *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ICalendar(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ICalendar(struct soap *soap, ns1__ICalendar *p)
{
	if (soap_read_ns1__ICalendar(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Schedule_DEFINED
#define SOAP_TYPE_ns1__Schedule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Schedule(struct soap*, const char*, int, const ns1__Schedule *, const char*);
SOAP_FMAC3 ns1__Schedule * SOAP_FMAC4 soap_in_ns1__Schedule(struct soap*, const char*, ns1__Schedule *, const char*);
SOAP_FMAC1 ns1__Schedule * SOAP_FMAC2 soap_instantiate_ns1__Schedule(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Schedule * soap_new_ns1__Schedule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Schedule(soap, n, NULL, NULL, NULL);
}

inline ns1__Schedule * soap_new_req_ns1__Schedule(
	struct soap *soap,
	ns1__ICalendar *ICalendar)
{
	ns1__Schedule *_p = soap_new_ns1__Schedule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Schedule::ICalendar = ICalendar;
	}
	return _p;
}

inline ns1__Schedule * soap_new_set_ns1__Schedule(
	struct soap *soap,
	ns1__ICalendar *ICalendar)
{
	ns1__Schedule *_p = soap_new_ns1__Schedule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Schedule::ICalendar = ICalendar;
	}
	return _p;
}

inline int soap_write_ns1__Schedule(struct soap *soap, ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Schedule", p->soap_type() == SOAP_TYPE_ns1__Schedule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Schedule(struct soap *soap, const char *URL, ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Schedule", p->soap_type() == SOAP_TYPE_ns1__Schedule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Schedule(struct soap *soap, const char *URL, ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Schedule", p->soap_type() == SOAP_TYPE_ns1__Schedule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Schedule * SOAP_FMAC4 soap_get_ns1__Schedule(struct soap*, ns1__Schedule *, const char*, const char*);

inline int soap_read_ns1__Schedule(struct soap *soap, ns1__Schedule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Schedule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Schedule(struct soap *soap, const char *URL, ns1__Schedule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Schedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Schedule(struct soap *soap, ns1__Schedule *p)
{
	if (soap_read_ns1__Schedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledEvent_DEFINED
#define SOAP_TYPE_ns1__ScheduledEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledEvent(struct soap*, const char*, int, const ns1__ScheduledEvent *, const char*);
SOAP_FMAC3 ns1__ScheduledEvent * SOAP_FMAC4 soap_in_ns1__ScheduledEvent(struct soap*, const char*, ns1__ScheduledEvent *, const char*);
SOAP_FMAC1 ns1__ScheduledEvent * SOAP_FMAC2 soap_instantiate_ns1__ScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduledEvent * soap_new_ns1__ScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduledEvent(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduledEvent * soap_new_req_ns1__ScheduledEvent(
	struct soap *soap,
	const std::string& EventID,
	ns1__Schedule *Schedule)
{
	ns1__ScheduledEvent *_p = soap_new_ns1__ScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledEvent::EventID = EventID;
		_p->ns1__ScheduledEvent::Schedule = Schedule;
	}
	return _p;
}

inline ns1__ScheduledEvent * soap_new_set_ns1__ScheduledEvent(
	struct soap *soap,
	const std::string& EventID,
	std::string *Name,
	ns1__Schedule *Schedule)
{
	ns1__ScheduledEvent *_p = soap_new_ns1__ScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledEvent::EventID = EventID;
		_p->ns1__ScheduledEvent::Name = Name;
		_p->ns1__ScheduledEvent::Schedule = Schedule;
	}
	return _p;
}

inline int soap_write_ns1__ScheduledEvent(struct soap *soap, ns1__ScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEvent", p->soap_type() == SOAP_TYPE_ns1__ScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledEvent(struct soap *soap, const char *URL, ns1__ScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEvent", p->soap_type() == SOAP_TYPE_ns1__ScheduledEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledEvent(struct soap *soap, const char *URL, ns1__ScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEvent", p->soap_type() == SOAP_TYPE_ns1__ScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledEvent * SOAP_FMAC4 soap_get_ns1__ScheduledEvent(struct soap*, ns1__ScheduledEvent *, const char*, const char*);

inline int soap_read_ns1__ScheduledEvent(struct soap *soap, ns1__ScheduledEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ScheduledEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledEvent(struct soap *soap, const char *URL, ns1__ScheduledEvent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScheduledEvent(struct soap *soap, ns1__ScheduledEvent *p)
{
	if (soap_read_ns1__ScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledEvents_DEFINED
#define SOAP_TYPE_ns1__ScheduledEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledEvents(struct soap*, const char*, int, const ns1__ScheduledEvents *, const char*);
SOAP_FMAC3 ns1__ScheduledEvents * SOAP_FMAC4 soap_in_ns1__ScheduledEvents(struct soap*, const char*, ns1__ScheduledEvents *, const char*);
SOAP_FMAC1 ns1__ScheduledEvents * SOAP_FMAC2 soap_instantiate_ns1__ScheduledEvents(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduledEvents * soap_new_ns1__ScheduledEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduledEvents(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduledEvents * soap_new_req_ns1__ScheduledEvents(
	struct soap *soap)
{
	ns1__ScheduledEvents *_p = soap_new_ns1__ScheduledEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ScheduledEvents * soap_new_set_ns1__ScheduledEvents(
	struct soap *soap,
	const std::vector<ns1__ScheduledEvent *> & ScheduledEvent)
{
	ns1__ScheduledEvents *_p = soap_new_ns1__ScheduledEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledEvents::ScheduledEvent = ScheduledEvent;
	}
	return _p;
}

inline int soap_write_ns1__ScheduledEvents(struct soap *soap, ns1__ScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEvents", p->soap_type() == SOAP_TYPE_ns1__ScheduledEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledEvents(struct soap *soap, const char *URL, ns1__ScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEvents", p->soap_type() == SOAP_TYPE_ns1__ScheduledEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledEvents(struct soap *soap, const char *URL, ns1__ScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledEvents", p->soap_type() == SOAP_TYPE_ns1__ScheduledEvents ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledEvents * SOAP_FMAC4 soap_get_ns1__ScheduledEvents(struct soap*, ns1__ScheduledEvents *, const char*, const char*);

inline int soap_read_ns1__ScheduledEvents(struct soap *soap, ns1__ScheduledEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ScheduledEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledEvents(struct soap *soap, const char *URL, ns1__ScheduledEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ScheduledEvents(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScheduledEvents(struct soap *soap, ns1__ScheduledEvents *p)
{
	if (soap_read_ns1__ScheduledEvents(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__NewScheduledEvent_DEFINED
#define SOAP_TYPE_ns1__NewScheduledEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NewScheduledEvent(struct soap*, const char*, int, const ns1__NewScheduledEvent *, const char*);
SOAP_FMAC3 ns1__NewScheduledEvent * SOAP_FMAC4 soap_in_ns1__NewScheduledEvent(struct soap*, const char*, ns1__NewScheduledEvent *, const char*);
SOAP_FMAC1 ns1__NewScheduledEvent * SOAP_FMAC2 soap_instantiate_ns1__NewScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NewScheduledEvent * soap_new_ns1__NewScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NewScheduledEvent(soap, n, NULL, NULL, NULL);
}

inline ns1__NewScheduledEvent * soap_new_req_ns1__NewScheduledEvent(
	struct soap *soap,
	ns1__Schedule *Schedule)
{
	ns1__NewScheduledEvent *_p = soap_new_ns1__NewScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NewScheduledEvent::Schedule = Schedule;
	}
	return _p;
}

inline ns1__NewScheduledEvent * soap_new_set_ns1__NewScheduledEvent(
	struct soap *soap,
	std::string *EventID,
	std::string *Name,
	ns1__Schedule *Schedule)
{
	ns1__NewScheduledEvent *_p = soap_new_ns1__NewScheduledEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NewScheduledEvent::EventID = EventID;
		_p->ns1__NewScheduledEvent::Name = Name;
		_p->ns1__NewScheduledEvent::Schedule = Schedule;
	}
	return _p;
}

inline int soap_write_ns1__NewScheduledEvent(struct soap *soap, ns1__NewScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NewScheduledEvent", p->soap_type() == SOAP_TYPE_ns1__NewScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NewScheduledEvent(struct soap *soap, const char *URL, ns1__NewScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NewScheduledEvent", p->soap_type() == SOAP_TYPE_ns1__NewScheduledEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NewScheduledEvent(struct soap *soap, const char *URL, ns1__NewScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NewScheduledEvent", p->soap_type() == SOAP_TYPE_ns1__NewScheduledEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NewScheduledEvent * SOAP_FMAC4 soap_get_ns1__NewScheduledEvent(struct soap*, ns1__NewScheduledEvent *, const char*, const char*);

inline int soap_read_ns1__NewScheduledEvent(struct soap *soap, ns1__NewScheduledEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__NewScheduledEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NewScheduledEvent(struct soap *soap, const char *URL, ns1__NewScheduledEvent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__NewScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__NewScheduledEvent(struct soap *soap, ns1__NewScheduledEvent *p)
{
	if (soap_read_ns1__NewScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _xml__lang is a typedef synonym of std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_std__string


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s(soap, a) ((a).c_str())

#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_write__xml__lang soap_write_std__string


#define soap_PUT__xml__lang soap_PUT_std__string


#define soap_POST_send__xml__lang soap_POST_send_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string


#define soap_GET__xml__lang soap_GET_std__string


#define soap_POST_recv__xml__lang soap_POST_recv_std__string

#endif

#ifndef SOAP_TYPE_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_xsd__unsignedLong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);
SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedLong(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (soap_read_xsd__unsignedLong(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__token__DEFINED
#define SOAP_TYPE_xsd__token__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token_(struct soap*, const char*, int, const xsd__token_ *, const char*);
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_in_xsd__token_(struct soap*, const char*, xsd__token_ *, const char*);
SOAP_FMAC1 xsd__token_ * SOAP_FMAC2 soap_instantiate_xsd__token_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__token_ * soap_new_xsd__token_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__token_(soap, n, NULL, NULL, NULL);
}

inline xsd__token_ * soap_new_req_xsd__token_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__token_ *_p = soap_new_xsd__token_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__token_::__item = __item;
	}
	return _p;
}

inline xsd__token_ * soap_new_set_xsd__token_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__token_ *_p = soap_new_xsd__token_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__token_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__token_(struct soap *soap, xsd__token_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:token", p->soap_type() == SOAP_TYPE_xsd__token_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__token_(struct soap *soap, const char *URL, xsd__token_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:token", p->soap_type() == SOAP_TYPE_xsd__token_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token_(struct soap *soap, const char *URL, xsd__token_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:token", p->soap_type() == SOAP_TYPE_xsd__token_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_get_xsd__token_(struct soap*, xsd__token_ *, const char*, const char*);

inline int soap_read_xsd__token_(struct soap *soap, xsd__token_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__token_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token_(struct soap *soap, const char *URL, xsd__token_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__token_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__token_(struct soap *soap, xsd__token_ *p)
{
	if (soap_read_xsd__token_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__token(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__token(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap,
	const std::string& __item)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	const std::string& __item)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__string(struct soap *soap, const char *URL, xsd__string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__string(struct soap *soap, xsd__string *p)
{
	if (soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger__DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger_(struct soap*, const char*, int, const xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger_(struct soap*, const char*, xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC1 xsd__nonNegativeInteger_ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__nonNegativeInteger_ * soap_new_xsd__nonNegativeInteger_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__nonNegativeInteger_(soap, n, NULL, NULL, NULL);
}

inline xsd__nonNegativeInteger_ * soap_new_req_xsd__nonNegativeInteger_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__nonNegativeInteger_ *_p = soap_new_xsd__nonNegativeInteger_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__nonNegativeInteger_::__item = __item;
	}
	return _p;
}

inline xsd__nonNegativeInteger_ * soap_new_set_xsd__nonNegativeInteger_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__nonNegativeInteger_ *_p = soap_new_xsd__nonNegativeInteger_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__nonNegativeInteger_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:nonNegativeInteger", p->soap_type() == SOAP_TYPE_xsd__nonNegativeInteger_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger_(struct soap *soap, const char *URL, xsd__nonNegativeInteger_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:nonNegativeInteger", p->soap_type() == SOAP_TYPE_xsd__nonNegativeInteger_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger_(struct soap *soap, const char *URL, xsd__nonNegativeInteger_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:nonNegativeInteger", p->soap_type() == SOAP_TYPE_xsd__nonNegativeInteger_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger_(struct soap*, xsd__nonNegativeInteger_ *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__nonNegativeInteger_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger_(struct soap *soap, const char *URL, xsd__nonNegativeInteger_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__nonNegativeInteger_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p)
{
	if (soap_read_xsd__nonNegativeInteger_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\+?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__nonNegativeInteger(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__nonNegativeInteger(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer__DEFINED
#define SOAP_TYPE_xsd__integer__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer_(struct soap*, const char*, int, const xsd__integer_ *, const char*);
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_in_xsd__integer_(struct soap*, const char*, xsd__integer_ *, const char*);
SOAP_FMAC1 xsd__integer_ * SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__integer_ * soap_new_xsd__integer_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__integer_(soap, n, NULL, NULL, NULL);
}

inline xsd__integer_ * soap_new_req_xsd__integer_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__integer_ *_p = soap_new_xsd__integer_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__integer_::__item = __item;
	}
	return _p;
}

inline xsd__integer_ * soap_new_set_xsd__integer_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__integer_ *_p = soap_new_xsd__integer_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__integer_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__integer_(struct soap *soap, xsd__integer_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", p->soap_type() == SOAP_TYPE_xsd__integer_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer_(struct soap *soap, const char *URL, xsd__integer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", p->soap_type() == SOAP_TYPE_xsd__integer_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer_(struct soap *soap, const char *URL, xsd__integer_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", p->soap_type() == SOAP_TYPE_xsd__integer_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_get_xsd__integer_(struct soap*, xsd__integer_ *, const char*, const char*);

inline int soap_read_xsd__integer_(struct soap *soap, xsd__integer_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__integer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer_(struct soap *soap, const char *URL, xsd__integer_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__integer_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__integer_(struct soap *soap, xsd__integer_ *p)
{
	if (soap_read_xsd__integer_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__int(struct soap *soap, const char *URL, xsd__int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__int(struct soap *soap, xsd__int *p)
{
	if (soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration__DEFINED
#define SOAP_TYPE_xsd__duration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);
SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL);
}

inline xsd__duration_ * soap_new_req_xsd__duration_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
	}
	return _p;
}

inline xsd__duration_ * soap_new_set_xsd__duration_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__duration_(struct soap *soap, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration_(struct soap *soap, const char *URL, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration_(struct soap *soap, const char *URL, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

inline int soap_read_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__duration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration_(struct soap *soap, const char *URL, xsd__duration_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (soap_read_xsd__duration_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI__DEFINED
#define SOAP_TYPE_xsd__anyURI__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);
SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
	}
	return _p;
}

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyURI_(struct soap *soap, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI_(struct soap *soap, const char *URL, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI_(struct soap *soap, const char *URL, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

inline int soap_read_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyURI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI_(struct soap *soap, const char *URL, xsd__anyURI_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (soap_read_xsd__anyURI_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName__DEFINED
#define SOAP_TYPE_xsd__QName__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);
SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL);
}

inline xsd__QName_ * soap_new_req_xsd__QName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
	}
	return _p;
}

inline xsd__QName_ * soap_new_set_xsd__QName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__QName_(struct soap *soap, xsd__QName_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName_(struct soap *soap, const char *URL, xsd__QName_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName_(struct soap *soap, const char *URL, xsd__QName_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

inline int soap_read_xsd__QName_(struct soap *soap, xsd__QName_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__QName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName_(struct soap *soap, const char *URL, xsd__QName_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__QName_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__QName_(struct soap *soap, xsd__QName_ *p)
{
	if (soap_read_xsd__QName_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__NCName__DEFINED
#define SOAP_TYPE_xsd__NCName__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName_(struct soap*, const char*, int, const xsd__NCName_ *, const char*);
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_in_xsd__NCName_(struct soap*, const char*, xsd__NCName_ *, const char*);
SOAP_FMAC1 xsd__NCName_ * SOAP_FMAC2 soap_instantiate_xsd__NCName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__NCName_ * soap_new_xsd__NCName_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__NCName_(soap, n, NULL, NULL, NULL);
}

inline xsd__NCName_ * soap_new_req_xsd__NCName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__NCName_ *_p = soap_new_xsd__NCName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__NCName_::__item = __item;
	}
	return _p;
}

inline xsd__NCName_ * soap_new_set_xsd__NCName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__NCName_ *_p = soap_new_xsd__NCName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__NCName_::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__NCName_(struct soap *soap, xsd__NCName_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:NCName", p->soap_type() == SOAP_TYPE_xsd__NCName_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName_(struct soap *soap, const char *URL, xsd__NCName_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:NCName", p->soap_type() == SOAP_TYPE_xsd__NCName_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName_(struct soap *soap, const char *URL, xsd__NCName_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:NCName", p->soap_type() == SOAP_TYPE_xsd__NCName_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_get_xsd__NCName_(struct soap*, xsd__NCName_ *, const char*, const char*);

inline int soap_read_xsd__NCName_(struct soap *soap, xsd__NCName_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__NCName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName_(struct soap *soap, const char *URL, xsd__NCName_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__NCName_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__NCName_(struct soap *soap, xsd__NCName_ *p)
{
	if (soap_read_xsd__NCName_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__NCName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__NCName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns5__RemoveActionRule_DEFINED
#define SOAP_TYPE___ns5__RemoveActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__RemoveActionRule(struct soap*, struct __ns5__RemoveActionRule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__RemoveActionRule(struct soap*, const struct __ns5__RemoveActionRule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__RemoveActionRule(struct soap*, const char*, int, const struct __ns5__RemoveActionRule *, const char*);
SOAP_FMAC3 struct __ns5__RemoveActionRule * SOAP_FMAC4 soap_in___ns5__RemoveActionRule(struct soap*, const char*, struct __ns5__RemoveActionRule *, const char*);
SOAP_FMAC1 struct __ns5__RemoveActionRule * SOAP_FMAC2 soap_instantiate___ns5__RemoveActionRule(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__RemoveActionRule * soap_new___ns5__RemoveActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__RemoveActionRule(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__RemoveActionRule * soap_new_req___ns5__RemoveActionRule(
	struct soap *soap)
{
	struct __ns5__RemoveActionRule *_p = soap_new___ns5__RemoveActionRule(soap);
	if (_p)
	{	soap_default___ns5__RemoveActionRule(soap, _p);
	}
	return _p;
}

inline struct __ns5__RemoveActionRule * soap_new_set___ns5__RemoveActionRule(
	struct soap *soap,
	_ns5__RemoveActionRule *ns5__RemoveActionRule)
{
	struct __ns5__RemoveActionRule *_p = soap_new___ns5__RemoveActionRule(soap);
	if (_p)
	{	soap_default___ns5__RemoveActionRule(soap, _p);
		_p->ns5__RemoveActionRule = ns5__RemoveActionRule;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__RemoveActionRule(struct soap*, const struct __ns5__RemoveActionRule *, const char*, const char*);

inline int soap_write___ns5__RemoveActionRule(struct soap *soap, struct __ns5__RemoveActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__RemoveActionRule(soap, p), 0) || soap_put___ns5__RemoveActionRule(soap, p, "-ns5:RemoveActionRule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__RemoveActionRule(struct soap *soap, const char *URL, struct __ns5__RemoveActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__RemoveActionRule(soap, p), 0) || soap_put___ns5__RemoveActionRule(soap, p, "-ns5:RemoveActionRule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__RemoveActionRule(struct soap *soap, const char *URL, struct __ns5__RemoveActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__RemoveActionRule(soap, p), 0) || soap_put___ns5__RemoveActionRule(soap, p, "-ns5:RemoveActionRule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__RemoveActionRule * SOAP_FMAC4 soap_get___ns5__RemoveActionRule(struct soap*, struct __ns5__RemoveActionRule *, const char*, const char*);

inline int soap_read___ns5__RemoveActionRule(struct soap *soap, struct __ns5__RemoveActionRule *p)
{
	if (p)
	{	soap_default___ns5__RemoveActionRule(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__RemoveActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__RemoveActionRule(struct soap *soap, const char *URL, struct __ns5__RemoveActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__RemoveActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__RemoveActionRule(struct soap *soap, struct __ns5__RemoveActionRule *p)
{
	if (soap_read___ns5__RemoveActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__GetActionRules_DEFINED
#define SOAP_TYPE___ns5__GetActionRules_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__GetActionRules(struct soap*, struct __ns5__GetActionRules *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__GetActionRules(struct soap*, const struct __ns5__GetActionRules *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__GetActionRules(struct soap*, const char*, int, const struct __ns5__GetActionRules *, const char*);
SOAP_FMAC3 struct __ns5__GetActionRules * SOAP_FMAC4 soap_in___ns5__GetActionRules(struct soap*, const char*, struct __ns5__GetActionRules *, const char*);
SOAP_FMAC1 struct __ns5__GetActionRules * SOAP_FMAC2 soap_instantiate___ns5__GetActionRules(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__GetActionRules * soap_new___ns5__GetActionRules(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__GetActionRules(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__GetActionRules * soap_new_req___ns5__GetActionRules(
	struct soap *soap)
{
	struct __ns5__GetActionRules *_p = soap_new___ns5__GetActionRules(soap);
	if (_p)
	{	soap_default___ns5__GetActionRules(soap, _p);
	}
	return _p;
}

inline struct __ns5__GetActionRules * soap_new_set___ns5__GetActionRules(
	struct soap *soap,
	_ns5__GetActionRules *ns5__GetActionRules)
{
	struct __ns5__GetActionRules *_p = soap_new___ns5__GetActionRules(soap);
	if (_p)
	{	soap_default___ns5__GetActionRules(soap, _p);
		_p->ns5__GetActionRules = ns5__GetActionRules;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__GetActionRules(struct soap*, const struct __ns5__GetActionRules *, const char*, const char*);

inline int soap_write___ns5__GetActionRules(struct soap *soap, struct __ns5__GetActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__GetActionRules(soap, p), 0) || soap_put___ns5__GetActionRules(soap, p, "-ns5:GetActionRules", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__GetActionRules(struct soap *soap, const char *URL, struct __ns5__GetActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetActionRules(soap, p), 0) || soap_put___ns5__GetActionRules(soap, p, "-ns5:GetActionRules", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__GetActionRules(struct soap *soap, const char *URL, struct __ns5__GetActionRules const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetActionRules(soap, p), 0) || soap_put___ns5__GetActionRules(soap, p, "-ns5:GetActionRules", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__GetActionRules * SOAP_FMAC4 soap_get___ns5__GetActionRules(struct soap*, struct __ns5__GetActionRules *, const char*, const char*);

inline int soap_read___ns5__GetActionRules(struct soap *soap, struct __ns5__GetActionRules *p)
{
	if (p)
	{	soap_default___ns5__GetActionRules(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__GetActionRules(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__GetActionRules(struct soap *soap, const char *URL, struct __ns5__GetActionRules *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__GetActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__GetActionRules(struct soap *soap, struct __ns5__GetActionRules *p)
{
	if (soap_read___ns5__GetActionRules(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__AddActionRule_DEFINED
#define SOAP_TYPE___ns5__AddActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__AddActionRule(struct soap*, struct __ns5__AddActionRule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__AddActionRule(struct soap*, const struct __ns5__AddActionRule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__AddActionRule(struct soap*, const char*, int, const struct __ns5__AddActionRule *, const char*);
SOAP_FMAC3 struct __ns5__AddActionRule * SOAP_FMAC4 soap_in___ns5__AddActionRule(struct soap*, const char*, struct __ns5__AddActionRule *, const char*);
SOAP_FMAC1 struct __ns5__AddActionRule * SOAP_FMAC2 soap_instantiate___ns5__AddActionRule(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__AddActionRule * soap_new___ns5__AddActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__AddActionRule(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__AddActionRule * soap_new_req___ns5__AddActionRule(
	struct soap *soap)
{
	struct __ns5__AddActionRule *_p = soap_new___ns5__AddActionRule(soap);
	if (_p)
	{	soap_default___ns5__AddActionRule(soap, _p);
	}
	return _p;
}

inline struct __ns5__AddActionRule * soap_new_set___ns5__AddActionRule(
	struct soap *soap,
	_ns5__AddActionRule *ns5__AddActionRule)
{
	struct __ns5__AddActionRule *_p = soap_new___ns5__AddActionRule(soap);
	if (_p)
	{	soap_default___ns5__AddActionRule(soap, _p);
		_p->ns5__AddActionRule = ns5__AddActionRule;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__AddActionRule(struct soap*, const struct __ns5__AddActionRule *, const char*, const char*);

inline int soap_write___ns5__AddActionRule(struct soap *soap, struct __ns5__AddActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__AddActionRule(soap, p), 0) || soap_put___ns5__AddActionRule(soap, p, "-ns5:AddActionRule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__AddActionRule(struct soap *soap, const char *URL, struct __ns5__AddActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__AddActionRule(soap, p), 0) || soap_put___ns5__AddActionRule(soap, p, "-ns5:AddActionRule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__AddActionRule(struct soap *soap, const char *URL, struct __ns5__AddActionRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__AddActionRule(soap, p), 0) || soap_put___ns5__AddActionRule(soap, p, "-ns5:AddActionRule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__AddActionRule * SOAP_FMAC4 soap_get___ns5__AddActionRule(struct soap*, struct __ns5__AddActionRule *, const char*, const char*);

inline int soap_read___ns5__AddActionRule(struct soap *soap, struct __ns5__AddActionRule *p)
{
	if (p)
	{	soap_default___ns5__AddActionRule(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__AddActionRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__AddActionRule(struct soap *soap, const char *URL, struct __ns5__AddActionRule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__AddActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__AddActionRule(struct soap *soap, struct __ns5__AddActionRule *p)
{
	if (soap_read___ns5__AddActionRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__GetRecipientConfigurations_DEFINED
#define SOAP_TYPE___ns5__GetRecipientConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__GetRecipientConfigurations(struct soap*, struct __ns5__GetRecipientConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__GetRecipientConfigurations(struct soap*, const struct __ns5__GetRecipientConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__GetRecipientConfigurations(struct soap*, const char*, int, const struct __ns5__GetRecipientConfigurations *, const char*);
SOAP_FMAC3 struct __ns5__GetRecipientConfigurations * SOAP_FMAC4 soap_in___ns5__GetRecipientConfigurations(struct soap*, const char*, struct __ns5__GetRecipientConfigurations *, const char*);
SOAP_FMAC1 struct __ns5__GetRecipientConfigurations * SOAP_FMAC2 soap_instantiate___ns5__GetRecipientConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__GetRecipientConfigurations * soap_new___ns5__GetRecipientConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__GetRecipientConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__GetRecipientConfigurations * soap_new_req___ns5__GetRecipientConfigurations(
	struct soap *soap)
{
	struct __ns5__GetRecipientConfigurations *_p = soap_new___ns5__GetRecipientConfigurations(soap);
	if (_p)
	{	soap_default___ns5__GetRecipientConfigurations(soap, _p);
	}
	return _p;
}

inline struct __ns5__GetRecipientConfigurations * soap_new_set___ns5__GetRecipientConfigurations(
	struct soap *soap,
	_ns5__GetRecipientConfigurations *ns5__GetRecipientConfigurations)
{
	struct __ns5__GetRecipientConfigurations *_p = soap_new___ns5__GetRecipientConfigurations(soap);
	if (_p)
	{	soap_default___ns5__GetRecipientConfigurations(soap, _p);
		_p->ns5__GetRecipientConfigurations = ns5__GetRecipientConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__GetRecipientConfigurations(struct soap*, const struct __ns5__GetRecipientConfigurations *, const char*, const char*);

inline int soap_write___ns5__GetRecipientConfigurations(struct soap *soap, struct __ns5__GetRecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__GetRecipientConfigurations(soap, p), 0) || soap_put___ns5__GetRecipientConfigurations(soap, p, "-ns5:GetRecipientConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__GetRecipientConfigurations(struct soap *soap, const char *URL, struct __ns5__GetRecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetRecipientConfigurations(soap, p), 0) || soap_put___ns5__GetRecipientConfigurations(soap, p, "-ns5:GetRecipientConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__GetRecipientConfigurations(struct soap *soap, const char *URL, struct __ns5__GetRecipientConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetRecipientConfigurations(soap, p), 0) || soap_put___ns5__GetRecipientConfigurations(soap, p, "-ns5:GetRecipientConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__GetRecipientConfigurations * SOAP_FMAC4 soap_get___ns5__GetRecipientConfigurations(struct soap*, struct __ns5__GetRecipientConfigurations *, const char*, const char*);

inline int soap_read___ns5__GetRecipientConfigurations(struct soap *soap, struct __ns5__GetRecipientConfigurations *p)
{
	if (p)
	{	soap_default___ns5__GetRecipientConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__GetRecipientConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__GetRecipientConfigurations(struct soap *soap, const char *URL, struct __ns5__GetRecipientConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__GetRecipientConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__GetRecipientConfigurations(struct soap *soap, struct __ns5__GetRecipientConfigurations *p)
{
	if (soap_read___ns5__GetRecipientConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__RemoveRecipientConfiguration_DEFINED
#define SOAP_TYPE___ns5__RemoveRecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__RemoveRecipientConfiguration(struct soap*, struct __ns5__RemoveRecipientConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__RemoveRecipientConfiguration(struct soap*, const struct __ns5__RemoveRecipientConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__RemoveRecipientConfiguration(struct soap*, const char*, int, const struct __ns5__RemoveRecipientConfiguration *, const char*);
SOAP_FMAC3 struct __ns5__RemoveRecipientConfiguration * SOAP_FMAC4 soap_in___ns5__RemoveRecipientConfiguration(struct soap*, const char*, struct __ns5__RemoveRecipientConfiguration *, const char*);
SOAP_FMAC1 struct __ns5__RemoveRecipientConfiguration * SOAP_FMAC2 soap_instantiate___ns5__RemoveRecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__RemoveRecipientConfiguration * soap_new___ns5__RemoveRecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__RemoveRecipientConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__RemoveRecipientConfiguration * soap_new_req___ns5__RemoveRecipientConfiguration(
	struct soap *soap)
{
	struct __ns5__RemoveRecipientConfiguration *_p = soap_new___ns5__RemoveRecipientConfiguration(soap);
	if (_p)
	{	soap_default___ns5__RemoveRecipientConfiguration(soap, _p);
	}
	return _p;
}

inline struct __ns5__RemoveRecipientConfiguration * soap_new_set___ns5__RemoveRecipientConfiguration(
	struct soap *soap,
	_ns5__RemoveRecipientConfiguration *ns5__RemoveRecipientConfiguration)
{
	struct __ns5__RemoveRecipientConfiguration *_p = soap_new___ns5__RemoveRecipientConfiguration(soap);
	if (_p)
	{	soap_default___ns5__RemoveRecipientConfiguration(soap, _p);
		_p->ns5__RemoveRecipientConfiguration = ns5__RemoveRecipientConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__RemoveRecipientConfiguration(struct soap*, const struct __ns5__RemoveRecipientConfiguration *, const char*, const char*);

inline int soap_write___ns5__RemoveRecipientConfiguration(struct soap *soap, struct __ns5__RemoveRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__RemoveRecipientConfiguration(soap, p), 0) || soap_put___ns5__RemoveRecipientConfiguration(soap, p, "-ns5:RemoveRecipientConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__RemoveRecipientConfiguration(struct soap *soap, const char *URL, struct __ns5__RemoveRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__RemoveRecipientConfiguration(soap, p), 0) || soap_put___ns5__RemoveRecipientConfiguration(soap, p, "-ns5:RemoveRecipientConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__RemoveRecipientConfiguration(struct soap *soap, const char *URL, struct __ns5__RemoveRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__RemoveRecipientConfiguration(soap, p), 0) || soap_put___ns5__RemoveRecipientConfiguration(soap, p, "-ns5:RemoveRecipientConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__RemoveRecipientConfiguration * SOAP_FMAC4 soap_get___ns5__RemoveRecipientConfiguration(struct soap*, struct __ns5__RemoveRecipientConfiguration *, const char*, const char*);

inline int soap_read___ns5__RemoveRecipientConfiguration(struct soap *soap, struct __ns5__RemoveRecipientConfiguration *p)
{
	if (p)
	{	soap_default___ns5__RemoveRecipientConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__RemoveRecipientConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__RemoveRecipientConfiguration(struct soap *soap, const char *URL, struct __ns5__RemoveRecipientConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__RemoveRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__RemoveRecipientConfiguration(struct soap *soap, struct __ns5__RemoveRecipientConfiguration *p)
{
	if (soap_read___ns5__RemoveRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__AddRecipientConfiguration_DEFINED
#define SOAP_TYPE___ns5__AddRecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__AddRecipientConfiguration(struct soap*, struct __ns5__AddRecipientConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__AddRecipientConfiguration(struct soap*, const struct __ns5__AddRecipientConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__AddRecipientConfiguration(struct soap*, const char*, int, const struct __ns5__AddRecipientConfiguration *, const char*);
SOAP_FMAC3 struct __ns5__AddRecipientConfiguration * SOAP_FMAC4 soap_in___ns5__AddRecipientConfiguration(struct soap*, const char*, struct __ns5__AddRecipientConfiguration *, const char*);
SOAP_FMAC1 struct __ns5__AddRecipientConfiguration * SOAP_FMAC2 soap_instantiate___ns5__AddRecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__AddRecipientConfiguration * soap_new___ns5__AddRecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__AddRecipientConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__AddRecipientConfiguration * soap_new_req___ns5__AddRecipientConfiguration(
	struct soap *soap)
{
	struct __ns5__AddRecipientConfiguration *_p = soap_new___ns5__AddRecipientConfiguration(soap);
	if (_p)
	{	soap_default___ns5__AddRecipientConfiguration(soap, _p);
	}
	return _p;
}

inline struct __ns5__AddRecipientConfiguration * soap_new_set___ns5__AddRecipientConfiguration(
	struct soap *soap,
	_ns5__AddRecipientConfiguration *ns5__AddRecipientConfiguration)
{
	struct __ns5__AddRecipientConfiguration *_p = soap_new___ns5__AddRecipientConfiguration(soap);
	if (_p)
	{	soap_default___ns5__AddRecipientConfiguration(soap, _p);
		_p->ns5__AddRecipientConfiguration = ns5__AddRecipientConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__AddRecipientConfiguration(struct soap*, const struct __ns5__AddRecipientConfiguration *, const char*, const char*);

inline int soap_write___ns5__AddRecipientConfiguration(struct soap *soap, struct __ns5__AddRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__AddRecipientConfiguration(soap, p), 0) || soap_put___ns5__AddRecipientConfiguration(soap, p, "-ns5:AddRecipientConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__AddRecipientConfiguration(struct soap *soap, const char *URL, struct __ns5__AddRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__AddRecipientConfiguration(soap, p), 0) || soap_put___ns5__AddRecipientConfiguration(soap, p, "-ns5:AddRecipientConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__AddRecipientConfiguration(struct soap *soap, const char *URL, struct __ns5__AddRecipientConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__AddRecipientConfiguration(soap, p), 0) || soap_put___ns5__AddRecipientConfiguration(soap, p, "-ns5:AddRecipientConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__AddRecipientConfiguration * SOAP_FMAC4 soap_get___ns5__AddRecipientConfiguration(struct soap*, struct __ns5__AddRecipientConfiguration *, const char*, const char*);

inline int soap_read___ns5__AddRecipientConfiguration(struct soap *soap, struct __ns5__AddRecipientConfiguration *p)
{
	if (p)
	{	soap_default___ns5__AddRecipientConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__AddRecipientConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__AddRecipientConfiguration(struct soap *soap, const char *URL, struct __ns5__AddRecipientConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__AddRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__AddRecipientConfiguration(struct soap *soap, struct __ns5__AddRecipientConfiguration *p)
{
	if (soap_read___ns5__AddRecipientConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__GetRecipientTemplates_DEFINED
#define SOAP_TYPE___ns5__GetRecipientTemplates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__GetRecipientTemplates(struct soap*, struct __ns5__GetRecipientTemplates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__GetRecipientTemplates(struct soap*, const struct __ns5__GetRecipientTemplates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__GetRecipientTemplates(struct soap*, const char*, int, const struct __ns5__GetRecipientTemplates *, const char*);
SOAP_FMAC3 struct __ns5__GetRecipientTemplates * SOAP_FMAC4 soap_in___ns5__GetRecipientTemplates(struct soap*, const char*, struct __ns5__GetRecipientTemplates *, const char*);
SOAP_FMAC1 struct __ns5__GetRecipientTemplates * SOAP_FMAC2 soap_instantiate___ns5__GetRecipientTemplates(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__GetRecipientTemplates * soap_new___ns5__GetRecipientTemplates(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__GetRecipientTemplates(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__GetRecipientTemplates * soap_new_req___ns5__GetRecipientTemplates(
	struct soap *soap)
{
	struct __ns5__GetRecipientTemplates *_p = soap_new___ns5__GetRecipientTemplates(soap);
	if (_p)
	{	soap_default___ns5__GetRecipientTemplates(soap, _p);
	}
	return _p;
}

inline struct __ns5__GetRecipientTemplates * soap_new_set___ns5__GetRecipientTemplates(
	struct soap *soap,
	_ns5__GetRecipientTemplates *ns5__GetRecipientTemplates)
{
	struct __ns5__GetRecipientTemplates *_p = soap_new___ns5__GetRecipientTemplates(soap);
	if (_p)
	{	soap_default___ns5__GetRecipientTemplates(soap, _p);
		_p->ns5__GetRecipientTemplates = ns5__GetRecipientTemplates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__GetRecipientTemplates(struct soap*, const struct __ns5__GetRecipientTemplates *, const char*, const char*);

inline int soap_write___ns5__GetRecipientTemplates(struct soap *soap, struct __ns5__GetRecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__GetRecipientTemplates(soap, p), 0) || soap_put___ns5__GetRecipientTemplates(soap, p, "-ns5:GetRecipientTemplates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__GetRecipientTemplates(struct soap *soap, const char *URL, struct __ns5__GetRecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetRecipientTemplates(soap, p), 0) || soap_put___ns5__GetRecipientTemplates(soap, p, "-ns5:GetRecipientTemplates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__GetRecipientTemplates(struct soap *soap, const char *URL, struct __ns5__GetRecipientTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetRecipientTemplates(soap, p), 0) || soap_put___ns5__GetRecipientTemplates(soap, p, "-ns5:GetRecipientTemplates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__GetRecipientTemplates * SOAP_FMAC4 soap_get___ns5__GetRecipientTemplates(struct soap*, struct __ns5__GetRecipientTemplates *, const char*, const char*);

inline int soap_read___ns5__GetRecipientTemplates(struct soap *soap, struct __ns5__GetRecipientTemplates *p)
{
	if (p)
	{	soap_default___ns5__GetRecipientTemplates(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__GetRecipientTemplates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__GetRecipientTemplates(struct soap *soap, const char *URL, struct __ns5__GetRecipientTemplates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__GetRecipientTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__GetRecipientTemplates(struct soap *soap, struct __ns5__GetRecipientTemplates *p)
{
	if (soap_read___ns5__GetRecipientTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__GetActionConfigurations_DEFINED
#define SOAP_TYPE___ns5__GetActionConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__GetActionConfigurations(struct soap*, struct __ns5__GetActionConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__GetActionConfigurations(struct soap*, const struct __ns5__GetActionConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__GetActionConfigurations(struct soap*, const char*, int, const struct __ns5__GetActionConfigurations *, const char*);
SOAP_FMAC3 struct __ns5__GetActionConfigurations * SOAP_FMAC4 soap_in___ns5__GetActionConfigurations(struct soap*, const char*, struct __ns5__GetActionConfigurations *, const char*);
SOAP_FMAC1 struct __ns5__GetActionConfigurations * SOAP_FMAC2 soap_instantiate___ns5__GetActionConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__GetActionConfigurations * soap_new___ns5__GetActionConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__GetActionConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__GetActionConfigurations * soap_new_req___ns5__GetActionConfigurations(
	struct soap *soap)
{
	struct __ns5__GetActionConfigurations *_p = soap_new___ns5__GetActionConfigurations(soap);
	if (_p)
	{	soap_default___ns5__GetActionConfigurations(soap, _p);
	}
	return _p;
}

inline struct __ns5__GetActionConfigurations * soap_new_set___ns5__GetActionConfigurations(
	struct soap *soap,
	_ns5__GetActionConfigurations *ns5__GetActionConfigurations)
{
	struct __ns5__GetActionConfigurations *_p = soap_new___ns5__GetActionConfigurations(soap);
	if (_p)
	{	soap_default___ns5__GetActionConfigurations(soap, _p);
		_p->ns5__GetActionConfigurations = ns5__GetActionConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__GetActionConfigurations(struct soap*, const struct __ns5__GetActionConfigurations *, const char*, const char*);

inline int soap_write___ns5__GetActionConfigurations(struct soap *soap, struct __ns5__GetActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__GetActionConfigurations(soap, p), 0) || soap_put___ns5__GetActionConfigurations(soap, p, "-ns5:GetActionConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__GetActionConfigurations(struct soap *soap, const char *URL, struct __ns5__GetActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetActionConfigurations(soap, p), 0) || soap_put___ns5__GetActionConfigurations(soap, p, "-ns5:GetActionConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__GetActionConfigurations(struct soap *soap, const char *URL, struct __ns5__GetActionConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetActionConfigurations(soap, p), 0) || soap_put___ns5__GetActionConfigurations(soap, p, "-ns5:GetActionConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__GetActionConfigurations * SOAP_FMAC4 soap_get___ns5__GetActionConfigurations(struct soap*, struct __ns5__GetActionConfigurations *, const char*, const char*);

inline int soap_read___ns5__GetActionConfigurations(struct soap *soap, struct __ns5__GetActionConfigurations *p)
{
	if (p)
	{	soap_default___ns5__GetActionConfigurations(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__GetActionConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__GetActionConfigurations(struct soap *soap, const char *URL, struct __ns5__GetActionConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__GetActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__GetActionConfigurations(struct soap *soap, struct __ns5__GetActionConfigurations *p)
{
	if (soap_read___ns5__GetActionConfigurations(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__RemoveActionConfiguration_DEFINED
#define SOAP_TYPE___ns5__RemoveActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__RemoveActionConfiguration(struct soap*, struct __ns5__RemoveActionConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__RemoveActionConfiguration(struct soap*, const struct __ns5__RemoveActionConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__RemoveActionConfiguration(struct soap*, const char*, int, const struct __ns5__RemoveActionConfiguration *, const char*);
SOAP_FMAC3 struct __ns5__RemoveActionConfiguration * SOAP_FMAC4 soap_in___ns5__RemoveActionConfiguration(struct soap*, const char*, struct __ns5__RemoveActionConfiguration *, const char*);
SOAP_FMAC1 struct __ns5__RemoveActionConfiguration * SOAP_FMAC2 soap_instantiate___ns5__RemoveActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__RemoveActionConfiguration * soap_new___ns5__RemoveActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__RemoveActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__RemoveActionConfiguration * soap_new_req___ns5__RemoveActionConfiguration(
	struct soap *soap)
{
	struct __ns5__RemoveActionConfiguration *_p = soap_new___ns5__RemoveActionConfiguration(soap);
	if (_p)
	{	soap_default___ns5__RemoveActionConfiguration(soap, _p);
	}
	return _p;
}

inline struct __ns5__RemoveActionConfiguration * soap_new_set___ns5__RemoveActionConfiguration(
	struct soap *soap,
	_ns5__RemoveActionConfiguration *ns5__RemoveActionConfiguration)
{
	struct __ns5__RemoveActionConfiguration *_p = soap_new___ns5__RemoveActionConfiguration(soap);
	if (_p)
	{	soap_default___ns5__RemoveActionConfiguration(soap, _p);
		_p->ns5__RemoveActionConfiguration = ns5__RemoveActionConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__RemoveActionConfiguration(struct soap*, const struct __ns5__RemoveActionConfiguration *, const char*, const char*);

inline int soap_write___ns5__RemoveActionConfiguration(struct soap *soap, struct __ns5__RemoveActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__RemoveActionConfiguration(soap, p), 0) || soap_put___ns5__RemoveActionConfiguration(soap, p, "-ns5:RemoveActionConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__RemoveActionConfiguration(struct soap *soap, const char *URL, struct __ns5__RemoveActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__RemoveActionConfiguration(soap, p), 0) || soap_put___ns5__RemoveActionConfiguration(soap, p, "-ns5:RemoveActionConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__RemoveActionConfiguration(struct soap *soap, const char *URL, struct __ns5__RemoveActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__RemoveActionConfiguration(soap, p), 0) || soap_put___ns5__RemoveActionConfiguration(soap, p, "-ns5:RemoveActionConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__RemoveActionConfiguration * SOAP_FMAC4 soap_get___ns5__RemoveActionConfiguration(struct soap*, struct __ns5__RemoveActionConfiguration *, const char*, const char*);

inline int soap_read___ns5__RemoveActionConfiguration(struct soap *soap, struct __ns5__RemoveActionConfiguration *p)
{
	if (p)
	{	soap_default___ns5__RemoveActionConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__RemoveActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__RemoveActionConfiguration(struct soap *soap, const char *URL, struct __ns5__RemoveActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__RemoveActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__RemoveActionConfiguration(struct soap *soap, struct __ns5__RemoveActionConfiguration *p)
{
	if (soap_read___ns5__RemoveActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__AddActionConfiguration_DEFINED
#define SOAP_TYPE___ns5__AddActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__AddActionConfiguration(struct soap*, struct __ns5__AddActionConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__AddActionConfiguration(struct soap*, const struct __ns5__AddActionConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__AddActionConfiguration(struct soap*, const char*, int, const struct __ns5__AddActionConfiguration *, const char*);
SOAP_FMAC3 struct __ns5__AddActionConfiguration * SOAP_FMAC4 soap_in___ns5__AddActionConfiguration(struct soap*, const char*, struct __ns5__AddActionConfiguration *, const char*);
SOAP_FMAC1 struct __ns5__AddActionConfiguration * SOAP_FMAC2 soap_instantiate___ns5__AddActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__AddActionConfiguration * soap_new___ns5__AddActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__AddActionConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__AddActionConfiguration * soap_new_req___ns5__AddActionConfiguration(
	struct soap *soap)
{
	struct __ns5__AddActionConfiguration *_p = soap_new___ns5__AddActionConfiguration(soap);
	if (_p)
	{	soap_default___ns5__AddActionConfiguration(soap, _p);
	}
	return _p;
}

inline struct __ns5__AddActionConfiguration * soap_new_set___ns5__AddActionConfiguration(
	struct soap *soap,
	_ns5__AddActionConfiguration *ns5__AddActionConfiguration)
{
	struct __ns5__AddActionConfiguration *_p = soap_new___ns5__AddActionConfiguration(soap);
	if (_p)
	{	soap_default___ns5__AddActionConfiguration(soap, _p);
		_p->ns5__AddActionConfiguration = ns5__AddActionConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__AddActionConfiguration(struct soap*, const struct __ns5__AddActionConfiguration *, const char*, const char*);

inline int soap_write___ns5__AddActionConfiguration(struct soap *soap, struct __ns5__AddActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__AddActionConfiguration(soap, p), 0) || soap_put___ns5__AddActionConfiguration(soap, p, "-ns5:AddActionConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__AddActionConfiguration(struct soap *soap, const char *URL, struct __ns5__AddActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__AddActionConfiguration(soap, p), 0) || soap_put___ns5__AddActionConfiguration(soap, p, "-ns5:AddActionConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__AddActionConfiguration(struct soap *soap, const char *URL, struct __ns5__AddActionConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__AddActionConfiguration(soap, p), 0) || soap_put___ns5__AddActionConfiguration(soap, p, "-ns5:AddActionConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__AddActionConfiguration * SOAP_FMAC4 soap_get___ns5__AddActionConfiguration(struct soap*, struct __ns5__AddActionConfiguration *, const char*, const char*);

inline int soap_read___ns5__AddActionConfiguration(struct soap *soap, struct __ns5__AddActionConfiguration *p)
{
	if (p)
	{	soap_default___ns5__AddActionConfiguration(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__AddActionConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__AddActionConfiguration(struct soap *soap, const char *URL, struct __ns5__AddActionConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__AddActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__AddActionConfiguration(struct soap *soap, struct __ns5__AddActionConfiguration *p)
{
	if (soap_read___ns5__AddActionConfiguration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns5__GetActionTemplates_DEFINED
#define SOAP_TYPE___ns5__GetActionTemplates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__GetActionTemplates(struct soap*, struct __ns5__GetActionTemplates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__GetActionTemplates(struct soap*, const struct __ns5__GetActionTemplates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__GetActionTemplates(struct soap*, const char*, int, const struct __ns5__GetActionTemplates *, const char*);
SOAP_FMAC3 struct __ns5__GetActionTemplates * SOAP_FMAC4 soap_in___ns5__GetActionTemplates(struct soap*, const char*, struct __ns5__GetActionTemplates *, const char*);
SOAP_FMAC1 struct __ns5__GetActionTemplates * SOAP_FMAC2 soap_instantiate___ns5__GetActionTemplates(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns5__GetActionTemplates * soap_new___ns5__GetActionTemplates(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns5__GetActionTemplates(soap, n, NULL, NULL, NULL);
}

inline struct __ns5__GetActionTemplates * soap_new_req___ns5__GetActionTemplates(
	struct soap *soap)
{
	struct __ns5__GetActionTemplates *_p = soap_new___ns5__GetActionTemplates(soap);
	if (_p)
	{	soap_default___ns5__GetActionTemplates(soap, _p);
	}
	return _p;
}

inline struct __ns5__GetActionTemplates * soap_new_set___ns5__GetActionTemplates(
	struct soap *soap,
	_ns5__GetActionTemplates *ns5__GetActionTemplates)
{
	struct __ns5__GetActionTemplates *_p = soap_new___ns5__GetActionTemplates(soap);
	if (_p)
	{	soap_default___ns5__GetActionTemplates(soap, _p);
		_p->ns5__GetActionTemplates = ns5__GetActionTemplates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__GetActionTemplates(struct soap*, const struct __ns5__GetActionTemplates *, const char*, const char*);

inline int soap_write___ns5__GetActionTemplates(struct soap *soap, struct __ns5__GetActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns5__GetActionTemplates(soap, p), 0) || soap_put___ns5__GetActionTemplates(soap, p, "-ns5:GetActionTemplates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns5__GetActionTemplates(struct soap *soap, const char *URL, struct __ns5__GetActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetActionTemplates(soap, p), 0) || soap_put___ns5__GetActionTemplates(soap, p, "-ns5:GetActionTemplates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns5__GetActionTemplates(struct soap *soap, const char *URL, struct __ns5__GetActionTemplates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns5__GetActionTemplates(soap, p), 0) || soap_put___ns5__GetActionTemplates(soap, p, "-ns5:GetActionTemplates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns5__GetActionTemplates * SOAP_FMAC4 soap_get___ns5__GetActionTemplates(struct soap*, struct __ns5__GetActionTemplates *, const char*, const char*);

inline int soap_read___ns5__GetActionTemplates(struct soap *soap, struct __ns5__GetActionTemplates *p)
{
	if (p)
	{	soap_default___ns5__GetActionTemplates(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns5__GetActionTemplates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns5__GetActionTemplates(struct soap *soap, const char *URL, struct __ns5__GetActionTemplates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns5__GetActionTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns5__GetActionTemplates(struct soap *soap, struct __ns5__GetActionTemplates *p)
{
	if (soap_read___ns5__GetActionTemplates(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ChangeVirtualInputState_DEFINED
#define SOAP_TYPE___ns1__ChangeVirtualInputState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeVirtualInputState(struct soap*, struct __ns1__ChangeVirtualInputState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeVirtualInputState(struct soap*, const struct __ns1__ChangeVirtualInputState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeVirtualInputState(struct soap*, const char*, int, const struct __ns1__ChangeVirtualInputState *, const char*);
SOAP_FMAC3 struct __ns1__ChangeVirtualInputState * SOAP_FMAC4 soap_in___ns1__ChangeVirtualInputState(struct soap*, const char*, struct __ns1__ChangeVirtualInputState *, const char*);
SOAP_FMAC1 struct __ns1__ChangeVirtualInputState * SOAP_FMAC2 soap_instantiate___ns1__ChangeVirtualInputState(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ChangeVirtualInputState * soap_new___ns1__ChangeVirtualInputState(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ChangeVirtualInputState(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ChangeVirtualInputState * soap_new_req___ns1__ChangeVirtualInputState(
	struct soap *soap)
{
	struct __ns1__ChangeVirtualInputState *_p = soap_new___ns1__ChangeVirtualInputState(soap);
	if (_p)
	{	soap_default___ns1__ChangeVirtualInputState(soap, _p);
	}
	return _p;
}

inline struct __ns1__ChangeVirtualInputState * soap_new_set___ns1__ChangeVirtualInputState(
	struct soap *soap,
	_ns1__ChangeVirtualInputState *ns1__ChangeVirtualInputState)
{
	struct __ns1__ChangeVirtualInputState *_p = soap_new___ns1__ChangeVirtualInputState(soap);
	if (_p)
	{	soap_default___ns1__ChangeVirtualInputState(soap, _p);
		_p->ns1__ChangeVirtualInputState = ns1__ChangeVirtualInputState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeVirtualInputState(struct soap*, const struct __ns1__ChangeVirtualInputState *, const char*, const char*);

inline int soap_write___ns1__ChangeVirtualInputState(struct soap *soap, struct __ns1__ChangeVirtualInputState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ChangeVirtualInputState(soap, p), 0) || soap_put___ns1__ChangeVirtualInputState(soap, p, "-ns1:ChangeVirtualInputState", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ChangeVirtualInputState(struct soap *soap, const char *URL, struct __ns1__ChangeVirtualInputState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChangeVirtualInputState(soap, p), 0) || soap_put___ns1__ChangeVirtualInputState(soap, p, "-ns1:ChangeVirtualInputState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ChangeVirtualInputState(struct soap *soap, const char *URL, struct __ns1__ChangeVirtualInputState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ChangeVirtualInputState(soap, p), 0) || soap_put___ns1__ChangeVirtualInputState(soap, p, "-ns1:ChangeVirtualInputState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ChangeVirtualInputState * SOAP_FMAC4 soap_get___ns1__ChangeVirtualInputState(struct soap*, struct __ns1__ChangeVirtualInputState *, const char*, const char*);

inline int soap_read___ns1__ChangeVirtualInputState(struct soap *soap, struct __ns1__ChangeVirtualInputState *p)
{
	if (p)
	{	soap_default___ns1__ChangeVirtualInputState(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ChangeVirtualInputState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ChangeVirtualInputState(struct soap *soap, const char *URL, struct __ns1__ChangeVirtualInputState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ChangeVirtualInputState(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ChangeVirtualInputState(struct soap *soap, struct __ns1__ChangeVirtualInputState *p)
{
	if (soap_read___ns1__ChangeVirtualInputState(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetScheduledEvents_DEFINED
#define SOAP_TYPE___ns1__GetScheduledEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetScheduledEvents(struct soap*, struct __ns1__GetScheduledEvents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetScheduledEvents(struct soap*, const struct __ns1__GetScheduledEvents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetScheduledEvents(struct soap*, const char*, int, const struct __ns1__GetScheduledEvents *, const char*);
SOAP_FMAC3 struct __ns1__GetScheduledEvents * SOAP_FMAC4 soap_in___ns1__GetScheduledEvents(struct soap*, const char*, struct __ns1__GetScheduledEvents *, const char*);
SOAP_FMAC1 struct __ns1__GetScheduledEvents * SOAP_FMAC2 soap_instantiate___ns1__GetScheduledEvents(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetScheduledEvents * soap_new___ns1__GetScheduledEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetScheduledEvents(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetScheduledEvents * soap_new_req___ns1__GetScheduledEvents(
	struct soap *soap)
{
	struct __ns1__GetScheduledEvents *_p = soap_new___ns1__GetScheduledEvents(soap);
	if (_p)
	{	soap_default___ns1__GetScheduledEvents(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetScheduledEvents * soap_new_set___ns1__GetScheduledEvents(
	struct soap *soap,
	_ns1__GetScheduledEvents *ns1__GetScheduledEvents)
{
	struct __ns1__GetScheduledEvents *_p = soap_new___ns1__GetScheduledEvents(soap);
	if (_p)
	{	soap_default___ns1__GetScheduledEvents(soap, _p);
		_p->ns1__GetScheduledEvents = ns1__GetScheduledEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetScheduledEvents(struct soap*, const struct __ns1__GetScheduledEvents *, const char*, const char*);

inline int soap_write___ns1__GetScheduledEvents(struct soap *soap, struct __ns1__GetScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetScheduledEvents(soap, p), 0) || soap_put___ns1__GetScheduledEvents(soap, p, "-ns1:GetScheduledEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetScheduledEvents(struct soap *soap, const char *URL, struct __ns1__GetScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetScheduledEvents(soap, p), 0) || soap_put___ns1__GetScheduledEvents(soap, p, "-ns1:GetScheduledEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetScheduledEvents(struct soap *soap, const char *URL, struct __ns1__GetScheduledEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetScheduledEvents(soap, p), 0) || soap_put___ns1__GetScheduledEvents(soap, p, "-ns1:GetScheduledEvents", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetScheduledEvents * SOAP_FMAC4 soap_get___ns1__GetScheduledEvents(struct soap*, struct __ns1__GetScheduledEvents *, const char*, const char*);

inline int soap_read___ns1__GetScheduledEvents(struct soap *soap, struct __ns1__GetScheduledEvents *p)
{
	if (p)
	{	soap_default___ns1__GetScheduledEvents(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetScheduledEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetScheduledEvents(struct soap *soap, const char *URL, struct __ns1__GetScheduledEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetScheduledEvents(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetScheduledEvents(struct soap *soap, struct __ns1__GetScheduledEvents *p)
{
	if (soap_read___ns1__GetScheduledEvents(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RemoveScheduledEvent_DEFINED
#define SOAP_TYPE___ns1__RemoveScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveScheduledEvent(struct soap*, struct __ns1__RemoveScheduledEvent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveScheduledEvent(struct soap*, const struct __ns1__RemoveScheduledEvent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveScheduledEvent(struct soap*, const char*, int, const struct __ns1__RemoveScheduledEvent *, const char*);
SOAP_FMAC3 struct __ns1__RemoveScheduledEvent * SOAP_FMAC4 soap_in___ns1__RemoveScheduledEvent(struct soap*, const char*, struct __ns1__RemoveScheduledEvent *, const char*);
SOAP_FMAC1 struct __ns1__RemoveScheduledEvent * SOAP_FMAC2 soap_instantiate___ns1__RemoveScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveScheduledEvent * soap_new___ns1__RemoveScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RemoveScheduledEvent(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RemoveScheduledEvent * soap_new_req___ns1__RemoveScheduledEvent(
	struct soap *soap)
{
	struct __ns1__RemoveScheduledEvent *_p = soap_new___ns1__RemoveScheduledEvent(soap);
	if (_p)
	{	soap_default___ns1__RemoveScheduledEvent(soap, _p);
	}
	return _p;
}

inline struct __ns1__RemoveScheduledEvent * soap_new_set___ns1__RemoveScheduledEvent(
	struct soap *soap,
	_ns1__RemoveScheduledEvent *ns1__RemoveScheduledEvent)
{
	struct __ns1__RemoveScheduledEvent *_p = soap_new___ns1__RemoveScheduledEvent(soap);
	if (_p)
	{	soap_default___ns1__RemoveScheduledEvent(soap, _p);
		_p->ns1__RemoveScheduledEvent = ns1__RemoveScheduledEvent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveScheduledEvent(struct soap*, const struct __ns1__RemoveScheduledEvent *, const char*, const char*);

inline int soap_write___ns1__RemoveScheduledEvent(struct soap *soap, struct __ns1__RemoveScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__RemoveScheduledEvent(soap, p), 0) || soap_put___ns1__RemoveScheduledEvent(soap, p, "-ns1:RemoveScheduledEvent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RemoveScheduledEvent(struct soap *soap, const char *URL, struct __ns1__RemoveScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__RemoveScheduledEvent(soap, p), 0) || soap_put___ns1__RemoveScheduledEvent(soap, p, "-ns1:RemoveScheduledEvent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RemoveScheduledEvent(struct soap *soap, const char *URL, struct __ns1__RemoveScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__RemoveScheduledEvent(soap, p), 0) || soap_put___ns1__RemoveScheduledEvent(soap, p, "-ns1:RemoveScheduledEvent", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RemoveScheduledEvent * SOAP_FMAC4 soap_get___ns1__RemoveScheduledEvent(struct soap*, struct __ns1__RemoveScheduledEvent *, const char*, const char*);

inline int soap_read___ns1__RemoveScheduledEvent(struct soap *soap, struct __ns1__RemoveScheduledEvent *p)
{
	if (p)
	{	soap_default___ns1__RemoveScheduledEvent(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RemoveScheduledEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RemoveScheduledEvent(struct soap *soap, const char *URL, struct __ns1__RemoveScheduledEvent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__RemoveScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__RemoveScheduledEvent(struct soap *soap, struct __ns1__RemoveScheduledEvent *p)
{
	if (soap_read___ns1__RemoveScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__AddScheduledEvent_DEFINED
#define SOAP_TYPE___ns1__AddScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddScheduledEvent(struct soap*, struct __ns1__AddScheduledEvent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddScheduledEvent(struct soap*, const struct __ns1__AddScheduledEvent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddScheduledEvent(struct soap*, const char*, int, const struct __ns1__AddScheduledEvent *, const char*);
SOAP_FMAC3 struct __ns1__AddScheduledEvent * SOAP_FMAC4 soap_in___ns1__AddScheduledEvent(struct soap*, const char*, struct __ns1__AddScheduledEvent *, const char*);
SOAP_FMAC1 struct __ns1__AddScheduledEvent * SOAP_FMAC2 soap_instantiate___ns1__AddScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddScheduledEvent * soap_new___ns1__AddScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AddScheduledEvent(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddScheduledEvent * soap_new_req___ns1__AddScheduledEvent(
	struct soap *soap)
{
	struct __ns1__AddScheduledEvent *_p = soap_new___ns1__AddScheduledEvent(soap);
	if (_p)
	{	soap_default___ns1__AddScheduledEvent(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddScheduledEvent * soap_new_set___ns1__AddScheduledEvent(
	struct soap *soap,
	_ns1__AddScheduledEvent *ns1__AddScheduledEvent)
{
	struct __ns1__AddScheduledEvent *_p = soap_new___ns1__AddScheduledEvent(soap);
	if (_p)
	{	soap_default___ns1__AddScheduledEvent(soap, _p);
		_p->ns1__AddScheduledEvent = ns1__AddScheduledEvent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddScheduledEvent(struct soap*, const struct __ns1__AddScheduledEvent *, const char*, const char*);

inline int soap_write___ns1__AddScheduledEvent(struct soap *soap, struct __ns1__AddScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__AddScheduledEvent(soap, p), 0) || soap_put___ns1__AddScheduledEvent(soap, p, "-ns1:AddScheduledEvent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddScheduledEvent(struct soap *soap, const char *URL, struct __ns1__AddScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AddScheduledEvent(soap, p), 0) || soap_put___ns1__AddScheduledEvent(soap, p, "-ns1:AddScheduledEvent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddScheduledEvent(struct soap *soap, const char *URL, struct __ns1__AddScheduledEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__AddScheduledEvent(soap, p), 0) || soap_put___ns1__AddScheduledEvent(soap, p, "-ns1:AddScheduledEvent", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddScheduledEvent * SOAP_FMAC4 soap_get___ns1__AddScheduledEvent(struct soap*, struct __ns1__AddScheduledEvent *, const char*, const char*);

inline int soap_read___ns1__AddScheduledEvent(struct soap *soap, struct __ns1__AddScheduledEvent *p)
{
	if (p)
	{	soap_default___ns1__AddScheduledEvent(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__AddScheduledEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddScheduledEvent(struct soap *soap, const char *URL, struct __ns1__AddScheduledEvent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__AddScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__AddScheduledEvent(struct soap *soap, struct __ns1__AddScheduledEvent *p)
{
	if (soap_read___ns1__AddScheduledEvent(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetEventInstances_DEFINED
#define SOAP_TYPE___ns1__GetEventInstances_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetEventInstances(struct soap*, struct __ns1__GetEventInstances *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetEventInstances(struct soap*, const struct __ns1__GetEventInstances *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetEventInstances(struct soap*, const char*, int, const struct __ns1__GetEventInstances *, const char*);
SOAP_FMAC3 struct __ns1__GetEventInstances * SOAP_FMAC4 soap_in___ns1__GetEventInstances(struct soap*, const char*, struct __ns1__GetEventInstances *, const char*);
SOAP_FMAC1 struct __ns1__GetEventInstances * SOAP_FMAC2 soap_instantiate___ns1__GetEventInstances(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetEventInstances * soap_new___ns1__GetEventInstances(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetEventInstances(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetEventInstances * soap_new_req___ns1__GetEventInstances(
	struct soap *soap)
{
	struct __ns1__GetEventInstances *_p = soap_new___ns1__GetEventInstances(soap);
	if (_p)
	{	soap_default___ns1__GetEventInstances(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetEventInstances * soap_new_set___ns1__GetEventInstances(
	struct soap *soap,
	_ns1__GetEventInstances *ns1__GetEventInstances)
{
	struct __ns1__GetEventInstances *_p = soap_new___ns1__GetEventInstances(soap);
	if (_p)
	{	soap_default___ns1__GetEventInstances(soap, _p);
		_p->ns1__GetEventInstances = ns1__GetEventInstances;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetEventInstances(struct soap*, const struct __ns1__GetEventInstances *, const char*, const char*);

inline int soap_write___ns1__GetEventInstances(struct soap *soap, struct __ns1__GetEventInstances const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetEventInstances(soap, p), 0) || soap_put___ns1__GetEventInstances(soap, p, "-ns1:GetEventInstances", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetEventInstances(struct soap *soap, const char *URL, struct __ns1__GetEventInstances const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetEventInstances(soap, p), 0) || soap_put___ns1__GetEventInstances(soap, p, "-ns1:GetEventInstances", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetEventInstances(struct soap *soap, const char *URL, struct __ns1__GetEventInstances const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetEventInstances(soap, p), 0) || soap_put___ns1__GetEventInstances(soap, p, "-ns1:GetEventInstances", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetEventInstances * SOAP_FMAC4 soap_get___ns1__GetEventInstances(struct soap*, struct __ns1__GetEventInstances *, const char*, const char*);

inline int soap_read___ns1__GetEventInstances(struct soap *soap, struct __ns1__GetEventInstances *p)
{
	if (p)
	{	soap_default___ns1__GetEventInstances(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetEventInstances(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetEventInstances(struct soap *soap, const char *URL, struct __ns1__GetEventInstances *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetEventInstances(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetEventInstances(struct soap *soap, struct __ns1__GetEventInstances *p)
{
	if (soap_read___ns1__GetEventInstances(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	const struct soap_dom_attribute& __anyAttribute,
	_ns1__InvalidScheduleFault *ns1__InvalidScheduleFault,
	_ns1__InvalidScheduledEventIDFault *ns1__InvalidScheduledEventIDFault,
	_ns1__ScheduledEventAlreadyExistsFault *ns1__ScheduledEventAlreadyExistsFault,
	_ns1__ScheduledEventNotFoundFault *ns1__ScheduledEventNotFoundFault,
	_ns5__ActionConfigurationIsInUseFault *ns5__ActionConfigurationIsInUseFault,
	_ns5__ActionConfigurationNotFoundFault *ns5__ActionConfigurationNotFoundFault,
	_ns5__ActionRuleNotFoundFault *ns5__ActionRuleNotFoundFault,
	_ns5__ActionTemplateNotFoundFault *ns5__ActionTemplateNotFoundFault,
	_ns5__InsufficientActivationRuleFault *ns5__InsufficientActivationRuleFault,
	_ns5__InvalidActionConfigurationFault *ns5__InvalidActionConfigurationFault,
	_ns5__InvalidActivationTimeoutFault *ns5__InvalidActivationTimeoutFault,
	_ns5__InvalidConditionFilterFault *ns5__InvalidConditionFilterFault,
	ns3__InvalidFilterFaultType *ns3__InvalidFilterFault,
	ns3__InvalidMessageContentExpressionFaultType *ns3__InvalidMessageContentExpressionFault,
	ns3__InvalidTopicExpressionFaultType *ns3__InvalidTopicExpressionFault,
	_ns5__ParametersMissmatchFault *ns5__ParametersMissmatchFault,
	_ns5__RecipientConfigurationNotFoundFault *ns5__RecipientConfigurationNotFoundFault,
	_ns5__RecipientTemplateNotFoundFault *ns5__RecipientTemplateNotFoundFault,
	ns3__TopicExpressionDialectUnknownFaultType *ns3__TopicExpressionDialectUnknownFault,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__anyAttribute = __anyAttribute;
		_p->ns1__InvalidScheduleFault = ns1__InvalidScheduleFault;
		_p->ns1__InvalidScheduledEventIDFault = ns1__InvalidScheduledEventIDFault;
		_p->ns1__ScheduledEventAlreadyExistsFault = ns1__ScheduledEventAlreadyExistsFault;
		_p->ns1__ScheduledEventNotFoundFault = ns1__ScheduledEventNotFoundFault;
		_p->ns5__ActionConfigurationIsInUseFault = ns5__ActionConfigurationIsInUseFault;
		_p->ns5__ActionConfigurationNotFoundFault = ns5__ActionConfigurationNotFoundFault;
		_p->ns5__ActionRuleNotFoundFault = ns5__ActionRuleNotFoundFault;
		_p->ns5__ActionTemplateNotFoundFault = ns5__ActionTemplateNotFoundFault;
		_p->ns5__InsufficientActivationRuleFault = ns5__InsufficientActivationRuleFault;
		_p->ns5__InvalidActionConfigurationFault = ns5__InvalidActionConfigurationFault;
		_p->ns5__InvalidActivationTimeoutFault = ns5__InvalidActivationTimeoutFault;
		_p->ns5__InvalidConditionFilterFault = ns5__InvalidConditionFilterFault;
		_p->ns3__InvalidFilterFault = ns3__InvalidFilterFault;
		_p->ns3__InvalidMessageContentExpressionFault = ns3__InvalidMessageContentExpressionFault;
		_p->ns3__InvalidTopicExpressionFault = ns3__InvalidTopicExpressionFault;
		_p->ns5__ParametersMissmatchFault = ns5__ParametersMissmatchFault;
		_p->ns5__RecipientConfigurationNotFoundFault = ns5__RecipientConfigurationNotFoundFault;
		_p->ns5__RecipientTemplateNotFoundFault = ns5__RecipientTemplateNotFoundFault;
		_p->ns3__TopicExpressionDialectUnknownFault = ns3__TopicExpressionDialectUnknownFault;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_xsd__anyAttribute_DEFINED
#define SOAP_TYPE_xsd__anyAttribute_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyAttribute2s(struct soap*, struct soap_dom_attribute);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyAttribute(struct soap*, const char*, int, const struct soap_dom_attribute *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *);
SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_in_xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *, const char*);
SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_instantiate_xsd__anyAttribute(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_attribute * soap_new_xsd__anyAttribute(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyAttribute(soap, n, NULL, NULL, NULL);
}

inline struct soap_dom_attribute * soap_new_req_xsd__anyAttribute(
	struct soap *soap)
{
	struct soap_dom_attribute *_p = soap_new_xsd__anyAttribute(soap);
	if (_p)
	{	
	}
	return _p;
}

inline struct soap_dom_attribute * soap_new_set_xsd__anyAttribute(
	struct soap *soap)
{
	struct soap_dom_attribute *_p = soap_new_xsd__anyAttribute(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *, const char*, const char*);
SOAP_FMAC3 struct soap_dom_attribute * SOAP_FMAC4 soap_get_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *, const char*, const char*);
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyType(struct soap*, struct soap_dom_element *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyType(struct soap*, const struct soap_dom_element *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyType2s(struct soap*, struct soap_dom_element);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyType(struct soap*, const char*, int, const struct soap_dom_element *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyType(struct soap*, const char*, struct soap_dom_element *);
SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_in_xsd__anyType(struct soap*, const char*, struct soap_dom_element *, const char*);
SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_element * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline struct soap_dom_element * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	struct soap_dom_element *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	
	}
	return _p;
}

inline struct soap_dom_element * soap_new_set_xsd__anyType(
	struct soap *soap)
{
	struct soap_dom_element *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyType(struct soap*, const struct soap_dom_element *, const char*, const char*);

inline int soap_write_xsd__anyType(struct soap *soap, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__anyType(soap, p), 0) || soap_put_xsd__anyType(soap, p, "xsd:anyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct soap_dom_element * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, struct soap_dom_element *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, struct soap_dom_element *p)
{
	if (p)
	{	soap_default_xsd__anyType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, struct soap_dom_element *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, struct soap_dom_element *p)
{
	if (soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns5__RemoveActionRule_DEFINED
#define SOAP_TYPE_PointerTo_ns5__RemoveActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__RemoveActionRule(struct soap*, _ns5__RemoveActionRule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__RemoveActionRule(struct soap*, const char *, int, _ns5__RemoveActionRule *const*, const char *);
SOAP_FMAC3 _ns5__RemoveActionRule ** SOAP_FMAC4 soap_in_PointerTo_ns5__RemoveActionRule(struct soap*, const char*, _ns5__RemoveActionRule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__RemoveActionRule(struct soap*, _ns5__RemoveActionRule *const*, const char*, const char*);
SOAP_FMAC3 _ns5__RemoveActionRule ** SOAP_FMAC4 soap_get_PointerTo_ns5__RemoveActionRule(struct soap*, _ns5__RemoveActionRule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__GetActionRules_DEFINED
#define SOAP_TYPE_PointerTo_ns5__GetActionRules_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetActionRules(struct soap*, _ns5__GetActionRules *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetActionRules(struct soap*, const char *, int, _ns5__GetActionRules *const*, const char *);
SOAP_FMAC3 _ns5__GetActionRules ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetActionRules(struct soap*, const char*, _ns5__GetActionRules **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetActionRules(struct soap*, _ns5__GetActionRules *const*, const char*, const char*);
SOAP_FMAC3 _ns5__GetActionRules ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetActionRules(struct soap*, _ns5__GetActionRules **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__AddActionRule_DEFINED
#define SOAP_TYPE_PointerTo_ns5__AddActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__AddActionRule(struct soap*, _ns5__AddActionRule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__AddActionRule(struct soap*, const char *, int, _ns5__AddActionRule *const*, const char *);
SOAP_FMAC3 _ns5__AddActionRule ** SOAP_FMAC4 soap_in_PointerTo_ns5__AddActionRule(struct soap*, const char*, _ns5__AddActionRule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__AddActionRule(struct soap*, _ns5__AddActionRule *const*, const char*, const char*);
SOAP_FMAC3 _ns5__AddActionRule ** SOAP_FMAC4 soap_get_PointerTo_ns5__AddActionRule(struct soap*, _ns5__AddActionRule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__GetRecipientConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_ns5__GetRecipientConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetRecipientConfigurations(struct soap*, _ns5__GetRecipientConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetRecipientConfigurations(struct soap*, const char *, int, _ns5__GetRecipientConfigurations *const*, const char *);
SOAP_FMAC3 _ns5__GetRecipientConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetRecipientConfigurations(struct soap*, const char*, _ns5__GetRecipientConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetRecipientConfigurations(struct soap*, _ns5__GetRecipientConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _ns5__GetRecipientConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetRecipientConfigurations(struct soap*, _ns5__GetRecipientConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__RemoveRecipientConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_ns5__RemoveRecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__RemoveRecipientConfiguration(struct soap*, _ns5__RemoveRecipientConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__RemoveRecipientConfiguration(struct soap*, const char *, int, _ns5__RemoveRecipientConfiguration *const*, const char *);
SOAP_FMAC3 _ns5__RemoveRecipientConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns5__RemoveRecipientConfiguration(struct soap*, const char*, _ns5__RemoveRecipientConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__RemoveRecipientConfiguration(struct soap*, _ns5__RemoveRecipientConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _ns5__RemoveRecipientConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns5__RemoveRecipientConfiguration(struct soap*, _ns5__RemoveRecipientConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__AddRecipientConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_ns5__AddRecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__AddRecipientConfiguration(struct soap*, _ns5__AddRecipientConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__AddRecipientConfiguration(struct soap*, const char *, int, _ns5__AddRecipientConfiguration *const*, const char *);
SOAP_FMAC3 _ns5__AddRecipientConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns5__AddRecipientConfiguration(struct soap*, const char*, _ns5__AddRecipientConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__AddRecipientConfiguration(struct soap*, _ns5__AddRecipientConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _ns5__AddRecipientConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns5__AddRecipientConfiguration(struct soap*, _ns5__AddRecipientConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__GetRecipientTemplates_DEFINED
#define SOAP_TYPE_PointerTo_ns5__GetRecipientTemplates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetRecipientTemplates(struct soap*, _ns5__GetRecipientTemplates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetRecipientTemplates(struct soap*, const char *, int, _ns5__GetRecipientTemplates *const*, const char *);
SOAP_FMAC3 _ns5__GetRecipientTemplates ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetRecipientTemplates(struct soap*, const char*, _ns5__GetRecipientTemplates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetRecipientTemplates(struct soap*, _ns5__GetRecipientTemplates *const*, const char*, const char*);
SOAP_FMAC3 _ns5__GetRecipientTemplates ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetRecipientTemplates(struct soap*, _ns5__GetRecipientTemplates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__GetActionConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_ns5__GetActionConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetActionConfigurations(struct soap*, _ns5__GetActionConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetActionConfigurations(struct soap*, const char *, int, _ns5__GetActionConfigurations *const*, const char *);
SOAP_FMAC3 _ns5__GetActionConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetActionConfigurations(struct soap*, const char*, _ns5__GetActionConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetActionConfigurations(struct soap*, _ns5__GetActionConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _ns5__GetActionConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetActionConfigurations(struct soap*, _ns5__GetActionConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__RemoveActionConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_ns5__RemoveActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__RemoveActionConfiguration(struct soap*, _ns5__RemoveActionConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__RemoveActionConfiguration(struct soap*, const char *, int, _ns5__RemoveActionConfiguration *const*, const char *);
SOAP_FMAC3 _ns5__RemoveActionConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns5__RemoveActionConfiguration(struct soap*, const char*, _ns5__RemoveActionConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__RemoveActionConfiguration(struct soap*, _ns5__RemoveActionConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _ns5__RemoveActionConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns5__RemoveActionConfiguration(struct soap*, _ns5__RemoveActionConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__AddActionConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_ns5__AddActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__AddActionConfiguration(struct soap*, _ns5__AddActionConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__AddActionConfiguration(struct soap*, const char *, int, _ns5__AddActionConfiguration *const*, const char *);
SOAP_FMAC3 _ns5__AddActionConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns5__AddActionConfiguration(struct soap*, const char*, _ns5__AddActionConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__AddActionConfiguration(struct soap*, _ns5__AddActionConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _ns5__AddActionConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns5__AddActionConfiguration(struct soap*, _ns5__AddActionConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__GetActionTemplates_DEFINED
#define SOAP_TYPE_PointerTo_ns5__GetActionTemplates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetActionTemplates(struct soap*, _ns5__GetActionTemplates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetActionTemplates(struct soap*, const char *, int, _ns5__GetActionTemplates *const*, const char *);
SOAP_FMAC3 _ns5__GetActionTemplates ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetActionTemplates(struct soap*, const char*, _ns5__GetActionTemplates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetActionTemplates(struct soap*, _ns5__GetActionTemplates *const*, const char*, const char*);
SOAP_FMAC3 _ns5__GetActionTemplates ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetActionTemplates(struct soap*, _ns5__GetActionTemplates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ChangeVirtualInputState_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ChangeVirtualInputState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeVirtualInputState(struct soap*, _ns1__ChangeVirtualInputState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeVirtualInputState(struct soap*, const char *, int, _ns1__ChangeVirtualInputState *const*, const char *);
SOAP_FMAC3 _ns1__ChangeVirtualInputState ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeVirtualInputState(struct soap*, const char*, _ns1__ChangeVirtualInputState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeVirtualInputState(struct soap*, _ns1__ChangeVirtualInputState *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ChangeVirtualInputState ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeVirtualInputState(struct soap*, _ns1__ChangeVirtualInputState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetScheduledEvents_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetScheduledEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetScheduledEvents(struct soap*, _ns1__GetScheduledEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetScheduledEvents(struct soap*, const char *, int, _ns1__GetScheduledEvents *const*, const char *);
SOAP_FMAC3 _ns1__GetScheduledEvents ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetScheduledEvents(struct soap*, const char*, _ns1__GetScheduledEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetScheduledEvents(struct soap*, _ns1__GetScheduledEvents *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetScheduledEvents ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetScheduledEvents(struct soap*, _ns1__GetScheduledEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RemoveScheduledEvent_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RemoveScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveScheduledEvent(struct soap*, _ns1__RemoveScheduledEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveScheduledEvent(struct soap*, const char *, int, _ns1__RemoveScheduledEvent *const*, const char *);
SOAP_FMAC3 _ns1__RemoveScheduledEvent ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveScheduledEvent(struct soap*, const char*, _ns1__RemoveScheduledEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveScheduledEvent(struct soap*, _ns1__RemoveScheduledEvent *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RemoveScheduledEvent ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveScheduledEvent(struct soap*, _ns1__RemoveScheduledEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AddScheduledEvent_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AddScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddScheduledEvent(struct soap*, _ns1__AddScheduledEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddScheduledEvent(struct soap*, const char *, int, _ns1__AddScheduledEvent *const*, const char *);
SOAP_FMAC3 _ns1__AddScheduledEvent ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddScheduledEvent(struct soap*, const char*, _ns1__AddScheduledEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddScheduledEvent(struct soap*, _ns1__AddScheduledEvent *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AddScheduledEvent ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddScheduledEvent(struct soap*, _ns1__AddScheduledEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEventInstances_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEventInstances_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEventInstances(struct soap*, _ns1__GetEventInstances *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEventInstances(struct soap*, const char *, int, _ns1__GetEventInstances *const*, const char *);
SOAP_FMAC3 _ns1__GetEventInstances ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEventInstances(struct soap*, const char*, _ns1__GetEventInstances **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEventInstances(struct soap*, _ns1__GetEventInstances *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEventInstances ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEventInstances(struct soap*, _ns1__GetEventInstances **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TopicExpressionDialectUnknownFaultType_DEFINED
#define SOAP_TYPE_PointerTons3__TopicExpressionDialectUnknownFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TopicExpressionDialectUnknownFaultType(struct soap*, ns3__TopicExpressionDialectUnknownFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TopicExpressionDialectUnknownFaultType(struct soap*, const char *, int, ns3__TopicExpressionDialectUnknownFaultType *const*, const char *);
SOAP_FMAC3 ns3__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTons3__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, ns3__TopicExpressionDialectUnknownFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TopicExpressionDialectUnknownFaultType(struct soap*, ns3__TopicExpressionDialectUnknownFaultType *const*, const char*, const char*);
SOAP_FMAC3 ns3__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTons3__TopicExpressionDialectUnknownFaultType(struct soap*, ns3__TopicExpressionDialectUnknownFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__RecipientTemplateNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__RecipientTemplateNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__RecipientTemplateNotFoundFault(struct soap*, _ns5__RecipientTemplateNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__RecipientTemplateNotFoundFault(struct soap*, const char *, int, _ns5__RecipientTemplateNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns5__RecipientTemplateNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__RecipientTemplateNotFoundFault(struct soap*, const char*, _ns5__RecipientTemplateNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__RecipientTemplateNotFoundFault(struct soap*, _ns5__RecipientTemplateNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__RecipientTemplateNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__RecipientTemplateNotFoundFault(struct soap*, _ns5__RecipientTemplateNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__RecipientConfigurationNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__RecipientConfigurationNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__RecipientConfigurationNotFoundFault(struct soap*, _ns5__RecipientConfigurationNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__RecipientConfigurationNotFoundFault(struct soap*, const char *, int, _ns5__RecipientConfigurationNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns5__RecipientConfigurationNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__RecipientConfigurationNotFoundFault(struct soap*, const char*, _ns5__RecipientConfigurationNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__RecipientConfigurationNotFoundFault(struct soap*, _ns5__RecipientConfigurationNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__RecipientConfigurationNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__RecipientConfigurationNotFoundFault(struct soap*, _ns5__RecipientConfigurationNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__ParametersMissmatchFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__ParametersMissmatchFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__ParametersMissmatchFault(struct soap*, _ns5__ParametersMissmatchFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__ParametersMissmatchFault(struct soap*, const char *, int, _ns5__ParametersMissmatchFault *const*, const char *);
SOAP_FMAC3 _ns5__ParametersMissmatchFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__ParametersMissmatchFault(struct soap*, const char*, _ns5__ParametersMissmatchFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__ParametersMissmatchFault(struct soap*, _ns5__ParametersMissmatchFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__ParametersMissmatchFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__ParametersMissmatchFault(struct soap*, _ns5__ParametersMissmatchFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InvalidTopicExpressionFaultType_DEFINED
#define SOAP_TYPE_PointerTons3__InvalidTopicExpressionFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InvalidTopicExpressionFaultType(struct soap*, ns3__InvalidTopicExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InvalidTopicExpressionFaultType(struct soap*, const char *, int, ns3__InvalidTopicExpressionFaultType *const*, const char *);
SOAP_FMAC3 ns3__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTons3__InvalidTopicExpressionFaultType(struct soap*, const char*, ns3__InvalidTopicExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InvalidTopicExpressionFaultType(struct soap*, ns3__InvalidTopicExpressionFaultType *const*, const char*, const char*);
SOAP_FMAC3 ns3__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTons3__InvalidTopicExpressionFaultType(struct soap*, ns3__InvalidTopicExpressionFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InvalidMessageContentExpressionFaultType_DEFINED
#define SOAP_TYPE_PointerTons3__InvalidMessageContentExpressionFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InvalidMessageContentExpressionFaultType(struct soap*, ns3__InvalidMessageContentExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InvalidMessageContentExpressionFaultType(struct soap*, const char *, int, ns3__InvalidMessageContentExpressionFaultType *const*, const char *);
SOAP_FMAC3 ns3__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTons3__InvalidMessageContentExpressionFaultType(struct soap*, const char*, ns3__InvalidMessageContentExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InvalidMessageContentExpressionFaultType(struct soap*, ns3__InvalidMessageContentExpressionFaultType *const*, const char*, const char*);
SOAP_FMAC3 ns3__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTons3__InvalidMessageContentExpressionFaultType(struct soap*, ns3__InvalidMessageContentExpressionFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__InvalidFilterFaultType_DEFINED
#define SOAP_TYPE_PointerTons3__InvalidFilterFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InvalidFilterFaultType(struct soap*, ns3__InvalidFilterFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InvalidFilterFaultType(struct soap*, const char *, int, ns3__InvalidFilterFaultType *const*, const char *);
SOAP_FMAC3 ns3__InvalidFilterFaultType ** SOAP_FMAC4 soap_in_PointerTons3__InvalidFilterFaultType(struct soap*, const char*, ns3__InvalidFilterFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InvalidFilterFaultType(struct soap*, ns3__InvalidFilterFaultType *const*, const char*, const char*);
SOAP_FMAC3 ns3__InvalidFilterFaultType ** SOAP_FMAC4 soap_get_PointerTons3__InvalidFilterFaultType(struct soap*, ns3__InvalidFilterFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__InvalidConditionFilterFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__InvalidConditionFilterFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__InvalidConditionFilterFault(struct soap*, _ns5__InvalidConditionFilterFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__InvalidConditionFilterFault(struct soap*, const char *, int, _ns5__InvalidConditionFilterFault *const*, const char *);
SOAP_FMAC3 _ns5__InvalidConditionFilterFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__InvalidConditionFilterFault(struct soap*, const char*, _ns5__InvalidConditionFilterFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__InvalidConditionFilterFault(struct soap*, _ns5__InvalidConditionFilterFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__InvalidConditionFilterFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__InvalidConditionFilterFault(struct soap*, _ns5__InvalidConditionFilterFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__InvalidActivationTimeoutFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__InvalidActivationTimeoutFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__InvalidActivationTimeoutFault(struct soap*, _ns5__InvalidActivationTimeoutFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__InvalidActivationTimeoutFault(struct soap*, const char *, int, _ns5__InvalidActivationTimeoutFault *const*, const char *);
SOAP_FMAC3 _ns5__InvalidActivationTimeoutFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__InvalidActivationTimeoutFault(struct soap*, const char*, _ns5__InvalidActivationTimeoutFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__InvalidActivationTimeoutFault(struct soap*, _ns5__InvalidActivationTimeoutFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__InvalidActivationTimeoutFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__InvalidActivationTimeoutFault(struct soap*, _ns5__InvalidActivationTimeoutFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__InvalidActionConfigurationFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__InvalidActionConfigurationFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__InvalidActionConfigurationFault(struct soap*, _ns5__InvalidActionConfigurationFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__InvalidActionConfigurationFault(struct soap*, const char *, int, _ns5__InvalidActionConfigurationFault *const*, const char *);
SOAP_FMAC3 _ns5__InvalidActionConfigurationFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__InvalidActionConfigurationFault(struct soap*, const char*, _ns5__InvalidActionConfigurationFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__InvalidActionConfigurationFault(struct soap*, _ns5__InvalidActionConfigurationFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__InvalidActionConfigurationFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__InvalidActionConfigurationFault(struct soap*, _ns5__InvalidActionConfigurationFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__InsufficientActivationRuleFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__InsufficientActivationRuleFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__InsufficientActivationRuleFault(struct soap*, _ns5__InsufficientActivationRuleFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__InsufficientActivationRuleFault(struct soap*, const char *, int, _ns5__InsufficientActivationRuleFault *const*, const char *);
SOAP_FMAC3 _ns5__InsufficientActivationRuleFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__InsufficientActivationRuleFault(struct soap*, const char*, _ns5__InsufficientActivationRuleFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__InsufficientActivationRuleFault(struct soap*, _ns5__InsufficientActivationRuleFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__InsufficientActivationRuleFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__InsufficientActivationRuleFault(struct soap*, _ns5__InsufficientActivationRuleFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__ActionTemplateNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__ActionTemplateNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__ActionTemplateNotFoundFault(struct soap*, _ns5__ActionTemplateNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__ActionTemplateNotFoundFault(struct soap*, const char *, int, _ns5__ActionTemplateNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns5__ActionTemplateNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__ActionTemplateNotFoundFault(struct soap*, const char*, _ns5__ActionTemplateNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__ActionTemplateNotFoundFault(struct soap*, _ns5__ActionTemplateNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__ActionTemplateNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__ActionTemplateNotFoundFault(struct soap*, _ns5__ActionTemplateNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__ActionRuleNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__ActionRuleNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__ActionRuleNotFoundFault(struct soap*, _ns5__ActionRuleNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__ActionRuleNotFoundFault(struct soap*, const char *, int, _ns5__ActionRuleNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns5__ActionRuleNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__ActionRuleNotFoundFault(struct soap*, const char*, _ns5__ActionRuleNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__ActionRuleNotFoundFault(struct soap*, _ns5__ActionRuleNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__ActionRuleNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__ActionRuleNotFoundFault(struct soap*, _ns5__ActionRuleNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__ActionConfigurationNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__ActionConfigurationNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__ActionConfigurationNotFoundFault(struct soap*, _ns5__ActionConfigurationNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__ActionConfigurationNotFoundFault(struct soap*, const char *, int, _ns5__ActionConfigurationNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns5__ActionConfigurationNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__ActionConfigurationNotFoundFault(struct soap*, const char*, _ns5__ActionConfigurationNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__ActionConfigurationNotFoundFault(struct soap*, _ns5__ActionConfigurationNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__ActionConfigurationNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__ActionConfigurationNotFoundFault(struct soap*, _ns5__ActionConfigurationNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns5__ActionConfigurationIsInUseFault_DEFINED
#define SOAP_TYPE_PointerTo_ns5__ActionConfigurationIsInUseFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__ActionConfigurationIsInUseFault(struct soap*, _ns5__ActionConfigurationIsInUseFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__ActionConfigurationIsInUseFault(struct soap*, const char *, int, _ns5__ActionConfigurationIsInUseFault *const*, const char *);
SOAP_FMAC3 _ns5__ActionConfigurationIsInUseFault ** SOAP_FMAC4 soap_in_PointerTo_ns5__ActionConfigurationIsInUseFault(struct soap*, const char*, _ns5__ActionConfigurationIsInUseFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__ActionConfigurationIsInUseFault(struct soap*, _ns5__ActionConfigurationIsInUseFault *const*, const char*, const char*);
SOAP_FMAC3 _ns5__ActionConfigurationIsInUseFault ** SOAP_FMAC4 soap_get_PointerTo_ns5__ActionConfigurationIsInUseFault(struct soap*, _ns5__ActionConfigurationIsInUseFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ScheduledEventNotFoundFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ScheduledEventNotFoundFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ScheduledEventNotFoundFault(struct soap*, _ns1__ScheduledEventNotFoundFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ScheduledEventNotFoundFault(struct soap*, const char *, int, _ns1__ScheduledEventNotFoundFault *const*, const char *);
SOAP_FMAC3 _ns1__ScheduledEventNotFoundFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__ScheduledEventNotFoundFault(struct soap*, const char*, _ns1__ScheduledEventNotFoundFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ScheduledEventNotFoundFault(struct soap*, _ns1__ScheduledEventNotFoundFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ScheduledEventNotFoundFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__ScheduledEventNotFoundFault(struct soap*, _ns1__ScheduledEventNotFoundFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ScheduledEventAlreadyExistsFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ScheduledEventAlreadyExistsFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ScheduledEventAlreadyExistsFault(struct soap*, _ns1__ScheduledEventAlreadyExistsFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ScheduledEventAlreadyExistsFault(struct soap*, const char *, int, _ns1__ScheduledEventAlreadyExistsFault *const*, const char *);
SOAP_FMAC3 _ns1__ScheduledEventAlreadyExistsFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__ScheduledEventAlreadyExistsFault(struct soap*, const char*, _ns1__ScheduledEventAlreadyExistsFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ScheduledEventAlreadyExistsFault(struct soap*, _ns1__ScheduledEventAlreadyExistsFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ScheduledEventAlreadyExistsFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__ScheduledEventAlreadyExistsFault(struct soap*, _ns1__ScheduledEventAlreadyExistsFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InvalidScheduledEventIDFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InvalidScheduledEventIDFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InvalidScheduledEventIDFault(struct soap*, _ns1__InvalidScheduledEventIDFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InvalidScheduledEventIDFault(struct soap*, const char *, int, _ns1__InvalidScheduledEventIDFault *const*, const char *);
SOAP_FMAC3 _ns1__InvalidScheduledEventIDFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__InvalidScheduledEventIDFault(struct soap*, const char*, _ns1__InvalidScheduledEventIDFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InvalidScheduledEventIDFault(struct soap*, _ns1__InvalidScheduledEventIDFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InvalidScheduledEventIDFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__InvalidScheduledEventIDFault(struct soap*, _ns1__InvalidScheduledEventIDFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InvalidScheduleFault_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InvalidScheduleFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InvalidScheduleFault(struct soap*, _ns1__InvalidScheduleFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InvalidScheduleFault(struct soap*, const char *, int, _ns1__InvalidScheduleFault *const*, const char *);
SOAP_FMAC3 _ns1__InvalidScheduleFault ** SOAP_FMAC4 soap_in_PointerTo_ns1__InvalidScheduleFault(struct soap*, const char*, _ns1__InvalidScheduleFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InvalidScheduleFault(struct soap*, _ns1__InvalidScheduleFault *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InvalidScheduleFault ** SOAP_FMAC4 soap_get_PointerTo_ns1__InvalidScheduleFault(struct soap*, _ns1__InvalidScheduleFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__NCName_DEFINED
#define SOAP_TYPE_PointerToxsd__NCName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ConcreteTopicExpression_DEFINED
#define SOAP_TYPE_PointerTons2__ConcreteTopicExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ConcreteTopicExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ConcreteTopicExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__ConcreteTopicExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ConcreteTopicExpression(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__ConcreteTopicExpression(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__QName_DEFINED
#define SOAP_TYPE_PointerToxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TopicType_DEFINED
#define SOAP_TYPE_PointerTons2__TopicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TopicType(struct soap*, ns2__TopicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TopicType(struct soap*, const char *, int, ns2__TopicType *const*, const char *);
SOAP_FMAC3 ns2__TopicType ** SOAP_FMAC4 soap_in_PointerTons2__TopicType(struct soap*, const char*, ns2__TopicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TopicType(struct soap*, ns2__TopicType *const*, const char*, const char*);
SOAP_FMAC3 ns2__TopicType ** SOAP_FMAC4 soap_get_PointerTons2__TopicType(struct soap*, ns2__TopicType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__QueryExpressionType_DEFINED
#define SOAP_TYPE_PointerTons2__QueryExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__QueryExpressionType(struct soap*, ns2__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__QueryExpressionType(struct soap*, const char *, int, ns2__QueryExpressionType *const*, const char *);
SOAP_FMAC3 ns2__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTons2__QueryExpressionType(struct soap*, const char*, ns2__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__QueryExpressionType(struct soap*, ns2__QueryExpressionType *const*, const char*, const char*);
SOAP_FMAC3 ns2__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTons2__QueryExpressionType(struct soap*, ns2__QueryExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__MetadataType_DEFINED
#define SOAP_TYPE_PointerTons6__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__MetadataType(struct soap*, ns6__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__MetadataType(struct soap*, const char *, int, ns6__MetadataType *const*, const char *);
SOAP_FMAC3 ns6__MetadataType ** SOAP_FMAC4 soap_in_PointerTons6__MetadataType(struct soap*, const char*, ns6__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__MetadataType(struct soap*, ns6__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 ns6__MetadataType ** SOAP_FMAC4 soap_get_PointerTons6__MetadataType(struct soap*, ns6__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTons6__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ReferenceParametersType(struct soap*, ns6__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ReferenceParametersType(struct soap*, const char *, int, ns6__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 ns6__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTons6__ReferenceParametersType(struct soap*, const char*, ns6__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ReferenceParametersType(struct soap*, ns6__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 ns6__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTons6__ReferenceParametersType(struct soap*, ns6__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__AttributedURIType_DEFINED
#define SOAP_TYPE_PointerTons6__AttributedURIType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__AttributedURIType(struct soap*, ns6__AttributedURIType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__AttributedURIType(struct soap*, const char *, int, ns6__AttributedURIType *const*, const char *);
SOAP_FMAC3 ns6__AttributedURIType ** SOAP_FMAC4 soap_in_PointerTons6__AttributedURIType(struct soap*, const char*, ns6__AttributedURIType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__AttributedURIType(struct soap*, ns6__AttributedURIType *const*, const char*, const char*);
SOAP_FMAC3 ns6__AttributedURIType ** SOAP_FMAC4 soap_get_PointerTons6__AttributedURIType(struct soap*, ns6__AttributedURIType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__UsedByActionRules_DEFINED
#define SOAP_TYPE_PointerTons5__UsedByActionRules_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__UsedByActionRules(struct soap*, ns5__UsedByActionRules *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__UsedByActionRules(struct soap*, const char *, int, ns5__UsedByActionRules *const*, const char *);
SOAP_FMAC3 ns5__UsedByActionRules ** SOAP_FMAC4 soap_in_PointerTons5__UsedByActionRules(struct soap*, const char*, ns5__UsedByActionRules **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__UsedByActionRules(struct soap*, ns5__UsedByActionRules *const*, const char*, const char*);
SOAP_FMAC3 ns5__UsedByActionRules ** SOAP_FMAC4 soap_get_PointerTons5__UsedByActionRules(struct soap*, ns5__UsedByActionRules **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionRules_DEFINED
#define SOAP_TYPE_PointerTons5__ActionRules_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionRules(struct soap*, ns5__ActionRules *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionRules(struct soap*, const char *, int, ns5__ActionRules *const*, const char *);
SOAP_FMAC3 ns5__ActionRules ** SOAP_FMAC4 soap_in_PointerTons5__ActionRules(struct soap*, const char*, ns5__ActionRules **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionRules(struct soap*, ns5__ActionRules *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionRules ** SOAP_FMAC4 soap_get_PointerTons5__ActionRules(struct soap*, ns5__ActionRules **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__NewActionRule_DEFINED
#define SOAP_TYPE_PointerTons5__NewActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__NewActionRule(struct soap*, ns5__NewActionRule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__NewActionRule(struct soap*, const char *, int, ns5__NewActionRule *const*, const char *);
SOAP_FMAC3 ns5__NewActionRule ** SOAP_FMAC4 soap_in_PointerTons5__NewActionRule(struct soap*, const char*, ns5__NewActionRule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__NewActionRule(struct soap*, ns5__NewActionRule *const*, const char*, const char*);
SOAP_FMAC3 ns5__NewActionRule ** SOAP_FMAC4 soap_get_PointerTons5__NewActionRule(struct soap*, ns5__NewActionRule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__RecipientConfigurations_DEFINED
#define SOAP_TYPE_PointerTons5__RecipientConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RecipientConfigurations(struct soap*, ns5__RecipientConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RecipientConfigurations(struct soap*, const char *, int, ns5__RecipientConfigurations *const*, const char *);
SOAP_FMAC3 ns5__RecipientConfigurations ** SOAP_FMAC4 soap_in_PointerTons5__RecipientConfigurations(struct soap*, const char*, ns5__RecipientConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RecipientConfigurations(struct soap*, ns5__RecipientConfigurations *const*, const char*, const char*);
SOAP_FMAC3 ns5__RecipientConfigurations ** SOAP_FMAC4 soap_get_PointerTons5__RecipientConfigurations(struct soap*, ns5__RecipientConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__NewRecipientConfiguration_DEFINED
#define SOAP_TYPE_PointerTons5__NewRecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__NewRecipientConfiguration(struct soap*, ns5__NewRecipientConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__NewRecipientConfiguration(struct soap*, const char *, int, ns5__NewRecipientConfiguration *const*, const char *);
SOAP_FMAC3 ns5__NewRecipientConfiguration ** SOAP_FMAC4 soap_in_PointerTons5__NewRecipientConfiguration(struct soap*, const char*, ns5__NewRecipientConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__NewRecipientConfiguration(struct soap*, ns5__NewRecipientConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns5__NewRecipientConfiguration ** SOAP_FMAC4 soap_get_PointerTons5__NewRecipientConfiguration(struct soap*, ns5__NewRecipientConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__RecipientTemplates_DEFINED
#define SOAP_TYPE_PointerTons5__RecipientTemplates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RecipientTemplates(struct soap*, ns5__RecipientTemplates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RecipientTemplates(struct soap*, const char *, int, ns5__RecipientTemplates *const*, const char *);
SOAP_FMAC3 ns5__RecipientTemplates ** SOAP_FMAC4 soap_in_PointerTons5__RecipientTemplates(struct soap*, const char*, ns5__RecipientTemplates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RecipientTemplates(struct soap*, ns5__RecipientTemplates *const*, const char*, const char*);
SOAP_FMAC3 ns5__RecipientTemplates ** SOAP_FMAC4 soap_get_PointerTons5__RecipientTemplates(struct soap*, ns5__RecipientTemplates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionConfigurations_DEFINED
#define SOAP_TYPE_PointerTons5__ActionConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionConfigurations(struct soap*, ns5__ActionConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionConfigurations(struct soap*, const char *, int, ns5__ActionConfigurations *const*, const char *);
SOAP_FMAC3 ns5__ActionConfigurations ** SOAP_FMAC4 soap_in_PointerTons5__ActionConfigurations(struct soap*, const char*, ns5__ActionConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionConfigurations(struct soap*, ns5__ActionConfigurations *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionConfigurations ** SOAP_FMAC4 soap_get_PointerTons5__ActionConfigurations(struct soap*, ns5__ActionConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__NewActionConfiguration_DEFINED
#define SOAP_TYPE_PointerTons5__NewActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__NewActionConfiguration(struct soap*, ns5__NewActionConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__NewActionConfiguration(struct soap*, const char *, int, ns5__NewActionConfiguration *const*, const char *);
SOAP_FMAC3 ns5__NewActionConfiguration ** SOAP_FMAC4 soap_in_PointerTons5__NewActionConfiguration(struct soap*, const char*, ns5__NewActionConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__NewActionConfiguration(struct soap*, ns5__NewActionConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns5__NewActionConfiguration ** SOAP_FMAC4 soap_get_PointerTons5__NewActionConfiguration(struct soap*, ns5__NewActionConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionTemplates_DEFINED
#define SOAP_TYPE_PointerTons5__ActionTemplates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionTemplates(struct soap*, ns5__ActionTemplates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionTemplates(struct soap*, const char *, int, ns5__ActionTemplates *const*, const char *);
SOAP_FMAC3 ns5__ActionTemplates ** SOAP_FMAC4 soap_in_PointerTons5__ActionTemplates(struct soap*, const char*, ns5__ActionTemplates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionTemplates(struct soap*, ns5__ActionTemplates *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionTemplates ** SOAP_FMAC4 soap_get_PointerTons5__ActionTemplates(struct soap*, ns5__ActionTemplates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__UsedActionRule_DEFINED
#define SOAP_TYPE_PointerTons5__UsedActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__UsedActionRule(struct soap*, ns5__UsedActionRule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__UsedActionRule(struct soap*, const char *, int, ns5__UsedActionRule *const*, const char *);
SOAP_FMAC3 ns5__UsedActionRule ** SOAP_FMAC4 soap_in_PointerTons5__UsedActionRule(struct soap*, const char*, ns5__UsedActionRule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__UsedActionRule(struct soap*, ns5__UsedActionRule *const*, const char*, const char*);
SOAP_FMAC3 ns5__UsedActionRule ** SOAP_FMAC4 soap_get_PointerTons5__UsedActionRule(struct soap*, ns5__UsedActionRule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__UsedActionConfiguration_DEFINED
#define SOAP_TYPE_PointerTons5__UsedActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__UsedActionConfiguration(struct soap*, ns5__UsedActionConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__UsedActionConfiguration(struct soap*, const char *, int, ns5__UsedActionConfiguration *const*, const char *);
SOAP_FMAC3 ns5__UsedActionConfiguration ** SOAP_FMAC4 soap_in_PointerTons5__UsedActionConfiguration(struct soap*, const char*, ns5__UsedActionConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__UsedActionConfiguration(struct soap*, ns5__UsedActionConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns5__UsedActionConfiguration ** SOAP_FMAC4 soap_get_PointerTons5__UsedActionConfiguration(struct soap*, ns5__UsedActionConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionTemplateParameter_DEFINED
#define SOAP_TYPE_PointerTons5__ActionTemplateParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionTemplateParameter(struct soap*, ns5__ActionTemplateParameter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionTemplateParameter(struct soap*, const char *, int, ns5__ActionTemplateParameter *const*, const char *);
SOAP_FMAC3 ns5__ActionTemplateParameter ** SOAP_FMAC4 soap_in_PointerTons5__ActionTemplateParameter(struct soap*, const char*, ns5__ActionTemplateParameter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionTemplateParameter(struct soap*, ns5__ActionTemplateParameter *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionTemplateParameter ** SOAP_FMAC4 soap_get_PointerTons5__ActionTemplateParameter(struct soap*, ns5__ActionTemplateParameter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionTemplate_DEFINED
#define SOAP_TYPE_PointerTons5__ActionTemplate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionTemplate(struct soap*, ns5__ActionTemplate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionTemplate(struct soap*, const char *, int, ns5__ActionTemplate *const*, const char *);
SOAP_FMAC3 ns5__ActionTemplate ** SOAP_FMAC4 soap_in_PointerTons5__ActionTemplate(struct soap*, const char*, ns5__ActionTemplate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionTemplate(struct soap*, ns5__ActionTemplate *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionTemplate ** SOAP_FMAC4 soap_get_PointerTons5__ActionTemplate(struct soap*, ns5__ActionTemplate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionParameter_DEFINED
#define SOAP_TYPE_PointerTons5__ActionParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionParameter(struct soap*, ns5__ActionParameter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionParameter(struct soap*, const char *, int, ns5__ActionParameter *const*, const char *);
SOAP_FMAC3 ns5__ActionParameter ** SOAP_FMAC4 soap_in_PointerTons5__ActionParameter(struct soap*, const char*, ns5__ActionParameter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionParameter(struct soap*, ns5__ActionParameter *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionParameter ** SOAP_FMAC4 soap_get_PointerTons5__ActionParameter(struct soap*, ns5__ActionParameter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionConfiguration_DEFINED
#define SOAP_TYPE_PointerTons5__ActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionConfiguration(struct soap*, ns5__ActionConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionConfiguration(struct soap*, const char *, int, ns5__ActionConfiguration *const*, const char *);
SOAP_FMAC3 ns5__ActionConfiguration ** SOAP_FMAC4 soap_in_PointerTons5__ActionConfiguration(struct soap*, const char*, ns5__ActionConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionConfiguration(struct soap*, ns5__ActionConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionConfiguration ** SOAP_FMAC4 soap_get_PointerTons5__ActionConfiguration(struct soap*, ns5__ActionConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionTemplateParameters_DEFINED
#define SOAP_TYPE_PointerTons5__ActionTemplateParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionTemplateParameters(struct soap*, ns5__ActionTemplateParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionTemplateParameters(struct soap*, const char *, int, ns5__ActionTemplateParameters *const*, const char *);
SOAP_FMAC3 ns5__ActionTemplateParameters ** SOAP_FMAC4 soap_in_PointerTons5__ActionTemplateParameters(struct soap*, const char*, ns5__ActionTemplateParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionTemplateParameters(struct soap*, ns5__ActionTemplateParameters *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionTemplateParameters ** SOAP_FMAC4 soap_get_PointerTons5__ActionTemplateParameters(struct soap*, ns5__ActionTemplateParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__RecipientTemplate_DEFINED
#define SOAP_TYPE_PointerTons5__RecipientTemplate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RecipientTemplate(struct soap*, ns5__RecipientTemplate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RecipientTemplate(struct soap*, const char *, int, ns5__RecipientTemplate *const*, const char *);
SOAP_FMAC3 ns5__RecipientTemplate ** SOAP_FMAC4 soap_in_PointerTons5__RecipientTemplate(struct soap*, const char*, ns5__RecipientTemplate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RecipientTemplate(struct soap*, ns5__RecipientTemplate *const*, const char*, const char*);
SOAP_FMAC3 ns5__RecipientTemplate ** SOAP_FMAC4 soap_get_PointerTons5__RecipientTemplate(struct soap*, ns5__RecipientTemplate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__RecipientConfiguration_DEFINED
#define SOAP_TYPE_PointerTons5__RecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RecipientConfiguration(struct soap*, ns5__RecipientConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RecipientConfiguration(struct soap*, const char *, int, ns5__RecipientConfiguration *const*, const char *);
SOAP_FMAC3 ns5__RecipientConfiguration ** SOAP_FMAC4 soap_in_PointerTons5__RecipientConfiguration(struct soap*, const char*, ns5__RecipientConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RecipientConfiguration(struct soap*, ns5__RecipientConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns5__RecipientConfiguration ** SOAP_FMAC4 soap_get_PointerTons5__RecipientConfiguration(struct soap*, ns5__RecipientConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionParameters_DEFINED
#define SOAP_TYPE_PointerTons5__ActionParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionParameters(struct soap*, ns5__ActionParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionParameters(struct soap*, const char *, int, ns5__ActionParameters *const*, const char *);
SOAP_FMAC3 ns5__ActionParameters ** SOAP_FMAC4 soap_in_PointerTons5__ActionParameters(struct soap*, const char*, ns5__ActionParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionParameters(struct soap*, ns5__ActionParameters *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionParameters ** SOAP_FMAC4 soap_get_PointerTons5__ActionParameters(struct soap*, ns5__ActionParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ActionRule_DEFINED
#define SOAP_TYPE_PointerTons5__ActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ActionRule(struct soap*, ns5__ActionRule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ActionRule(struct soap*, const char *, int, ns5__ActionRule *const*, const char *);
SOAP_FMAC3 ns5__ActionRule ** SOAP_FMAC4 soap_in_PointerTons5__ActionRule(struct soap*, const char*, ns5__ActionRule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ActionRule(struct soap*, ns5__ActionRule *const*, const char*, const char*);
SOAP_FMAC3 ns5__ActionRule ** SOAP_FMAC4 soap_get_PointerTons5__ActionRule(struct soap*, ns5__ActionRule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__Conditions_DEFINED
#define SOAP_TYPE_PointerTons5__Conditions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Conditions(struct soap*, ns5__Conditions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Conditions(struct soap*, const char *, int, ns5__Conditions *const*, const char *);
SOAP_FMAC3 ns5__Conditions ** SOAP_FMAC4 soap_in_PointerTons5__Conditions(struct soap*, const char*, ns5__Conditions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Conditions(struct soap*, ns5__Conditions *const*, const char*, const char*);
SOAP_FMAC3 ns5__Conditions ** SOAP_FMAC4 soap_get_PointerTons5__Conditions(struct soap*, ns5__Conditions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns4__BaseFaultType_FaultCause_DEFINED
#define SOAP_TYPE_PointerTo_ns4__BaseFaultType_FaultCause_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__BaseFaultType_FaultCause(struct soap*, _ns4__BaseFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__BaseFaultType_FaultCause(struct soap*, const char *, int, _ns4__BaseFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _ns4__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_ns4__BaseFaultType_FaultCause(struct soap*, const char*, _ns4__BaseFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__BaseFaultType_FaultCause(struct soap*, _ns4__BaseFaultType_FaultCause *const*, const char*, const char*);
SOAP_FMAC3 _ns4__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_ns4__BaseFaultType_FaultCause(struct soap*, _ns4__BaseFaultType_FaultCause **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_xml__lang_DEFINED
#define SOAP_TYPE_PointerTo_xml__lang_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns4__BaseFaultType_ErrorCode_DEFINED
#define SOAP_TYPE_PointerTo_ns4__BaseFaultType_ErrorCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__BaseFaultType_ErrorCode(struct soap*, _ns4__BaseFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__BaseFaultType_ErrorCode(struct soap*, const char *, int, _ns4__BaseFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _ns4__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_ns4__BaseFaultType_ErrorCode(struct soap*, const char*, _ns4__BaseFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__BaseFaultType_ErrorCode(struct soap*, _ns4__BaseFaultType_ErrorCode *const*, const char*, const char*);
SOAP_FMAC3 _ns4__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_ns4__BaseFaultType_ErrorCode(struct soap*, _ns4__BaseFaultType_ErrorCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns3__Subscribe_SubscriptionPolicy_DEFINED
#define SOAP_TYPE_PointerTo_ns3__Subscribe_SubscriptionPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, const char *, int, _ns3__Subscribe_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, const char*, _ns3__Subscribe_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy *const*, const char*, const char*);
SOAP_FMAC3 _ns3__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_ns3__Subscribe_SubscriptionPolicy(struct soap*, _ns3__Subscribe_SubscriptionPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AbsoluteOrRelativeTimeType_DEFINED
#define SOAP_TYPE_PointerTons3__AbsoluteOrRelativeTimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons3__AbsoluteOrRelativeTimeType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_PointerTons3__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__NotificationMessageHolderType(struct soap*, const char *, int, ns3__NotificationMessageHolderType *const*, const char *);
SOAP_FMAC3 ns3__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTons3__NotificationMessageHolderType(struct soap*, const char*, ns3__NotificationMessageHolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType *const*, const char*, const char*);
SOAP_FMAC3 ns3__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTons3__NotificationMessageHolderType(struct soap*, ns3__NotificationMessageHolderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SubscriptionPolicyType_DEFINED
#define SOAP_TYPE_PointerTons3__SubscriptionPolicyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubscriptionPolicyType(struct soap*, const char *, int, ns3__SubscriptionPolicyType *const*, const char *);
SOAP_FMAC3 ns3__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTons3__SubscriptionPolicyType(struct soap*, const char*, ns3__SubscriptionPolicyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTons3__SubscriptionPolicyType(struct soap*, ns3__SubscriptionPolicyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__FilterType_DEFINED
#define SOAP_TYPE_PointerTons3__FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FilterType(struct soap*, ns3__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FilterType(struct soap*, const char *, int, ns3__FilterType *const*, const char *);
SOAP_FMAC3 ns3__FilterType ** SOAP_FMAC4 soap_in_PointerTons3__FilterType(struct soap*, const char*, ns3__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FilterType(struct soap*, ns3__FilterType *const*, const char*, const char*);
SOAP_FMAC3 ns3__FilterType ** SOAP_FMAC4 soap_get_PointerTons3__FilterType(struct soap*, ns3__FilterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TopicExpressionType_DEFINED
#define SOAP_TYPE_PointerTons3__TopicExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TopicExpressionType(struct soap*, ns3__TopicExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TopicExpressionType(struct soap*, const char *, int, ns3__TopicExpressionType *const*, const char *);
SOAP_FMAC3 ns3__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTons3__TopicExpressionType(struct soap*, const char*, ns3__TopicExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TopicExpressionType(struct soap*, ns3__TopicExpressionType *const*, const char*, const char*);
SOAP_FMAC3 ns3__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTons3__TopicExpressionType(struct soap*, ns3__TopicExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__EndpointReferenceType_DEFINED
#define SOAP_TYPE_PointerTons6__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__EndpointReferenceType(struct soap*, ns6__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__EndpointReferenceType(struct soap*, const char *, int, ns6__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 ns6__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTons6__EndpointReferenceType(struct soap*, const char*, ns6__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__EndpointReferenceType(struct soap*, ns6__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 ns6__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTons6__EndpointReferenceType(struct soap*, ns6__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Documentation_DEFINED
#define SOAP_TYPE_PointerTons2__Documentation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Documentation(struct soap*, ns2__Documentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Documentation(struct soap*, const char *, int, ns2__Documentation *const*, const char *);
SOAP_FMAC3 ns2__Documentation ** SOAP_FMAC4 soap_in_PointerTons2__Documentation(struct soap*, const char*, ns2__Documentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Documentation(struct soap*, ns2__Documentation *const*, const char*, const char*);
SOAP_FMAC3 ns2__Documentation ** SOAP_FMAC4 soap_get_PointerTons2__Documentation(struct soap*, ns2__Documentation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduledEvents_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduledEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduledEvents(struct soap*, ns1__ScheduledEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduledEvents(struct soap*, const char *, int, ns1__ScheduledEvents *const*, const char *);
SOAP_FMAC3 ns1__ScheduledEvents ** SOAP_FMAC4 soap_in_PointerTons1__ScheduledEvents(struct soap*, const char*, ns1__ScheduledEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduledEvents(struct soap*, ns1__ScheduledEvents *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduledEvents ** SOAP_FMAC4 soap_get_PointerTons1__ScheduledEvents(struct soap*, ns1__ScheduledEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduleFilter_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduleFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduleFilter(struct soap*, ns1__ScheduleFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduleFilter(struct soap*, const char *, int, ns1__ScheduleFilter *const*, const char *);
SOAP_FMAC3 ns1__ScheduleFilter ** SOAP_FMAC4 soap_in_PointerTons1__ScheduleFilter(struct soap*, const char*, ns1__ScheduleFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduleFilter(struct soap*, ns1__ScheduleFilter *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduleFilter ** SOAP_FMAC4 soap_get_PointerTons1__ScheduleFilter(struct soap*, ns1__ScheduleFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NewScheduledEvent_DEFINED
#define SOAP_TYPE_PointerTons1__NewScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NewScheduledEvent(struct soap*, ns1__NewScheduledEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NewScheduledEvent(struct soap*, const char *, int, ns1__NewScheduledEvent *const*, const char *);
SOAP_FMAC3 ns1__NewScheduledEvent ** SOAP_FMAC4 soap_in_PointerTons1__NewScheduledEvent(struct soap*, const char*, ns1__NewScheduledEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NewScheduledEvent(struct soap*, ns1__NewScheduledEvent *const*, const char*, const char*);
SOAP_FMAC3 ns1__NewScheduledEvent ** SOAP_FMAC4 soap_get_PointerTons1__NewScheduledEvent(struct soap*, ns1__NewScheduledEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TopicSetType_DEFINED
#define SOAP_TYPE_PointerTons2__TopicSetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TopicSetType(struct soap*, ns2__TopicSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TopicSetType(struct soap*, const char *, int, ns2__TopicSetType *const*, const char *);
SOAP_FMAC3 ns2__TopicSetType ** SOAP_FMAC4 soap_in_PointerTons2__TopicSetType(struct soap*, const char*, ns2__TopicSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TopicSetType(struct soap*, ns2__TopicSetType *const*, const char*, const char*);
SOAP_FMAC3 ns2__TopicSetType ** SOAP_FMAC4 soap_get_PointerTons2__TopicSetType(struct soap*, ns2__TopicSetType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduledType_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduledType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduledType(struct soap*, ns1__ScheduledType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduledType(struct soap*, const char *, int, ns1__ScheduledType *const*, const char *);
SOAP_FMAC3 ns1__ScheduledType ** SOAP_FMAC4 soap_in_PointerTons1__ScheduledType(struct soap*, const char*, ns1__ScheduledType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduledType(struct soap*, ns1__ScheduledType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduledType ** SOAP_FMAC4 soap_get_PointerTons1__ScheduledType(struct soap*, ns1__ScheduledType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ICalendar_DEFINED
#define SOAP_TYPE_PointerTons1__ICalendar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ICalendar(struct soap*, ns1__ICalendar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ICalendar(struct soap*, const char *, int, ns1__ICalendar *const*, const char *);
SOAP_FMAC3 ns1__ICalendar ** SOAP_FMAC4 soap_in_PointerTons1__ICalendar(struct soap*, const char*, ns1__ICalendar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ICalendar(struct soap*, ns1__ICalendar *const*, const char*, const char*);
SOAP_FMAC3 ns1__ICalendar ** SOAP_FMAC4 soap_get_PointerTons1__ICalendar(struct soap*, ns1__ICalendar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduledEvent_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduledEvent(struct soap*, ns1__ScheduledEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduledEvent(struct soap*, const char *, int, ns1__ScheduledEvent *const*, const char *);
SOAP_FMAC3 ns1__ScheduledEvent ** SOAP_FMAC4 soap_in_PointerTons1__ScheduledEvent(struct soap*, const char*, ns1__ScheduledEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduledEvent(struct soap*, ns1__ScheduledEvent *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduledEvent ** SOAP_FMAC4 soap_get_PointerTons1__ScheduledEvent(struct soap*, ns1__ScheduledEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Schedule_DEFINED
#define SOAP_TYPE_PointerTons1__Schedule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Schedule(struct soap*, ns1__Schedule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Schedule(struct soap*, const char *, int, ns1__Schedule *const*, const char *);
SOAP_FMAC3 ns1__Schedule ** SOAP_FMAC4 soap_in_PointerTons1__Schedule(struct soap*, const char*, ns1__Schedule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Schedule(struct soap*, ns1__Schedule *const*, const char*, const char*);
SOAP_FMAC3 ns1__Schedule ** SOAP_FMAC4 soap_get_PointerTons1__Schedule(struct soap*, ns1__Schedule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(struct soap*, std::vector<_ns2__TopicNamespaceType_Topic> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(struct soap*, const std::vector<_ns2__TopicNamespaceType_Topic> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(struct soap*, const char*, int, const std::vector<_ns2__TopicNamespaceType_Topic> *, const char*);
SOAP_FMAC3 std::vector<_ns2__TopicNamespaceType_Topic> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_ns2__TopicNamespaceType_Topic> *, const char*);
SOAP_FMAC1 std::vector<_ns2__TopicNamespaceType_Topic>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__TopicNamespaceType_Topic>  * soap_new_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns2__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__TopicType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__TopicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TopicType(struct soap*, std::vector<ns2__TopicType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TopicType(struct soap*, const std::vector<ns2__TopicType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TopicType(struct soap*, const char*, int, const std::vector<ns2__TopicType *> *, const char*);
SOAP_FMAC3 std::vector<ns2__TopicType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TopicType(struct soap*, const char*, std::vector<ns2__TopicType *> *, const char*);
SOAP_FMAC1 std::vector<ns2__TopicType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__TopicType *>  * soap_new_std__vectorTemplateOfPointerTons2__TopicType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__TopicType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__UsedActionRule_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__UsedActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__UsedActionRule(struct soap*, std::vector<ns5__UsedActionRule *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__UsedActionRule(struct soap*, const std::vector<ns5__UsedActionRule *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__UsedActionRule(struct soap*, const char*, int, const std::vector<ns5__UsedActionRule *> *, const char*);
SOAP_FMAC3 std::vector<ns5__UsedActionRule *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__UsedActionRule(struct soap*, const char*, std::vector<ns5__UsedActionRule *> *, const char*);
SOAP_FMAC1 std::vector<ns5__UsedActionRule *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__UsedActionRule(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__UsedActionRule *>  * soap_new_std__vectorTemplateOfPointerTons5__UsedActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__UsedActionRule(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__UsedActionConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__UsedActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(struct soap*, std::vector<ns5__UsedActionConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(struct soap*, const std::vector<ns5__UsedActionConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(struct soap*, const char*, int, const std::vector<ns5__UsedActionConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<ns5__UsedActionConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(struct soap*, const char*, std::vector<ns5__UsedActionConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<ns5__UsedActionConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__UsedActionConfiguration *>  * soap_new_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__UsedActionConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionTemplateParameter_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionTemplateParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(struct soap*, std::vector<ns5__ActionTemplateParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(struct soap*, const std::vector<ns5__ActionTemplateParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(struct soap*, const char*, int, const std::vector<ns5__ActionTemplateParameter *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ActionTemplateParameter *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(struct soap*, const char*, std::vector<ns5__ActionTemplateParameter *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ActionTemplateParameter *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ActionTemplateParameter *>  * soap_new_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__ActionTemplateParameter(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionTemplate_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionTemplate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ActionTemplate(struct soap*, std::vector<ns5__ActionTemplate *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ActionTemplate(struct soap*, const std::vector<ns5__ActionTemplate *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ActionTemplate(struct soap*, const char*, int, const std::vector<ns5__ActionTemplate *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ActionTemplate *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ActionTemplate(struct soap*, const char*, std::vector<ns5__ActionTemplate *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ActionTemplate *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__ActionTemplate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ActionTemplate *>  * soap_new_std__vectorTemplateOfPointerTons5__ActionTemplate(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__ActionTemplate(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionParameter_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ActionParameter(struct soap*, std::vector<ns5__ActionParameter *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ActionParameter(struct soap*, const std::vector<ns5__ActionParameter *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ActionParameter(struct soap*, const char*, int, const std::vector<ns5__ActionParameter *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ActionParameter *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ActionParameter(struct soap*, const char*, std::vector<ns5__ActionParameter *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ActionParameter *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__ActionParameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ActionParameter *>  * soap_new_std__vectorTemplateOfPointerTons5__ActionParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__ActionParameter(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ActionConfiguration(struct soap*, std::vector<ns5__ActionConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ActionConfiguration(struct soap*, const std::vector<ns5__ActionConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ActionConfiguration(struct soap*, const char*, int, const std::vector<ns5__ActionConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ActionConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ActionConfiguration(struct soap*, const char*, std::vector<ns5__ActionConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ActionConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__ActionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ActionConfiguration *>  * soap_new_std__vectorTemplateOfPointerTons5__ActionConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__ActionConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__RecipientTemplate_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__RecipientTemplate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RecipientTemplate(struct soap*, std::vector<ns5__RecipientTemplate *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RecipientTemplate(struct soap*, const std::vector<ns5__RecipientTemplate *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RecipientTemplate(struct soap*, const char*, int, const std::vector<ns5__RecipientTemplate *> *, const char*);
SOAP_FMAC3 std::vector<ns5__RecipientTemplate *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RecipientTemplate(struct soap*, const char*, std::vector<ns5__RecipientTemplate *> *, const char*);
SOAP_FMAC1 std::vector<ns5__RecipientTemplate *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RecipientTemplate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RecipientTemplate *>  * soap_new_std__vectorTemplateOfPointerTons5__RecipientTemplate(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__RecipientTemplate(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__RecipientConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__RecipientConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RecipientConfiguration(struct soap*, std::vector<ns5__RecipientConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RecipientConfiguration(struct soap*, const std::vector<ns5__RecipientConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RecipientConfiguration(struct soap*, const char*, int, const std::vector<ns5__RecipientConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<ns5__RecipientConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RecipientConfiguration(struct soap*, const char*, std::vector<ns5__RecipientConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<ns5__RecipientConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RecipientConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RecipientConfiguration *>  * soap_new_std__vectorTemplateOfPointerTons5__RecipientConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__RecipientConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionRule_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ActionRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ActionRule(struct soap*, std::vector<ns5__ActionRule *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ActionRule(struct soap*, const std::vector<ns5__ActionRule *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ActionRule(struct soap*, const char*, int, const std::vector<ns5__ActionRule *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ActionRule *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ActionRule(struct soap*, const char*, std::vector<ns5__ActionRule *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ActionRule *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__ActionRule(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ActionRule *>  * soap_new_std__vectorTemplateOfPointerTons5__ActionRule(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons5__ActionRule(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__FilterType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FilterType(struct soap*, std::vector<ns3__FilterType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FilterType(struct soap*, const std::vector<ns3__FilterType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FilterType(struct soap*, const char*, int, const std::vector<ns3__FilterType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FilterType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FilterType(struct soap*, const char*, std::vector<ns3__FilterType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FilterType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FilterType *>  * soap_new_std__vectorTemplateOfPointerTons3__FilterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FilterType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__BaseFaultType_Description_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__BaseFaultType_Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__BaseFaultType_Description(struct soap*, std::vector<_ns4__BaseFaultType_Description> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__BaseFaultType_Description(struct soap*, const std::vector<_ns4__BaseFaultType_Description> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__BaseFaultType_Description(struct soap*, const char*, int, const std::vector<_ns4__BaseFaultType_Description> *, const char*);
SOAP_FMAC3 std::vector<_ns4__BaseFaultType_Description> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__BaseFaultType_Description(struct soap*, const char*, std::vector<_ns4__BaseFaultType_Description> *, const char*);
SOAP_FMAC1 std::vector<_ns4__BaseFaultType_Description>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__BaseFaultType_Description>  * soap_new_std__vectorTemplateOf_ns4__BaseFaultType_Description(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__BaseFaultType_Description(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, std::vector<ns3__NotificationMessageHolderType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, const std::vector<ns3__NotificationMessageHolderType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, const char*, int, const std::vector<ns3__NotificationMessageHolderType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__NotificationMessageHolderType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, const char*, std::vector<ns3__NotificationMessageHolderType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__NotificationMessageHolderType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__NotificationMessageHolderType *>  * soap_new_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__NotificationMessageHolderType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__TopicExpressionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__TopicExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, std::vector<ns3__TopicExpressionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, const std::vector<ns3__TopicExpressionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, const char*, int, const std::vector<ns3__TopicExpressionType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__TopicExpressionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, const char*, std::vector<ns3__TopicExpressionType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__TopicExpressionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TopicExpressionType *>  * soap_new_std__vectorTemplateOfPointerTons3__TopicExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__TopicExpressionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyType(struct soap*, std::vector<struct soap_dom_element> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyType(struct soap*, const std::vector<struct soap_dom_element> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyType(struct soap*, const char*, int, const std::vector<struct soap_dom_element> *, const char*);
SOAP_FMAC3 std::vector<struct soap_dom_element> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyType(struct soap*, const char*, std::vector<struct soap_dom_element> *, const char*);
SOAP_FMAC1 std::vector<struct soap_dom_element>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct soap_dom_element>  * soap_new_std__vectorTemplateOfxsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ScheduledEvent_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ScheduledEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ScheduledEvent(struct soap*, std::vector<ns1__ScheduledEvent *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ScheduledEvent(struct soap*, const std::vector<ns1__ScheduledEvent *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ScheduledEvent(struct soap*, const char*, int, const std::vector<ns1__ScheduledEvent *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ScheduledEvent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ScheduledEvent(struct soap*, const char*, std::vector<ns1__ScheduledEvent *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ScheduledEvent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ScheduledEvent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ScheduledEvent *>  * soap_new_std__vectorTemplateOfPointerTons1__ScheduledEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ScheduledEvent(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
