#include <gtest/gtest.h>

#include <nx/utils/mac_address.h>
#include <plugins/resource/axis/axis_resource_searcher.h>
#include <plugins/resource/mdns/mdns_packet.h>
#include <nx/utils/std/algorithm.h>


static char packetWithAdditionalRssRecords[] =
{
    0x00, 0x00, 0x84, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x05, 0x5f, 0x68, 0x74,
    0x74, 0x70, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c,
    0x00, 0x01, 0xc0, 0x0c, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x21, 0x1e, 0x41,
    0x58, 0x49, 0x53, 0x20, 0x50, 0x33, 0x37, 0x31, 0x35, 0x2d, 0x50, 0x4c, 0x56, 0x45, 0x20, 0x2d,
    0x20, 0x42, 0x38, 0x41, 0x34, 0x34, 0x46, 0x31, 0x33, 0x44, 0x36, 0x46, 0x46, 0xc0, 0x0c, 0xc0,
    0x2e, 0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x50, 0x11, 0x61, 0x78, 0x69, 0x73, 0x2d, 0x62, 0x38, 0x61, 0x34, 0x34, 0x66, 0x31, 0x33, 0x64,
    0x36, 0x66, 0x66, 0xc0, 0x17, 0xc0, 0x2e, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00,
    0x01, 0x00, 0xc0, 0x61, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0xc0, 0xa8,
    0x0a, 0x7f, 0xc0, 0x61, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0xa9, 0xfe,
    0x2c, 0xe7
};

static char packetWithQueriesRecords[] =

{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x1b, 0x41, 0x58, 0x49,
    0x53, 0x20, 0x4d, 0x33, 0x30, 0x34, 0x36, 0x2d, 0x56, 0x20, 0x2d, 0x20, 0x41, 0x43, 0x43, 0x43,
    0x38, 0x45, 0x39, 0x35, 0x33, 0x33, 0x35, 0x37, 0x05, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x04, 0x5f,
    0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0xff, 0x00, 0x01, 0x11, 0x61,
    0x78, 0x69, 0x73, 0x2d, 0x61, 0x63, 0x63, 0x63, 0x38, 0x65, 0x39, 0x35, 0x33, 0x33, 0x35, 0x37,
    0xc0, 0x33, 0x00, 0xff, 0x00, 0x01, 0x1b, 0x41, 0x58, 0x49, 0x53, 0x20, 0x4d, 0x33, 0x30, 0x34,
    0x36, 0x2d, 0x56, 0x20, 0x2d, 0x20, 0x41, 0x43, 0x43, 0x43, 0x38, 0x45, 0x39, 0x35, 0x33, 0x33,
    0x35, 0x37, 0x0b, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x2d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0xc0, 0x2e,
    0x00, 0xff, 0x00, 0x01, 0x23, 0x41, 0x58, 0x49, 0x53, 0x20, 0x4d, 0x33, 0x30, 0x34, 0x36, 0x2d,
    0x56, 0x20, 0x2d, 0x20, 0x41, 0x43, 0x43, 0x43, 0x38, 0x45, 0x39, 0x35, 0x33, 0x33, 0x35, 0x37,
    0x20, 0x48, 0x2e, 0x32, 0x36, 0x34, 0x20, 0x31, 0x05, 0x5f, 0x72, 0x74, 0x73, 0x70, 0xc0, 0x2e,
    0x00, 0xff, 0x00, 0x01, 0x23, 0x41, 0x58, 0x49, 0x53, 0x20, 0x4d, 0x33, 0x30, 0x34, 0x36, 0x2d,
    0x56, 0x20, 0x2d, 0x20, 0x41, 0x43, 0x43, 0x43, 0x38, 0x45, 0x39, 0x35, 0x33, 0x33, 0x35, 0x37,
    0x20, 0x48, 0x2e, 0x32, 0x36, 0x34, 0x20, 0x32, 0xc0, 0xa8, 0x00, 0xff, 0x00, 0x01, 0xc0, 0x0c,
    0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
    0xc0, 0x3e, 0xc0, 0x3e, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0xa9, 0xfe,
    0x35, 0x56, 0xc0, 0x3e, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8,
    0xc8, 0x0a, 0xc0, 0x56, 0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x50, 0xc0, 0x3e, 0xc0, 0x84, 0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x2a, 0xc0, 0x3e, 0xc0, 0xb4, 0x00, 0x21, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x2a, 0xc0, 0x3e
};

namespace cameras::test
{

TEST(AxisResourceSearcher, parsePacketWithTextRecords)
{
    QString name;
    nx::utils::MacAddress mac;
    QnMdnsPacket packet;

    QByteArray data(packetWithAdditionalRssRecords, sizeof(packetWithAdditionalRssRecords));
    packet.fromDatagram(data);
    nx::utils::remove_if(packet.additionalRRs,
        [](const auto& record)
        {
            return record.recordType == QnMdnsPacket::kPtrRecordType;
        });
    ASSERT_TRUE(QnPlAxisResourceSearcher::parseNameAndMacFromMdns(packet, &name, &mac));
    ASSERT_EQ("AXIS P3715-PLVE", name);
    ASSERT_EQ("B8-A4-4F-13-D6-FF", mac.toString());
}

TEST(AxisResourceSearcher, parsePacketWithPtrRecords)
{
    QString name;
    nx::utils::MacAddress mac;
    QnMdnsPacket packet;

    QByteArray data(packetWithAdditionalRssRecords, sizeof(packetWithAdditionalRssRecords));
    packet.fromDatagram(data);
    nx::utils::remove_if(packet.additionalRRs,
        [](const auto& record)
        {
            return record.recordType == QnMdnsPacket::kTextRecordType;
        });

    ASSERT_TRUE(QnPlAxisResourceSearcher::parseNameAndMacFromMdns(packet, &name, &mac));
    ASSERT_EQ("AXIS P3715-PLVE", name);
    ASSERT_EQ("B8-A4-4F-13-D6-FF", mac.toString());
}

TEST(AxisResourceSearcher, parsePacketWithQueriesRecords)
{
    QString name;
    nx::utils::MacAddress mac;
    QnMdnsPacket packet;

    QByteArray data(packetWithQueriesRecords, sizeof(packetWithQueriesRecords));
    packet.fromDatagram(data);
    ASSERT_TRUE(QnPlAxisResourceSearcher::parseNameAndMacFromMdns(packet, &name, &mac));
    ASSERT_EQ("AXIS M3046-V", name);
    ASSERT_EQ("AC-CC-8E-95-33-57", mac.toString());
}

TEST(AxisResourceSearcher, parsePacketRaw)
{
    QString name;
    nx::utils::MacAddress mac;

    QByteArray data(packetWithQueriesRecords, sizeof(packetWithQueriesRecords));
    ASSERT_TRUE(QnPlAxisResourceSearcher::parseNameAndMacFromRawData(data, &name, &mac));
    ASSERT_EQ("AXIS M3046-V", name);
    ASSERT_EQ("AC-CC-8E-95-33-57", mac.toString());
}

} // namespace cameras::test
