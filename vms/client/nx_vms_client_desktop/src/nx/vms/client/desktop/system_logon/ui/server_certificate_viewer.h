// Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/

#pragma once

#include <vector>

#include <QtCore/QString>

#include <core/resource/resource_fwd.h>
#include <nx/network/ssl/certificate.h>
#include <ui/dialogs/common/button_box_dialog.h>

namespace Ui { class ServerCertificateViewer; }

namespace nx::vms::api { struct ModuleInformation; }
namespace nx::network { class SocketAddress; }

namespace nx::vms::client::desktop {

class ServerCertificateViewer: public QnButtonBoxDialog
{
    Q_OBJECT
    using base_type = QnButtonBoxDialog;

public:
    // Viewer mode affects its appearance and text shown to user.
    enum class Mode
    {
        pinned, //< Show pinned autogenerated server certificate.
        custom, //< Show custom user provided certificate.
        presented, //< Show certificate presented by server during connection.
        mismatch, //< Certificate mismatch. Show additional warning message.
    };

    ServerCertificateViewer(
        const nx::vms::api::ModuleInformation& target,
        const nx::network::SocketAddress& primaryAddress,
        const std::vector<nx::network::ssl::Certificate>& certificates,
        Mode mode,
        QWidget* parent = nullptr);

    ServerCertificateViewer(
        const QnMediaServerResourcePtr& server,
        const std::vector<nx::network::ssl::Certificate>& certificates,
        Mode mode,
        QWidget* parent = nullptr);

    virtual ~ServerCertificateViewer();

    virtual void showEvent(QShowEvent *event) override;

private:
    ServerCertificateViewer(QWidget* parent = nullptr);

    void setCertificateData(
        const nx::vms::api::ModuleInformation& target,
        const nx::network::SocketAddress& primaryAddress,
        const std::vector<nx::network::ssl::Certificate>& certificates,
        Mode mode);

    void showSelectedCertificate();

    void pinCertificate();
    void showPinnedCertificate();

    static QString calculateDialogTitle(Mode mode);
    static QString calculateServerInfo(
        Mode mode,
        const nx::vms::api::ModuleInformation& target,
        const nx::network::SocketAddress& primaryAddress);

private:
    QScopedPointer<Ui::ServerCertificateViewer> ui;
    std::vector<nx::network::ssl::Certificate> m_certificates;
    QnMediaServerResourcePtr m_server;
};

} // namespace nx::vms::client::desktop
