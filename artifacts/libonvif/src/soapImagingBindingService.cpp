/* soapImagingBindingService.cpp
   Generated by gSOAP 2.8.8 from onvif.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapImagingBindingService.h"

ImagingBindingService::ImagingBindingService()
{	this->soap = soap_new();
	this->own = true;
	ImagingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ImagingBindingService::ImagingBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	ImagingBindingService_init(_soap->imode, _soap->omode);
}

ImagingBindingService::ImagingBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ImagingBindingService_init(iomode, iomode);
}

ImagingBindingService::ImagingBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	ImagingBindingService_init(imode, omode);
}

ImagingBindingService::~ImagingBindingService()
{	if (this->own)
		soap_free(this->soap);
}

void ImagingBindingService::ImagingBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{"ns1", "http://www.w3.org/2005/08/addressing", NULL, NULL},
	{"oasisWsrf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"ns5", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"onvifXsd", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"oasisWsnT1", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"oasisWsrfR2", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"ns2", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
	{"onvifDevice", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"onvifDeviceIO", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"onvifImg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"onvifMedia", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"onvifPtz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"tev-cpb", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
	{"tev-eb", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
	{"tev-ncb", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
	{"tev-npb", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
	{"oasisWsnB2", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"tev-ppb", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
	{"tev-pps", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
	{"onvifEvents", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"tev-smb", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
};

void ImagingBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ImagingBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_init(this->soap);
	ImagingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ImagingBindingService *ImagingBindingService::copy()
{	ImagingBindingService *dup = SOAP_NEW_COPY(ImagingBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int ImagingBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ImagingBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ImagingBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ImagingBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ImagingBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ImagingBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ImagingBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ImagingBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ImagingBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ImagingBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void ImagingBindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence)
{	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->wsa__MessageID = wsa__MessageID;
	this->soap->header->wsa__RelatesTo = wsa__RelatesTo;
	this->soap->header->wsa__From = wsa__From;
	this->soap->header->wsa__ReplyTo = wsa__ReplyTo;
	this->soap->header->wsa__FaultTo = wsa__FaultTo;
	this->soap->header->wsa__To = wsa__To;
	this->soap->header->wsa__Action = wsa__Action;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
}

const SOAP_ENV__Header *ImagingBindingService::soap_header()
{	return this->soap->header;
}

int ImagingBindingService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET ImagingBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ImagingBindingService::accept()
{	return soap_accept(this->soap);
}

int ImagingBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___onvifImg__GetServiceCapabilities(ImagingBindingService*);
static int serve___onvifImg__GetImagingSettings(ImagingBindingService*);
static int serve___onvifImg__SetImagingSettings(ImagingBindingService*);
static int serve___onvifImg__GetOptions(ImagingBindingService*);
static int serve___onvifImg__Move(ImagingBindingService*);
static int serve___onvifImg__Stop(ImagingBindingService*);
static int serve___onvifImg__GetStatus(ImagingBindingService*);
static int serve___onvifImg__GetMoveOptions(ImagingBindingService*);

int ImagingBindingService::dispatch()
{	ImagingBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:GetServiceCapabilities"))
		return serve___onvifImg__GetServiceCapabilities(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:GetImagingSettings"))
		return serve___onvifImg__GetImagingSettings(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:SetImagingSettings"))
		return serve___onvifImg__SetImagingSettings(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:GetOptions"))
		return serve___onvifImg__GetOptions(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:Move"))
		return serve___onvifImg__Move(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:Stop"))
		return serve___onvifImg__Stop(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:GetStatus"))
		return serve___onvifImg__GetStatus(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "onvifImg:GetMoveOptions"))
		return serve___onvifImg__GetMoveOptions(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___onvifImg__GetServiceCapabilities(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__GetServiceCapabilities soap_tmp___onvifImg__GetServiceCapabilities;
	_onvifImg__GetServiceCapabilitiesResponse onvifImg__GetServiceCapabilitiesResponse;
	onvifImg__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___onvifImg__GetServiceCapabilities(soap, &soap_tmp___onvifImg__GetServiceCapabilities);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__GetServiceCapabilities(soap, &soap_tmp___onvifImg__GetServiceCapabilities, "-onvifImg:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___onvifImg__GetServiceCapabilities.onvifImg__GetServiceCapabilities, &onvifImg__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__GetServiceCapabilitiesResponse.soap_put(soap, "onvifImg:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__GetServiceCapabilitiesResponse.soap_put(soap, "onvifImg:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__GetImagingSettings(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__GetImagingSettings soap_tmp___onvifImg__GetImagingSettings;
	_onvifImg__GetImagingSettingsResponse onvifImg__GetImagingSettingsResponse;
	onvifImg__GetImagingSettingsResponse.soap_default(soap);
	soap_default___onvifImg__GetImagingSettings(soap, &soap_tmp___onvifImg__GetImagingSettings);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__GetImagingSettings(soap, &soap_tmp___onvifImg__GetImagingSettings, "-onvifImg:GetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetImagingSettings(soap_tmp___onvifImg__GetImagingSettings.onvifImg__GetImagingSettings, &onvifImg__GetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__GetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__GetImagingSettingsResponse.soap_put(soap, "onvifImg:GetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__GetImagingSettingsResponse.soap_put(soap, "onvifImg:GetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__SetImagingSettings(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__SetImagingSettings soap_tmp___onvifImg__SetImagingSettings;
	_onvifImg__SetImagingSettingsResponse onvifImg__SetImagingSettingsResponse;
	onvifImg__SetImagingSettingsResponse.soap_default(soap);
	soap_default___onvifImg__SetImagingSettings(soap, &soap_tmp___onvifImg__SetImagingSettings);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__SetImagingSettings(soap, &soap_tmp___onvifImg__SetImagingSettings, "-onvifImg:SetImagingSettings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetImagingSettings(soap_tmp___onvifImg__SetImagingSettings.onvifImg__SetImagingSettings, &onvifImg__SetImagingSettingsResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__SetImagingSettingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__SetImagingSettingsResponse.soap_put(soap, "onvifImg:SetImagingSettingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__SetImagingSettingsResponse.soap_put(soap, "onvifImg:SetImagingSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__GetOptions(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__GetOptions soap_tmp___onvifImg__GetOptions;
	_onvifImg__GetOptionsResponse onvifImg__GetOptionsResponse;
	onvifImg__GetOptionsResponse.soap_default(soap);
	soap_default___onvifImg__GetOptions(soap, &soap_tmp___onvifImg__GetOptions);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__GetOptions(soap, &soap_tmp___onvifImg__GetOptions, "-onvifImg:GetOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetOptions(soap_tmp___onvifImg__GetOptions.onvifImg__GetOptions, &onvifImg__GetOptionsResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__GetOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__GetOptionsResponse.soap_put(soap, "onvifImg:GetOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__GetOptionsResponse.soap_put(soap, "onvifImg:GetOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__Move(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__Move soap_tmp___onvifImg__Move;
	_onvifImg__MoveResponse onvifImg__MoveResponse;
	onvifImg__MoveResponse.soap_default(soap);
	soap_default___onvifImg__Move(soap, &soap_tmp___onvifImg__Move);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__Move(soap, &soap_tmp___onvifImg__Move, "-onvifImg:Move", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Move(soap_tmp___onvifImg__Move.onvifImg__Move, &onvifImg__MoveResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__MoveResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__MoveResponse.soap_put(soap, "onvifImg:MoveResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__MoveResponse.soap_put(soap, "onvifImg:MoveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__Stop(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__Stop soap_tmp___onvifImg__Stop;
	_onvifImg__StopResponse onvifImg__StopResponse;
	onvifImg__StopResponse.soap_default(soap);
	soap_default___onvifImg__Stop(soap, &soap_tmp___onvifImg__Stop);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__Stop(soap, &soap_tmp___onvifImg__Stop, "-onvifImg:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Stop(soap_tmp___onvifImg__Stop.onvifImg__Stop, &onvifImg__StopResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__StopResponse.soap_put(soap, "onvifImg:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__StopResponse.soap_put(soap, "onvifImg:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__GetStatus(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__GetStatus soap_tmp___onvifImg__GetStatus;
	_onvifImg__GetStatusResponse onvifImg__GetStatusResponse;
	onvifImg__GetStatusResponse.soap_default(soap);
	soap_default___onvifImg__GetStatus(soap, &soap_tmp___onvifImg__GetStatus);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__GetStatus(soap, &soap_tmp___onvifImg__GetStatus, "-onvifImg:GetStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetStatus(soap_tmp___onvifImg__GetStatus.onvifImg__GetStatus, &onvifImg__GetStatusResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__GetStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__GetStatusResponse.soap_put(soap, "onvifImg:GetStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__GetStatusResponse.soap_put(soap, "onvifImg:GetStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifImg__GetMoveOptions(ImagingBindingService *service)
{	struct soap *soap = service->soap;
	struct __onvifImg__GetMoveOptions soap_tmp___onvifImg__GetMoveOptions;
	_onvifImg__GetMoveOptionsResponse onvifImg__GetMoveOptionsResponse;
	onvifImg__GetMoveOptionsResponse.soap_default(soap);
	soap_default___onvifImg__GetMoveOptions(soap, &soap_tmp___onvifImg__GetMoveOptions);
	soap->encodingStyle = NULL;
	if (!soap_get___onvifImg__GetMoveOptions(soap, &soap_tmp___onvifImg__GetMoveOptions, "-onvifImg:GetMoveOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMoveOptions(soap_tmp___onvifImg__GetMoveOptions.onvifImg__GetMoveOptions, &onvifImg__GetMoveOptionsResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	onvifImg__GetMoveOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifImg__GetMoveOptionsResponse.soap_put(soap, "onvifImg:GetMoveOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifImg__GetMoveOptionsResponse.soap_put(soap, "onvifImg:GetMoveOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
