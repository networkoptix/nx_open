/* soapPausableSubscriptionManagerBindingProxy.cpp
   Generated by gSOAP 2.8.8 from onvif.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapPausableSubscriptionManagerBindingProxy.h"

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	PausableSubscriptionManagerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	PausableSubscriptionManagerBindingProxy_init(_soap->imode, _soap->omode);
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	PausableSubscriptionManagerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	PausableSubscriptionManagerBindingProxy_init(iomode, iomode);
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	PausableSubscriptionManagerBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	PausableSubscriptionManagerBindingProxy_init(imode, omode);
}

PausableSubscriptionManagerBindingProxy::~PausableSubscriptionManagerBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{"ns1", "http://www.w3.org/2005/08/addressing", NULL, NULL},
	{"oasisWsrf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"ns5", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"onvifXsd", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"oasisWsnT1", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"oasisWsrfR2", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"ns2", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
	{"onvifDevice", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"onvifDeviceIO", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"onvifImg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"onvifMedia", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"onvifPtz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"tev-cpb", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
	{"tev-eb", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
	{"tev-ncb", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
	{"tev-npb", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
	{"oasisWsnB2", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"tev-ppb", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
	{"tev-pps", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
	{"onvifEvents", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"tev-smb", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void PausableSubscriptionManagerBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PausableSubscriptionManagerBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_init(this->soap);
	PausableSubscriptionManagerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void PausableSubscriptionManagerBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void PausableSubscriptionManagerBindingProxy::soap_header(struct _wsse__Security *wsse__Security, char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence)
{	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->wsa__MessageID = wsa__MessageID;
	this->soap->header->wsa__RelatesTo = wsa__RelatesTo;
	this->soap->header->wsa__From = wsa__From;
	this->soap->header->wsa__ReplyTo = wsa__ReplyTo;
	this->soap->header->wsa__FaultTo = wsa__FaultTo;
	this->soap->header->wsa__To = wsa__To;
	this->soap->header->wsa__Action = wsa__Action;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
}

const SOAP_ENV__Header *PausableSubscriptionManagerBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *PausableSubscriptionManagerBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *PausableSubscriptionManagerBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *PausableSubscriptionManagerBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int PausableSubscriptionManagerBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int PausableSubscriptionManagerBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void PausableSubscriptionManagerBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PausableSubscriptionManagerBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PausableSubscriptionManagerBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int PausableSubscriptionManagerBindingProxy::Renew(const char *endpoint, const char *soap_action, _oasisWsnB2__Renew *oasisWsnB2__Renew, _oasisWsnB2__RenewResponse *oasisWsnB2__RenewResponse)
{	struct soap *soap = this->soap;
	struct __ns2__Renew soap_tmp___ns2__Renew;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__Renew.oasisWsnB2__Renew = oasisWsnB2__Renew;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__Renew(soap, &soap_tmp___ns2__Renew);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__Renew(soap, &soap_tmp___ns2__Renew, "-ns2:Renew", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__Renew(soap, &soap_tmp___ns2__Renew, "-ns2:Renew", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!oasisWsnB2__RenewResponse)
		return soap_closesock(soap);
	oasisWsnB2__RenewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	oasisWsnB2__RenewResponse->soap_get(soap, "oasisWsnB2:RenewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PausableSubscriptionManagerBindingProxy::Unsubscribe(const char *endpoint, const char *soap_action, _oasisWsnB2__Unsubscribe *oasisWsnB2__Unsubscribe, _oasisWsnB2__UnsubscribeResponse *oasisWsnB2__UnsubscribeResponse)
{	struct soap *soap = this->soap;
	struct __ns2__Unsubscribe soap_tmp___ns2__Unsubscribe;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__Unsubscribe.oasisWsnB2__Unsubscribe = oasisWsnB2__Unsubscribe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__Unsubscribe(soap, &soap_tmp___ns2__Unsubscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__Unsubscribe(soap, &soap_tmp___ns2__Unsubscribe, "-ns2:Unsubscribe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__Unsubscribe(soap, &soap_tmp___ns2__Unsubscribe, "-ns2:Unsubscribe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!oasisWsnB2__UnsubscribeResponse)
		return soap_closesock(soap);
	oasisWsnB2__UnsubscribeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	oasisWsnB2__UnsubscribeResponse->soap_get(soap, "oasisWsnB2:UnsubscribeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PausableSubscriptionManagerBindingProxy::PauseSubscription(const char *endpoint, const char *soap_action, _oasisWsnB2__PauseSubscription *oasisWsnB2__PauseSubscription, _oasisWsnB2__PauseSubscriptionResponse *oasisWsnB2__PauseSubscriptionResponse)
{	struct soap *soap = this->soap;
	struct __ns2__PauseSubscription soap_tmp___ns2__PauseSubscription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__PauseSubscription.oasisWsnB2__PauseSubscription = oasisWsnB2__PauseSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__PauseSubscription(soap, &soap_tmp___ns2__PauseSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__PauseSubscription(soap, &soap_tmp___ns2__PauseSubscription, "-ns2:PauseSubscription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__PauseSubscription(soap, &soap_tmp___ns2__PauseSubscription, "-ns2:PauseSubscription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!oasisWsnB2__PauseSubscriptionResponse)
		return soap_closesock(soap);
	oasisWsnB2__PauseSubscriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	oasisWsnB2__PauseSubscriptionResponse->soap_get(soap, "oasisWsnB2:PauseSubscriptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PausableSubscriptionManagerBindingProxy::ResumeSubscription(const char *endpoint, const char *soap_action, _oasisWsnB2__ResumeSubscription *oasisWsnB2__ResumeSubscription, _oasisWsnB2__ResumeSubscriptionResponse *oasisWsnB2__ResumeSubscriptionResponse)
{	struct soap *soap = this->soap;
	struct __ns2__ResumeSubscription soap_tmp___ns2__ResumeSubscription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__ResumeSubscription.oasisWsnB2__ResumeSubscription = oasisWsnB2__ResumeSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__ResumeSubscription(soap, &soap_tmp___ns2__ResumeSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__ResumeSubscription(soap, &soap_tmp___ns2__ResumeSubscription, "-ns2:ResumeSubscription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__ResumeSubscription(soap, &soap_tmp___ns2__ResumeSubscription, "-ns2:ResumeSubscription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!oasisWsnB2__ResumeSubscriptionResponse)
		return soap_closesock(soap);
	oasisWsnB2__ResumeSubscriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	oasisWsnB2__ResumeSubscriptionResponse->soap_get(soap, "oasisWsnB2:ResumeSubscriptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
