/* soapStub.h
   Generated by gSOAP 2.8.8 from onvif.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_WSA_200408
#define SOAP_NAMESPACE_OF_wsdd	"http://schemas.xmlsoap.org/ws/2005/04/discovery"
#define SOAP_NAMESPACE_OF_ns1	"http://www.w3.org/2005/08/addressing"
#define SOAP_NAMESPACE_OF_oasisWsrfRw2	"http://docs.oasis-open.org/wsrf/rw-2"
#define SOAP_NAMESPACE_OF_oasisWsrfR2	"http://docs.oasis-open.org/wsrf/r-2"
#define SOAP_NAMESPACE_OF_oasisWsrf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_oasisWsnB2	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_oasisWsnT1	"http://docs.oasis-open.org/wsn/t-1"
#define SOAP_NAMESPACE_OF_onvifDevice	"http://www.onvif.org/ver10/device/wsdl"
#define SOAP_NAMESPACE_OF_onvifXsd	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_ns5	"http://www.w3.org/2004/08/xop/include"
#define SOAP_NAMESPACE_OF_onvifEvents	"http://www.onvif.org/ver10/events/wsdl"
#define SOAP_NAMESPACE_OF_onvifImg	"http://www.onvif.org/ver20/imaging/wsdl"
#define SOAP_NAMESPACE_OF_onvifMedia	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_onvifPtz	"http://www.onvif.org/ver20/ptz/wsdl"
#define SOAP_NAMESPACE_OF_onvifDeviceIO	"http://www.onvif.org/ver10/deviceIO/wsdl"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20808
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (8)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault {wsu__MessageExpired = 0};
typedef enum wsu__tTimestampFault wsu__tTimestampFault;
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (10)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum {wsse__UnsupportedSecurityToken = 0, wsse__UnsupportedAlgorithm = 1, wsse__InvalidSecurity = 2, wsse__InvalidSecurityToken = 3, wsse__FailedAuthentication = 4, wsse__FailedCheck = 5, wsse__SecurityTokenUnavailable = 6};
typedef enum wsse__FaultcodeEnum wsse__FaultcodeEnum;
#endif

#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (95)
/* wsa:RelationshipTypeValues */
enum wsa__RelationshipTypeValues {wsa__Reply = 0};
typedef enum wsa__RelationshipTypeValues wsa__RelationshipTypeValues;
#endif

#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (96)
/* wsa:FaultSubcodeValues */
enum wsa__FaultSubcodeValues {wsa__InvalidMessageInformationHeader = 0, wsa__MessageInformationHeaderRequired = 1, wsa__DestinationUnreachable = 2, wsa__ActionNotSupported = 3, wsa__EndpointUnavailable = 4};
typedef enum wsa__FaultSubcodeValues wsa__FaultSubcodeValues;
#endif

#ifndef SOAP_TYPE_wsdd__FaultCodeType
#define SOAP_TYPE_wsdd__FaultCodeType (131)
/* wsdd:FaultCodeType */
enum wsdd__FaultCodeType {wsdd__MatchingRuleNotSupported = 0};
typedef enum wsdd__FaultCodeType wsdd__FaultCodeType;
#endif

#ifndef SOAP_TYPE_ns1__RelationshipType
#define SOAP_TYPE_ns1__RelationshipType (1147)
/* ns1:RelationshipType */
enum ns1__RelationshipType {ns1__RelationshipType__http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0};
#endif

#ifndef SOAP_TYPE_ns1__FaultCodesType
#define SOAP_TYPE_ns1__FaultCodesType (1149)
/* ns1:FaultCodesType */
enum ns1__FaultCodesType {ns1__FaultCodesType__ns1__InvalidAddressingHeader = 0, ns1__FaultCodesType__ns1__InvalidAddress = 1, ns1__FaultCodesType__ns1__InvalidEPR = 2, ns1__FaultCodesType__ns1__InvalidCardinality = 3, ns1__FaultCodesType__ns1__MissingAddressInEPR = 4, ns1__FaultCodesType__ns1__DuplicateMessageID = 5, ns1__FaultCodesType__ns1__ActionMismatch = 6, ns1__FaultCodesType__ns1__MessageAddressingHeaderRequired = 7, ns1__FaultCodesType__ns1__DestinationUnreachable = 8, ns1__FaultCodesType__ns1__ActionNotSupported = 9, ns1__FaultCodesType__ns1__EndpointUnavailable = 10};
#endif

#ifndef SOAP_TYPE_onvifXsd__RotateMode
#define SOAP_TYPE_onvifXsd__RotateMode (1161)
/* onvifXsd:RotateMode */
enum onvifXsd__RotateMode {onvifXsd__RotateMode__OFF = 0, onvifXsd__RotateMode__ON = 1, onvifXsd__RotateMode__AUTO = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoEncoding
#define SOAP_TYPE_onvifXsd__VideoEncoding (1163)
/* onvifXsd:VideoEncoding */
enum onvifXsd__VideoEncoding {onvifXsd__VideoEncoding__JPEG = 0, onvifXsd__VideoEncoding__MPEG4 = 1, onvifXsd__VideoEncoding__H264 = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__Mpeg4Profile
#define SOAP_TYPE_onvifXsd__Mpeg4Profile (1165)
/* onvifXsd:Mpeg4Profile */
enum onvifXsd__Mpeg4Profile {onvifXsd__Mpeg4Profile__SP = 0, onvifXsd__Mpeg4Profile__ASP = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__H264Profile
#define SOAP_TYPE_onvifXsd__H264Profile (1167)
/* onvifXsd:H264Profile */
enum onvifXsd__H264Profile {onvifXsd__H264Profile__Baseline = 0, onvifXsd__H264Profile__Main = 1, onvifXsd__H264Profile__Extended = 2, onvifXsd__H264Profile__High = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioEncoding
#define SOAP_TYPE_onvifXsd__AudioEncoding (1169)
/* onvifXsd:AudioEncoding */
enum onvifXsd__AudioEncoding {onvifXsd__AudioEncoding__G711 = 0, onvifXsd__AudioEncoding__G726 = 1, onvifXsd__AudioEncoding__AAC = 2, onvifXsd__AudioEncoding__AMR = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__StreamType
#define SOAP_TYPE_onvifXsd__StreamType (1171)
/* onvifXsd:StreamType */
enum onvifXsd__StreamType {onvifXsd__StreamType__RTP_Unicast = 0, onvifXsd__StreamType__RTP_Multicast = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__TransportProtocol
#define SOAP_TYPE_onvifXsd__TransportProtocol (1173)
/* onvifXsd:TransportProtocol */
enum onvifXsd__TransportProtocol {onvifXsd__TransportProtocol__UDP = 0, onvifXsd__TransportProtocol__TCP = 1, onvifXsd__TransportProtocol__RTSP = 2, onvifXsd__TransportProtocol__HTTP = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__ScopeDefinition
#define SOAP_TYPE_onvifXsd__ScopeDefinition (1175)
/* onvifXsd:ScopeDefinition */
enum onvifXsd__ScopeDefinition {onvifXsd__ScopeDefinition__Fixed = 0, onvifXsd__ScopeDefinition__Configurable = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__DiscoveryMode
#define SOAP_TYPE_onvifXsd__DiscoveryMode (1177)
/* onvifXsd:DiscoveryMode */
enum onvifXsd__DiscoveryMode {onvifXsd__DiscoveryMode__Discoverable = 0, onvifXsd__DiscoveryMode__NonDiscoverable = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__Duplex
#define SOAP_TYPE_onvifXsd__Duplex (1181)
/* onvifXsd:Duplex */
enum onvifXsd__Duplex {onvifXsd__Duplex__Full = 0, onvifXsd__Duplex__Half = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6DHCPConfiguration
#define SOAP_TYPE_onvifXsd__IPv6DHCPConfiguration (1185)
/* onvifXsd:IPv6DHCPConfiguration */
enum onvifXsd__IPv6DHCPConfiguration {onvifXsd__IPv6DHCPConfiguration__Auto = 0, onvifXsd__IPv6DHCPConfiguration__Stateful = 1, onvifXsd__IPv6DHCPConfiguration__Stateless = 2, onvifXsd__IPv6DHCPConfiguration__Off = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkProtocolType
#define SOAP_TYPE_onvifXsd__NetworkProtocolType (1187)
/* onvifXsd:NetworkProtocolType */
enum onvifXsd__NetworkProtocolType {onvifXsd__NetworkProtocolType__HTTP = 0, onvifXsd__NetworkProtocolType__HTTPS = 1, onvifXsd__NetworkProtocolType__RTSP = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkHostType
#define SOAP_TYPE_onvifXsd__NetworkHostType (1189)
/* onvifXsd:NetworkHostType */
enum onvifXsd__NetworkHostType {onvifXsd__NetworkHostType__IPv4 = 0, onvifXsd__NetworkHostType__IPv6 = 1, onvifXsd__NetworkHostType__DNS = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPType
#define SOAP_TYPE_onvifXsd__IPType (1197)
/* onvifXsd:IPType */
enum onvifXsd__IPType {onvifXsd__IPType__IPv4 = 0, onvifXsd__IPType__IPv6 = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPAddressFilterType
#define SOAP_TYPE_onvifXsd__IPAddressFilterType (1203)
/* onvifXsd:IPAddressFilterType */
enum onvifXsd__IPAddressFilterType {onvifXsd__IPAddressFilterType__Allow = 0, onvifXsd__IPAddressFilterType__Deny = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__DynamicDNSType
#define SOAP_TYPE_onvifXsd__DynamicDNSType (1205)
/* onvifXsd:DynamicDNSType */
enum onvifXsd__DynamicDNSType {onvifXsd__DynamicDNSType__NoUpdate = 0, onvifXsd__DynamicDNSType__ClientUpdates = 1, onvifXsd__DynamicDNSType__ServerUpdates = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11StationMode
#define SOAP_TYPE_onvifXsd__Dot11StationMode (1209)
/* onvifXsd:Dot11StationMode */
enum onvifXsd__Dot11StationMode {onvifXsd__Dot11StationMode__Ad_hoc = 0, onvifXsd__Dot11StationMode__Infrastructure = 1, onvifXsd__Dot11StationMode__Extended = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SecurityMode
#define SOAP_TYPE_onvifXsd__Dot11SecurityMode (1211)
/* onvifXsd:Dot11SecurityMode */
enum onvifXsd__Dot11SecurityMode {onvifXsd__Dot11SecurityMode__None = 0, onvifXsd__Dot11SecurityMode__WEP = 1, onvifXsd__Dot11SecurityMode__PSK = 2, onvifXsd__Dot11SecurityMode__Dot1X = 3, onvifXsd__Dot11SecurityMode__Extended = 4};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11Cipher
#define SOAP_TYPE_onvifXsd__Dot11Cipher (1213)
/* onvifXsd:Dot11Cipher */
enum onvifXsd__Dot11Cipher {onvifXsd__Dot11Cipher__CCMP = 0, onvifXsd__Dot11Cipher__TKIP = 1, onvifXsd__Dot11Cipher__Any = 2, onvifXsd__Dot11Cipher__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SignalStrength
#define SOAP_TYPE_onvifXsd__Dot11SignalStrength (1219)
/* onvifXsd:Dot11SignalStrength */
enum onvifXsd__Dot11SignalStrength {onvifXsd__Dot11SignalStrength__None = 0, onvifXsd__Dot11SignalStrength__Very_x0020Bad = 1, onvifXsd__Dot11SignalStrength__Bad = 2, onvifXsd__Dot11SignalStrength__Good = 3, onvifXsd__Dot11SignalStrength__Very_x0020Good = 4, onvifXsd__Dot11SignalStrength__Extended = 5};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11AuthAndMangementSuite
#define SOAP_TYPE_onvifXsd__Dot11AuthAndMangementSuite (1221)
/* onvifXsd:Dot11AuthAndMangementSuite */
enum onvifXsd__Dot11AuthAndMangementSuite {onvifXsd__Dot11AuthAndMangementSuite__None = 0, onvifXsd__Dot11AuthAndMangementSuite__Dot1X = 1, onvifXsd__Dot11AuthAndMangementSuite__PSK = 2, onvifXsd__Dot11AuthAndMangementSuite__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__CapabilityCategory
#define SOAP_TYPE_onvifXsd__CapabilityCategory (1223)
/* onvifXsd:CapabilityCategory */
enum onvifXsd__CapabilityCategory {onvifXsd__CapabilityCategory__All = 0, onvifXsd__CapabilityCategory__Analytics = 1, onvifXsd__CapabilityCategory__Device = 2, onvifXsd__CapabilityCategory__Events = 3, onvifXsd__CapabilityCategory__Imaging = 4, onvifXsd__CapabilityCategory__Media = 5, onvifXsd__CapabilityCategory__PTZ = 6};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemLogType
#define SOAP_TYPE_onvifXsd__SystemLogType (1225)
/* onvifXsd:SystemLogType */
enum onvifXsd__SystemLogType {onvifXsd__SystemLogType__System = 0, onvifXsd__SystemLogType__Access = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__FactoryDefaultType
#define SOAP_TYPE_onvifXsd__FactoryDefaultType (1227)
/* onvifXsd:FactoryDefaultType */
enum onvifXsd__FactoryDefaultType {onvifXsd__FactoryDefaultType__Hard = 0, onvifXsd__FactoryDefaultType__Soft = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__SetDateTimeType
#define SOAP_TYPE_onvifXsd__SetDateTimeType (1229)
/* onvifXsd:SetDateTimeType */
enum onvifXsd__SetDateTimeType {onvifXsd__SetDateTimeType__Manual = 0, onvifXsd__SetDateTimeType__NTP = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__UserLevel
#define SOAP_TYPE_onvifXsd__UserLevel (1231)
/* onvifXsd:UserLevel */
enum onvifXsd__UserLevel {onvifXsd__UserLevel__Administrator = 0, onvifXsd__UserLevel__Operator = 1, onvifXsd__UserLevel__User = 2, onvifXsd__UserLevel__Anonymous = 3, onvifXsd__UserLevel__Extended = 4};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayLogicalState
#define SOAP_TYPE_onvifXsd__RelayLogicalState (1233)
/* onvifXsd:RelayLogicalState */
enum onvifXsd__RelayLogicalState {onvifXsd__RelayLogicalState__active = 0, onvifXsd__RelayLogicalState__inactive = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayIdleState
#define SOAP_TYPE_onvifXsd__RelayIdleState (1235)
/* onvifXsd:RelayIdleState */
enum onvifXsd__RelayIdleState {onvifXsd__RelayIdleState__closed = 0, onvifXsd__RelayIdleState__open = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayMode
#define SOAP_TYPE_onvifXsd__RelayMode (1237)
/* onvifXsd:RelayMode */
enum onvifXsd__RelayMode {onvifXsd__RelayMode__Monostable = 0, onvifXsd__RelayMode__Bistable = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__EFlipMode
#define SOAP_TYPE_onvifXsd__EFlipMode (1239)
/* onvifXsd:EFlipMode */
enum onvifXsd__EFlipMode {onvifXsd__EFlipMode__OFF = 0, onvifXsd__EFlipMode__ON = 1, onvifXsd__EFlipMode__Extended = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReverseMode
#define SOAP_TYPE_onvifXsd__ReverseMode (1241)
/* onvifXsd:ReverseMode */
enum onvifXsd__ReverseMode {onvifXsd__ReverseMode__OFF = 0, onvifXsd__ReverseMode__ON = 1, onvifXsd__ReverseMode__AUTO = 2, onvifXsd__ReverseMode__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__MoveStatus
#define SOAP_TYPE_onvifXsd__MoveStatus (1245)
/* onvifXsd:MoveStatus */
enum onvifXsd__MoveStatus {onvifXsd__MoveStatus__IDLE = 0, onvifXsd__MoveStatus__MOVING = 1, onvifXsd__MoveStatus__UNKNOWN = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourState
#define SOAP_TYPE_onvifXsd__PTZPresetTourState (1247)
/* onvifXsd:PTZPresetTourState */
enum onvifXsd__PTZPresetTourState {onvifXsd__PTZPresetTourState__Idle = 0, onvifXsd__PTZPresetTourState__Touring = 1, onvifXsd__PTZPresetTourState__Paused = 2, onvifXsd__PTZPresetTourState__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourDirection
#define SOAP_TYPE_onvifXsd__PTZPresetTourDirection (1249)
/* onvifXsd:PTZPresetTourDirection */
enum onvifXsd__PTZPresetTourDirection {onvifXsd__PTZPresetTourDirection__Forward = 0, onvifXsd__PTZPresetTourDirection__Backward = 1, onvifXsd__PTZPresetTourDirection__Extended = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourOperation
#define SOAP_TYPE_onvifXsd__PTZPresetTourOperation (1251)
/* onvifXsd:PTZPresetTourOperation */
enum onvifXsd__PTZPresetTourOperation {onvifXsd__PTZPresetTourOperation__Start = 0, onvifXsd__PTZPresetTourOperation__Stop = 1, onvifXsd__PTZPresetTourOperation__Pause = 2, onvifXsd__PTZPresetTourOperation__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__AutoFocusMode
#define SOAP_TYPE_onvifXsd__AutoFocusMode (1253)
/* onvifXsd:AutoFocusMode */
enum onvifXsd__AutoFocusMode {onvifXsd__AutoFocusMode__AUTO = 0, onvifXsd__AutoFocusMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__WideDynamicMode
#define SOAP_TYPE_onvifXsd__WideDynamicMode (1255)
/* onvifXsd:WideDynamicMode */
enum onvifXsd__WideDynamicMode {onvifXsd__WideDynamicMode__OFF = 0, onvifXsd__WideDynamicMode__ON = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__BacklightCompensationMode
#define SOAP_TYPE_onvifXsd__BacklightCompensationMode (1257)
/* onvifXsd:BacklightCompensationMode */
enum onvifXsd__BacklightCompensationMode {onvifXsd__BacklightCompensationMode__OFF = 0, onvifXsd__BacklightCompensationMode__ON = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__ExposurePriority
#define SOAP_TYPE_onvifXsd__ExposurePriority (1259)
/* onvifXsd:ExposurePriority */
enum onvifXsd__ExposurePriority {onvifXsd__ExposurePriority__LowNoise = 0, onvifXsd__ExposurePriority__FrameRate = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__ExposureMode
#define SOAP_TYPE_onvifXsd__ExposureMode (1261)
/* onvifXsd:ExposureMode */
enum onvifXsd__ExposureMode {onvifXsd__ExposureMode__AUTO = 0, onvifXsd__ExposureMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__Enabled
#define SOAP_TYPE_onvifXsd__Enabled (1263)
/* onvifXsd:Enabled */
enum onvifXsd__Enabled {onvifXsd__Enabled__ENABLED = 0, onvifXsd__Enabled__DISABLED = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalanceMode
#define SOAP_TYPE_onvifXsd__WhiteBalanceMode (1265)
/* onvifXsd:WhiteBalanceMode */
enum onvifXsd__WhiteBalanceMode {onvifXsd__WhiteBalanceMode__AUTO = 0, onvifXsd__WhiteBalanceMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_onvifXsd__IrCutFilterMode
#define SOAP_TYPE_onvifXsd__IrCutFilterMode (1267)
/* onvifXsd:IrCutFilterMode */
enum onvifXsd__IrCutFilterMode {onvifXsd__IrCutFilterMode__ON = 0, onvifXsd__IrCutFilterMode__OFF = 1, onvifXsd__IrCutFilterMode__AUTO = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImageStabilizationMode
#define SOAP_TYPE_onvifXsd__ImageStabilizationMode (1269)
/* onvifXsd:ImageStabilizationMode */
enum onvifXsd__ImageStabilizationMode {onvifXsd__ImageStabilizationMode__OFF = 0, onvifXsd__ImageStabilizationMode__ON = 1, onvifXsd__ImageStabilizationMode__AUTO = 2, onvifXsd__ImageStabilizationMode__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__PropertyOperation
#define SOAP_TYPE_onvifXsd__PropertyOperation (1273)
/* onvifXsd:PropertyOperation */
enum onvifXsd__PropertyOperation {onvifXsd__PropertyOperation__Initialized = 0, onvifXsd__PropertyOperation__Deleted = 1, onvifXsd__PropertyOperation__Changed = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__Direction
#define SOAP_TYPE_onvifXsd__Direction (1275)
/* onvifXsd:Direction */
enum onvifXsd__Direction {onvifXsd__Direction__Left = 0, onvifXsd__Direction__Right = 1, onvifXsd__Direction__Any = 2};
#endif

#ifndef SOAP_TYPE_onvifXsd__ClassType
#define SOAP_TYPE_onvifXsd__ClassType (1277)
/* onvifXsd:ClassType */
enum onvifXsd__ClassType {onvifXsd__ClassType__Animal = 0, onvifXsd__ClassType__Face = 1, onvifXsd__ClassType__Human = 2, onvifXsd__ClassType__Vehical = 3, onvifXsd__ClassType__Other = 4};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverMode
#define SOAP_TYPE_onvifXsd__ReceiverMode (1279)
/* onvifXsd:ReceiverMode */
enum onvifXsd__ReceiverMode {onvifXsd__ReceiverMode__AutoConnect = 0, onvifXsd__ReceiverMode__AlwaysConnect = 1, onvifXsd__ReceiverMode__NeverConnect = 2, onvifXsd__ReceiverMode__Unknown = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverState
#define SOAP_TYPE_onvifXsd__ReceiverState (1281)
/* onvifXsd:ReceiverState */
enum onvifXsd__ReceiverState {onvifXsd__ReceiverState__NotConnected = 0, onvifXsd__ReceiverState__Connecting = 1, onvifXsd__ReceiverState__Connected = 2, onvifXsd__ReceiverState__Unknown = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__SearchState
#define SOAP_TYPE_onvifXsd__SearchState (1287)
/* onvifXsd:SearchState */
enum onvifXsd__SearchState {onvifXsd__SearchState__Queued = 0, onvifXsd__SearchState__Searching = 1, onvifXsd__SearchState__Completed = 2, onvifXsd__SearchState__Unknown = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingStatus
#define SOAP_TYPE_onvifXsd__RecordingStatus (1289)
/* onvifXsd:RecordingStatus */
enum onvifXsd__RecordingStatus {onvifXsd__RecordingStatus__Initiated = 0, onvifXsd__RecordingStatus__Recording = 1, onvifXsd__RecordingStatus__Stopped = 2, onvifXsd__RecordingStatus__Removing = 3, onvifXsd__RecordingStatus__Removed = 4, onvifXsd__RecordingStatus__Unknown = 5};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackType
#define SOAP_TYPE_onvifXsd__TrackType (1291)
/* onvifXsd:TrackType */
enum onvifXsd__TrackType {onvifXsd__TrackType__Video = 0, onvifXsd__TrackType__Audio = 1, onvifXsd__TrackType__Metadata = 2, onvifXsd__TrackType__Extended = 3};
#endif

#ifndef SOAP_TYPE_onvifXsd__ModeOfOperation
#define SOAP_TYPE_onvifXsd__ModeOfOperation (1297)
/* onvifXsd:ModeOfOperation */
enum onvifXsd__ModeOfOperation {onvifXsd__ModeOfOperation__Idle = 0, onvifXsd__ModeOfOperation__Active = 1, onvifXsd__ModeOfOperation__Unknown = 2};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__SerialPortType
#define SOAP_TYPE_onvifDeviceIO__SerialPortType (1299)
/* onvifDeviceIO:SerialPortType */
enum onvifDeviceIO__SerialPortType {onvifDeviceIO__SerialPortType__RS232 = 0, onvifDeviceIO__SerialPortType__RS422HalfDuplex = 1, onvifDeviceIO__SerialPortType__RS422FullDuplex = 2, onvifDeviceIO__SerialPortType__RS485HalfDuplex = 3, onvifDeviceIO__SerialPortType__RS485FullDuplex = 4, onvifDeviceIO__SerialPortType__Generic = 5};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__ParityBit
#define SOAP_TYPE_onvifDeviceIO__ParityBit (1301)
/* onvifDeviceIO:ParityBit */
enum onvifDeviceIO__ParityBit {onvifDeviceIO__ParityBit__None = 0, onvifDeviceIO__ParityBit__Even = 1, onvifDeviceIO__ParityBit__Odd = 2, onvifDeviceIO__ParityBit__Mark = 3, onvifDeviceIO__ParityBit__Space = 4, onvifDeviceIO__ParityBit__Extended = 5};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (163)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (9)
/* wsu:Timestamp */
struct _wsu__Timestamp
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Created;	/* optional element of type xsd:string */
	char *Expires;	/* optional element of type xsd:string */
};
typedef struct _wsu__Timestamp _wsu__Timestamp;
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (11)
/* wsse:UsernameToken */
struct _wsse__UsernameToken
{
public:
	char *Username;	/* optional element of type xsd:string */
	struct _wsse__Password *Password;	/* optional element of type wsse:Password */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Created;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__UsernameToken _wsse__UsernameToken;
#endif

#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (14)
/* Primitive wsse:BinarySecurityToken schema type: */
struct _wsse__BinarySecurityToken
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__BinarySecurityToken _wsse__BinarySecurityToken;
#endif

#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (15)
/* wsse:Reference */
struct _wsse__Reference
{
public:
	char *URI;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Reference _wsse__Reference;
#endif

#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (16)
/* wsse:Embedded */
struct _wsse__Embedded
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Embedded _wsse__Embedded;
#endif

#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (17)
/* Primitive wsse:KeyIdentifier schema type: */
struct _wsse__KeyIdentifier
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__KeyIdentifier _wsse__KeyIdentifier;
#endif

#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (18)
/* wsse:SecurityTokenReference */
struct _wsse__SecurityTokenReference
{
public:
	struct _wsse__Reference *Reference;	/* optional element of type wsse:Reference */
	struct _wsse__KeyIdentifier *KeyIdentifier;	/* optional element of type wsse:KeyIdentifier */
	struct _wsse__Embedded *Embedded;	/* optional element of type wsse:Embedded */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Usage;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__SecurityTokenReference _wsse__SecurityTokenReference;
#endif

#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (22)
/* ds:SignatureType */
struct ds__SignatureType
{
public:
	struct ds__SignedInfoType *SignedInfo;	/* optional element of type ds:SignedInfoType */
	char *SignatureValue;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *KeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct ds__SignatureType ds__SignatureType;
#endif

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (32)
/* c14n:InclusiveNamespaces */
struct _c14n__InclusiveNamespaces
{
public:
	char *PrefixList;	/* optional attribute of type xsd:string */
};
typedef struct _c14n__InclusiveNamespaces _c14n__InclusiveNamespaces;
#endif

#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (33)
/* ds:TransformType */
struct ds__TransformType
{
public:
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
	char *__any;
	char *Algorithm;	/* optional attribute of type xsd:string */
};
typedef struct ds__TransformType ds__TransformType;
#endif

#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (25)
/* ds:KeyInfoType */
struct ds__KeyInfoType
{
public:
	char *KeyName;	/* optional element of type xsd:string */
	struct ds__KeyValueType *KeyValue;	/* optional element of type ds:KeyValueType */
	struct ds__RetrievalMethodType *RetrievalMethod;	/* optional element of type ds:RetrievalMethodType */
	struct ds__X509DataType *X509Data;	/* optional element of type ds:X509DataType */
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct ds__KeyInfoType ds__KeyInfoType;
#endif

#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (23)
/* ds:SignedInfoType */
struct ds__SignedInfoType
{
public:
	struct ds__CanonicalizationMethodType *CanonicalizationMethod;	/* required element of type ds:CanonicalizationMethodType */
	struct ds__SignatureMethodType *SignatureMethod;	/* required element of type ds:SignatureMethodType */
	int __sizeReference;	/* sequence of elements <Reference> */
	struct ds__ReferenceType **Reference;	/* required element of type ds:ReferenceType */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct ds__SignedInfoType ds__SignedInfoType;
#endif

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (28)
/* ds:CanonicalizationMethodType */
struct ds__CanonicalizationMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
};
typedef struct ds__CanonicalizationMethodType ds__CanonicalizationMethodType;
#endif

#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (29)
/* ds:SignatureMethodType */
struct ds__SignatureMethodType
{
public:
	int *HMACOutputLength;	/* optional element of type xsd:int */
	char *Algorithm;	/* required attribute of type xsd:string */
};
typedef struct ds__SignatureMethodType ds__SignatureMethodType;
#endif

#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (30)
/* ds:ReferenceType */
struct ds__ReferenceType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	struct ds__DigestMethodType *DigestMethod;	/* required element of type ds:DigestMethodType */
	char *DigestValue;	/* required element of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
typedef struct ds__ReferenceType ds__ReferenceType;
#endif

#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (31)
/* ds:TransformsType */
struct ds__TransformsType
{
public:
	int __sizeTransform;	/* sequence of elements <Transform> */
	struct ds__TransformType *Transform;	/* required element of type ds:TransformType */
};
typedef struct ds__TransformsType ds__TransformsType;
#endif

#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (36)
/* ds:DigestMethodType */
struct ds__DigestMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
};
typedef struct ds__DigestMethodType ds__DigestMethodType;
#endif

#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (37)
/* ds:KeyValueType */
struct ds__KeyValueType
{
public:
	struct ds__DSAKeyValueType *DSAKeyValue;	/* required element of type ds:DSAKeyValueType */
	struct ds__RSAKeyValueType *RSAKeyValue;	/* required element of type ds:RSAKeyValueType */
};
typedef struct ds__KeyValueType ds__KeyValueType;
#endif

#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (39)
/* ds:RetrievalMethodType */
struct ds__RetrievalMethodType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
typedef struct ds__RetrievalMethodType ds__RetrievalMethodType;
#endif

#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (41)
/* ds:X509DataType */
struct ds__X509DataType
{
public:
	struct ds__X509IssuerSerialType *X509IssuerSerial;	/* required element of type ds:X509IssuerSerialType */
	char *X509SKI;	/* required element of type xsd:string */
	char *X509SubjectName;	/* required element of type xsd:string */
	char *X509Certificate;	/* required element of type xsd:string */
	char *X509CRL;	/* required element of type xsd:string */
};
typedef struct ds__X509DataType ds__X509DataType;
#endif

#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (45)
/* ds:X509IssuerSerialType */
struct ds__X509IssuerSerialType
{
public:
	char *X509IssuerName;	/* required element of type xsd:string */
	int X509SerialNumber;	/* required element of type xsd:int */
};
typedef struct ds__X509IssuerSerialType ds__X509IssuerSerialType;
#endif

#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (46)
/* ds:DSAKeyValueType */
struct ds__DSAKeyValueType
{
public:
	char *G;	/* optional element of type xsd:string */
	char *Y;	/* required element of type xsd:string */
	char *J;	/* optional element of type xsd:string */
	char *P;	/* required element of type xsd:string */
	char *Q;	/* required element of type xsd:string */
	char *Seed;	/* required element of type xsd:string */
	char *PgenCounter;	/* required element of type xsd:string */
};
typedef struct ds__DSAKeyValueType ds__DSAKeyValueType;
#endif

#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (47)
/* ds:RSAKeyValueType */
struct ds__RSAKeyValueType
{
public:
	char *Modulus;	/* required element of type xsd:string */
	char *Exponent;	/* required element of type xsd:string */
};
typedef struct ds__RSAKeyValueType ds__RSAKeyValueType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType
#define SOAP_TYPE_xenc__EncryptionPropertyType (69)
/* xenc:EncryptionPropertyType */
struct xenc__EncryptionPropertyType
{
public:
	char *Target;	/* optional attribute of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct xenc__EncryptionPropertyType xenc__EncryptionPropertyType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptedType
#define SOAP_TYPE_xenc__EncryptedType (59)
/* xenc:EncryptedType */
struct xenc__EncryptedType
{
public:
	struct xenc__EncryptionMethodType *EncryptionMethod;	/* optional element of type xenc:EncryptionMethodType */
	struct ds__KeyInfoType *ds__KeyInfo;	/* optional element of type ds:KeyInfo */
	struct xenc__CipherDataType *CipherData;	/* required element of type xenc:CipherDataType */
	struct xenc__EncryptionPropertiesType *EncryptionProperties;	/* optional element of type xenc:EncryptionPropertiesType */
	char *Id;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *MimeType;	/* optional attribute of type xsd:string */
	char *Encoding;	/* optional attribute of type xsd:string */
};
typedef struct xenc__EncryptedType xenc__EncryptedType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptionMethodType
#define SOAP_TYPE_xenc__EncryptionMethodType (60)
/* xenc:EncryptionMethodType */
struct xenc__EncryptionMethodType
{
public:
	int *KeySize;	/* optional element of type xsd:int */
	char *OAEPparams;	/* optional element of type xsd:string */
	char *Algorithm;	/* required attribute of type xsd:string */
	char *__mixed;
};
typedef struct xenc__EncryptionMethodType xenc__EncryptionMethodType;
#endif

#ifndef SOAP_TYPE_xenc__CipherDataType
#define SOAP_TYPE_xenc__CipherDataType (61)
/* xenc:CipherDataType */
struct xenc__CipherDataType
{
public:
	char *CipherValue;	/* optional element of type xsd:string */
	struct xenc__CipherReferenceType *CipherReference;	/* optional element of type xenc:CipherReferenceType */
};
typedef struct xenc__CipherDataType xenc__CipherDataType;
#endif

#ifndef SOAP_TYPE_xenc__CipherReferenceType
#define SOAP_TYPE_xenc__CipherReferenceType (62)
/* xenc:CipherReferenceType */
struct xenc__CipherReferenceType
{
public:
	struct xenc__TransformsType *Transforms;	/* optional element of type xenc:TransformsType */
	char *URI;	/* required attribute of type xsd:string */
};
typedef struct xenc__CipherReferenceType xenc__CipherReferenceType;
#endif

#ifndef SOAP_TYPE_xenc__TransformsType
#define SOAP_TYPE_xenc__TransformsType (63)
/* xenc:TransformsType */
struct xenc__TransformsType
{
public:
	struct ds__TransformType ds__Transform;	/* required element of type ds:Transform */
};
typedef struct xenc__TransformsType xenc__TransformsType;
#endif

#ifndef SOAP_TYPE_xenc__AgreementMethodType
#define SOAP_TYPE_xenc__AgreementMethodType (66)
/* xenc:AgreementMethodType */
struct xenc__AgreementMethodType
{
public:
	char *KA_Nonce;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *OriginatorKeyInfo;	/* optional element of type ds:KeyInfoType */
	struct ds__KeyInfoType *RecipientKeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Algorithm;	/* required attribute of type xsd:string */
	char *__mixed;
};
typedef struct xenc__AgreementMethodType xenc__AgreementMethodType;
#endif

#ifndef SOAP_TYPE_xenc__ReferenceType
#define SOAP_TYPE_xenc__ReferenceType (67)
/* xenc:ReferenceType */
struct xenc__ReferenceType
{
public:
	char *URI;	/* required attribute of type xsd:string */
};
typedef struct xenc__ReferenceType xenc__ReferenceType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType
#define SOAP_TYPE_xenc__EncryptionPropertiesType (68)
/* xenc:EncryptionPropertiesType */
struct xenc__EncryptionPropertiesType
{
public:
	int __sizeEncryptionProperty;	/* sequence of elements <EncryptionProperty> */
	struct xenc__EncryptionPropertyType *EncryptionProperty;	/* required element of type xenc:EncryptionPropertyType */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct xenc__EncryptionPropertiesType xenc__EncryptionPropertiesType;
#endif

#ifndef SOAP_TYPE___xenc__union_ReferenceList
#define SOAP_TYPE___xenc__union_ReferenceList (78)
/* Operation wrapper: */
struct __xenc__union_ReferenceList
{
public:
	struct xenc__ReferenceType *DataReference;	/* optional element of type xenc:ReferenceType */
	struct xenc__ReferenceType *KeyReference;	/* optional element of type xenc:ReferenceType */
};
#endif

#ifndef SOAP_TYPE__xenc__ReferenceList
#define SOAP_TYPE__xenc__ReferenceList (70)
/* xenc:ReferenceList */
struct _xenc__ReferenceList
{
public:
	int __size_ReferenceList;	/* sequence of elements <-union-ReferenceList> */
	struct __xenc__union_ReferenceList *__union_ReferenceList;
};
typedef struct _xenc__ReferenceList _xenc__ReferenceList;
#endif

#ifndef SOAP_TYPE_xenc__EncryptedDataType
#define SOAP_TYPE_xenc__EncryptedDataType (64)
/* xenc:EncryptedDataType */
struct xenc__EncryptedDataType
{
public:
	struct xenc__EncryptionMethodType *EncryptionMethod;	/* optional element of type xenc:EncryptionMethodType */
	struct ds__KeyInfoType *ds__KeyInfo;	/* optional element of type ds:KeyInfo */
	struct xenc__CipherDataType *CipherData;	/* required element of type xenc:CipherDataType */
	struct xenc__EncryptionPropertiesType *EncryptionProperties;	/* optional element of type xenc:EncryptionPropertiesType */
	char *Id;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *MimeType;	/* optional attribute of type xsd:string */
	char *Encoding;	/* optional attribute of type xsd:string */
};
typedef struct xenc__EncryptedDataType xenc__EncryptedDataType;
#endif

#ifndef SOAP_TYPE_xenc__EncryptedKeyType
#define SOAP_TYPE_xenc__EncryptedKeyType (65)
/* xenc:EncryptedKeyType */
struct xenc__EncryptedKeyType
{
public:
	struct xenc__EncryptionMethodType *EncryptionMethod;	/* optional element of type xenc:EncryptionMethodType */
	struct ds__KeyInfoType *ds__KeyInfo;	/* optional element of type ds:KeyInfo */
	struct xenc__CipherDataType *CipherData;	/* required element of type xenc:CipherDataType */
	struct xenc__EncryptionPropertiesType *EncryptionProperties;	/* optional element of type xenc:EncryptionPropertiesType */
	char *Id;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *MimeType;	/* optional attribute of type xsd:string */
	char *Encoding;	/* optional attribute of type xsd:string */
	struct _xenc__ReferenceList *ReferenceList;	/* optional element of type xenc:ReferenceList */
	char *CarriedKeyName;	/* optional element of type xsd:string */
	char *Recipient;	/* optional attribute of type xsd:string */
};
typedef struct xenc__EncryptedKeyType xenc__EncryptedKeyType;
#endif

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (82)
/* wsse:Security */
struct _wsse__Security
{
public:
	struct _wsu__Timestamp *wsu__Timestamp;	/* optional element of type wsu:Timestamp */
	struct _wsse__UsernameToken *UsernameToken;	/* optional element of type wsse:UsernameToken */
	struct _wsse__BinarySecurityToken *BinarySecurityToken;	/* optional element of type wsse:BinarySecurityToken */
	struct xenc__EncryptedKeyType *xenc__EncryptedKey;	/* optional element of type xenc:EncryptedKeyType */
	struct _xenc__ReferenceList *xenc__ReferenceList;	/* optional element of type xenc:ReferenceList */
	struct ds__SignatureType *ds__Signature;	/* optional element of type ds:SignatureType */
	char *SOAP_ENV__actor;	/* optional attribute of type xsd:string */
	char *SOAP_ENV__role;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Security _wsse__Security;
#endif

#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (12)
/* Primitive wsse:Password schema type: */
struct _wsse__Password
{
public:
	char *__item;
	char *Type;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Password _wsse__Password;
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (88)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	struct _wsse__Security *wsse__Security;	/* mustUnderstand */
	char *wsa__MessageID;	/* optional element of type wsa:MessageID */
	struct wsa__Relationship *wsa__RelatesTo;	/* optional element of type wsa:RelatesTo */
	struct wsa__EndpointReferenceType *wsa__From;	/* optional element of type wsa:From */
	struct wsa__EndpointReferenceType *wsa__ReplyTo;	/* mustUnderstand */
	struct wsa__EndpointReferenceType *wsa__FaultTo;	/* mustUnderstand */
	char *wsa__To;	/* mustUnderstand */
	char *wsa__Action;	/* mustUnderstand */
	struct wsdd__AppSequenceType *wsdd__AppSequence;	/* optional element of type wsdd:AppSequenceType */
	char *subscriptionID;	/* optional element of type wsa:MessageID */
};
#endif

#endif

#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (90)
/* wsa:EndpointReferenceType */
struct wsa__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa__ReferencePropertiesType *ReferenceProperties;	/* optional element of type wsa:ReferencePropertiesType */
	struct wsa__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa:ReferenceParametersType */
	char **PortType;	/* optional element of type xsd:QName */
	struct wsa__ServiceNameType *ServiceName;	/* optional element of type wsa:ServiceNameType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa__EndpointReferenceType wsa__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (91)
/* wsa:ReferencePropertiesType */
struct wsa__ReferencePropertiesType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
};
typedef struct wsa__ReferencePropertiesType wsa__ReferencePropertiesType;
#endif

#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (92)
/* wsa:ReferenceParametersType */
struct wsa__ReferenceParametersType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
};
typedef struct wsa__ReferenceParametersType wsa__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (93)
/* Primitive wsa:ServiceNameType schema type: */
struct wsa__ServiceNameType
{
public:
	char *__item;
	char *PortName;	/* optional attribute of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa__ServiceNameType wsa__ServiceNameType;
#endif

#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (94)
/* Primitive wsa:Relationship schema type: */
struct wsa__Relationship
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type xsd:QName */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa__Relationship wsa__Relationship;
#endif

#ifndef SOAP_TYPE_wsdd__HelloType
#define SOAP_TYPE_wsdd__HelloType (116)
/* wsdd:HelloType */
struct wsdd__HelloType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
};
typedef struct wsdd__HelloType wsdd__HelloType;
#endif

#ifndef SOAP_TYPE_wsdd__ByeType
#define SOAP_TYPE_wsdd__ByeType (117)
/* wsdd:ByeType */
struct wsdd__ByeType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int *MetadataVersion;	/* optional element of type xsd:unsignedInt */
};
typedef struct wsdd__ByeType wsdd__ByeType;
#endif

#ifndef SOAP_TYPE_wsdd__ProbeType
#define SOAP_TYPE_wsdd__ProbeType (118)
/* wsdd:ProbeType */
struct wsdd__ProbeType
{
public:
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
};
typedef struct wsdd__ProbeType wsdd__ProbeType;
#endif

#ifndef SOAP_TYPE_wsdd__ProbeMatchesType
#define SOAP_TYPE_wsdd__ProbeMatchesType (119)
/* wsdd:ProbeMatchesType */
struct wsdd__ProbeMatchesType
{
public:
	int __sizeProbeMatch;	/* sequence of elements <ProbeMatch> */
	struct wsdd__ProbeMatchType *ProbeMatch;	/* optional element of type wsdd:ProbeMatchType */
};
typedef struct wsdd__ProbeMatchesType wsdd__ProbeMatchesType;
#endif

#ifndef SOAP_TYPE_wsdd__ProbeMatchType
#define SOAP_TYPE_wsdd__ProbeMatchType (120)
/* wsdd:ProbeMatchType */
struct wsdd__ProbeMatchType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
};
typedef struct wsdd__ProbeMatchType wsdd__ProbeMatchType;
#endif

#ifndef SOAP_TYPE_wsdd__ResolveType
#define SOAP_TYPE_wsdd__ResolveType (121)
/* wsdd:ResolveType */
struct wsdd__ResolveType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
};
typedef struct wsdd__ResolveType wsdd__ResolveType;
#endif

#ifndef SOAP_TYPE_wsdd__ResolveMatchesType
#define SOAP_TYPE_wsdd__ResolveMatchesType (122)
/* wsdd:ResolveMatchesType */
struct wsdd__ResolveMatchesType
{
public:
	struct wsdd__ResolveMatchType *ResolveMatch;	/* optional element of type wsdd:ResolveMatchType */
};
typedef struct wsdd__ResolveMatchesType wsdd__ResolveMatchesType;
#endif

#ifndef SOAP_TYPE_wsdd__ResolveMatchType
#define SOAP_TYPE_wsdd__ResolveMatchType (123)
/* wsdd:ResolveMatchType */
struct wsdd__ResolveMatchType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
};
typedef struct wsdd__ResolveMatchType wsdd__ResolveMatchType;
#endif

#ifndef SOAP_TYPE_wsdd__SecurityType
#define SOAP_TYPE_wsdd__SecurityType (125)
/* wsdd:SecurityType */
struct wsdd__SecurityType
{
public:
	struct wsdd__SigType *Sig;	/* optional element of type wsdd:SigType */
};
typedef struct wsdd__SecurityType wsdd__SecurityType;
#endif

#ifndef SOAP_TYPE_wsdd__SigType
#define SOAP_TYPE_wsdd__SigType (126)
/* wsdd:SigType */
struct wsdd__SigType
{
public:
	char *Scheme;	/* required attribute of type xsd:string */
	char *KeyId;	/* optional attribute of type xsd:string */
	char *Refs;	/* required attribute of type xsd:string */
	char *Sig;	/* required attribute of type xsd:string */
};
typedef struct wsdd__SigType wsdd__SigType;
#endif

#ifndef SOAP_TYPE_wsdd__ScopesType
#define SOAP_TYPE_wsdd__ScopesType (124)
/* Primitive wsdd:ScopesType schema type: */
struct wsdd__ScopesType
{
public:
	char *__item;
	char *MatchBy;	/* optional attribute of type xsd:string */
};
typedef struct wsdd__ScopesType wsdd__ScopesType;
#endif

#ifndef SOAP_TYPE_wsdd__AppSequenceType
#define SOAP_TYPE_wsdd__AppSequenceType (127)
/* wsdd:AppSequenceType */
struct wsdd__AppSequenceType
{
public:
	unsigned int InstanceId;	/* required attribute of type xsd:unsignedInt */
	char *SequenceId;	/* optional attribute of type xsd:string */
	unsigned int MessageNumber;	/* required attribute of type xsd:unsignedInt */
};
typedef struct wsdd__AppSequenceType wsdd__AppSequenceType;
#endif

#ifndef SOAP_TYPE___wsdd__Hello
#define SOAP_TYPE___wsdd__Hello (141)
/* Operation wrapper: */
struct __wsdd__Hello
{
public:
	struct wsdd__HelloType *wsdd__Hello;	/* optional element of type wsdd:HelloType */
};
#endif

#ifndef SOAP_TYPE___wsdd__Bye
#define SOAP_TYPE___wsdd__Bye (144)
/* Operation wrapper: */
struct __wsdd__Bye
{
public:
	struct wsdd__ByeType *wsdd__Bye;	/* optional element of type wsdd:ByeType */
};
#endif

#ifndef SOAP_TYPE___wsdd__Probe
#define SOAP_TYPE___wsdd__Probe (147)
/* Operation wrapper: */
struct __wsdd__Probe
{
public:
	struct wsdd__ProbeType *wsdd__Probe;	/* optional element of type wsdd:ProbeType */
};
#endif

#ifndef SOAP_TYPE___wsdd__ProbeMatches
#define SOAP_TYPE___wsdd__ProbeMatches (150)
/* Operation wrapper: */
struct __wsdd__ProbeMatches
{
public:
	struct wsdd__ProbeMatchesType *wsdd__ProbeMatches;	/* optional element of type wsdd:ProbeMatchesType */
};
#endif

#ifndef SOAP_TYPE___wsdd__Resolve
#define SOAP_TYPE___wsdd__Resolve (153)
/* Operation wrapper: */
struct __wsdd__Resolve
{
public:
	struct wsdd__ResolveType *wsdd__Resolve;	/* optional element of type wsdd:ResolveType */
};
#endif

#ifndef SOAP_TYPE___wsdd__ResolveMatches
#define SOAP_TYPE___wsdd__ResolveMatches (156)
/* Operation wrapper: */
struct __wsdd__ResolveMatches
{
public:
	struct wsdd__ResolveMatchesType *wsdd__ResolveMatches;	/* optional element of type wsdd:ResolveMatchesType */
};
#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (157)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__NCName_
#define SOAP_TYPE_xsd__NCName_ (162)
/* Primitive xsd:NCName schema type: */
class SOAP_CMAC xsd__NCName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_xsd__NCName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__NCName_() { xsd__NCName_::soap_default(NULL); }
	virtual ~xsd__NCName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (164)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_() { xsd__QName_::soap_default(NULL); }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_
#define SOAP_TYPE_xsd__anySimpleType_ (166)
/* Primitive xsd:anySimpleType schema type: */
class SOAP_CMAC xsd__anySimpleType_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE_xsd__anySimpleType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anySimpleType_() { xsd__anySimpleType_::soap_default(NULL); }
	virtual ~xsd__anySimpleType_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (168)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (169)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (172)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (173)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (175)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (178)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (179)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (181)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary() { xsd__hexBinary::soap_default(NULL); }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_
#define SOAP_TYPE_xsd__hexBinary_ (182)
/* Primitive xsd:hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary_ : public xsd__anyType
{
public:
	xsd__hexBinary __item;
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_xsd__hexBinary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary_() { xsd__hexBinary_::soap_default(NULL); }
	virtual ~xsd__hexBinary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (183)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__integer_
#define SOAP_TYPE_xsd__integer_ (185)
/* Primitive xsd:integer schema type: */
class SOAP_CMAC xsd__integer_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE_xsd__integer_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__integer_() { xsd__integer_::soap_default(NULL); }
	virtual ~xsd__integer_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_
#define SOAP_TYPE_xsd__nonNegativeInteger_ (187)
/* Primitive xsd:nonNegativeInteger schema type: */
class SOAP_CMAC xsd__nonNegativeInteger_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_xsd__nonNegativeInteger_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__nonNegativeInteger_() { xsd__nonNegativeInteger_::soap_default(NULL); }
	virtual ~xsd__nonNegativeInteger_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (188)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__token_
#define SOAP_TYPE_xsd__token_ (190)
/* Primitive xsd:token schema type: */
class SOAP_CMAC xsd__token_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE_xsd__token_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__token_() { xsd__token_::soap_default(NULL); }
	virtual ~xsd__token_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (191)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() { xsd__unsignedLong::soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RelationshipType_
#define SOAP_TYPE_ns1__RelationshipType_ (1148)
/* Primitive ns1:RelationshipType schema type: */
class SOAP_CMAC ns1__RelationshipType_ : public xsd__anyType
{
public:
	enum ns1__RelationshipType __item;
public:
	virtual int soap_type() const { return 1148; } /* = unique id SOAP_TYPE_ns1__RelationshipType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RelationshipType_() { ns1__RelationshipType_::soap_default(NULL); }
	virtual ~ns1__RelationshipType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultCodesType_
#define SOAP_TYPE_ns1__FaultCodesType_ (1150)
/* Primitive ns1:FaultCodesType schema type: */
class SOAP_CMAC ns1__FaultCodesType_ : public xsd__anyType
{
public:
	enum ns1__FaultCodesType __item;
public:
	virtual int soap_type() const { return 1150; } /* = unique id SOAP_TYPE_ns1__FaultCodesType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultCodesType_() { ns1__FaultCodesType_::soap_default(NULL); }
	virtual ~ns1__FaultCodesType_() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__FullTopicExpression__
#define SOAP_TYPE_oasisWsnT1__FullTopicExpression__ (1152)
/* Primitive oasisWsnT1:FullTopicExpression schema type: */
class SOAP_CMAC oasisWsnT1__FullTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1152; } /* = unique id SOAP_TYPE_oasisWsnT1__FullTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__FullTopicExpression__() { oasisWsnT1__FullTopicExpression__::soap_default(NULL); }
	virtual ~oasisWsnT1__FullTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__ConcreteTopicExpression__
#define SOAP_TYPE_oasisWsnT1__ConcreteTopicExpression__ (1154)
/* Primitive oasisWsnT1:ConcreteTopicExpression schema type: */
class SOAP_CMAC oasisWsnT1__ConcreteTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1154; } /* = unique id SOAP_TYPE_oasisWsnT1__ConcreteTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__ConcreteTopicExpression__() { oasisWsnT1__ConcreteTopicExpression__::soap_default(NULL); }
	virtual ~oasisWsnT1__ConcreteTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__SimpleTopicExpression__
#define SOAP_TYPE_oasisWsnT1__SimpleTopicExpression__ (1156)
/* Primitive oasisWsnT1:SimpleTopicExpression schema type: */
class SOAP_CMAC oasisWsnT1__SimpleTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1156; } /* = unique id SOAP_TYPE_oasisWsnT1__SimpleTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__SimpleTopicExpression__() { oasisWsnT1__SimpleTopicExpression__::soap_default(NULL); }
	virtual ~oasisWsnT1__SimpleTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReferenceToken__
#define SOAP_TYPE_onvifXsd__ReferenceToken__ (1158)
/* Primitive onvifXsd:ReferenceToken schema type: */
class SOAP_CMAC onvifXsd__ReferenceToken__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1158; } /* = unique id SOAP_TYPE_onvifXsd__ReferenceToken__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReferenceToken__() { onvifXsd__ReferenceToken__::soap_default(NULL); }
	virtual ~onvifXsd__ReferenceToken__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Name__
#define SOAP_TYPE_onvifXsd__Name__ (1160)
/* Primitive onvifXsd:Name schema type: */
class SOAP_CMAC onvifXsd__Name__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1160; } /* = unique id SOAP_TYPE_onvifXsd__Name__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Name__() { onvifXsd__Name__::soap_default(NULL); }
	virtual ~onvifXsd__Name__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RotateMode_
#define SOAP_TYPE_onvifXsd__RotateMode_ (1162)
/* Primitive onvifXsd:RotateMode schema type: */
class SOAP_CMAC onvifXsd__RotateMode_ : public xsd__anyType
{
public:
	enum onvifXsd__RotateMode __item;
public:
	virtual int soap_type() const { return 1162; } /* = unique id SOAP_TYPE_onvifXsd__RotateMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RotateMode_() { onvifXsd__RotateMode_::soap_default(NULL); }
	virtual ~onvifXsd__RotateMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoEncoding_
#define SOAP_TYPE_onvifXsd__VideoEncoding_ (1164)
/* Primitive onvifXsd:VideoEncoding schema type: */
class SOAP_CMAC onvifXsd__VideoEncoding_ : public xsd__anyType
{
public:
	enum onvifXsd__VideoEncoding __item;
public:
	virtual int soap_type() const { return 1164; } /* = unique id SOAP_TYPE_onvifXsd__VideoEncoding_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoEncoding_() { onvifXsd__VideoEncoding_::soap_default(NULL); }
	virtual ~onvifXsd__VideoEncoding_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Mpeg4Profile_
#define SOAP_TYPE_onvifXsd__Mpeg4Profile_ (1166)
/* Primitive onvifXsd:Mpeg4Profile schema type: */
class SOAP_CMAC onvifXsd__Mpeg4Profile_ : public xsd__anyType
{
public:
	enum onvifXsd__Mpeg4Profile __item;
public:
	virtual int soap_type() const { return 1166; } /* = unique id SOAP_TYPE_onvifXsd__Mpeg4Profile_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Mpeg4Profile_() { onvifXsd__Mpeg4Profile_::soap_default(NULL); }
	virtual ~onvifXsd__Mpeg4Profile_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__H264Profile_
#define SOAP_TYPE_onvifXsd__H264Profile_ (1168)
/* Primitive onvifXsd:H264Profile schema type: */
class SOAP_CMAC onvifXsd__H264Profile_ : public xsd__anyType
{
public:
	enum onvifXsd__H264Profile __item;
public:
	virtual int soap_type() const { return 1168; } /* = unique id SOAP_TYPE_onvifXsd__H264Profile_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__H264Profile_() { onvifXsd__H264Profile_::soap_default(NULL); }
	virtual ~onvifXsd__H264Profile_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioEncoding_
#define SOAP_TYPE_onvifXsd__AudioEncoding_ (1170)
/* Primitive onvifXsd:AudioEncoding schema type: */
class SOAP_CMAC onvifXsd__AudioEncoding_ : public xsd__anyType
{
public:
	enum onvifXsd__AudioEncoding __item;
public:
	virtual int soap_type() const { return 1170; } /* = unique id SOAP_TYPE_onvifXsd__AudioEncoding_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioEncoding_() { onvifXsd__AudioEncoding_::soap_default(NULL); }
	virtual ~onvifXsd__AudioEncoding_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__StreamType_
#define SOAP_TYPE_onvifXsd__StreamType_ (1172)
/* Primitive onvifXsd:StreamType schema type: */
class SOAP_CMAC onvifXsd__StreamType_ : public xsd__anyType
{
public:
	enum onvifXsd__StreamType __item;
public:
	virtual int soap_type() const { return 1172; } /* = unique id SOAP_TYPE_onvifXsd__StreamType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__StreamType_() { onvifXsd__StreamType_::soap_default(NULL); }
	virtual ~onvifXsd__StreamType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TransportProtocol_
#define SOAP_TYPE_onvifXsd__TransportProtocol_ (1174)
/* Primitive onvifXsd:TransportProtocol schema type: */
class SOAP_CMAC onvifXsd__TransportProtocol_ : public xsd__anyType
{
public:
	enum onvifXsd__TransportProtocol __item;
public:
	virtual int soap_type() const { return 1174; } /* = unique id SOAP_TYPE_onvifXsd__TransportProtocol_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TransportProtocol_() { onvifXsd__TransportProtocol_::soap_default(NULL); }
	virtual ~onvifXsd__TransportProtocol_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ScopeDefinition_
#define SOAP_TYPE_onvifXsd__ScopeDefinition_ (1176)
/* Primitive onvifXsd:ScopeDefinition schema type: */
class SOAP_CMAC onvifXsd__ScopeDefinition_ : public xsd__anyType
{
public:
	enum onvifXsd__ScopeDefinition __item;
public:
	virtual int soap_type() const { return 1176; } /* = unique id SOAP_TYPE_onvifXsd__ScopeDefinition_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ScopeDefinition_() { onvifXsd__ScopeDefinition_::soap_default(NULL); }
	virtual ~onvifXsd__ScopeDefinition_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DiscoveryMode_
#define SOAP_TYPE_onvifXsd__DiscoveryMode_ (1178)
/* Primitive onvifXsd:DiscoveryMode schema type: */
class SOAP_CMAC onvifXsd__DiscoveryMode_ : public xsd__anyType
{
public:
	enum onvifXsd__DiscoveryMode __item;
public:
	virtual int soap_type() const { return 1178; } /* = unique id SOAP_TYPE_onvifXsd__DiscoveryMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DiscoveryMode_() { onvifXsd__DiscoveryMode_::soap_default(NULL); }
	virtual ~onvifXsd__DiscoveryMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceConfigPriority__
#define SOAP_TYPE_onvifXsd__NetworkInterfaceConfigPriority__ (1180)
/* Primitive onvifXsd:NetworkInterfaceConfigPriority schema type: */
class SOAP_CMAC onvifXsd__NetworkInterfaceConfigPriority__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1180; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceConfigPriority__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceConfigPriority__() { onvifXsd__NetworkInterfaceConfigPriority__::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceConfigPriority__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Duplex_
#define SOAP_TYPE_onvifXsd__Duplex_ (1182)
/* Primitive onvifXsd:Duplex schema type: */
class SOAP_CMAC onvifXsd__Duplex_ : public xsd__anyType
{
public:
	enum onvifXsd__Duplex __item;
public:
	virtual int soap_type() const { return 1182; } /* = unique id SOAP_TYPE_onvifXsd__Duplex_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Duplex_() { onvifXsd__Duplex_::soap_default(NULL); }
	virtual ~onvifXsd__Duplex_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IANA_IfTypes__
#define SOAP_TYPE_onvifXsd__IANA_IfTypes__ (1184)
/* Primitive onvifXsd:IANA-IfTypes schema type: */
class SOAP_CMAC onvifXsd__IANA_IfTypes__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 1184; } /* = unique id SOAP_TYPE_onvifXsd__IANA_IfTypes__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IANA_IfTypes__() { onvifXsd__IANA_IfTypes__::soap_default(NULL); }
	virtual ~onvifXsd__IANA_IfTypes__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6DHCPConfiguration_
#define SOAP_TYPE_onvifXsd__IPv6DHCPConfiguration_ (1186)
/* Primitive onvifXsd:IPv6DHCPConfiguration schema type: */
class SOAP_CMAC onvifXsd__IPv6DHCPConfiguration_ : public xsd__anyType
{
public:
	enum onvifXsd__IPv6DHCPConfiguration __item;
public:
	virtual int soap_type() const { return 1186; } /* = unique id SOAP_TYPE_onvifXsd__IPv6DHCPConfiguration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv6DHCPConfiguration_() { onvifXsd__IPv6DHCPConfiguration_::soap_default(NULL); }
	virtual ~onvifXsd__IPv6DHCPConfiguration_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkProtocolType_
#define SOAP_TYPE_onvifXsd__NetworkProtocolType_ (1188)
/* Primitive onvifXsd:NetworkProtocolType schema type: */
class SOAP_CMAC onvifXsd__NetworkProtocolType_ : public xsd__anyType
{
public:
	enum onvifXsd__NetworkProtocolType __item;
public:
	virtual int soap_type() const { return 1188; } /* = unique id SOAP_TYPE_onvifXsd__NetworkProtocolType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkProtocolType_() { onvifXsd__NetworkProtocolType_::soap_default(NULL); }
	virtual ~onvifXsd__NetworkProtocolType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkHostType_
#define SOAP_TYPE_onvifXsd__NetworkHostType_ (1190)
/* Primitive onvifXsd:NetworkHostType schema type: */
class SOAP_CMAC onvifXsd__NetworkHostType_ : public xsd__anyType
{
public:
	enum onvifXsd__NetworkHostType __item;
public:
	virtual int soap_type() const { return 1190; } /* = unique id SOAP_TYPE_onvifXsd__NetworkHostType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkHostType_() { onvifXsd__NetworkHostType_::soap_default(NULL); }
	virtual ~onvifXsd__NetworkHostType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv4Address__
#define SOAP_TYPE_onvifXsd__IPv4Address__ (1192)
/* Primitive onvifXsd:IPv4Address schema type: */
class SOAP_CMAC onvifXsd__IPv4Address__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1192; } /* = unique id SOAP_TYPE_onvifXsd__IPv4Address__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv4Address__() { onvifXsd__IPv4Address__::soap_default(NULL); }
	virtual ~onvifXsd__IPv4Address__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6Address__
#define SOAP_TYPE_onvifXsd__IPv6Address__ (1194)
/* Primitive onvifXsd:IPv6Address schema type: */
class SOAP_CMAC onvifXsd__IPv6Address__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1194; } /* = unique id SOAP_TYPE_onvifXsd__IPv6Address__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv6Address__() { onvifXsd__IPv6Address__::soap_default(NULL); }
	virtual ~onvifXsd__IPv6Address__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__HwAddress__
#define SOAP_TYPE_onvifXsd__HwAddress__ (1196)
/* Primitive onvifXsd:HwAddress schema type: */
class SOAP_CMAC onvifXsd__HwAddress__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1196; } /* = unique id SOAP_TYPE_onvifXsd__HwAddress__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__HwAddress__() { onvifXsd__HwAddress__::soap_default(NULL); }
	virtual ~onvifXsd__HwAddress__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPType_
#define SOAP_TYPE_onvifXsd__IPType_ (1198)
/* Primitive onvifXsd:IPType schema type: */
class SOAP_CMAC onvifXsd__IPType_ : public xsd__anyType
{
public:
	enum onvifXsd__IPType __item;
public:
	virtual int soap_type() const { return 1198; } /* = unique id SOAP_TYPE_onvifXsd__IPType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPType_() { onvifXsd__IPType_::soap_default(NULL); }
	virtual ~onvifXsd__IPType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DNSName__
#define SOAP_TYPE_onvifXsd__DNSName__ (1200)
/* Primitive onvifXsd:DNSName schema type: */
class SOAP_CMAC onvifXsd__DNSName__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1200; } /* = unique id SOAP_TYPE_onvifXsd__DNSName__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DNSName__() { onvifXsd__DNSName__::soap_default(NULL); }
	virtual ~onvifXsd__DNSName__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Domain__
#define SOAP_TYPE_onvifXsd__Domain__ (1202)
/* Primitive onvifXsd:Domain schema type: */
class SOAP_CMAC onvifXsd__Domain__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1202; } /* = unique id SOAP_TYPE_onvifXsd__Domain__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Domain__() { onvifXsd__Domain__::soap_default(NULL); }
	virtual ~onvifXsd__Domain__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPAddressFilterType_
#define SOAP_TYPE_onvifXsd__IPAddressFilterType_ (1204)
/* Primitive onvifXsd:IPAddressFilterType schema type: */
class SOAP_CMAC onvifXsd__IPAddressFilterType_ : public xsd__anyType
{
public:
	enum onvifXsd__IPAddressFilterType __item;
public:
	virtual int soap_type() const { return 1204; } /* = unique id SOAP_TYPE_onvifXsd__IPAddressFilterType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPAddressFilterType_() { onvifXsd__IPAddressFilterType_::soap_default(NULL); }
	virtual ~onvifXsd__IPAddressFilterType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DynamicDNSType_
#define SOAP_TYPE_onvifXsd__DynamicDNSType_ (1206)
/* Primitive onvifXsd:DynamicDNSType schema type: */
class SOAP_CMAC onvifXsd__DynamicDNSType_ : public xsd__anyType
{
public:
	enum onvifXsd__DynamicDNSType __item;
public:
	virtual int soap_type() const { return 1206; } /* = unique id SOAP_TYPE_onvifXsd__DynamicDNSType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DynamicDNSType_() { onvifXsd__DynamicDNSType_::soap_default(NULL); }
	virtual ~onvifXsd__DynamicDNSType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SSIDType__
#define SOAP_TYPE_onvifXsd__Dot11SSIDType__ (1208)
/* Primitive onvifXsd:Dot11SSIDType schema type: */
class SOAP_CMAC onvifXsd__Dot11SSIDType__ : public xsd__anyType
{
public:
	xsd__hexBinary __item;
public:
	virtual int soap_type() const { return 1208; } /* = unique id SOAP_TYPE_onvifXsd__Dot11SSIDType__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11SSIDType__() { onvifXsd__Dot11SSIDType__::soap_default(NULL); }
	virtual ~onvifXsd__Dot11SSIDType__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11StationMode_
#define SOAP_TYPE_onvifXsd__Dot11StationMode_ (1210)
/* Primitive onvifXsd:Dot11StationMode schema type: */
class SOAP_CMAC onvifXsd__Dot11StationMode_ : public xsd__anyType
{
public:
	enum onvifXsd__Dot11StationMode __item;
public:
	virtual int soap_type() const { return 1210; } /* = unique id SOAP_TYPE_onvifXsd__Dot11StationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11StationMode_() { onvifXsd__Dot11StationMode_::soap_default(NULL); }
	virtual ~onvifXsd__Dot11StationMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SecurityMode_
#define SOAP_TYPE_onvifXsd__Dot11SecurityMode_ (1212)
/* Primitive onvifXsd:Dot11SecurityMode schema type: */
class SOAP_CMAC onvifXsd__Dot11SecurityMode_ : public xsd__anyType
{
public:
	enum onvifXsd__Dot11SecurityMode __item;
public:
	virtual int soap_type() const { return 1212; } /* = unique id SOAP_TYPE_onvifXsd__Dot11SecurityMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11SecurityMode_() { onvifXsd__Dot11SecurityMode_::soap_default(NULL); }
	virtual ~onvifXsd__Dot11SecurityMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11Cipher_
#define SOAP_TYPE_onvifXsd__Dot11Cipher_ (1214)
/* Primitive onvifXsd:Dot11Cipher schema type: */
class SOAP_CMAC onvifXsd__Dot11Cipher_ : public xsd__anyType
{
public:
	enum onvifXsd__Dot11Cipher __item;
public:
	virtual int soap_type() const { return 1214; } /* = unique id SOAP_TYPE_onvifXsd__Dot11Cipher_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11Cipher_() { onvifXsd__Dot11Cipher_::soap_default(NULL); }
	virtual ~onvifXsd__Dot11Cipher_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11PSK__
#define SOAP_TYPE_onvifXsd__Dot11PSK__ (1216)
/* Primitive onvifXsd:Dot11PSK schema type: */
class SOAP_CMAC onvifXsd__Dot11PSK__ : public xsd__anyType
{
public:
	xsd__hexBinary __item;
public:
	virtual int soap_type() const { return 1216; } /* = unique id SOAP_TYPE_onvifXsd__Dot11PSK__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11PSK__() { onvifXsd__Dot11PSK__::soap_default(NULL); }
	virtual ~onvifXsd__Dot11PSK__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11PSKPassphrase__
#define SOAP_TYPE_onvifXsd__Dot11PSKPassphrase__ (1218)
/* Primitive onvifXsd:Dot11PSKPassphrase schema type: */
class SOAP_CMAC onvifXsd__Dot11PSKPassphrase__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1218; } /* = unique id SOAP_TYPE_onvifXsd__Dot11PSKPassphrase__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11PSKPassphrase__() { onvifXsd__Dot11PSKPassphrase__::soap_default(NULL); }
	virtual ~onvifXsd__Dot11PSKPassphrase__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SignalStrength_
#define SOAP_TYPE_onvifXsd__Dot11SignalStrength_ (1220)
/* Primitive onvifXsd:Dot11SignalStrength schema type: */
class SOAP_CMAC onvifXsd__Dot11SignalStrength_ : public xsd__anyType
{
public:
	enum onvifXsd__Dot11SignalStrength __item;
public:
	virtual int soap_type() const { return 1220; } /* = unique id SOAP_TYPE_onvifXsd__Dot11SignalStrength_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11SignalStrength_() { onvifXsd__Dot11SignalStrength_::soap_default(NULL); }
	virtual ~onvifXsd__Dot11SignalStrength_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11AuthAndMangementSuite_
#define SOAP_TYPE_onvifXsd__Dot11AuthAndMangementSuite_ (1222)
/* Primitive onvifXsd:Dot11AuthAndMangementSuite schema type: */
class SOAP_CMAC onvifXsd__Dot11AuthAndMangementSuite_ : public xsd__anyType
{
public:
	enum onvifXsd__Dot11AuthAndMangementSuite __item;
public:
	virtual int soap_type() const { return 1222; } /* = unique id SOAP_TYPE_onvifXsd__Dot11AuthAndMangementSuite_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11AuthAndMangementSuite_() { onvifXsd__Dot11AuthAndMangementSuite_::soap_default(NULL); }
	virtual ~onvifXsd__Dot11AuthAndMangementSuite_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CapabilityCategory_
#define SOAP_TYPE_onvifXsd__CapabilityCategory_ (1224)
/* Primitive onvifXsd:CapabilityCategory schema type: */
class SOAP_CMAC onvifXsd__CapabilityCategory_ : public xsd__anyType
{
public:
	enum onvifXsd__CapabilityCategory __item;
public:
	virtual int soap_type() const { return 1224; } /* = unique id SOAP_TYPE_onvifXsd__CapabilityCategory_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CapabilityCategory_() { onvifXsd__CapabilityCategory_::soap_default(NULL); }
	virtual ~onvifXsd__CapabilityCategory_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemLogType_
#define SOAP_TYPE_onvifXsd__SystemLogType_ (1226)
/* Primitive onvifXsd:SystemLogType schema type: */
class SOAP_CMAC onvifXsd__SystemLogType_ : public xsd__anyType
{
public:
	enum onvifXsd__SystemLogType __item;
public:
	virtual int soap_type() const { return 1226; } /* = unique id SOAP_TYPE_onvifXsd__SystemLogType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemLogType_() { onvifXsd__SystemLogType_::soap_default(NULL); }
	virtual ~onvifXsd__SystemLogType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FactoryDefaultType_
#define SOAP_TYPE_onvifXsd__FactoryDefaultType_ (1228)
/* Primitive onvifXsd:FactoryDefaultType schema type: */
class SOAP_CMAC onvifXsd__FactoryDefaultType_ : public xsd__anyType
{
public:
	enum onvifXsd__FactoryDefaultType __item;
public:
	virtual int soap_type() const { return 1228; } /* = unique id SOAP_TYPE_onvifXsd__FactoryDefaultType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FactoryDefaultType_() { onvifXsd__FactoryDefaultType_::soap_default(NULL); }
	virtual ~onvifXsd__FactoryDefaultType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SetDateTimeType_
#define SOAP_TYPE_onvifXsd__SetDateTimeType_ (1230)
/* Primitive onvifXsd:SetDateTimeType schema type: */
class SOAP_CMAC onvifXsd__SetDateTimeType_ : public xsd__anyType
{
public:
	enum onvifXsd__SetDateTimeType __item;
public:
	virtual int soap_type() const { return 1230; } /* = unique id SOAP_TYPE_onvifXsd__SetDateTimeType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SetDateTimeType_() { onvifXsd__SetDateTimeType_::soap_default(NULL); }
	virtual ~onvifXsd__SetDateTimeType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__UserLevel_
#define SOAP_TYPE_onvifXsd__UserLevel_ (1232)
/* Primitive onvifXsd:UserLevel schema type: */
class SOAP_CMAC onvifXsd__UserLevel_ : public xsd__anyType
{
public:
	enum onvifXsd__UserLevel __item;
public:
	virtual int soap_type() const { return 1232; } /* = unique id SOAP_TYPE_onvifXsd__UserLevel_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__UserLevel_() { onvifXsd__UserLevel_::soap_default(NULL); }
	virtual ~onvifXsd__UserLevel_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayLogicalState_
#define SOAP_TYPE_onvifXsd__RelayLogicalState_ (1234)
/* Primitive onvifXsd:RelayLogicalState schema type: */
class SOAP_CMAC onvifXsd__RelayLogicalState_ : public xsd__anyType
{
public:
	enum onvifXsd__RelayLogicalState __item;
public:
	virtual int soap_type() const { return 1234; } /* = unique id SOAP_TYPE_onvifXsd__RelayLogicalState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelayLogicalState_() { onvifXsd__RelayLogicalState_::soap_default(NULL); }
	virtual ~onvifXsd__RelayLogicalState_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayIdleState_
#define SOAP_TYPE_onvifXsd__RelayIdleState_ (1236)
/* Primitive onvifXsd:RelayIdleState schema type: */
class SOAP_CMAC onvifXsd__RelayIdleState_ : public xsd__anyType
{
public:
	enum onvifXsd__RelayIdleState __item;
public:
	virtual int soap_type() const { return 1236; } /* = unique id SOAP_TYPE_onvifXsd__RelayIdleState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelayIdleState_() { onvifXsd__RelayIdleState_::soap_default(NULL); }
	virtual ~onvifXsd__RelayIdleState_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayMode_
#define SOAP_TYPE_onvifXsd__RelayMode_ (1238)
/* Primitive onvifXsd:RelayMode schema type: */
class SOAP_CMAC onvifXsd__RelayMode_ : public xsd__anyType
{
public:
	enum onvifXsd__RelayMode __item;
public:
	virtual int soap_type() const { return 1238; } /* = unique id SOAP_TYPE_onvifXsd__RelayMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelayMode_() { onvifXsd__RelayMode_::soap_default(NULL); }
	virtual ~onvifXsd__RelayMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EFlipMode_
#define SOAP_TYPE_onvifXsd__EFlipMode_ (1240)
/* Primitive onvifXsd:EFlipMode schema type: */
class SOAP_CMAC onvifXsd__EFlipMode_ : public xsd__anyType
{
public:
	enum onvifXsd__EFlipMode __item;
public:
	virtual int soap_type() const { return 1240; } /* = unique id SOAP_TYPE_onvifXsd__EFlipMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EFlipMode_() { onvifXsd__EFlipMode_::soap_default(NULL); }
	virtual ~onvifXsd__EFlipMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReverseMode_
#define SOAP_TYPE_onvifXsd__ReverseMode_ (1242)
/* Primitive onvifXsd:ReverseMode schema type: */
class SOAP_CMAC onvifXsd__ReverseMode_ : public xsd__anyType
{
public:
	enum onvifXsd__ReverseMode __item;
public:
	virtual int soap_type() const { return 1242; } /* = unique id SOAP_TYPE_onvifXsd__ReverseMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReverseMode_() { onvifXsd__ReverseMode_::soap_default(NULL); }
	virtual ~onvifXsd__ReverseMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AuxiliaryData__
#define SOAP_TYPE_onvifXsd__AuxiliaryData__ (1244)
/* Primitive onvifXsd:AuxiliaryData schema type: */
class SOAP_CMAC onvifXsd__AuxiliaryData__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1244; } /* = unique id SOAP_TYPE_onvifXsd__AuxiliaryData__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AuxiliaryData__() { onvifXsd__AuxiliaryData__::soap_default(NULL); }
	virtual ~onvifXsd__AuxiliaryData__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MoveStatus_
#define SOAP_TYPE_onvifXsd__MoveStatus_ (1246)
/* Primitive onvifXsd:MoveStatus schema type: */
class SOAP_CMAC onvifXsd__MoveStatus_ : public xsd__anyType
{
public:
	enum onvifXsd__MoveStatus __item;
public:
	virtual int soap_type() const { return 1246; } /* = unique id SOAP_TYPE_onvifXsd__MoveStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MoveStatus_() { onvifXsd__MoveStatus_::soap_default(NULL); }
	virtual ~onvifXsd__MoveStatus_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourState_
#define SOAP_TYPE_onvifXsd__PTZPresetTourState_ (1248)
/* Primitive onvifXsd:PTZPresetTourState schema type: */
class SOAP_CMAC onvifXsd__PTZPresetTourState_ : public xsd__anyType
{
public:
	enum onvifXsd__PTZPresetTourState __item;
public:
	virtual int soap_type() const { return 1248; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourState_() { onvifXsd__PTZPresetTourState_::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourState_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourDirection_
#define SOAP_TYPE_onvifXsd__PTZPresetTourDirection_ (1250)
/* Primitive onvifXsd:PTZPresetTourDirection schema type: */
class SOAP_CMAC onvifXsd__PTZPresetTourDirection_ : public xsd__anyType
{
public:
	enum onvifXsd__PTZPresetTourDirection __item;
public:
	virtual int soap_type() const { return 1250; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourDirection_() { onvifXsd__PTZPresetTourDirection_::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourDirection_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourOperation_
#define SOAP_TYPE_onvifXsd__PTZPresetTourOperation_ (1252)
/* Primitive onvifXsd:PTZPresetTourOperation schema type: */
class SOAP_CMAC onvifXsd__PTZPresetTourOperation_ : public xsd__anyType
{
public:
	enum onvifXsd__PTZPresetTourOperation __item;
public:
	virtual int soap_type() const { return 1252; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourOperation_() { onvifXsd__PTZPresetTourOperation_::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourOperation_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AutoFocusMode_
#define SOAP_TYPE_onvifXsd__AutoFocusMode_ (1254)
/* Primitive onvifXsd:AutoFocusMode schema type: */
class SOAP_CMAC onvifXsd__AutoFocusMode_ : public xsd__anyType
{
public:
	enum onvifXsd__AutoFocusMode __item;
public:
	virtual int soap_type() const { return 1254; } /* = unique id SOAP_TYPE_onvifXsd__AutoFocusMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AutoFocusMode_() { onvifXsd__AutoFocusMode_::soap_default(NULL); }
	virtual ~onvifXsd__AutoFocusMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WideDynamicMode_
#define SOAP_TYPE_onvifXsd__WideDynamicMode_ (1256)
/* Primitive onvifXsd:WideDynamicMode schema type: */
class SOAP_CMAC onvifXsd__WideDynamicMode_ : public xsd__anyType
{
public:
	enum onvifXsd__WideDynamicMode __item;
public:
	virtual int soap_type() const { return 1256; } /* = unique id SOAP_TYPE_onvifXsd__WideDynamicMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WideDynamicMode_() { onvifXsd__WideDynamicMode_::soap_default(NULL); }
	virtual ~onvifXsd__WideDynamicMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BacklightCompensationMode_
#define SOAP_TYPE_onvifXsd__BacklightCompensationMode_ (1258)
/* Primitive onvifXsd:BacklightCompensationMode schema type: */
class SOAP_CMAC onvifXsd__BacklightCompensationMode_ : public xsd__anyType
{
public:
	enum onvifXsd__BacklightCompensationMode __item;
public:
	virtual int soap_type() const { return 1258; } /* = unique id SOAP_TYPE_onvifXsd__BacklightCompensationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BacklightCompensationMode_() { onvifXsd__BacklightCompensationMode_::soap_default(NULL); }
	virtual ~onvifXsd__BacklightCompensationMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ExposurePriority_
#define SOAP_TYPE_onvifXsd__ExposurePriority_ (1260)
/* Primitive onvifXsd:ExposurePriority schema type: */
class SOAP_CMAC onvifXsd__ExposurePriority_ : public xsd__anyType
{
public:
	enum onvifXsd__ExposurePriority __item;
public:
	virtual int soap_type() const { return 1260; } /* = unique id SOAP_TYPE_onvifXsd__ExposurePriority_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ExposurePriority_() { onvifXsd__ExposurePriority_::soap_default(NULL); }
	virtual ~onvifXsd__ExposurePriority_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ExposureMode_
#define SOAP_TYPE_onvifXsd__ExposureMode_ (1262)
/* Primitive onvifXsd:ExposureMode schema type: */
class SOAP_CMAC onvifXsd__ExposureMode_ : public xsd__anyType
{
public:
	enum onvifXsd__ExposureMode __item;
public:
	virtual int soap_type() const { return 1262; } /* = unique id SOAP_TYPE_onvifXsd__ExposureMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ExposureMode_() { onvifXsd__ExposureMode_::soap_default(NULL); }
	virtual ~onvifXsd__ExposureMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Enabled_
#define SOAP_TYPE_onvifXsd__Enabled_ (1264)
/* Primitive onvifXsd:Enabled schema type: */
class SOAP_CMAC onvifXsd__Enabled_ : public xsd__anyType
{
public:
	enum onvifXsd__Enabled __item;
public:
	virtual int soap_type() const { return 1264; } /* = unique id SOAP_TYPE_onvifXsd__Enabled_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Enabled_() { onvifXsd__Enabled_::soap_default(NULL); }
	virtual ~onvifXsd__Enabled_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalanceMode_
#define SOAP_TYPE_onvifXsd__WhiteBalanceMode_ (1266)
/* Primitive onvifXsd:WhiteBalanceMode schema type: */
class SOAP_CMAC onvifXsd__WhiteBalanceMode_ : public xsd__anyType
{
public:
	enum onvifXsd__WhiteBalanceMode __item;
public:
	virtual int soap_type() const { return 1266; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalanceMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalanceMode_() { onvifXsd__WhiteBalanceMode_::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalanceMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IrCutFilterMode_
#define SOAP_TYPE_onvifXsd__IrCutFilterMode_ (1268)
/* Primitive onvifXsd:IrCutFilterMode schema type: */
class SOAP_CMAC onvifXsd__IrCutFilterMode_ : public xsd__anyType
{
public:
	enum onvifXsd__IrCutFilterMode __item;
public:
	virtual int soap_type() const { return 1268; } /* = unique id SOAP_TYPE_onvifXsd__IrCutFilterMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IrCutFilterMode_() { onvifXsd__IrCutFilterMode_::soap_default(NULL); }
	virtual ~onvifXsd__IrCutFilterMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImageStabilizationMode_
#define SOAP_TYPE_onvifXsd__ImageStabilizationMode_ (1270)
/* Primitive onvifXsd:ImageStabilizationMode schema type: */
class SOAP_CMAC onvifXsd__ImageStabilizationMode_ : public xsd__anyType
{
public:
	enum onvifXsd__ImageStabilizationMode __item;
public:
	virtual int soap_type() const { return 1270; } /* = unique id SOAP_TYPE_onvifXsd__ImageStabilizationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImageStabilizationMode_() { onvifXsd__ImageStabilizationMode_::soap_default(NULL); }
	virtual ~onvifXsd__ImageStabilizationMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TopicNamespaceLocation__
#define SOAP_TYPE_onvifXsd__TopicNamespaceLocation__ (1272)
/* Primitive onvifXsd:TopicNamespaceLocation schema type: */
class SOAP_CMAC onvifXsd__TopicNamespaceLocation__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1272; } /* = unique id SOAP_TYPE_onvifXsd__TopicNamespaceLocation__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TopicNamespaceLocation__() { onvifXsd__TopicNamespaceLocation__::soap_default(NULL); }
	virtual ~onvifXsd__TopicNamespaceLocation__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PropertyOperation_
#define SOAP_TYPE_onvifXsd__PropertyOperation_ (1274)
/* Primitive onvifXsd:PropertyOperation schema type: */
class SOAP_CMAC onvifXsd__PropertyOperation_ : public xsd__anyType
{
public:
	enum onvifXsd__PropertyOperation __item;
public:
	virtual int soap_type() const { return 1274; } /* = unique id SOAP_TYPE_onvifXsd__PropertyOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PropertyOperation_() { onvifXsd__PropertyOperation_::soap_default(NULL); }
	virtual ~onvifXsd__PropertyOperation_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Direction_
#define SOAP_TYPE_onvifXsd__Direction_ (1276)
/* Primitive onvifXsd:Direction schema type: */
class SOAP_CMAC onvifXsd__Direction_ : public xsd__anyType
{
public:
	enum onvifXsd__Direction __item;
public:
	virtual int soap_type() const { return 1276; } /* = unique id SOAP_TYPE_onvifXsd__Direction_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Direction_() { onvifXsd__Direction_::soap_default(NULL); }
	virtual ~onvifXsd__Direction_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ClassType_
#define SOAP_TYPE_onvifXsd__ClassType_ (1278)
/* Primitive onvifXsd:ClassType schema type: */
class SOAP_CMAC onvifXsd__ClassType_ : public xsd__anyType
{
public:
	enum onvifXsd__ClassType __item;
public:
	virtual int soap_type() const { return 1278; } /* = unique id SOAP_TYPE_onvifXsd__ClassType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ClassType_() { onvifXsd__ClassType_::soap_default(NULL); }
	virtual ~onvifXsd__ClassType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverMode_
#define SOAP_TYPE_onvifXsd__ReceiverMode_ (1280)
/* Primitive onvifXsd:ReceiverMode schema type: */
class SOAP_CMAC onvifXsd__ReceiverMode_ : public xsd__anyType
{
public:
	enum onvifXsd__ReceiverMode __item;
public:
	virtual int soap_type() const { return 1280; } /* = unique id SOAP_TYPE_onvifXsd__ReceiverMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReceiverMode_() { onvifXsd__ReceiverMode_::soap_default(NULL); }
	virtual ~onvifXsd__ReceiverMode_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverState_
#define SOAP_TYPE_onvifXsd__ReceiverState_ (1282)
/* Primitive onvifXsd:ReceiverState schema type: */
class SOAP_CMAC onvifXsd__ReceiverState_ : public xsd__anyType
{
public:
	enum onvifXsd__ReceiverState __item;
public:
	virtual int soap_type() const { return 1282; } /* = unique id SOAP_TYPE_onvifXsd__ReceiverState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReceiverState_() { onvifXsd__ReceiverState_::soap_default(NULL); }
	virtual ~onvifXsd__ReceiverState_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Description__
#define SOAP_TYPE_onvifXsd__Description__ (1284)
/* Primitive onvifXsd:Description schema type: */
class SOAP_CMAC onvifXsd__Description__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1284; } /* = unique id SOAP_TYPE_onvifXsd__Description__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Description__() { onvifXsd__Description__::soap_default(NULL); }
	virtual ~onvifXsd__Description__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__XPathExpression__
#define SOAP_TYPE_onvifXsd__XPathExpression__ (1286)
/* Primitive onvifXsd:XPathExpression schema type: */
class SOAP_CMAC onvifXsd__XPathExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1286; } /* = unique id SOAP_TYPE_onvifXsd__XPathExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__XPathExpression__() { onvifXsd__XPathExpression__::soap_default(NULL); }
	virtual ~onvifXsd__XPathExpression__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SearchState_
#define SOAP_TYPE_onvifXsd__SearchState_ (1288)
/* Primitive onvifXsd:SearchState schema type: */
class SOAP_CMAC onvifXsd__SearchState_ : public xsd__anyType
{
public:
	enum onvifXsd__SearchState __item;
public:
	virtual int soap_type() const { return 1288; } /* = unique id SOAP_TYPE_onvifXsd__SearchState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SearchState_() { onvifXsd__SearchState_::soap_default(NULL); }
	virtual ~onvifXsd__SearchState_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingStatus_
#define SOAP_TYPE_onvifXsd__RecordingStatus_ (1290)
/* Primitive onvifXsd:RecordingStatus schema type: */
class SOAP_CMAC onvifXsd__RecordingStatus_ : public xsd__anyType
{
public:
	enum onvifXsd__RecordingStatus __item;
public:
	virtual int soap_type() const { return 1290; } /* = unique id SOAP_TYPE_onvifXsd__RecordingStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingStatus_() { onvifXsd__RecordingStatus_::soap_default(NULL); }
	virtual ~onvifXsd__RecordingStatus_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackType_
#define SOAP_TYPE_onvifXsd__TrackType_ (1292)
/* Primitive onvifXsd:TrackType schema type: */
class SOAP_CMAC onvifXsd__TrackType_ : public xsd__anyType
{
public:
	enum onvifXsd__TrackType __item;
public:
	virtual int soap_type() const { return 1292; } /* = unique id SOAP_TYPE_onvifXsd__TrackType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TrackType_() { onvifXsd__TrackType_::soap_default(NULL); }
	virtual ~onvifXsd__TrackType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobMode__
#define SOAP_TYPE_onvifXsd__RecordingJobMode__ (1294)
/* Primitive onvifXsd:RecordingJobMode schema type: */
class SOAP_CMAC onvifXsd__RecordingJobMode__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1294; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobMode__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobMode__() { onvifXsd__RecordingJobMode__::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobMode__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobState__
#define SOAP_TYPE_onvifXsd__RecordingJobState__ (1296)
/* Primitive onvifXsd:RecordingJobState schema type: */
class SOAP_CMAC onvifXsd__RecordingJobState__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1296; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobState__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobState__() { onvifXsd__RecordingJobState__::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobState__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ModeOfOperation_
#define SOAP_TYPE_onvifXsd__ModeOfOperation_ (1298)
/* Primitive onvifXsd:ModeOfOperation schema type: */
class SOAP_CMAC onvifXsd__ModeOfOperation_ : public xsd__anyType
{
public:
	enum onvifXsd__ModeOfOperation __item;
public:
	virtual int soap_type() const { return 1298; } /* = unique id SOAP_TYPE_onvifXsd__ModeOfOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ModeOfOperation_() { onvifXsd__ModeOfOperation_::soap_default(NULL); }
	virtual ~onvifXsd__ModeOfOperation_() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__SerialPortType_
#define SOAP_TYPE_onvifDeviceIO__SerialPortType_ (1300)
/* Primitive onvifDeviceIO:SerialPortType schema type: */
class SOAP_CMAC onvifDeviceIO__SerialPortType_ : public xsd__anyType
{
public:
	enum onvifDeviceIO__SerialPortType __item;
public:
	virtual int soap_type() const { return 1300; } /* = unique id SOAP_TYPE_onvifDeviceIO__SerialPortType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__SerialPortType_() { onvifDeviceIO__SerialPortType_::soap_default(NULL); }
	virtual ~onvifDeviceIO__SerialPortType_() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__ParityBit_
#define SOAP_TYPE_onvifDeviceIO__ParityBit_ (1302)
/* Primitive onvifDeviceIO:ParityBit schema type: */
class SOAP_CMAC onvifDeviceIO__ParityBit_ : public xsd__anyType
{
public:
	enum onvifDeviceIO__ParityBit __item;
public:
	virtual int soap_type() const { return 1302; } /* = unique id SOAP_TYPE_onvifDeviceIO__ParityBit_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__ParityBit_() { onvifDeviceIO__ParityBit_::soap_default(NULL); }
	virtual ~onvifDeviceIO__ParityBit_() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverReference__
#define SOAP_TYPE_onvifXsd__ReceiverReference__ (1304)
/* Primitive onvifXsd:ReceiverReference schema type: */
class SOAP_CMAC onvifXsd__ReceiverReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1304; } /* = unique id SOAP_TYPE_onvifXsd__ReceiverReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReceiverReference__() { onvifXsd__ReceiverReference__::soap_default(NULL); }
	virtual ~onvifXsd__ReceiverReference__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingReference__
#define SOAP_TYPE_onvifXsd__RecordingReference__ (1306)
/* Primitive onvifXsd:RecordingReference schema type: */
class SOAP_CMAC onvifXsd__RecordingReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1306; } /* = unique id SOAP_TYPE_onvifXsd__RecordingReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingReference__() { onvifXsd__RecordingReference__::soap_default(NULL); }
	virtual ~onvifXsd__RecordingReference__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackReference__
#define SOAP_TYPE_onvifXsd__TrackReference__ (1308)
/* Primitive onvifXsd:TrackReference schema type: */
class SOAP_CMAC onvifXsd__TrackReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1308; } /* = unique id SOAP_TYPE_onvifXsd__TrackReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TrackReference__() { onvifXsd__TrackReference__::soap_default(NULL); }
	virtual ~onvifXsd__TrackReference__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__JobToken__
#define SOAP_TYPE_onvifXsd__JobToken__ (1310)
/* Primitive onvifXsd:JobToken schema type: */
class SOAP_CMAC onvifXsd__JobToken__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1310; } /* = unique id SOAP_TYPE_onvifXsd__JobToken__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__JobToken__() { onvifXsd__JobToken__::soap_default(NULL); }
	virtual ~onvifXsd__JobToken__() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobReference__
#define SOAP_TYPE_onvifXsd__RecordingJobReference__ (1312)
/* Primitive onvifXsd:RecordingJobReference schema type: */
class SOAP_CMAC onvifXsd__RecordingJobReference__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 1312; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobReference__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobReference__() { onvifXsd__RecordingJobReference__::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobReference__() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EndpointReferenceType
#define SOAP_TYPE_ns1__EndpointReferenceType (195)
/* ns1:EndpointReferenceType */
class SOAP_CMAC ns1__EndpointReferenceType : public xsd__anyType
{
public:
	class ns1__AttributedURIType *Address;	/* required element of type ns1:AttributedURIType */
	class ns1__ReferenceParametersType *ns1__ReferenceParameters;	/* optional element of type ns1:ReferenceParametersType */
	class ns1__MetadataType *ns1__Metadata;	/* optional element of type ns1:MetadataType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE_ns1__EndpointReferenceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EndpointReferenceType() { ns1__EndpointReferenceType::soap_default(NULL); }
	virtual ~ns1__EndpointReferenceType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReferenceParametersType
#define SOAP_TYPE_ns1__ReferenceParametersType (196)
/* ns1:ReferenceParametersType */
class SOAP_CMAC ns1__ReferenceParametersType : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE_ns1__ReferenceParametersType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReferenceParametersType() { ns1__ReferenceParametersType::soap_default(NULL); }
	virtual ~ns1__ReferenceParametersType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MetadataType
#define SOAP_TYPE_ns1__MetadataType (197)
/* ns1:MetadataType */
class SOAP_CMAC ns1__MetadataType : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_ns1__MetadataType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MetadataType() { ns1__MetadataType::soap_default(NULL); }
	virtual ~ns1__MetadataType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProblemActionType
#define SOAP_TYPE_ns1__ProblemActionType (202)
/* ns1:ProblemActionType */
class SOAP_CMAC ns1__ProblemActionType : public xsd__anyType
{
public:
	ns1__AttributedURIType *ns1__Action;	/* optional element of type ns1:AttributedURIType */
	std::string *SoapAction;	/* optional element of type xsd:anyURI */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE_ns1__ProblemActionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProblemActionType() { ns1__ProblemActionType::soap_default(NULL); }
	virtual ~ns1__ProblemActionType() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsrf__BaseFaultType_ErrorCode
#define SOAP_TYPE__oasisWsrf__BaseFaultType_ErrorCode (1319)
/* oasisWsrf:BaseFaultType-ErrorCode */
class SOAP_CMAC _oasisWsrf__BaseFaultType_ErrorCode
{
public:
	std::string dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 1319; } /* = unique id SOAP_TYPE__oasisWsrf__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsrf__BaseFaultType_ErrorCode() { _oasisWsrf__BaseFaultType_ErrorCode::soap_default(NULL); }
	virtual ~_oasisWsrf__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsrf__BaseFaultType_Description
#define SOAP_TYPE__oasisWsrf__BaseFaultType_Description (1321)
/* Primitive oasisWsrf:BaseFaultType-Description schema type: */
class SOAP_CMAC _oasisWsrf__BaseFaultType_Description
{
public:
	std::string __item;
	std::string *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 1321; } /* = unique id SOAP_TYPE__oasisWsrf__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsrf__BaseFaultType_Description() { _oasisWsrf__BaseFaultType_Description::soap_default(NULL); }
	virtual ~_oasisWsrf__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsrf__BaseFaultType_FaultCause
#define SOAP_TYPE__oasisWsrf__BaseFaultType_FaultCause (1325)
/* oasisWsrf:BaseFaultType-FaultCause */
class SOAP_CMAC _oasisWsrf__BaseFaultType_FaultCause
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 1325; } /* = unique id SOAP_TYPE__oasisWsrf__BaseFaultType_FaultCause */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsrf__BaseFaultType_FaultCause() { _oasisWsrf__BaseFaultType_FaultCause::soap_default(NULL); }
	virtual ~_oasisWsrf__BaseFaultType_FaultCause() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsrf__BaseFaultType
#define SOAP_TYPE_oasisWsrf__BaseFaultType (205)
/* oasisWsrf:BaseFaultType */
class SOAP_CMAC oasisWsrf__BaseFaultType : public xsd__anyType
{
public:
	std::vector<char * >__any;
	time_t Timestamp;	/* required element of type xsd:dateTime */
	ns1__EndpointReferenceType *Originator;	/* optional element of type ns1:EndpointReferenceType */
	_oasisWsrf__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type oasisWsrf:BaseFaultType-ErrorCode */
	std::vector<_oasisWsrf__BaseFaultType_Description >*Description;	/* optional element of type oasisWsrf:BaseFaultType-Description */
	_oasisWsrf__BaseFaultType_FaultCause *FaultCause;	/* optional element of type oasisWsrf:BaseFaultType-FaultCause */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE_oasisWsrf__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsrf__BaseFaultType() { oasisWsrf__BaseFaultType::soap_default(NULL); }
	virtual ~oasisWsrf__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__QueryExpressionType
#define SOAP_TYPE_oasisWsnB2__QueryExpressionType (206)
/* oasisWsnB2:QueryExpressionType */
class SOAP_CMAC oasisWsnB2__QueryExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE_oasisWsnB2__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__QueryExpressionType() { oasisWsnB2__QueryExpressionType::soap_default(NULL); }
	virtual ~oasisWsnB2__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__TopicExpressionType
#define SOAP_TYPE_oasisWsnB2__TopicExpressionType (207)
/* oasisWsnB2:TopicExpressionType */
class SOAP_CMAC oasisWsnB2__TopicExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE_oasisWsnB2__TopicExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__TopicExpressionType() { oasisWsnB2__TopicExpressionType::soap_default(NULL); }
	virtual ~oasisWsnB2__TopicExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__FilterType
#define SOAP_TYPE_oasisWsnB2__FilterType (208)
/* oasisWsnB2:FilterType */
class SOAP_CMAC oasisWsnB2__FilterType : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_oasisWsnB2__FilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__FilterType() { oasisWsnB2__FilterType::soap_default(NULL); }
	virtual ~oasisWsnB2__FilterType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__SubscriptionPolicyType
#define SOAP_TYPE_oasisWsnB2__SubscriptionPolicyType (209)
/* oasisWsnB2:SubscriptionPolicyType */
class SOAP_CMAC oasisWsnB2__SubscriptionPolicyType : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE_oasisWsnB2__SubscriptionPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__SubscriptionPolicyType() { oasisWsnB2__SubscriptionPolicyType::soap_default(NULL); }
	virtual ~oasisWsnB2__SubscriptionPolicyType() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__NotificationMessageHolderType_Message
#define SOAP_TYPE__oasisWsnB2__NotificationMessageHolderType_Message (1328)
/* oasisWsnB2:NotificationMessageHolderType-Message */
class SOAP_CMAC _oasisWsnB2__NotificationMessageHolderType_Message
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 1328; } /* = unique id SOAP_TYPE__oasisWsnB2__NotificationMessageHolderType_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__NotificationMessageHolderType_Message() { _oasisWsnB2__NotificationMessageHolderType_Message::soap_default(NULL); }
	virtual ~_oasisWsnB2__NotificationMessageHolderType_Message() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__NotificationMessageHolderType
#define SOAP_TYPE_oasisWsnB2__NotificationMessageHolderType (210)
/* oasisWsnB2:NotificationMessageHolderType */
class SOAP_CMAC oasisWsnB2__NotificationMessageHolderType : public xsd__anyType
{
public:
	ns1__EndpointReferenceType *oasisWsnB2__SubscriptionReference;	/* optional element of type ns1:EndpointReferenceType */
	oasisWsnB2__TopicExpressionType *oasisWsnB2__Topic;	/* optional element of type oasisWsnB2:TopicExpressionType */
	ns1__EndpointReferenceType *oasisWsnB2__ProducerReference;	/* optional element of type ns1:EndpointReferenceType */
	_oasisWsnB2__NotificationMessageHolderType_Message Message;	/* required element of type oasisWsnB2:NotificationMessageHolderType-Message */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE_oasisWsnB2__NotificationMessageHolderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__NotificationMessageHolderType() { oasisWsnB2__NotificationMessageHolderType::soap_default(NULL); }
	virtual ~oasisWsnB2__NotificationMessageHolderType() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__NotificationProducerRP
#define SOAP_TYPE__oasisWsnB2__NotificationProducerRP (231)
/* oasisWsnB2:NotificationProducerRP */
class SOAP_CMAC _oasisWsnB2__NotificationProducerRP
{
public:
	std::vector<oasisWsnB2__TopicExpressionType * >oasisWsnB2__TopicExpression;	/* optional element of type oasisWsnB2:TopicExpressionType */
	bool *oasisWsnB2__FixedTopicSet;	/* optional element of type xsd:boolean */
	std::vector<std::string >oasisWsnB2__TopicExpressionDialect;	/* optional element of type xsd:anyURI */
	class oasisWsnT1__TopicSetType *oasisWsnT1__TopicSet;	/* optional element of type oasisWsnT1:TopicSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE__oasisWsnB2__NotificationProducerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__NotificationProducerRP() { _oasisWsnB2__NotificationProducerRP::soap_default(NULL); }
	virtual ~_oasisWsnB2__NotificationProducerRP() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__SubscriptionManagerRP
#define SOAP_TYPE__oasisWsnB2__SubscriptionManagerRP (232)
/* oasisWsnB2:SubscriptionManagerRP */
class SOAP_CMAC _oasisWsnB2__SubscriptionManagerRP
{
public:
	ns1__EndpointReferenceType *oasisWsnB2__ConsumerReference;	/* required element of type ns1:EndpointReferenceType */
	oasisWsnB2__FilterType *oasisWsnB2__Filter;	/* optional element of type oasisWsnB2:FilterType */
	oasisWsnB2__SubscriptionPolicyType *oasisWsnB2__SubscriptionPolicy;	/* optional element of type oasisWsnB2:SubscriptionPolicyType */
	time_t *oasisWsnB2__CreationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE__oasisWsnB2__SubscriptionManagerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__SubscriptionManagerRP() { _oasisWsnB2__SubscriptionManagerRP::soap_default(NULL); }
	virtual ~_oasisWsnB2__SubscriptionManagerRP() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__Notify
#define SOAP_TYPE__oasisWsnB2__Notify (233)
/* oasisWsnB2:Notify */
class SOAP_CMAC _oasisWsnB2__Notify
{
public:
	std::vector<oasisWsnB2__NotificationMessageHolderType * >oasisWsnB2__NotificationMessage;	/* required element of type oasisWsnB2:NotificationMessageHolderType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE__oasisWsnB2__Notify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__Notify() { _oasisWsnB2__Notify::soap_default(NULL); }
	virtual ~_oasisWsnB2__Notify() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__UseRaw
#define SOAP_TYPE__oasisWsnB2__UseRaw (234)
/* oasisWsnB2:UseRaw */
class SOAP_CMAC _oasisWsnB2__UseRaw
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE__oasisWsnB2__UseRaw */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__UseRaw() { _oasisWsnB2__UseRaw::soap_default(NULL); }
	virtual ~_oasisWsnB2__UseRaw() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__oasisWsnB2__Subscribe_SubscriptionPolicy (1339)
/* oasisWsnB2:Subscribe-SubscriptionPolicy */
class SOAP_CMAC _oasisWsnB2__Subscribe_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1339; } /* = unique id SOAP_TYPE__oasisWsnB2__Subscribe_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__Subscribe_SubscriptionPolicy() { _oasisWsnB2__Subscribe_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_oasisWsnB2__Subscribe_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__Subscribe
#define SOAP_TYPE__oasisWsnB2__Subscribe (235)
/* oasisWsnB2:Subscribe */
class SOAP_CMAC _oasisWsnB2__Subscribe
{
public:
	ns1__EndpointReferenceType *ConsumerReference;	/* required element of type ns1:EndpointReferenceType */
	oasisWsnB2__FilterType *Filter;	/* optional element of type oasisWsnB2:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type oasisWsnB2:AbsoluteOrRelativeTimeType */
	_oasisWsnB2__Subscribe_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type oasisWsnB2:Subscribe-SubscriptionPolicy */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE__oasisWsnB2__Subscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__Subscribe() { _oasisWsnB2__Subscribe::soap_default(NULL); }
	virtual ~_oasisWsnB2__Subscribe() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__SubscribeResponse
#define SOAP_TYPE__oasisWsnB2__SubscribeResponse (236)
/* oasisWsnB2:SubscribeResponse */
class SOAP_CMAC _oasisWsnB2__SubscribeResponse
{
public:
	ns1__EndpointReferenceType *SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:EndpointReferenceType */
	time_t *oasisWsnB2__CurrentTime;	/* optional element of type xsd:dateTime */
	time_t *oasisWsnB2__TerminationTime;	/* optional element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE__oasisWsnB2__SubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__SubscribeResponse() { _oasisWsnB2__SubscribeResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__SubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__GetCurrentMessage
#define SOAP_TYPE__oasisWsnB2__GetCurrentMessage (237)
/* oasisWsnB2:GetCurrentMessage */
class SOAP_CMAC _oasisWsnB2__GetCurrentMessage
{
public:
	oasisWsnB2__TopicExpressionType *Topic;	/* required element of type oasisWsnB2:TopicExpressionType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE__oasisWsnB2__GetCurrentMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__GetCurrentMessage() { _oasisWsnB2__GetCurrentMessage::soap_default(NULL); }
	virtual ~_oasisWsnB2__GetCurrentMessage() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__GetCurrentMessageResponse
#define SOAP_TYPE__oasisWsnB2__GetCurrentMessageResponse (238)
/* oasisWsnB2:GetCurrentMessageResponse */
class SOAP_CMAC _oasisWsnB2__GetCurrentMessageResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE__oasisWsnB2__GetCurrentMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__GetCurrentMessageResponse() { _oasisWsnB2__GetCurrentMessageResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__GetCurrentMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__GetMessages
#define SOAP_TYPE__oasisWsnB2__GetMessages (239)
/* oasisWsnB2:GetMessages */
class SOAP_CMAC _oasisWsnB2__GetMessages
{
public:
	std::string *MaximumNumber;	/* optional element of type xsd:nonNegativeInteger */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE__oasisWsnB2__GetMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__GetMessages() { _oasisWsnB2__GetMessages::soap_default(NULL); }
	virtual ~_oasisWsnB2__GetMessages() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__GetMessagesResponse
#define SOAP_TYPE__oasisWsnB2__GetMessagesResponse (240)
/* oasisWsnB2:GetMessagesResponse */
class SOAP_CMAC _oasisWsnB2__GetMessagesResponse
{
public:
	std::vector<oasisWsnB2__NotificationMessageHolderType * >oasisWsnB2__NotificationMessage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type oasisWsnB2:NotificationMessageHolderType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE__oasisWsnB2__GetMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__GetMessagesResponse() { _oasisWsnB2__GetMessagesResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__GetMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__DestroyPullPoint
#define SOAP_TYPE__oasisWsnB2__DestroyPullPoint (241)
/* oasisWsnB2:DestroyPullPoint */
class SOAP_CMAC _oasisWsnB2__DestroyPullPoint
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE__oasisWsnB2__DestroyPullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__DestroyPullPoint() { _oasisWsnB2__DestroyPullPoint::soap_default(NULL); }
	virtual ~_oasisWsnB2__DestroyPullPoint() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__DestroyPullPointResponse
#define SOAP_TYPE__oasisWsnB2__DestroyPullPointResponse (242)
/* oasisWsnB2:DestroyPullPointResponse */
class SOAP_CMAC _oasisWsnB2__DestroyPullPointResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE__oasisWsnB2__DestroyPullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__DestroyPullPointResponse() { _oasisWsnB2__DestroyPullPointResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__DestroyPullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__CreatePullPoint
#define SOAP_TYPE__oasisWsnB2__CreatePullPoint (243)
/* oasisWsnB2:CreatePullPoint */
class SOAP_CMAC _oasisWsnB2__CreatePullPoint
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE__oasisWsnB2__CreatePullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__CreatePullPoint() { _oasisWsnB2__CreatePullPoint::soap_default(NULL); }
	virtual ~_oasisWsnB2__CreatePullPoint() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__CreatePullPointResponse
#define SOAP_TYPE__oasisWsnB2__CreatePullPointResponse (244)
/* oasisWsnB2:CreatePullPointResponse */
class SOAP_CMAC _oasisWsnB2__CreatePullPointResponse
{
public:
	ns1__EndpointReferenceType *PullPoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:EndpointReferenceType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE__oasisWsnB2__CreatePullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__CreatePullPointResponse() { _oasisWsnB2__CreatePullPointResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__CreatePullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__Renew
#define SOAP_TYPE__oasisWsnB2__Renew (245)
/* oasisWsnB2:Renew */
class SOAP_CMAC _oasisWsnB2__Renew
{
public:
	std::string *TerminationTime;	/* required element of type oasisWsnB2:AbsoluteOrRelativeTimeType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE__oasisWsnB2__Renew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__Renew() { _oasisWsnB2__Renew::soap_default(NULL); }
	virtual ~_oasisWsnB2__Renew() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__RenewResponse
#define SOAP_TYPE__oasisWsnB2__RenewResponse (246)
/* oasisWsnB2:RenewResponse */
class SOAP_CMAC _oasisWsnB2__RenewResponse
{
public:
	time_t oasisWsnB2__TerminationTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t *oasisWsnB2__CurrentTime;	/* optional element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE__oasisWsnB2__RenewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__RenewResponse() { _oasisWsnB2__RenewResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__RenewResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__Unsubscribe
#define SOAP_TYPE__oasisWsnB2__Unsubscribe (247)
/* oasisWsnB2:Unsubscribe */
class SOAP_CMAC _oasisWsnB2__Unsubscribe
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE__oasisWsnB2__Unsubscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__Unsubscribe() { _oasisWsnB2__Unsubscribe::soap_default(NULL); }
	virtual ~_oasisWsnB2__Unsubscribe() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__UnsubscribeResponse
#define SOAP_TYPE__oasisWsnB2__UnsubscribeResponse (248)
/* oasisWsnB2:UnsubscribeResponse */
class SOAP_CMAC _oasisWsnB2__UnsubscribeResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE__oasisWsnB2__UnsubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__UnsubscribeResponse() { _oasisWsnB2__UnsubscribeResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__UnsubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__PauseSubscription
#define SOAP_TYPE__oasisWsnB2__PauseSubscription (249)
/* oasisWsnB2:PauseSubscription */
class SOAP_CMAC _oasisWsnB2__PauseSubscription
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE__oasisWsnB2__PauseSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__PauseSubscription() { _oasisWsnB2__PauseSubscription::soap_default(NULL); }
	virtual ~_oasisWsnB2__PauseSubscription() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__PauseSubscriptionResponse
#define SOAP_TYPE__oasisWsnB2__PauseSubscriptionResponse (250)
/* oasisWsnB2:PauseSubscriptionResponse */
class SOAP_CMAC _oasisWsnB2__PauseSubscriptionResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE__oasisWsnB2__PauseSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__PauseSubscriptionResponse() { _oasisWsnB2__PauseSubscriptionResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__PauseSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__ResumeSubscription
#define SOAP_TYPE__oasisWsnB2__ResumeSubscription (251)
/* oasisWsnB2:ResumeSubscription */
class SOAP_CMAC _oasisWsnB2__ResumeSubscription
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE__oasisWsnB2__ResumeSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__ResumeSubscription() { _oasisWsnB2__ResumeSubscription::soap_default(NULL); }
	virtual ~_oasisWsnB2__ResumeSubscription() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnB2__ResumeSubscriptionResponse
#define SOAP_TYPE__oasisWsnB2__ResumeSubscriptionResponse (252)
/* oasisWsnB2:ResumeSubscriptionResponse */
class SOAP_CMAC _oasisWsnB2__ResumeSubscriptionResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE__oasisWsnB2__ResumeSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnB2__ResumeSubscriptionResponse() { _oasisWsnB2__ResumeSubscriptionResponse::soap_default(NULL); }
	virtual ~_oasisWsnB2__ResumeSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__Documentation
#define SOAP_TYPE_oasisWsnT1__Documentation (253)
/* oasisWsnT1:Documentation */
class SOAP_CMAC oasisWsnT1__Documentation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__mixed;
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_oasisWsnT1__Documentation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__Documentation() { oasisWsnT1__Documentation::soap_default(NULL); }
	virtual ~oasisWsnT1__Documentation() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__ExtensibleDocumented
#define SOAP_TYPE_oasisWsnT1__ExtensibleDocumented (254)
/* oasisWsnT1:ExtensibleDocumented */
class SOAP_CMAC oasisWsnT1__ExtensibleDocumented : public xsd__anyType
{
public:
	oasisWsnT1__Documentation *documentation;	/* optional element of type oasisWsnT1:Documentation */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_oasisWsnT1__ExtensibleDocumented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__ExtensibleDocumented() { oasisWsnT1__ExtensibleDocumented::soap_default(NULL); }
	virtual ~oasisWsnT1__ExtensibleDocumented() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__QueryExpressionType
#define SOAP_TYPE_oasisWsnT1__QueryExpressionType (255)
/* oasisWsnT1:QueryExpressionType */
class SOAP_CMAC oasisWsnT1__QueryExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_oasisWsnT1__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__QueryExpressionType() { oasisWsnT1__QueryExpressionType::soap_default(NULL); }
	virtual ~oasisWsnT1__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__Service_Capabilities
#define SOAP_TYPE__onvifDevice__Service_Capabilities (1343)
/* onvifDevice:Service-Capabilities */
class SOAP_CMAC _onvifDevice__Service_Capabilities
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 1343; } /* = unique id SOAP_TYPE__onvifDevice__Service_Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__Service_Capabilities() { _onvifDevice__Service_Capabilities::soap_default(NULL); }
	virtual ~_onvifDevice__Service_Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifDevice__Service
#define SOAP_TYPE_onvifDevice__Service (259)
/* onvifDevice:Service */
class SOAP_CMAC onvifDevice__Service : public xsd__anyType
{
public:
	std::string Namespace;	/* required element of type xsd:anyURI */
	std::string XAddr;	/* required element of type xsd:anyURI */
	_onvifDevice__Service_Capabilities *Capabilities;	/* optional element of type onvifDevice:Service-Capabilities */
	class onvifXsd__OnvifVersion *Version;	/* required element of type onvifXsd:OnvifVersion */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_onvifDevice__Service */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDevice__Service() { onvifDevice__Service::soap_default(NULL); }
	virtual ~onvifDevice__Service() { }
};
#endif

#ifndef SOAP_TYPE_onvifDevice__DeviceServiceCapabilities
#define SOAP_TYPE_onvifDevice__DeviceServiceCapabilities (260)
/* onvifDevice:DeviceServiceCapabilities */
class SOAP_CMAC onvifDevice__DeviceServiceCapabilities : public xsd__anyType
{
public:
	class onvifDevice__NetworkCapabilities *Network;	/* required element of type onvifDevice:NetworkCapabilities */
	class onvifDevice__SecurityCapabilities *Security;	/* required element of type onvifDevice:SecurityCapabilities */
	class onvifDevice__SystemCapabilities *System;	/* required element of type onvifDevice:SystemCapabilities */
	class onvifDevice__MiscCapabilities *Misc;	/* optional element of type onvifDevice:MiscCapabilities */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_onvifDevice__DeviceServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDevice__DeviceServiceCapabilities() { onvifDevice__DeviceServiceCapabilities::soap_default(NULL); }
	virtual ~onvifDevice__DeviceServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifDevice__NetworkCapabilities
#define SOAP_TYPE_onvifDevice__NetworkCapabilities (261)
/* Primitive onvifDevice:NetworkCapabilities schema type: */
class SOAP_CMAC onvifDevice__NetworkCapabilities : public xsd__anyType
{
public:
	bool *IPFilter;	/* optional attribute */
	bool *ZeroConfiguration;	/* optional attribute */
	bool *IPVersion6;	/* optional attribute */
	bool *DynDNS;	/* optional attribute */
	bool *Dot11Configuration;	/* optional attribute */
	bool *HostnameFromDHCP;	/* optional attribute */
	int *NTP;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_onvifDevice__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDevice__NetworkCapabilities() { onvifDevice__NetworkCapabilities::soap_default(NULL); }
	virtual ~onvifDevice__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifDevice__SecurityCapabilities
#define SOAP_TYPE_onvifDevice__SecurityCapabilities (262)
/* Primitive onvifDevice:SecurityCapabilities schema type: */
class SOAP_CMAC onvifDevice__SecurityCapabilities : public xsd__anyType
{
public:
	bool *TLS1_x002e0;	/* optional attribute */
	bool *TLS1_x002e1;	/* optional attribute */
	bool *TLS1_x002e2;	/* optional attribute */
	bool *OnboardKeyGeneration;	/* optional attribute */
	bool *AccessPolicyConfig;	/* optional attribute */
	bool *DefaultAccessPolicy;	/* optional attribute */
	bool *Dot1X;	/* optional attribute */
	bool *RemoteUserHandling;	/* optional attribute */
	bool *X_x002e509Token;	/* optional attribute */
	bool *SAMLToken;	/* optional attribute */
	bool *KerberosToken;	/* optional attribute */
	bool *UsernameToken;	/* optional attribute */
	bool *HttpDigest;	/* optional attribute */
	bool *RELToken;	/* optional attribute */
	std::string *SupportedEAPMethods;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_onvifDevice__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDevice__SecurityCapabilities() { onvifDevice__SecurityCapabilities::soap_default(NULL); }
	virtual ~onvifDevice__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifDevice__SystemCapabilities
#define SOAP_TYPE_onvifDevice__SystemCapabilities (263)
/* Primitive onvifDevice:SystemCapabilities schema type: */
class SOAP_CMAC onvifDevice__SystemCapabilities : public xsd__anyType
{
public:
	bool *DiscoveryResolve;	/* optional attribute */
	bool *DiscoveryBye;	/* optional attribute */
	bool *RemoteDiscovery;	/* optional attribute */
	bool *SystemBackup;	/* optional attribute */
	bool *SystemLogging;	/* optional attribute */
	bool *FirmwareUpgrade;	/* optional attribute */
	bool *HttpFirmwareUpgrade;	/* optional attribute */
	bool *HttpSystemBackup;	/* optional attribute */
	bool *HttpSystemLogging;	/* optional attribute */
	bool *HttpSupportInformation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_onvifDevice__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDevice__SystemCapabilities() { onvifDevice__SystemCapabilities::soap_default(NULL); }
	virtual ~onvifDevice__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifDevice__MiscCapabilities
#define SOAP_TYPE_onvifDevice__MiscCapabilities (264)
/* Primitive onvifDevice:MiscCapabilities schema type: */
class SOAP_CMAC onvifDevice__MiscCapabilities : public xsd__anyType
{
public:
	std::string *AuxiliaryCommands;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_onvifDevice__MiscCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDevice__MiscCapabilities() { onvifDevice__MiscCapabilities::soap_default(NULL); }
	virtual ~onvifDevice__MiscCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetServices
#define SOAP_TYPE__onvifDevice__GetServices (265)
/* onvifDevice:GetServices */
class SOAP_CMAC _onvifDevice__GetServices
{
public:
	bool IncludeCapability;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE__onvifDevice__GetServices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetServices() { _onvifDevice__GetServices::soap_default(NULL); }
	virtual ~_onvifDevice__GetServices() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetServicesResponse
#define SOAP_TYPE__onvifDevice__GetServicesResponse (266)
/* onvifDevice:GetServicesResponse */
class SOAP_CMAC _onvifDevice__GetServicesResponse
{
public:
	std::vector<onvifDevice__Service * >Service;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifDevice:Service */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE__onvifDevice__GetServicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetServicesResponse() { _onvifDevice__GetServicesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetServicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetServiceCapabilities
#define SOAP_TYPE__onvifDevice__GetServiceCapabilities (267)
/* onvifDevice:GetServiceCapabilities */
class SOAP_CMAC _onvifDevice__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE__onvifDevice__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetServiceCapabilities() { _onvifDevice__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_onvifDevice__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetServiceCapabilitiesResponse
#define SOAP_TYPE__onvifDevice__GetServiceCapabilitiesResponse (268)
/* onvifDevice:GetServiceCapabilitiesResponse */
class SOAP_CMAC _onvifDevice__GetServiceCapabilitiesResponse
{
public:
	onvifDevice__DeviceServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifDevice:DeviceServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE__onvifDevice__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetServiceCapabilitiesResponse() { _onvifDevice__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDeviceInformation
#define SOAP_TYPE__onvifDevice__GetDeviceInformation (269)
/* onvifDevice:GetDeviceInformation */
class SOAP_CMAC _onvifDevice__GetDeviceInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE__onvifDevice__GetDeviceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDeviceInformation() { _onvifDevice__GetDeviceInformation::soap_default(NULL); }
	virtual ~_onvifDevice__GetDeviceInformation() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDeviceInformationResponse
#define SOAP_TYPE__onvifDevice__GetDeviceInformationResponse (270)
/* onvifDevice:GetDeviceInformationResponse */
class SOAP_CMAC _onvifDevice__GetDeviceInformationResponse
{
public:
	std::string Manufacturer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string Model;	/* required element of type xsd:string */
	std::string FirmwareVersion;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
	std::string HardwareId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE__onvifDevice__GetDeviceInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDeviceInformationResponse() { _onvifDevice__GetDeviceInformationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDeviceInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetSystemDateAndTime
#define SOAP_TYPE__onvifDevice__SetSystemDateAndTime (271)
/* onvifDevice:SetSystemDateAndTime */
class SOAP_CMAC _onvifDevice__SetSystemDateAndTime
{
public:
	enum onvifXsd__SetDateTimeType DateTimeType;	/* required element of type onvifXsd:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	class onvifXsd__TimeZone *TimeZone;	/* optional element of type onvifXsd:TimeZone */
	class onvifXsd__DateTime *UTCDateTime;	/* optional element of type onvifXsd:DateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE__onvifDevice__SetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetSystemDateAndTime() { _onvifDevice__SetSystemDateAndTime::soap_default(NULL); }
	virtual ~_onvifDevice__SetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetSystemDateAndTimeResponse
#define SOAP_TYPE__onvifDevice__SetSystemDateAndTimeResponse (272)
/* onvifDevice:SetSystemDateAndTimeResponse */
class SOAP_CMAC _onvifDevice__SetSystemDateAndTimeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE__onvifDevice__SetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetSystemDateAndTimeResponse() { _onvifDevice__SetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemDateAndTime
#define SOAP_TYPE__onvifDevice__GetSystemDateAndTime (273)
/* onvifDevice:GetSystemDateAndTime */
class SOAP_CMAC _onvifDevice__GetSystemDateAndTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemDateAndTime() { _onvifDevice__GetSystemDateAndTime::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemDateAndTimeResponse
#define SOAP_TYPE__onvifDevice__GetSystemDateAndTimeResponse (274)
/* onvifDevice:GetSystemDateAndTimeResponse */
class SOAP_CMAC _onvifDevice__GetSystemDateAndTimeResponse
{
public:
	class onvifXsd__SystemDateTime *SystemDateAndTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:SystemDateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemDateAndTimeResponse() { _onvifDevice__GetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetSystemFactoryDefault
#define SOAP_TYPE__onvifDevice__SetSystemFactoryDefault (275)
/* onvifDevice:SetSystemFactoryDefault */
class SOAP_CMAC _onvifDevice__SetSystemFactoryDefault
{
public:
	enum onvifXsd__FactoryDefaultType FactoryDefault;	/* required element of type onvifXsd:FactoryDefaultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE__onvifDevice__SetSystemFactoryDefault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetSystemFactoryDefault() { _onvifDevice__SetSystemFactoryDefault::soap_default(NULL); }
	virtual ~_onvifDevice__SetSystemFactoryDefault() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__onvifDevice__SetSystemFactoryDefaultResponse (276)
/* onvifDevice:SetSystemFactoryDefaultResponse */
class SOAP_CMAC _onvifDevice__SetSystemFactoryDefaultResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE__onvifDevice__SetSystemFactoryDefaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetSystemFactoryDefaultResponse() { _onvifDevice__SetSystemFactoryDefaultResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetSystemFactoryDefaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__UpgradeSystemFirmware
#define SOAP_TYPE__onvifDevice__UpgradeSystemFirmware (277)
/* onvifDevice:UpgradeSystemFirmware */
class SOAP_CMAC _onvifDevice__UpgradeSystemFirmware
{
public:
	class onvifXsd__AttachmentData *Firmware;	/* required element of type onvifXsd:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE__onvifDevice__UpgradeSystemFirmware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__UpgradeSystemFirmware() { _onvifDevice__UpgradeSystemFirmware::soap_default(NULL); }
	virtual ~_onvifDevice__UpgradeSystemFirmware() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__onvifDevice__UpgradeSystemFirmwareResponse (278)
/* onvifDevice:UpgradeSystemFirmwareResponse */
class SOAP_CMAC _onvifDevice__UpgradeSystemFirmwareResponse
{
public:
	std::string *Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE__onvifDevice__UpgradeSystemFirmwareResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__UpgradeSystemFirmwareResponse() { _onvifDevice__UpgradeSystemFirmwareResponse::soap_default(NULL); }
	virtual ~_onvifDevice__UpgradeSystemFirmwareResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SystemReboot
#define SOAP_TYPE__onvifDevice__SystemReboot (279)
/* onvifDevice:SystemReboot */
class SOAP_CMAC _onvifDevice__SystemReboot
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE__onvifDevice__SystemReboot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SystemReboot() { _onvifDevice__SystemReboot::soap_default(NULL); }
	virtual ~_onvifDevice__SystemReboot() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SystemRebootResponse
#define SOAP_TYPE__onvifDevice__SystemRebootResponse (280)
/* onvifDevice:SystemRebootResponse */
class SOAP_CMAC _onvifDevice__SystemRebootResponse
{
public:
	std::string Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE__onvifDevice__SystemRebootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SystemRebootResponse() { _onvifDevice__SystemRebootResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SystemRebootResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__RestoreSystem
#define SOAP_TYPE__onvifDevice__RestoreSystem (281)
/* onvifDevice:RestoreSystem */
class SOAP_CMAC _onvifDevice__RestoreSystem
{
public:
	std::vector<class onvifXsd__BackupFile * >BackupFiles;	/* required element of type onvifXsd:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE__onvifDevice__RestoreSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__RestoreSystem() { _onvifDevice__RestoreSystem::soap_default(NULL); }
	virtual ~_onvifDevice__RestoreSystem() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__RestoreSystemResponse
#define SOAP_TYPE__onvifDevice__RestoreSystemResponse (282)
/* onvifDevice:RestoreSystemResponse */
class SOAP_CMAC _onvifDevice__RestoreSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE__onvifDevice__RestoreSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__RestoreSystemResponse() { _onvifDevice__RestoreSystemResponse::soap_default(NULL); }
	virtual ~_onvifDevice__RestoreSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemBackup
#define SOAP_TYPE__onvifDevice__GetSystemBackup (283)
/* onvifDevice:GetSystemBackup */
class SOAP_CMAC _onvifDevice__GetSystemBackup
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemBackup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemBackup() { _onvifDevice__GetSystemBackup::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemBackup() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemBackupResponse
#define SOAP_TYPE__onvifDevice__GetSystemBackupResponse (284)
/* onvifDevice:GetSystemBackupResponse */
class SOAP_CMAC _onvifDevice__GetSystemBackupResponse
{
public:
	std::vector<onvifXsd__BackupFile * >BackupFiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemBackupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemBackupResponse() { _onvifDevice__GetSystemBackupResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemBackupResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemSupportInformation
#define SOAP_TYPE__onvifDevice__GetSystemSupportInformation (285)
/* onvifDevice:GetSystemSupportInformation */
class SOAP_CMAC _onvifDevice__GetSystemSupportInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemSupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemSupportInformation() { _onvifDevice__GetSystemSupportInformation::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemSupportInformation() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemSupportInformationResponse
#define SOAP_TYPE__onvifDevice__GetSystemSupportInformationResponse (286)
/* onvifDevice:GetSystemSupportInformationResponse */
class SOAP_CMAC _onvifDevice__GetSystemSupportInformationResponse
{
public:
	class onvifXsd__SupportInformation *SupportInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:SupportInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemSupportInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemSupportInformationResponse() { _onvifDevice__GetSystemSupportInformationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemSupportInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemLog
#define SOAP_TYPE__onvifDevice__GetSystemLog (287)
/* onvifDevice:GetSystemLog */
class SOAP_CMAC _onvifDevice__GetSystemLog
{
public:
	enum onvifXsd__SystemLogType LogType;	/* required element of type onvifXsd:SystemLogType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemLog() { _onvifDevice__GetSystemLog::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemLog() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemLogResponse
#define SOAP_TYPE__onvifDevice__GetSystemLogResponse (288)
/* onvifDevice:GetSystemLogResponse */
class SOAP_CMAC _onvifDevice__GetSystemLogResponse
{
public:
	class onvifXsd__SystemLog *SystemLog;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:SystemLog */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemLogResponse() { _onvifDevice__GetSystemLogResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetScopes
#define SOAP_TYPE__onvifDevice__GetScopes (289)
/* onvifDevice:GetScopes */
class SOAP_CMAC _onvifDevice__GetScopes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE__onvifDevice__GetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetScopes() { _onvifDevice__GetScopes::soap_default(NULL); }
	virtual ~_onvifDevice__GetScopes() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetScopesResponse
#define SOAP_TYPE__onvifDevice__GetScopesResponse (290)
/* onvifDevice:GetScopesResponse */
class SOAP_CMAC _onvifDevice__GetScopesResponse
{
public:
	std::vector<class onvifXsd__Scope * >Scopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Scope */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE__onvifDevice__GetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetScopesResponse() { _onvifDevice__GetScopesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetScopes
#define SOAP_TYPE__onvifDevice__SetScopes (291)
/* onvifDevice:SetScopes */
class SOAP_CMAC _onvifDevice__SetScopes
{
public:
	std::vector<std::string >Scopes;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE__onvifDevice__SetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetScopes() { _onvifDevice__SetScopes::soap_default(NULL); }
	virtual ~_onvifDevice__SetScopes() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetScopesResponse
#define SOAP_TYPE__onvifDevice__SetScopesResponse (292)
/* onvifDevice:SetScopesResponse */
class SOAP_CMAC _onvifDevice__SetScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE__onvifDevice__SetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetScopesResponse() { _onvifDevice__SetScopesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__AddScopes
#define SOAP_TYPE__onvifDevice__AddScopes (293)
/* onvifDevice:AddScopes */
class SOAP_CMAC _onvifDevice__AddScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE__onvifDevice__AddScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__AddScopes() { _onvifDevice__AddScopes::soap_default(NULL); }
	virtual ~_onvifDevice__AddScopes() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__AddScopesResponse
#define SOAP_TYPE__onvifDevice__AddScopesResponse (294)
/* onvifDevice:AddScopesResponse */
class SOAP_CMAC _onvifDevice__AddScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE__onvifDevice__AddScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__AddScopesResponse() { _onvifDevice__AddScopesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__AddScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__RemoveScopes
#define SOAP_TYPE__onvifDevice__RemoveScopes (295)
/* onvifDevice:RemoveScopes */
class SOAP_CMAC _onvifDevice__RemoveScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE__onvifDevice__RemoveScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__RemoveScopes() { _onvifDevice__RemoveScopes::soap_default(NULL); }
	virtual ~_onvifDevice__RemoveScopes() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__RemoveScopesResponse
#define SOAP_TYPE__onvifDevice__RemoveScopesResponse (296)
/* onvifDevice:RemoveScopesResponse */
class SOAP_CMAC _onvifDevice__RemoveScopesResponse
{
public:
	std::vector<std::string >ScopeItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE__onvifDevice__RemoveScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__RemoveScopesResponse() { _onvifDevice__RemoveScopesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__RemoveScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDiscoveryMode
#define SOAP_TYPE__onvifDevice__GetDiscoveryMode (297)
/* onvifDevice:GetDiscoveryMode */
class SOAP_CMAC _onvifDevice__GetDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE__onvifDevice__GetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDiscoveryMode() { _onvifDevice__GetDiscoveryMode::soap_default(NULL); }
	virtual ~_onvifDevice__GetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDiscoveryModeResponse
#define SOAP_TYPE__onvifDevice__GetDiscoveryModeResponse (298)
/* onvifDevice:GetDiscoveryModeResponse */
class SOAP_CMAC _onvifDevice__GetDiscoveryModeResponse
{
public:
	enum onvifXsd__DiscoveryMode DiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE__onvifDevice__GetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDiscoveryModeResponse() { _onvifDevice__GetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDiscoveryMode
#define SOAP_TYPE__onvifDevice__SetDiscoveryMode (299)
/* onvifDevice:SetDiscoveryMode */
class SOAP_CMAC _onvifDevice__SetDiscoveryMode
{
public:
	enum onvifXsd__DiscoveryMode DiscoveryMode;	/* required element of type onvifXsd:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE__onvifDevice__SetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDiscoveryMode() { _onvifDevice__SetDiscoveryMode::soap_default(NULL); }
	virtual ~_onvifDevice__SetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDiscoveryModeResponse
#define SOAP_TYPE__onvifDevice__SetDiscoveryModeResponse (300)
/* onvifDevice:SetDiscoveryModeResponse */
class SOAP_CMAC _onvifDevice__SetDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE__onvifDevice__SetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDiscoveryModeResponse() { _onvifDevice__SetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetRemoteDiscoveryMode
#define SOAP_TYPE__onvifDevice__GetRemoteDiscoveryMode (301)
/* onvifDevice:GetRemoteDiscoveryMode */
class SOAP_CMAC _onvifDevice__GetRemoteDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE__onvifDevice__GetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetRemoteDiscoveryMode() { _onvifDevice__GetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_onvifDevice__GetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__onvifDevice__GetRemoteDiscoveryModeResponse (302)
/* onvifDevice:GetRemoteDiscoveryModeResponse */
class SOAP_CMAC _onvifDevice__GetRemoteDiscoveryModeResponse
{
public:
	enum onvifXsd__DiscoveryMode RemoteDiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE__onvifDevice__GetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetRemoteDiscoveryModeResponse() { _onvifDevice__GetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRemoteDiscoveryMode
#define SOAP_TYPE__onvifDevice__SetRemoteDiscoveryMode (303)
/* onvifDevice:SetRemoteDiscoveryMode */
class SOAP_CMAC _onvifDevice__SetRemoteDiscoveryMode
{
public:
	enum onvifXsd__DiscoveryMode RemoteDiscoveryMode;	/* required element of type onvifXsd:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE__onvifDevice__SetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRemoteDiscoveryMode() { _onvifDevice__SetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_onvifDevice__SetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__onvifDevice__SetRemoteDiscoveryModeResponse (304)
/* onvifDevice:SetRemoteDiscoveryModeResponse */
class SOAP_CMAC _onvifDevice__SetRemoteDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE__onvifDevice__SetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRemoteDiscoveryModeResponse() { _onvifDevice__SetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDPAddresses
#define SOAP_TYPE__onvifDevice__GetDPAddresses (305)
/* onvifDevice:GetDPAddresses */
class SOAP_CMAC _onvifDevice__GetDPAddresses
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE__onvifDevice__GetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDPAddresses() { _onvifDevice__GetDPAddresses::soap_default(NULL); }
	virtual ~_onvifDevice__GetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDPAddressesResponse
#define SOAP_TYPE__onvifDevice__GetDPAddressesResponse (306)
/* onvifDevice:GetDPAddressesResponse */
class SOAP_CMAC _onvifDevice__GetDPAddressesResponse
{
public:
	std::vector<class onvifXsd__NetworkHost * >DPAddress;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE__onvifDevice__GetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDPAddressesResponse() { _onvifDevice__GetDPAddressesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDPAddresses
#define SOAP_TYPE__onvifDevice__SetDPAddresses (307)
/* onvifDevice:SetDPAddresses */
class SOAP_CMAC _onvifDevice__SetDPAddresses
{
public:
	std::vector<onvifXsd__NetworkHost * >DPAddress;	/* optional element of type onvifXsd:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE__onvifDevice__SetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDPAddresses() { _onvifDevice__SetDPAddresses::soap_default(NULL); }
	virtual ~_onvifDevice__SetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDPAddressesResponse
#define SOAP_TYPE__onvifDevice__SetDPAddressesResponse (308)
/* onvifDevice:SetDPAddressesResponse */
class SOAP_CMAC _onvifDevice__SetDPAddressesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE__onvifDevice__SetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDPAddressesResponse() { _onvifDevice__SetDPAddressesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetEndpointReference
#define SOAP_TYPE__onvifDevice__GetEndpointReference (309)
/* onvifDevice:GetEndpointReference */
class SOAP_CMAC _onvifDevice__GetEndpointReference
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE__onvifDevice__GetEndpointReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetEndpointReference() { _onvifDevice__GetEndpointReference::soap_default(NULL); }
	virtual ~_onvifDevice__GetEndpointReference() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetEndpointReferenceResponse
#define SOAP_TYPE__onvifDevice__GetEndpointReferenceResponse (310)
/* onvifDevice:GetEndpointReferenceResponse */
class SOAP_CMAC _onvifDevice__GetEndpointReferenceResponse
{
public:
	std::string GUID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE__onvifDevice__GetEndpointReferenceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetEndpointReferenceResponse() { _onvifDevice__GetEndpointReferenceResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetEndpointReferenceResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetRemoteUser
#define SOAP_TYPE__onvifDevice__GetRemoteUser (311)
/* onvifDevice:GetRemoteUser */
class SOAP_CMAC _onvifDevice__GetRemoteUser
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE__onvifDevice__GetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetRemoteUser() { _onvifDevice__GetRemoteUser::soap_default(NULL); }
	virtual ~_onvifDevice__GetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetRemoteUserResponse
#define SOAP_TYPE__onvifDevice__GetRemoteUserResponse (312)
/* onvifDevice:GetRemoteUserResponse */
class SOAP_CMAC _onvifDevice__GetRemoteUserResponse
{
public:
	class onvifXsd__RemoteUser *RemoteUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE__onvifDevice__GetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetRemoteUserResponse() { _onvifDevice__GetRemoteUserResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRemoteUser
#define SOAP_TYPE__onvifDevice__SetRemoteUser (313)
/* onvifDevice:SetRemoteUser */
class SOAP_CMAC _onvifDevice__SetRemoteUser
{
public:
	onvifXsd__RemoteUser *RemoteUser;	/* optional element of type onvifXsd:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE__onvifDevice__SetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRemoteUser() { _onvifDevice__SetRemoteUser::soap_default(NULL); }
	virtual ~_onvifDevice__SetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRemoteUserResponse
#define SOAP_TYPE__onvifDevice__SetRemoteUserResponse (314)
/* onvifDevice:SetRemoteUserResponse */
class SOAP_CMAC _onvifDevice__SetRemoteUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE__onvifDevice__SetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRemoteUserResponse() { _onvifDevice__SetRemoteUserResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetUsers
#define SOAP_TYPE__onvifDevice__GetUsers (315)
/* onvifDevice:GetUsers */
class SOAP_CMAC _onvifDevice__GetUsers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE__onvifDevice__GetUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetUsers() { _onvifDevice__GetUsers::soap_default(NULL); }
	virtual ~_onvifDevice__GetUsers() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetUsersResponse
#define SOAP_TYPE__onvifDevice__GetUsersResponse (316)
/* onvifDevice:GetUsersResponse */
class SOAP_CMAC _onvifDevice__GetUsersResponse
{
public:
	std::vector<class onvifXsd__User * >User;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE__onvifDevice__GetUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetUsersResponse() { _onvifDevice__GetUsersResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__CreateUsers
#define SOAP_TYPE__onvifDevice__CreateUsers (317)
/* onvifDevice:CreateUsers */
class SOAP_CMAC _onvifDevice__CreateUsers
{
public:
	std::vector<onvifXsd__User * >User;	/* required element of type onvifXsd:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE__onvifDevice__CreateUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__CreateUsers() { _onvifDevice__CreateUsers::soap_default(NULL); }
	virtual ~_onvifDevice__CreateUsers() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__CreateUsersResponse
#define SOAP_TYPE__onvifDevice__CreateUsersResponse (318)
/* onvifDevice:CreateUsersResponse */
class SOAP_CMAC _onvifDevice__CreateUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE__onvifDevice__CreateUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__CreateUsersResponse() { _onvifDevice__CreateUsersResponse::soap_default(NULL); }
	virtual ~_onvifDevice__CreateUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__DeleteUsers
#define SOAP_TYPE__onvifDevice__DeleteUsers (319)
/* onvifDevice:DeleteUsers */
class SOAP_CMAC _onvifDevice__DeleteUsers
{
public:
	std::vector<std::string >Username;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE__onvifDevice__DeleteUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__DeleteUsers() { _onvifDevice__DeleteUsers::soap_default(NULL); }
	virtual ~_onvifDevice__DeleteUsers() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__DeleteUsersResponse
#define SOAP_TYPE__onvifDevice__DeleteUsersResponse (320)
/* onvifDevice:DeleteUsersResponse */
class SOAP_CMAC _onvifDevice__DeleteUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE__onvifDevice__DeleteUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__DeleteUsersResponse() { _onvifDevice__DeleteUsersResponse::soap_default(NULL); }
	virtual ~_onvifDevice__DeleteUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetUser
#define SOAP_TYPE__onvifDevice__SetUser (321)
/* onvifDevice:SetUser */
class SOAP_CMAC _onvifDevice__SetUser
{
public:
	std::vector<onvifXsd__User * >User;	/* required element of type onvifXsd:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE__onvifDevice__SetUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetUser() { _onvifDevice__SetUser::soap_default(NULL); }
	virtual ~_onvifDevice__SetUser() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetUserResponse
#define SOAP_TYPE__onvifDevice__SetUserResponse (322)
/* onvifDevice:SetUserResponse */
class SOAP_CMAC _onvifDevice__SetUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE__onvifDevice__SetUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetUserResponse() { _onvifDevice__SetUserResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetWsdlUrl
#define SOAP_TYPE__onvifDevice__GetWsdlUrl (323)
/* onvifDevice:GetWsdlUrl */
class SOAP_CMAC _onvifDevice__GetWsdlUrl
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE__onvifDevice__GetWsdlUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetWsdlUrl() { _onvifDevice__GetWsdlUrl::soap_default(NULL); }
	virtual ~_onvifDevice__GetWsdlUrl() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetWsdlUrlResponse
#define SOAP_TYPE__onvifDevice__GetWsdlUrlResponse (324)
/* onvifDevice:GetWsdlUrlResponse */
class SOAP_CMAC _onvifDevice__GetWsdlUrlResponse
{
public:
	std::string WsdlUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE__onvifDevice__GetWsdlUrlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetWsdlUrlResponse() { _onvifDevice__GetWsdlUrlResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetWsdlUrlResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCapabilities
#define SOAP_TYPE__onvifDevice__GetCapabilities (325)
/* onvifDevice:GetCapabilities */
class SOAP_CMAC _onvifDevice__GetCapabilities
{
public:
	std::vector<enum onvifXsd__CapabilityCategory >Category;	/* optional element of type onvifXsd:CapabilityCategory */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE__onvifDevice__GetCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCapabilities() { _onvifDevice__GetCapabilities::soap_default(NULL); }
	virtual ~_onvifDevice__GetCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCapabilitiesResponse
#define SOAP_TYPE__onvifDevice__GetCapabilitiesResponse (326)
/* onvifDevice:GetCapabilitiesResponse */
class SOAP_CMAC _onvifDevice__GetCapabilitiesResponse
{
public:
	class onvifXsd__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE__onvifDevice__GetCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCapabilitiesResponse() { _onvifDevice__GetCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetHostname
#define SOAP_TYPE__onvifDevice__GetHostname (327)
/* onvifDevice:GetHostname */
class SOAP_CMAC _onvifDevice__GetHostname
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE__onvifDevice__GetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetHostname() { _onvifDevice__GetHostname::soap_default(NULL); }
	virtual ~_onvifDevice__GetHostname() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetHostnameResponse
#define SOAP_TYPE__onvifDevice__GetHostnameResponse (328)
/* onvifDevice:GetHostnameResponse */
class SOAP_CMAC _onvifDevice__GetHostnameResponse
{
public:
	class onvifXsd__HostnameInformation *HostnameInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:HostnameInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE__onvifDevice__GetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetHostnameResponse() { _onvifDevice__GetHostnameResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetHostname
#define SOAP_TYPE__onvifDevice__SetHostname (329)
/* onvifDevice:SetHostname */
class SOAP_CMAC _onvifDevice__SetHostname
{
public:
	std::string Name;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE__onvifDevice__SetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetHostname() { _onvifDevice__SetHostname::soap_default(NULL); }
	virtual ~_onvifDevice__SetHostname() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetHostnameResponse
#define SOAP_TYPE__onvifDevice__SetHostnameResponse (330)
/* onvifDevice:SetHostnameResponse */
class SOAP_CMAC _onvifDevice__SetHostnameResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE__onvifDevice__SetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetHostnameResponse() { _onvifDevice__SetHostnameResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetHostnameFromDHCP
#define SOAP_TYPE__onvifDevice__SetHostnameFromDHCP (331)
/* onvifDevice:SetHostnameFromDHCP */
class SOAP_CMAC _onvifDevice__SetHostnameFromDHCP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE__onvifDevice__SetHostnameFromDHCP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetHostnameFromDHCP() { _onvifDevice__SetHostnameFromDHCP::soap_default(NULL); }
	virtual ~_onvifDevice__SetHostnameFromDHCP() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetHostnameFromDHCPResponse
#define SOAP_TYPE__onvifDevice__SetHostnameFromDHCPResponse (332)
/* onvifDevice:SetHostnameFromDHCPResponse */
class SOAP_CMAC _onvifDevice__SetHostnameFromDHCPResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE__onvifDevice__SetHostnameFromDHCPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetHostnameFromDHCPResponse() { _onvifDevice__SetHostnameFromDHCPResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetHostnameFromDHCPResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDNS
#define SOAP_TYPE__onvifDevice__GetDNS (333)
/* onvifDevice:GetDNS */
class SOAP_CMAC _onvifDevice__GetDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE__onvifDevice__GetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDNS() { _onvifDevice__GetDNS::soap_default(NULL); }
	virtual ~_onvifDevice__GetDNS() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDNSResponse
#define SOAP_TYPE__onvifDevice__GetDNSResponse (334)
/* onvifDevice:GetDNSResponse */
class SOAP_CMAC _onvifDevice__GetDNSResponse
{
public:
	class onvifXsd__DNSInformation *DNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:DNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE__onvifDevice__GetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDNSResponse() { _onvifDevice__GetDNSResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDNS
#define SOAP_TYPE__onvifDevice__SetDNS (335)
/* onvifDevice:SetDNS */
class SOAP_CMAC _onvifDevice__SetDNS
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<class onvifXsd__IPAddress * >DNSManual;	/* optional element of type onvifXsd:IPAddress */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE__onvifDevice__SetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDNS() { _onvifDevice__SetDNS::soap_default(NULL); }
	virtual ~_onvifDevice__SetDNS() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDNSResponse
#define SOAP_TYPE__onvifDevice__SetDNSResponse (336)
/* onvifDevice:SetDNSResponse */
class SOAP_CMAC _onvifDevice__SetDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE__onvifDevice__SetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDNSResponse() { _onvifDevice__SetDNSResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNTP
#define SOAP_TYPE__onvifDevice__GetNTP (337)
/* onvifDevice:GetNTP */
class SOAP_CMAC _onvifDevice__GetNTP
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE__onvifDevice__GetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNTP() { _onvifDevice__GetNTP::soap_default(NULL); }
	virtual ~_onvifDevice__GetNTP() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNTPResponse
#define SOAP_TYPE__onvifDevice__GetNTPResponse (338)
/* onvifDevice:GetNTPResponse */
class SOAP_CMAC _onvifDevice__GetNTPResponse
{
public:
	class onvifXsd__NTPInformation *NTPInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:NTPInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE__onvifDevice__GetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNTPResponse() { _onvifDevice__GetNTPResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNTP
#define SOAP_TYPE__onvifDevice__SetNTP (339)
/* onvifDevice:SetNTP */
class SOAP_CMAC _onvifDevice__SetNTP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<onvifXsd__NetworkHost * >NTPManual;	/* optional element of type onvifXsd:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE__onvifDevice__SetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNTP() { _onvifDevice__SetNTP::soap_default(NULL); }
	virtual ~_onvifDevice__SetNTP() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNTPResponse
#define SOAP_TYPE__onvifDevice__SetNTPResponse (340)
/* onvifDevice:SetNTPResponse */
class SOAP_CMAC _onvifDevice__SetNTPResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE__onvifDevice__SetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNTPResponse() { _onvifDevice__SetNTPResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDynamicDNS
#define SOAP_TYPE__onvifDevice__GetDynamicDNS (341)
/* onvifDevice:GetDynamicDNS */
class SOAP_CMAC _onvifDevice__GetDynamicDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE__onvifDevice__GetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDynamicDNS() { _onvifDevice__GetDynamicDNS::soap_default(NULL); }
	virtual ~_onvifDevice__GetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDynamicDNSResponse
#define SOAP_TYPE__onvifDevice__GetDynamicDNSResponse (342)
/* onvifDevice:GetDynamicDNSResponse */
class SOAP_CMAC _onvifDevice__GetDynamicDNSResponse
{
public:
	class onvifXsd__DynamicDNSInformation *DynamicDNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:DynamicDNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE__onvifDevice__GetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDynamicDNSResponse() { _onvifDevice__GetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDynamicDNS
#define SOAP_TYPE__onvifDevice__SetDynamicDNS (343)
/* onvifDevice:SetDynamicDNS */
class SOAP_CMAC _onvifDevice__SetDynamicDNS
{
public:
	enum onvifXsd__DynamicDNSType Type;	/* required element of type onvifXsd:DynamicDNSType */
	std::string *Name;	/* optional element of type onvifXsd:DNSName */
	std::string *TTL;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE__onvifDevice__SetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDynamicDNS() { _onvifDevice__SetDynamicDNS::soap_default(NULL); }
	virtual ~_onvifDevice__SetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDynamicDNSResponse
#define SOAP_TYPE__onvifDevice__SetDynamicDNSResponse (344)
/* onvifDevice:SetDynamicDNSResponse */
class SOAP_CMAC _onvifDevice__SetDynamicDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE__onvifDevice__SetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDynamicDNSResponse() { _onvifDevice__SetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNetworkInterfaces
#define SOAP_TYPE__onvifDevice__GetNetworkInterfaces (345)
/* onvifDevice:GetNetworkInterfaces */
class SOAP_CMAC _onvifDevice__GetNetworkInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE__onvifDevice__GetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNetworkInterfaces() { _onvifDevice__GetNetworkInterfaces::soap_default(NULL); }
	virtual ~_onvifDevice__GetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNetworkInterfacesResponse
#define SOAP_TYPE__onvifDevice__GetNetworkInterfacesResponse (346)
/* onvifDevice:GetNetworkInterfacesResponse */
class SOAP_CMAC _onvifDevice__GetNetworkInterfacesResponse
{
public:
	std::vector<class onvifXsd__NetworkInterface * >NetworkInterfaces;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:NetworkInterface */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE__onvifDevice__GetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNetworkInterfacesResponse() { _onvifDevice__GetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNetworkInterfaces
#define SOAP_TYPE__onvifDevice__SetNetworkInterfaces (347)
/* onvifDevice:SetNetworkInterfaces */
class SOAP_CMAC _onvifDevice__SetNetworkInterfaces
{
public:
	std::string InterfaceToken;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__NetworkInterfaceSetConfiguration *NetworkInterface;	/* required element of type onvifXsd:NetworkInterfaceSetConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE__onvifDevice__SetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNetworkInterfaces() { _onvifDevice__SetNetworkInterfaces::soap_default(NULL); }
	virtual ~_onvifDevice__SetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNetworkInterfacesResponse
#define SOAP_TYPE__onvifDevice__SetNetworkInterfacesResponse (348)
/* onvifDevice:SetNetworkInterfacesResponse */
class SOAP_CMAC _onvifDevice__SetNetworkInterfacesResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE__onvifDevice__SetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNetworkInterfacesResponse() { _onvifDevice__SetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNetworkProtocols
#define SOAP_TYPE__onvifDevice__GetNetworkProtocols (349)
/* onvifDevice:GetNetworkProtocols */
class SOAP_CMAC _onvifDevice__GetNetworkProtocols
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE__onvifDevice__GetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNetworkProtocols() { _onvifDevice__GetNetworkProtocols::soap_default(NULL); }
	virtual ~_onvifDevice__GetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNetworkProtocolsResponse
#define SOAP_TYPE__onvifDevice__GetNetworkProtocolsResponse (350)
/* onvifDevice:GetNetworkProtocolsResponse */
class SOAP_CMAC _onvifDevice__GetNetworkProtocolsResponse
{
public:
	std::vector<class onvifXsd__NetworkProtocol * >NetworkProtocols;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE__onvifDevice__GetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNetworkProtocolsResponse() { _onvifDevice__GetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNetworkProtocols
#define SOAP_TYPE__onvifDevice__SetNetworkProtocols (351)
/* onvifDevice:SetNetworkProtocols */
class SOAP_CMAC _onvifDevice__SetNetworkProtocols
{
public:
	std::vector<onvifXsd__NetworkProtocol * >NetworkProtocols;	/* required element of type onvifXsd:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE__onvifDevice__SetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNetworkProtocols() { _onvifDevice__SetNetworkProtocols::soap_default(NULL); }
	virtual ~_onvifDevice__SetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNetworkProtocolsResponse
#define SOAP_TYPE__onvifDevice__SetNetworkProtocolsResponse (352)
/* onvifDevice:SetNetworkProtocolsResponse */
class SOAP_CMAC _onvifDevice__SetNetworkProtocolsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE__onvifDevice__SetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNetworkProtocolsResponse() { _onvifDevice__SetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNetworkDefaultGateway
#define SOAP_TYPE__onvifDevice__GetNetworkDefaultGateway (353)
/* onvifDevice:GetNetworkDefaultGateway */
class SOAP_CMAC _onvifDevice__GetNetworkDefaultGateway
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE__onvifDevice__GetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNetworkDefaultGateway() { _onvifDevice__GetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_onvifDevice__GetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__onvifDevice__GetNetworkDefaultGatewayResponse (354)
/* onvifDevice:GetNetworkDefaultGatewayResponse */
class SOAP_CMAC _onvifDevice__GetNetworkDefaultGatewayResponse
{
public:
	class onvifXsd__NetworkGateway *NetworkGateway;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:NetworkGateway */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE__onvifDevice__GetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetNetworkDefaultGatewayResponse() { _onvifDevice__GetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNetworkDefaultGateway
#define SOAP_TYPE__onvifDevice__SetNetworkDefaultGateway (355)
/* onvifDevice:SetNetworkDefaultGateway */
class SOAP_CMAC _onvifDevice__SetNetworkDefaultGateway
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type onvifXsd:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type onvifXsd:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE__onvifDevice__SetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNetworkDefaultGateway() { _onvifDevice__SetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_onvifDevice__SetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__onvifDevice__SetNetworkDefaultGatewayResponse (356)
/* onvifDevice:SetNetworkDefaultGatewayResponse */
class SOAP_CMAC _onvifDevice__SetNetworkDefaultGatewayResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE__onvifDevice__SetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetNetworkDefaultGatewayResponse() { _onvifDevice__SetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetZeroConfiguration
#define SOAP_TYPE__onvifDevice__GetZeroConfiguration (357)
/* onvifDevice:GetZeroConfiguration */
class SOAP_CMAC _onvifDevice__GetZeroConfiguration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE__onvifDevice__GetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetZeroConfiguration() { _onvifDevice__GetZeroConfiguration::soap_default(NULL); }
	virtual ~_onvifDevice__GetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetZeroConfigurationResponse
#define SOAP_TYPE__onvifDevice__GetZeroConfigurationResponse (358)
/* onvifDevice:GetZeroConfigurationResponse */
class SOAP_CMAC _onvifDevice__GetZeroConfigurationResponse
{
public:
	class onvifXsd__NetworkZeroConfiguration *ZeroConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:NetworkZeroConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE__onvifDevice__GetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetZeroConfigurationResponse() { _onvifDevice__GetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetZeroConfiguration
#define SOAP_TYPE__onvifDevice__SetZeroConfiguration (359)
/* onvifDevice:SetZeroConfiguration */
class SOAP_CMAC _onvifDevice__SetZeroConfiguration
{
public:
	std::string InterfaceToken;	/* required element of type onvifXsd:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE__onvifDevice__SetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetZeroConfiguration() { _onvifDevice__SetZeroConfiguration::soap_default(NULL); }
	virtual ~_onvifDevice__SetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetZeroConfigurationResponse
#define SOAP_TYPE__onvifDevice__SetZeroConfigurationResponse (360)
/* onvifDevice:SetZeroConfigurationResponse */
class SOAP_CMAC _onvifDevice__SetZeroConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE__onvifDevice__SetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetZeroConfigurationResponse() { _onvifDevice__SetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetIPAddressFilter
#define SOAP_TYPE__onvifDevice__GetIPAddressFilter (361)
/* onvifDevice:GetIPAddressFilter */
class SOAP_CMAC _onvifDevice__GetIPAddressFilter
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE__onvifDevice__GetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetIPAddressFilter() { _onvifDevice__GetIPAddressFilter::soap_default(NULL); }
	virtual ~_onvifDevice__GetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetIPAddressFilterResponse
#define SOAP_TYPE__onvifDevice__GetIPAddressFilterResponse (362)
/* onvifDevice:GetIPAddressFilterResponse */
class SOAP_CMAC _onvifDevice__GetIPAddressFilterResponse
{
public:
	class onvifXsd__IPAddressFilter *IPAddressFilter;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE__onvifDevice__GetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetIPAddressFilterResponse() { _onvifDevice__GetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetIPAddressFilter
#define SOAP_TYPE__onvifDevice__SetIPAddressFilter (363)
/* onvifDevice:SetIPAddressFilter */
class SOAP_CMAC _onvifDevice__SetIPAddressFilter
{
public:
	onvifXsd__IPAddressFilter *IPAddressFilter;	/* required element of type onvifXsd:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE__onvifDevice__SetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetIPAddressFilter() { _onvifDevice__SetIPAddressFilter::soap_default(NULL); }
	virtual ~_onvifDevice__SetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetIPAddressFilterResponse
#define SOAP_TYPE__onvifDevice__SetIPAddressFilterResponse (364)
/* onvifDevice:SetIPAddressFilterResponse */
class SOAP_CMAC _onvifDevice__SetIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE__onvifDevice__SetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetIPAddressFilterResponse() { _onvifDevice__SetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__AddIPAddressFilter
#define SOAP_TYPE__onvifDevice__AddIPAddressFilter (365)
/* onvifDevice:AddIPAddressFilter */
class SOAP_CMAC _onvifDevice__AddIPAddressFilter
{
public:
	onvifXsd__IPAddressFilter *IPAddressFilter;	/* required element of type onvifXsd:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE__onvifDevice__AddIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__AddIPAddressFilter() { _onvifDevice__AddIPAddressFilter::soap_default(NULL); }
	virtual ~_onvifDevice__AddIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__AddIPAddressFilterResponse
#define SOAP_TYPE__onvifDevice__AddIPAddressFilterResponse (366)
/* onvifDevice:AddIPAddressFilterResponse */
class SOAP_CMAC _onvifDevice__AddIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE__onvifDevice__AddIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__AddIPAddressFilterResponse() { _onvifDevice__AddIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_onvifDevice__AddIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__RemoveIPAddressFilter
#define SOAP_TYPE__onvifDevice__RemoveIPAddressFilter (367)
/* onvifDevice:RemoveIPAddressFilter */
class SOAP_CMAC _onvifDevice__RemoveIPAddressFilter
{
public:
	onvifXsd__IPAddressFilter *IPAddressFilter;	/* required element of type onvifXsd:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE__onvifDevice__RemoveIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__RemoveIPAddressFilter() { _onvifDevice__RemoveIPAddressFilter::soap_default(NULL); }
	virtual ~_onvifDevice__RemoveIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__RemoveIPAddressFilterResponse
#define SOAP_TYPE__onvifDevice__RemoveIPAddressFilterResponse (368)
/* onvifDevice:RemoveIPAddressFilterResponse */
class SOAP_CMAC _onvifDevice__RemoveIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE__onvifDevice__RemoveIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__RemoveIPAddressFilterResponse() { _onvifDevice__RemoveIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_onvifDevice__RemoveIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetAccessPolicy
#define SOAP_TYPE__onvifDevice__GetAccessPolicy (369)
/* onvifDevice:GetAccessPolicy */
class SOAP_CMAC _onvifDevice__GetAccessPolicy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE__onvifDevice__GetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetAccessPolicy() { _onvifDevice__GetAccessPolicy::soap_default(NULL); }
	virtual ~_onvifDevice__GetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetAccessPolicyResponse
#define SOAP_TYPE__onvifDevice__GetAccessPolicyResponse (370)
/* onvifDevice:GetAccessPolicyResponse */
class SOAP_CMAC _onvifDevice__GetAccessPolicyResponse
{
public:
	class onvifXsd__BinaryData *PolicyFile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE__onvifDevice__GetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetAccessPolicyResponse() { _onvifDevice__GetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetAccessPolicy
#define SOAP_TYPE__onvifDevice__SetAccessPolicy (371)
/* onvifDevice:SetAccessPolicy */
class SOAP_CMAC _onvifDevice__SetAccessPolicy
{
public:
	onvifXsd__BinaryData *PolicyFile;	/* required element of type onvifXsd:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE__onvifDevice__SetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetAccessPolicy() { _onvifDevice__SetAccessPolicy::soap_default(NULL); }
	virtual ~_onvifDevice__SetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetAccessPolicyResponse
#define SOAP_TYPE__onvifDevice__SetAccessPolicyResponse (372)
/* onvifDevice:SetAccessPolicyResponse */
class SOAP_CMAC _onvifDevice__SetAccessPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE__onvifDevice__SetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetAccessPolicyResponse() { _onvifDevice__SetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__CreateCertificate
#define SOAP_TYPE__onvifDevice__CreateCertificate (373)
/* onvifDevice:CreateCertificate */
class SOAP_CMAC _onvifDevice__CreateCertificate
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	time_t *ValidNotBefore;	/* optional element of type xsd:dateTime */
	time_t *ValidNotAfter;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE__onvifDevice__CreateCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__CreateCertificate() { _onvifDevice__CreateCertificate::soap_default(NULL); }
	virtual ~_onvifDevice__CreateCertificate() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__CreateCertificateResponse
#define SOAP_TYPE__onvifDevice__CreateCertificateResponse (374)
/* onvifDevice:CreateCertificateResponse */
class SOAP_CMAC _onvifDevice__CreateCertificateResponse
{
public:
	class onvifXsd__Certificate *NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE__onvifDevice__CreateCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__CreateCertificateResponse() { _onvifDevice__CreateCertificateResponse::soap_default(NULL); }
	virtual ~_onvifDevice__CreateCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCertificates
#define SOAP_TYPE__onvifDevice__GetCertificates (375)
/* onvifDevice:GetCertificates */
class SOAP_CMAC _onvifDevice__GetCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE__onvifDevice__GetCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCertificates() { _onvifDevice__GetCertificates::soap_default(NULL); }
	virtual ~_onvifDevice__GetCertificates() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCertificatesResponse
#define SOAP_TYPE__onvifDevice__GetCertificatesResponse (376)
/* onvifDevice:GetCertificatesResponse */
class SOAP_CMAC _onvifDevice__GetCertificatesResponse
{
public:
	std::vector<onvifXsd__Certificate * >NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE__onvifDevice__GetCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCertificatesResponse() { _onvifDevice__GetCertificatesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCertificatesStatus
#define SOAP_TYPE__onvifDevice__GetCertificatesStatus (377)
/* onvifDevice:GetCertificatesStatus */
class SOAP_CMAC _onvifDevice__GetCertificatesStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE__onvifDevice__GetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCertificatesStatus() { _onvifDevice__GetCertificatesStatus::soap_default(NULL); }
	virtual ~_onvifDevice__GetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCertificatesStatusResponse
#define SOAP_TYPE__onvifDevice__GetCertificatesStatusResponse (378)
/* onvifDevice:GetCertificatesStatusResponse */
class SOAP_CMAC _onvifDevice__GetCertificatesStatusResponse
{
public:
	std::vector<class onvifXsd__CertificateStatus * >CertificateStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE__onvifDevice__GetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCertificatesStatusResponse() { _onvifDevice__GetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetCertificatesStatus
#define SOAP_TYPE__onvifDevice__SetCertificatesStatus (379)
/* onvifDevice:SetCertificatesStatus */
class SOAP_CMAC _onvifDevice__SetCertificatesStatus
{
public:
	std::vector<onvifXsd__CertificateStatus * >CertificateStatus;	/* optional element of type onvifXsd:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE__onvifDevice__SetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetCertificatesStatus() { _onvifDevice__SetCertificatesStatus::soap_default(NULL); }
	virtual ~_onvifDevice__SetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetCertificatesStatusResponse
#define SOAP_TYPE__onvifDevice__SetCertificatesStatusResponse (380)
/* onvifDevice:SetCertificatesStatusResponse */
class SOAP_CMAC _onvifDevice__SetCertificatesStatusResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE__onvifDevice__SetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetCertificatesStatusResponse() { _onvifDevice__SetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__DeleteCertificates
#define SOAP_TYPE__onvifDevice__DeleteCertificates (381)
/* onvifDevice:DeleteCertificates */
class SOAP_CMAC _onvifDevice__DeleteCertificates
{
public:
	std::vector<std::string >CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE__onvifDevice__DeleteCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__DeleteCertificates() { _onvifDevice__DeleteCertificates::soap_default(NULL); }
	virtual ~_onvifDevice__DeleteCertificates() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__DeleteCertificatesResponse
#define SOAP_TYPE__onvifDevice__DeleteCertificatesResponse (382)
/* onvifDevice:DeleteCertificatesResponse */
class SOAP_CMAC _onvifDevice__DeleteCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE__onvifDevice__DeleteCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__DeleteCertificatesResponse() { _onvifDevice__DeleteCertificatesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__DeleteCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetPkcs10Request
#define SOAP_TYPE__onvifDevice__GetPkcs10Request (383)
/* onvifDevice:GetPkcs10Request */
class SOAP_CMAC _onvifDevice__GetPkcs10Request
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	onvifXsd__BinaryData *Attributes;	/* optional element of type onvifXsd:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE__onvifDevice__GetPkcs10Request */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetPkcs10Request() { _onvifDevice__GetPkcs10Request::soap_default(NULL); }
	virtual ~_onvifDevice__GetPkcs10Request() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetPkcs10RequestResponse
#define SOAP_TYPE__onvifDevice__GetPkcs10RequestResponse (384)
/* onvifDevice:GetPkcs10RequestResponse */
class SOAP_CMAC _onvifDevice__GetPkcs10RequestResponse
{
public:
	onvifXsd__BinaryData *Pkcs10Request;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE__onvifDevice__GetPkcs10RequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetPkcs10RequestResponse() { _onvifDevice__GetPkcs10RequestResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetPkcs10RequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__LoadCertificates
#define SOAP_TYPE__onvifDevice__LoadCertificates (385)
/* onvifDevice:LoadCertificates */
class SOAP_CMAC _onvifDevice__LoadCertificates
{
public:
	std::vector<onvifXsd__Certificate * >NVTCertificate;	/* required element of type onvifXsd:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE__onvifDevice__LoadCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__LoadCertificates() { _onvifDevice__LoadCertificates::soap_default(NULL); }
	virtual ~_onvifDevice__LoadCertificates() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__LoadCertificatesResponse
#define SOAP_TYPE__onvifDevice__LoadCertificatesResponse (386)
/* onvifDevice:LoadCertificatesResponse */
class SOAP_CMAC _onvifDevice__LoadCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE__onvifDevice__LoadCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__LoadCertificatesResponse() { _onvifDevice__LoadCertificatesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__LoadCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetClientCertificateMode
#define SOAP_TYPE__onvifDevice__GetClientCertificateMode (387)
/* onvifDevice:GetClientCertificateMode */
class SOAP_CMAC _onvifDevice__GetClientCertificateMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE__onvifDevice__GetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetClientCertificateMode() { _onvifDevice__GetClientCertificateMode::soap_default(NULL); }
	virtual ~_onvifDevice__GetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetClientCertificateModeResponse
#define SOAP_TYPE__onvifDevice__GetClientCertificateModeResponse (388)
/* onvifDevice:GetClientCertificateModeResponse */
class SOAP_CMAC _onvifDevice__GetClientCertificateModeResponse
{
public:
	bool Enabled;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE__onvifDevice__GetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetClientCertificateModeResponse() { _onvifDevice__GetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetClientCertificateMode
#define SOAP_TYPE__onvifDevice__SetClientCertificateMode (389)
/* onvifDevice:SetClientCertificateMode */
class SOAP_CMAC _onvifDevice__SetClientCertificateMode
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE__onvifDevice__SetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetClientCertificateMode() { _onvifDevice__SetClientCertificateMode::soap_default(NULL); }
	virtual ~_onvifDevice__SetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetClientCertificateModeResponse
#define SOAP_TYPE__onvifDevice__SetClientCertificateModeResponse (390)
/* onvifDevice:SetClientCertificateModeResponse */
class SOAP_CMAC _onvifDevice__SetClientCertificateModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE__onvifDevice__SetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetClientCertificateModeResponse() { _onvifDevice__SetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCACertificates
#define SOAP_TYPE__onvifDevice__GetCACertificates (391)
/* onvifDevice:GetCACertificates */
class SOAP_CMAC _onvifDevice__GetCACertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE__onvifDevice__GetCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCACertificates() { _onvifDevice__GetCACertificates::soap_default(NULL); }
	virtual ~_onvifDevice__GetCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCACertificatesResponse
#define SOAP_TYPE__onvifDevice__GetCACertificatesResponse (392)
/* onvifDevice:GetCACertificatesResponse */
class SOAP_CMAC _onvifDevice__GetCACertificatesResponse
{
public:
	std::vector<onvifXsd__Certificate * >CACertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE__onvifDevice__GetCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCACertificatesResponse() { _onvifDevice__GetCACertificatesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__LoadCertificateWithPrivateKey
#define SOAP_TYPE__onvifDevice__LoadCertificateWithPrivateKey (393)
/* onvifDevice:LoadCertificateWithPrivateKey */
class SOAP_CMAC _onvifDevice__LoadCertificateWithPrivateKey
{
public:
	std::vector<class onvifXsd__CertificateWithPrivateKey * >CertificateWithPrivateKey;	/* required element of type onvifXsd:CertificateWithPrivateKey */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE__onvifDevice__LoadCertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__LoadCertificateWithPrivateKey() { _onvifDevice__LoadCertificateWithPrivateKey::soap_default(NULL); }
	virtual ~_onvifDevice__LoadCertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__onvifDevice__LoadCertificateWithPrivateKeyResponse (394)
/* onvifDevice:LoadCertificateWithPrivateKeyResponse */
class SOAP_CMAC _onvifDevice__LoadCertificateWithPrivateKeyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE__onvifDevice__LoadCertificateWithPrivateKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__LoadCertificateWithPrivateKeyResponse() { _onvifDevice__LoadCertificateWithPrivateKeyResponse::soap_default(NULL); }
	virtual ~_onvifDevice__LoadCertificateWithPrivateKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCertificateInformation
#define SOAP_TYPE__onvifDevice__GetCertificateInformation (395)
/* onvifDevice:GetCertificateInformation */
class SOAP_CMAC _onvifDevice__GetCertificateInformation
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE__onvifDevice__GetCertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCertificateInformation() { _onvifDevice__GetCertificateInformation::soap_default(NULL); }
	virtual ~_onvifDevice__GetCertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetCertificateInformationResponse
#define SOAP_TYPE__onvifDevice__GetCertificateInformationResponse (396)
/* onvifDevice:GetCertificateInformationResponse */
class SOAP_CMAC _onvifDevice__GetCertificateInformationResponse
{
public:
	class onvifXsd__CertificateInformation *CertificateInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:CertificateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE__onvifDevice__GetCertificateInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetCertificateInformationResponse() { _onvifDevice__GetCertificateInformationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetCertificateInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__LoadCACertificates
#define SOAP_TYPE__onvifDevice__LoadCACertificates (397)
/* onvifDevice:LoadCACertificates */
class SOAP_CMAC _onvifDevice__LoadCACertificates
{
public:
	std::vector<onvifXsd__Certificate * >CACertificate;	/* required element of type onvifXsd:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE__onvifDevice__LoadCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__LoadCACertificates() { _onvifDevice__LoadCACertificates::soap_default(NULL); }
	virtual ~_onvifDevice__LoadCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__LoadCACertificatesResponse
#define SOAP_TYPE__onvifDevice__LoadCACertificatesResponse (398)
/* onvifDevice:LoadCACertificatesResponse */
class SOAP_CMAC _onvifDevice__LoadCACertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE__onvifDevice__LoadCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__LoadCACertificatesResponse() { _onvifDevice__LoadCACertificatesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__LoadCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__CreateDot1XConfiguration
#define SOAP_TYPE__onvifDevice__CreateDot1XConfiguration (399)
/* onvifDevice:CreateDot1XConfiguration */
class SOAP_CMAC _onvifDevice__CreateDot1XConfiguration
{
public:
	class onvifXsd__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type onvifXsd:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE__onvifDevice__CreateDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__CreateDot1XConfiguration() { _onvifDevice__CreateDot1XConfiguration::soap_default(NULL); }
	virtual ~_onvifDevice__CreateDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__CreateDot1XConfigurationResponse
#define SOAP_TYPE__onvifDevice__CreateDot1XConfigurationResponse (400)
/* onvifDevice:CreateDot1XConfigurationResponse */
class SOAP_CMAC _onvifDevice__CreateDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE__onvifDevice__CreateDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__CreateDot1XConfigurationResponse() { _onvifDevice__CreateDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__CreateDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDot1XConfiguration
#define SOAP_TYPE__onvifDevice__SetDot1XConfiguration (401)
/* onvifDevice:SetDot1XConfiguration */
class SOAP_CMAC _onvifDevice__SetDot1XConfiguration
{
public:
	onvifXsd__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type onvifXsd:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE__onvifDevice__SetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDot1XConfiguration() { _onvifDevice__SetDot1XConfiguration::soap_default(NULL); }
	virtual ~_onvifDevice__SetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetDot1XConfigurationResponse
#define SOAP_TYPE__onvifDevice__SetDot1XConfigurationResponse (402)
/* onvifDevice:SetDot1XConfigurationResponse */
class SOAP_CMAC _onvifDevice__SetDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE__onvifDevice__SetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetDot1XConfigurationResponse() { _onvifDevice__SetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot1XConfiguration
#define SOAP_TYPE__onvifDevice__GetDot1XConfiguration (403)
/* onvifDevice:GetDot1XConfiguration */
class SOAP_CMAC _onvifDevice__GetDot1XConfiguration
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE__onvifDevice__GetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot1XConfiguration() { _onvifDevice__GetDot1XConfiguration::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot1XConfigurationResponse
#define SOAP_TYPE__onvifDevice__GetDot1XConfigurationResponse (404)
/* onvifDevice:GetDot1XConfigurationResponse */
class SOAP_CMAC _onvifDevice__GetDot1XConfigurationResponse
{
public:
	onvifXsd__Dot1XConfiguration *Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE__onvifDevice__GetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot1XConfigurationResponse() { _onvifDevice__GetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot1XConfigurations
#define SOAP_TYPE__onvifDevice__GetDot1XConfigurations (405)
/* onvifDevice:GetDot1XConfigurations */
class SOAP_CMAC _onvifDevice__GetDot1XConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE__onvifDevice__GetDot1XConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot1XConfigurations() { _onvifDevice__GetDot1XConfigurations::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot1XConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot1XConfigurationsResponse
#define SOAP_TYPE__onvifDevice__GetDot1XConfigurationsResponse (406)
/* onvifDevice:GetDot1XConfigurationsResponse */
class SOAP_CMAC _onvifDevice__GetDot1XConfigurationsResponse
{
public:
	std::vector<onvifXsd__Dot1XConfiguration * >Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE__onvifDevice__GetDot1XConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot1XConfigurationsResponse() { _onvifDevice__GetDot1XConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot1XConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__DeleteDot1XConfiguration
#define SOAP_TYPE__onvifDevice__DeleteDot1XConfiguration (407)
/* onvifDevice:DeleteDot1XConfiguration */
class SOAP_CMAC _onvifDevice__DeleteDot1XConfiguration
{
public:
	std::vector<std::string >Dot1XConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE__onvifDevice__DeleteDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__DeleteDot1XConfiguration() { _onvifDevice__DeleteDot1XConfiguration::soap_default(NULL); }
	virtual ~_onvifDevice__DeleteDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__onvifDevice__DeleteDot1XConfigurationResponse (408)
/* onvifDevice:DeleteDot1XConfigurationResponse */
class SOAP_CMAC _onvifDevice__DeleteDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE__onvifDevice__DeleteDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__DeleteDot1XConfigurationResponse() { _onvifDevice__DeleteDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDevice__DeleteDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetRelayOutputs
#define SOAP_TYPE__onvifDevice__GetRelayOutputs (409)
/* onvifDevice:GetRelayOutputs */
class SOAP_CMAC _onvifDevice__GetRelayOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE__onvifDevice__GetRelayOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetRelayOutputs() { _onvifDevice__GetRelayOutputs::soap_default(NULL); }
	virtual ~_onvifDevice__GetRelayOutputs() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetRelayOutputsResponse
#define SOAP_TYPE__onvifDevice__GetRelayOutputsResponse (410)
/* onvifDevice:GetRelayOutputsResponse */
class SOAP_CMAC _onvifDevice__GetRelayOutputsResponse
{
public:
	std::vector<class onvifXsd__RelayOutput * >RelayOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE__onvifDevice__GetRelayOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetRelayOutputsResponse() { _onvifDevice__GetRelayOutputsResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetRelayOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRelayOutputSettings
#define SOAP_TYPE__onvifDevice__SetRelayOutputSettings (411)
/* onvifDevice:SetRelayOutputSettings */
class SOAP_CMAC _onvifDevice__SetRelayOutputSettings
{
public:
	std::string RelayOutputToken;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__RelayOutputSettings *Properties;	/* required element of type onvifXsd:RelayOutputSettings */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE__onvifDevice__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRelayOutputSettings() { _onvifDevice__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_onvifDevice__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRelayOutputSettingsResponse
#define SOAP_TYPE__onvifDevice__SetRelayOutputSettingsResponse (412)
/* onvifDevice:SetRelayOutputSettingsResponse */
class SOAP_CMAC _onvifDevice__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE__onvifDevice__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRelayOutputSettingsResponse() { _onvifDevice__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRelayOutputState
#define SOAP_TYPE__onvifDevice__SetRelayOutputState (413)
/* onvifDevice:SetRelayOutputState */
class SOAP_CMAC _onvifDevice__SetRelayOutputState
{
public:
	std::string RelayOutputToken;	/* required element of type onvifXsd:ReferenceToken */
	enum onvifXsd__RelayLogicalState LogicalState;	/* required element of type onvifXsd:RelayLogicalState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE__onvifDevice__SetRelayOutputState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRelayOutputState() { _onvifDevice__SetRelayOutputState::soap_default(NULL); }
	virtual ~_onvifDevice__SetRelayOutputState() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SetRelayOutputStateResponse
#define SOAP_TYPE__onvifDevice__SetRelayOutputStateResponse (414)
/* onvifDevice:SetRelayOutputStateResponse */
class SOAP_CMAC _onvifDevice__SetRelayOutputStateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE__onvifDevice__SetRelayOutputStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SetRelayOutputStateResponse() { _onvifDevice__SetRelayOutputStateResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SetRelayOutputStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SendAuxiliaryCommand
#define SOAP_TYPE__onvifDevice__SendAuxiliaryCommand (415)
/* onvifDevice:SendAuxiliaryCommand */
class SOAP_CMAC _onvifDevice__SendAuxiliaryCommand
{
public:
	std::string AuxiliaryCommand;	/* required element of type onvifXsd:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE__onvifDevice__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SendAuxiliaryCommand() { _onvifDevice__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_onvifDevice__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__SendAuxiliaryCommandResponse
#define SOAP_TYPE__onvifDevice__SendAuxiliaryCommandResponse (416)
/* onvifDevice:SendAuxiliaryCommandResponse */
class SOAP_CMAC _onvifDevice__SendAuxiliaryCommandResponse
{
public:
	std::string *AuxiliaryCommandResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE__onvifDevice__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__SendAuxiliaryCommandResponse() { _onvifDevice__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_onvifDevice__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot11Capabilities
#define SOAP_TYPE__onvifDevice__GetDot11Capabilities (417)
/* onvifDevice:GetDot11Capabilities */
class SOAP_CMAC _onvifDevice__GetDot11Capabilities
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE__onvifDevice__GetDot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot11Capabilities() { _onvifDevice__GetDot11Capabilities::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot11CapabilitiesResponse
#define SOAP_TYPE__onvifDevice__GetDot11CapabilitiesResponse (418)
/* onvifDevice:GetDot11CapabilitiesResponse */
class SOAP_CMAC _onvifDevice__GetDot11CapabilitiesResponse
{
public:
	class onvifXsd__Dot11Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Dot11Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE__onvifDevice__GetDot11CapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot11CapabilitiesResponse() { _onvifDevice__GetDot11CapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot11CapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot11Status
#define SOAP_TYPE__onvifDevice__GetDot11Status (419)
/* onvifDevice:GetDot11Status */
class SOAP_CMAC _onvifDevice__GetDot11Status
{
public:
	std::string InterfaceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE__onvifDevice__GetDot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot11Status() { _onvifDevice__GetDot11Status::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot11Status() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetDot11StatusResponse
#define SOAP_TYPE__onvifDevice__GetDot11StatusResponse (420)
/* onvifDevice:GetDot11StatusResponse */
class SOAP_CMAC _onvifDevice__GetDot11StatusResponse
{
public:
	class onvifXsd__Dot11Status *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Dot11Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE__onvifDevice__GetDot11StatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetDot11StatusResponse() { _onvifDevice__GetDot11StatusResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetDot11StatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__ScanAvailableDot11Networks
#define SOAP_TYPE__onvifDevice__ScanAvailableDot11Networks (421)
/* onvifDevice:ScanAvailableDot11Networks */
class SOAP_CMAC _onvifDevice__ScanAvailableDot11Networks
{
public:
	std::string InterfaceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE__onvifDevice__ScanAvailableDot11Networks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__ScanAvailableDot11Networks() { _onvifDevice__ScanAvailableDot11Networks::soap_default(NULL); }
	virtual ~_onvifDevice__ScanAvailableDot11Networks() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__onvifDevice__ScanAvailableDot11NetworksResponse (422)
/* onvifDevice:ScanAvailableDot11NetworksResponse */
class SOAP_CMAC _onvifDevice__ScanAvailableDot11NetworksResponse
{
public:
	std::vector<class onvifXsd__Dot11AvailableNetworks * >Networks;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:Dot11AvailableNetworks */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE__onvifDevice__ScanAvailableDot11NetworksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__ScanAvailableDot11NetworksResponse() { _onvifDevice__ScanAvailableDot11NetworksResponse::soap_default(NULL); }
	virtual ~_onvifDevice__ScanAvailableDot11NetworksResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemUris
#define SOAP_TYPE__onvifDevice__GetSystemUris (423)
/* onvifDevice:GetSystemUris */
class SOAP_CMAC _onvifDevice__GetSystemUris
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemUris */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemUris() { _onvifDevice__GetSystemUris::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemUris() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemUrisResponse_Extension
#define SOAP_TYPE__onvifDevice__GetSystemUrisResponse_Extension (1414)
/* onvifDevice:GetSystemUrisResponse-Extension */
class SOAP_CMAC _onvifDevice__GetSystemUrisResponse_Extension
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1414; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemUrisResponse_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemUrisResponse_Extension() { _onvifDevice__GetSystemUrisResponse_Extension::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemUrisResponse_Extension() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__GetSystemUrisResponse
#define SOAP_TYPE__onvifDevice__GetSystemUrisResponse (424)
/* onvifDevice:GetSystemUrisResponse */
class SOAP_CMAC _onvifDevice__GetSystemUrisResponse
{
public:
	class onvifXsd__SystemLogUriList *SystemLogUris;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:SystemLogUriList */
	std::string *SupportInfoUri;	/* optional element of type xsd:anyURI */
	std::string *SystemBackupUri;	/* optional element of type xsd:anyURI */
	_onvifDevice__GetSystemUrisResponse_Extension *Extension;	/* optional element of type onvifDevice:GetSystemUrisResponse-Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE__onvifDevice__GetSystemUrisResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__GetSystemUrisResponse() { _onvifDevice__GetSystemUrisResponse::soap_default(NULL); }
	virtual ~_onvifDevice__GetSystemUrisResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__StartFirmwareUpgrade
#define SOAP_TYPE__onvifDevice__StartFirmwareUpgrade (425)
/* onvifDevice:StartFirmwareUpgrade */
class SOAP_CMAC _onvifDevice__StartFirmwareUpgrade
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE__onvifDevice__StartFirmwareUpgrade */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__StartFirmwareUpgrade() { _onvifDevice__StartFirmwareUpgrade::soap_default(NULL); }
	virtual ~_onvifDevice__StartFirmwareUpgrade() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__StartFirmwareUpgradeResponse
#define SOAP_TYPE__onvifDevice__StartFirmwareUpgradeResponse (426)
/* onvifDevice:StartFirmwareUpgradeResponse */
class SOAP_CMAC _onvifDevice__StartFirmwareUpgradeResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	std::string UploadDelay;	/* required element of type xsd:duration */
	std::string ExpectedDownTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE__onvifDevice__StartFirmwareUpgradeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__StartFirmwareUpgradeResponse() { _onvifDevice__StartFirmwareUpgradeResponse::soap_default(NULL); }
	virtual ~_onvifDevice__StartFirmwareUpgradeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__StartSystemRestore
#define SOAP_TYPE__onvifDevice__StartSystemRestore (427)
/* onvifDevice:StartSystemRestore */
class SOAP_CMAC _onvifDevice__StartSystemRestore
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE__onvifDevice__StartSystemRestore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__StartSystemRestore() { _onvifDevice__StartSystemRestore::soap_default(NULL); }
	virtual ~_onvifDevice__StartSystemRestore() { }
};
#endif

#ifndef SOAP_TYPE__onvifDevice__StartSystemRestoreResponse
#define SOAP_TYPE__onvifDevice__StartSystemRestoreResponse (428)
/* onvifDevice:StartSystemRestoreResponse */
class SOAP_CMAC _onvifDevice__StartSystemRestoreResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	std::string ExpectedDownTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE__onvifDevice__StartSystemRestoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDevice__StartSystemRestoreResponse() { _onvifDevice__StartSystemRestoreResponse::soap_default(NULL); }
	virtual ~_onvifDevice__StartSystemRestoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DeviceEntity
#define SOAP_TYPE_onvifXsd__DeviceEntity (429)
/* Primitive onvifXsd:DeviceEntity schema type: */
class SOAP_CMAC onvifXsd__DeviceEntity : public xsd__anyType
{
public:
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_onvifXsd__DeviceEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DeviceEntity() { onvifXsd__DeviceEntity::soap_default(NULL); }
	virtual ~onvifXsd__DeviceEntity() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IntRectangle
#define SOAP_TYPE_onvifXsd__IntRectangle (430)
/* Primitive onvifXsd:IntRectangle schema type: */
class SOAP_CMAC onvifXsd__IntRectangle : public xsd__anyType
{
public:
	int x;	/* required attribute */
	int y;	/* required attribute */
	int width;	/* required attribute */
	int height;	/* required attribute */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_onvifXsd__IntRectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IntRectangle() { onvifXsd__IntRectangle::soap_default(NULL); }
	virtual ~onvifXsd__IntRectangle() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IntRectangleRange
#define SOAP_TYPE_onvifXsd__IntRectangleRange (431)
/* onvifXsd:IntRectangleRange */
class SOAP_CMAC onvifXsd__IntRectangleRange : public xsd__anyType
{
public:
	class onvifXsd__IntRange *XRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *YRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *WidthRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *HeightRange;	/* required element of type onvifXsd:IntRange */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_onvifXsd__IntRectangleRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IntRectangleRange() { onvifXsd__IntRectangleRange::soap_default(NULL); }
	virtual ~onvifXsd__IntRectangleRange() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IntRange
#define SOAP_TYPE_onvifXsd__IntRange (432)
/* onvifXsd:IntRange */
class SOAP_CMAC onvifXsd__IntRange : public xsd__anyType
{
public:
	int Min;	/* required element of type xsd:int */
	int Max;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_onvifXsd__IntRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IntRange() { onvifXsd__IntRange::soap_default(NULL); }
	virtual ~onvifXsd__IntRange() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FloatRange
#define SOAP_TYPE_onvifXsd__FloatRange (433)
/* onvifXsd:FloatRange */
class SOAP_CMAC onvifXsd__FloatRange : public xsd__anyType
{
public:
	float Min;	/* required element of type xsd:float */
	float Max;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_onvifXsd__FloatRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FloatRange() { onvifXsd__FloatRange::soap_default(NULL); }
	virtual ~onvifXsd__FloatRange() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DurationRange
#define SOAP_TYPE_onvifXsd__DurationRange (434)
/* onvifXsd:DurationRange */
class SOAP_CMAC onvifXsd__DurationRange : public xsd__anyType
{
public:
	std::string Min;	/* required element of type xsd:duration */
	std::string Max;	/* required element of type xsd:duration */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_onvifXsd__DurationRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DurationRange() { onvifXsd__DurationRange::soap_default(NULL); }
	virtual ~onvifXsd__DurationRange() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IntList
#define SOAP_TYPE_onvifXsd__IntList (435)
/* onvifXsd:IntList */
class SOAP_CMAC onvifXsd__IntList : public xsd__anyType
{
public:
	std::vector<int >Items;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_onvifXsd__IntList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IntList() { onvifXsd__IntList::soap_default(NULL); }
	virtual ~onvifXsd__IntList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FloatList
#define SOAP_TYPE_onvifXsd__FloatList (436)
/* onvifXsd:FloatList */
class SOAP_CMAC onvifXsd__FloatList : public xsd__anyType
{
public:
	std::vector<float >Items;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_onvifXsd__FloatList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FloatList() { onvifXsd__FloatList::soap_default(NULL); }
	virtual ~onvifXsd__FloatList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnyHolder
#define SOAP_TYPE_onvifXsd__AnyHolder (437)
/* onvifXsd:AnyHolder */
class SOAP_CMAC onvifXsd__AnyHolder : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_onvifXsd__AnyHolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnyHolder() { onvifXsd__AnyHolder::soap_default(NULL); }
	virtual ~onvifXsd__AnyHolder() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceExtension
#define SOAP_TYPE_onvifXsd__VideoSourceExtension (439)
/* onvifXsd:VideoSourceExtension */
class SOAP_CMAC onvifXsd__VideoSourceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__ImagingSettings20 *Imaging;	/* optional element of type onvifXsd:ImagingSettings20 */
	class onvifXsd__VideoSourceExtension2 *Extension;	/* optional element of type onvifXsd:VideoSourceExtension2 */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceExtension() { onvifXsd__VideoSourceExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceExtension2
#define SOAP_TYPE_onvifXsd__VideoSourceExtension2 (440)
/* onvifXsd:VideoSourceExtension2 */
class SOAP_CMAC onvifXsd__VideoSourceExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceExtension2() { onvifXsd__VideoSourceExtension2::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Profile
#define SOAP_TYPE_onvifXsd__Profile (442)
/* onvifXsd:Profile */
class SOAP_CMAC onvifXsd__Profile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type onvifXsd:Name */
	class onvifXsd__VideoSourceConfiguration *VideoSourceConfiguration;	/* optional element of type onvifXsd:VideoSourceConfiguration */
	class onvifXsd__AudioSourceConfiguration *AudioSourceConfiguration;	/* optional element of type onvifXsd:AudioSourceConfiguration */
	class onvifXsd__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* optional element of type onvifXsd:VideoEncoderConfiguration */
	class onvifXsd__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type onvifXsd:AudioEncoderConfiguration */
	class onvifXsd__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* optional element of type onvifXsd:VideoAnalyticsConfiguration */
	class onvifXsd__PTZConfiguration *PTZConfiguration;	/* optional element of type onvifXsd:PTZConfiguration */
	class onvifXsd__MetadataConfiguration *MetadataConfiguration;	/* optional element of type onvifXsd:MetadataConfiguration */
	class onvifXsd__ProfileExtension *Extension;	/* optional element of type onvifXsd:ProfileExtension */
	std::string token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_onvifXsd__Profile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Profile() { onvifXsd__Profile::soap_default(NULL); }
	virtual ~onvifXsd__Profile() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ProfileExtension
#define SOAP_TYPE_onvifXsd__ProfileExtension (443)
/* onvifXsd:ProfileExtension */
class SOAP_CMAC onvifXsd__ProfileExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__AudioOutputConfiguration *AudioOutputConfiguration;	/* optional element of type onvifXsd:AudioOutputConfiguration */
	class onvifXsd__AudioDecoderConfiguration *AudioDecoderConfiguration;	/* optional element of type onvifXsd:AudioDecoderConfiguration */
	class onvifXsd__ProfileExtension2 *Extension;	/* optional element of type onvifXsd:ProfileExtension2 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_onvifXsd__ProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ProfileExtension() { onvifXsd__ProfileExtension::soap_default(NULL); }
	virtual ~onvifXsd__ProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ProfileExtension2
#define SOAP_TYPE_onvifXsd__ProfileExtension2 (444)
/* onvifXsd:ProfileExtension2 */
class SOAP_CMAC onvifXsd__ProfileExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_onvifXsd__ProfileExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ProfileExtension2() { onvifXsd__ProfileExtension2::soap_default(NULL); }
	virtual ~onvifXsd__ProfileExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ConfigurationEntity
#define SOAP_TYPE_onvifXsd__ConfigurationEntity (445)
/* onvifXsd:ConfigurationEntity */
class SOAP_CMAC onvifXsd__ConfigurationEntity : public xsd__anyType
{
public:
	std::string Name;	/* required element of type onvifXsd:Name */
	int UseCount;	/* required element of type xsd:int */
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_onvifXsd__ConfigurationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ConfigurationEntity() { onvifXsd__ConfigurationEntity::soap_default(NULL); }
	virtual ~onvifXsd__ConfigurationEntity() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceConfigurationExtension
#define SOAP_TYPE_onvifXsd__VideoSourceConfigurationExtension (447)
/* onvifXsd:VideoSourceConfigurationExtension */
class SOAP_CMAC onvifXsd__VideoSourceConfigurationExtension : public xsd__anyType
{
public:
	class onvifXsd__Rotate *Rotate;	/* optional element of type onvifXsd:Rotate */
	class onvifXsd__VideoSourceConfigurationExtension2 *Extension;	/* optional element of type onvifXsd:VideoSourceConfigurationExtension2 */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceConfigurationExtension() { onvifXsd__VideoSourceConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceConfigurationExtension2
#define SOAP_TYPE_onvifXsd__VideoSourceConfigurationExtension2 (448)
/* onvifXsd:VideoSourceConfigurationExtension2 */
class SOAP_CMAC onvifXsd__VideoSourceConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceConfigurationExtension2() { onvifXsd__VideoSourceConfigurationExtension2::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Rotate
#define SOAP_TYPE_onvifXsd__Rotate (449)
/* onvifXsd:Rotate */
class SOAP_CMAC onvifXsd__Rotate : public xsd__anyType
{
public:
	enum onvifXsd__RotateMode Mode;	/* required element of type onvifXsd:RotateMode */
	int *Degree;	/* optional element of type xsd:int */
	class onvifXsd__RotateExtension *Extension;	/* optional element of type onvifXsd:RotateExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_onvifXsd__Rotate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Rotate() { onvifXsd__Rotate::soap_default(NULL); }
	virtual ~onvifXsd__Rotate() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RotateExtension
#define SOAP_TYPE_onvifXsd__RotateExtension (450)
/* onvifXsd:RotateExtension */
class SOAP_CMAC onvifXsd__RotateExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_onvifXsd__RotateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RotateExtension() { onvifXsd__RotateExtension::soap_default(NULL); }
	virtual ~onvifXsd__RotateExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptions
#define SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptions (451)
/* onvifXsd:VideoSourceConfigurationOptions */
class SOAP_CMAC onvifXsd__VideoSourceConfigurationOptions : public xsd__anyType
{
public:
	onvifXsd__IntRectangleRange *BoundsRange;	/* required element of type onvifXsd:IntRectangleRange */
	std::vector<std::string >VideoSourceTokensAvailable;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__VideoSourceConfigurationOptionsExtension *Extension;	/* optional element of type onvifXsd:VideoSourceConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceConfigurationOptions() { onvifXsd__VideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptionsExtension (452)
/* onvifXsd:VideoSourceConfigurationOptionsExtension */
class SOAP_CMAC onvifXsd__VideoSourceConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__RotateOptions *Rotate;	/* optional element of type onvifXsd:RotateOptions */
	class onvifXsd__VideoSourceConfigurationOptionsExtension2 *Extension;	/* optional element of type onvifXsd:VideoSourceConfigurationOptionsExtension2 */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceConfigurationOptionsExtension() { onvifXsd__VideoSourceConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptionsExtension2 (453)
/* onvifXsd:VideoSourceConfigurationOptionsExtension2 */
class SOAP_CMAC onvifXsd__VideoSourceConfigurationOptionsExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceConfigurationOptionsExtension2() { onvifXsd__VideoSourceConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RotateOptions
#define SOAP_TYPE_onvifXsd__RotateOptions (454)
/* onvifXsd:RotateOptions */
class SOAP_CMAC onvifXsd__RotateOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__RotateMode >Mode;	/* required element of type onvifXsd:RotateMode */
	onvifXsd__IntList *DegreeList;	/* optional element of type onvifXsd:IntList */
	class onvifXsd__RotateOptionsExtension *Extension;	/* optional element of type onvifXsd:RotateOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_onvifXsd__RotateOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RotateOptions() { onvifXsd__RotateOptions::soap_default(NULL); }
	virtual ~onvifXsd__RotateOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RotateOptionsExtension
#define SOAP_TYPE_onvifXsd__RotateOptionsExtension (455)
/* onvifXsd:RotateOptionsExtension */
class SOAP_CMAC onvifXsd__RotateOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_onvifXsd__RotateOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RotateOptionsExtension() { onvifXsd__RotateOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__RotateOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoResolution
#define SOAP_TYPE_onvifXsd__VideoResolution (457)
/* onvifXsd:VideoResolution */
class SOAP_CMAC onvifXsd__VideoResolution : public xsd__anyType
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_onvifXsd__VideoResolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoResolution() { onvifXsd__VideoResolution::soap_default(NULL); }
	virtual ~onvifXsd__VideoResolution() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoRateControl
#define SOAP_TYPE_onvifXsd__VideoRateControl (458)
/* onvifXsd:VideoRateControl */
class SOAP_CMAC onvifXsd__VideoRateControl : public xsd__anyType
{
public:
	int FrameRateLimit;	/* required element of type xsd:int */
	int EncodingInterval;	/* required element of type xsd:int */
	int BitrateLimit;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_onvifXsd__VideoRateControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoRateControl() { onvifXsd__VideoRateControl::soap_default(NULL); }
	virtual ~onvifXsd__VideoRateControl() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Mpeg4Configuration
#define SOAP_TYPE_onvifXsd__Mpeg4Configuration (459)
/* onvifXsd:Mpeg4Configuration */
class SOAP_CMAC onvifXsd__Mpeg4Configuration : public xsd__anyType
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum onvifXsd__Mpeg4Profile Mpeg4Profile;	/* required element of type onvifXsd:Mpeg4Profile */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_onvifXsd__Mpeg4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Mpeg4Configuration() { onvifXsd__Mpeg4Configuration::soap_default(NULL); }
	virtual ~onvifXsd__Mpeg4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__H264Configuration
#define SOAP_TYPE_onvifXsd__H264Configuration (460)
/* onvifXsd:H264Configuration */
class SOAP_CMAC onvifXsd__H264Configuration : public xsd__anyType
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum onvifXsd__H264Profile H264Profile;	/* required element of type onvifXsd:H264Profile */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_onvifXsd__H264Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__H264Configuration() { onvifXsd__H264Configuration::soap_default(NULL); }
	virtual ~onvifXsd__H264Configuration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoEncoderConfigurationOptions
#define SOAP_TYPE_onvifXsd__VideoEncoderConfigurationOptions (461)
/* onvifXsd:VideoEncoderConfigurationOptions */
class SOAP_CMAC onvifXsd__VideoEncoderConfigurationOptions : public xsd__anyType
{
public:
	onvifXsd__IntRange *QualityRange;	/* required element of type onvifXsd:IntRange */
	class onvifXsd__JpegOptions *JPEG;	/* optional element of type onvifXsd:JpegOptions */
	class onvifXsd__Mpeg4Options *MPEG4;	/* optional element of type onvifXsd:Mpeg4Options */
	class onvifXsd__H264Options *H264;	/* optional element of type onvifXsd:H264Options */
	class onvifXsd__VideoEncoderOptionsExtension *Extension;	/* optional element of type onvifXsd:VideoEncoderOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_onvifXsd__VideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoEncoderConfigurationOptions() { onvifXsd__VideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__VideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoEncoderOptionsExtension
#define SOAP_TYPE_onvifXsd__VideoEncoderOptionsExtension (462)
/* onvifXsd:VideoEncoderOptionsExtension */
class SOAP_CMAC onvifXsd__VideoEncoderOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__JpegOptions2 *JPEG;	/* optional element of type onvifXsd:JpegOptions2 */
	class onvifXsd__Mpeg4Options2 *MPEG4;	/* optional element of type onvifXsd:Mpeg4Options2 */
	class onvifXsd__H264Options2 *H264;	/* optional element of type onvifXsd:H264Options2 */
	class onvifXsd__VideoEncoderOptionsExtension2 *Extension;	/* optional element of type onvifXsd:VideoEncoderOptionsExtension2 */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_onvifXsd__VideoEncoderOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoEncoderOptionsExtension() { onvifXsd__VideoEncoderOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoEncoderOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoEncoderOptionsExtension2
#define SOAP_TYPE_onvifXsd__VideoEncoderOptionsExtension2 (463)
/* onvifXsd:VideoEncoderOptionsExtension2 */
class SOAP_CMAC onvifXsd__VideoEncoderOptionsExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_onvifXsd__VideoEncoderOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoEncoderOptionsExtension2() { onvifXsd__VideoEncoderOptionsExtension2::soap_default(NULL); }
	virtual ~onvifXsd__VideoEncoderOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__JpegOptions
#define SOAP_TYPE_onvifXsd__JpegOptions (464)
/* onvifXsd:JpegOptions */
class SOAP_CMAC onvifXsd__JpegOptions : public xsd__anyType
{
public:
	std::vector<onvifXsd__VideoResolution * >ResolutionsAvailable;	/* required element of type onvifXsd:VideoResolution */
	onvifXsd__IntRange *FrameRateRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *EncodingIntervalRange;	/* required element of type onvifXsd:IntRange */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_onvifXsd__JpegOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__JpegOptions() { onvifXsd__JpegOptions::soap_default(NULL); }
	virtual ~onvifXsd__JpegOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Mpeg4Options
#define SOAP_TYPE_onvifXsd__Mpeg4Options (466)
/* onvifXsd:Mpeg4Options */
class SOAP_CMAC onvifXsd__Mpeg4Options : public xsd__anyType
{
public:
	std::vector<onvifXsd__VideoResolution * >ResolutionsAvailable;	/* required element of type onvifXsd:VideoResolution */
	onvifXsd__IntRange *GovLengthRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *FrameRateRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *EncodingIntervalRange;	/* required element of type onvifXsd:IntRange */
	std::vector<enum onvifXsd__Mpeg4Profile >Mpeg4ProfilesSupported;	/* required element of type onvifXsd:Mpeg4Profile */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_onvifXsd__Mpeg4Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Mpeg4Options() { onvifXsd__Mpeg4Options::soap_default(NULL); }
	virtual ~onvifXsd__Mpeg4Options() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__H264Options
#define SOAP_TYPE_onvifXsd__H264Options (468)
/* onvifXsd:H264Options */
class SOAP_CMAC onvifXsd__H264Options : public xsd__anyType
{
public:
	std::vector<onvifXsd__VideoResolution * >ResolutionsAvailable;	/* required element of type onvifXsd:VideoResolution */
	onvifXsd__IntRange *GovLengthRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *FrameRateRange;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *EncodingIntervalRange;	/* required element of type onvifXsd:IntRange */
	std::vector<enum onvifXsd__H264Profile >H264ProfilesSupported;	/* required element of type onvifXsd:H264Profile */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_onvifXsd__H264Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__H264Options() { onvifXsd__H264Options::soap_default(NULL); }
	virtual ~onvifXsd__H264Options() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioSourceConfigurationOptions
#define SOAP_TYPE_onvifXsd__AudioSourceConfigurationOptions (471)
/* onvifXsd:AudioSourceConfigurationOptions */
class SOAP_CMAC onvifXsd__AudioSourceConfigurationOptions : public xsd__anyType
{
public:
	std::vector<std::string >InputTokensAvailable;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__AudioSourceOptionsExtension *Extension;	/* optional element of type onvifXsd:AudioSourceOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_onvifXsd__AudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioSourceConfigurationOptions() { onvifXsd__AudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__AudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioSourceOptionsExtension
#define SOAP_TYPE_onvifXsd__AudioSourceOptionsExtension (472)
/* onvifXsd:AudioSourceOptionsExtension */
class SOAP_CMAC onvifXsd__AudioSourceOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_onvifXsd__AudioSourceOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioSourceOptionsExtension() { onvifXsd__AudioSourceOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__AudioSourceOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioEncoderConfigurationOptions
#define SOAP_TYPE_onvifXsd__AudioEncoderConfigurationOptions (474)
/* onvifXsd:AudioEncoderConfigurationOptions */
class SOAP_CMAC onvifXsd__AudioEncoderConfigurationOptions : public xsd__anyType
{
public:
	std::vector<class onvifXsd__AudioEncoderConfigurationOption * >Options;	/* optional element of type onvifXsd:AudioEncoderConfigurationOption */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_onvifXsd__AudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioEncoderConfigurationOptions() { onvifXsd__AudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__AudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioEncoderConfigurationOption
#define SOAP_TYPE_onvifXsd__AudioEncoderConfigurationOption (475)
/* onvifXsd:AudioEncoderConfigurationOption */
class SOAP_CMAC onvifXsd__AudioEncoderConfigurationOption : public xsd__anyType
{
public:
	enum onvifXsd__AudioEncoding Encoding;	/* required element of type onvifXsd:AudioEncoding */
	onvifXsd__IntList *BitrateList;	/* required element of type onvifXsd:IntList */
	onvifXsd__IntList *SampleRateList;	/* required element of type onvifXsd:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_onvifXsd__AudioEncoderConfigurationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioEncoderConfigurationOption() { onvifXsd__AudioEncoderConfigurationOption::soap_default(NULL); }
	virtual ~onvifXsd__AudioEncoderConfigurationOption() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataConfigurationExtension
#define SOAP_TYPE_onvifXsd__MetadataConfigurationExtension (478)
/* onvifXsd:MetadataConfigurationExtension */
class SOAP_CMAC onvifXsd__MetadataConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_onvifXsd__MetadataConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataConfigurationExtension() { onvifXsd__MetadataConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__MetadataConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZFilter
#define SOAP_TYPE_onvifXsd__PTZFilter (479)
/* onvifXsd:PTZFilter */
class SOAP_CMAC onvifXsd__PTZFilter : public xsd__anyType
{
public:
	bool Status;	/* required element of type xsd:boolean */
	bool Position;	/* required element of type xsd:boolean */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_onvifXsd__PTZFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZFilter() { onvifXsd__PTZFilter::soap_default(NULL); }
	virtual ~onvifXsd__PTZFilter() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__onvifXsd__EventSubscription_SubscriptionPolicy (1457)
/* onvifXsd:EventSubscription-SubscriptionPolicy */
class SOAP_CMAC _onvifXsd__EventSubscription_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1457; } /* = unique id SOAP_TYPE__onvifXsd__EventSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__EventSubscription_SubscriptionPolicy() { _onvifXsd__EventSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_onvifXsd__EventSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EventSubscription
#define SOAP_TYPE_onvifXsd__EventSubscription (480)
/* onvifXsd:EventSubscription */
class SOAP_CMAC onvifXsd__EventSubscription : public xsd__anyType
{
public:
	oasisWsnB2__FilterType *Filter;	/* optional element of type oasisWsnB2:FilterType */
	_onvifXsd__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type onvifXsd:EventSubscription-SubscriptionPolicy */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_onvifXsd__EventSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EventSubscription() { onvifXsd__EventSubscription::soap_default(NULL); }
	virtual ~onvifXsd__EventSubscription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataConfigurationOptions
#define SOAP_TYPE_onvifXsd__MetadataConfigurationOptions (481)
/* onvifXsd:MetadataConfigurationOptions */
class SOAP_CMAC onvifXsd__MetadataConfigurationOptions : public xsd__anyType
{
public:
	class onvifXsd__PTZStatusFilterOptions *PTZStatusFilterOptions;	/* required element of type onvifXsd:PTZStatusFilterOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_onvifXsd__MetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataConfigurationOptions() { onvifXsd__MetadataConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__MetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZStatusFilterOptions
#define SOAP_TYPE_onvifXsd__PTZStatusFilterOptions (482)
/* onvifXsd:PTZStatusFilterOptions */
class SOAP_CMAC onvifXsd__PTZStatusFilterOptions : public xsd__anyType
{
public:
	bool PanTiltStatusSupported;	/* required element of type xsd:boolean */
	bool ZoomStatusSupported;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	bool *PanTiltPositionSupported;	/* optional element of type xsd:boolean */
	bool *ZoomPositionSupported;	/* optional element of type xsd:boolean */
	class onvifXsd__PTZStatusFilterOptionsExtension *Extension;	/* optional element of type onvifXsd:PTZStatusFilterOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_onvifXsd__PTZStatusFilterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZStatusFilterOptions() { onvifXsd__PTZStatusFilterOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTZStatusFilterOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_onvifXsd__PTZStatusFilterOptionsExtension (483)
/* onvifXsd:PTZStatusFilterOptionsExtension */
class SOAP_CMAC onvifXsd__PTZStatusFilterOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_onvifXsd__PTZStatusFilterOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZStatusFilterOptionsExtension() { onvifXsd__PTZStatusFilterOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZStatusFilterOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoOutputExtension
#define SOAP_TYPE_onvifXsd__VideoOutputExtension (485)
/* onvifXsd:VideoOutputExtension */
class SOAP_CMAC onvifXsd__VideoOutputExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_onvifXsd__VideoOutputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoOutputExtension() { onvifXsd__VideoOutputExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoOutputExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoOutputConfigurationOptions
#define SOAP_TYPE_onvifXsd__VideoOutputConfigurationOptions (487)
/* onvifXsd:VideoOutputConfigurationOptions */
class SOAP_CMAC onvifXsd__VideoOutputConfigurationOptions : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_onvifXsd__VideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoOutputConfigurationOptions() { onvifXsd__VideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__VideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoDecoderConfigurationOptions
#define SOAP_TYPE_onvifXsd__VideoDecoderConfigurationOptions (488)
/* onvifXsd:VideoDecoderConfigurationOptions */
class SOAP_CMAC onvifXsd__VideoDecoderConfigurationOptions : public xsd__anyType
{
public:
	class onvifXsd__JpegDecOptions *JpegDecOptions;	/* optional element of type onvifXsd:JpegDecOptions */
	class onvifXsd__H264DecOptions *H264DecOptions;	/* optional element of type onvifXsd:H264DecOptions */
	class onvifXsd__Mpeg4DecOptions *Mpeg4DecOptions;	/* optional element of type onvifXsd:Mpeg4DecOptions */
	class onvifXsd__VideoDecoderConfigurationOptionsExtension *Extension;	/* optional element of type onvifXsd:VideoDecoderConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_onvifXsd__VideoDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoDecoderConfigurationOptions() { onvifXsd__VideoDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__VideoDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__H264DecOptions
#define SOAP_TYPE_onvifXsd__H264DecOptions (489)
/* onvifXsd:H264DecOptions */
class SOAP_CMAC onvifXsd__H264DecOptions : public xsd__anyType
{
public:
	std::vector<onvifXsd__VideoResolution * >ResolutionsAvailable;	/* required element of type onvifXsd:VideoResolution */
	std::vector<enum onvifXsd__H264Profile >SupportedH264Profiles;	/* required element of type onvifXsd:H264Profile */
	onvifXsd__IntRange *SupportedInputBitrate;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *SupportedFrameRate;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_onvifXsd__H264DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__H264DecOptions() { onvifXsd__H264DecOptions::soap_default(NULL); }
	virtual ~onvifXsd__H264DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__JpegDecOptions
#define SOAP_TYPE_onvifXsd__JpegDecOptions (490)
/* onvifXsd:JpegDecOptions */
class SOAP_CMAC onvifXsd__JpegDecOptions : public xsd__anyType
{
public:
	std::vector<onvifXsd__VideoResolution * >ResolutionsAvailable;	/* required element of type onvifXsd:VideoResolution */
	onvifXsd__IntRange *SupportedInputBitrate;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *SupportedFrameRate;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_onvifXsd__JpegDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__JpegDecOptions() { onvifXsd__JpegDecOptions::soap_default(NULL); }
	virtual ~onvifXsd__JpegDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Mpeg4DecOptions
#define SOAP_TYPE_onvifXsd__Mpeg4DecOptions (491)
/* onvifXsd:Mpeg4DecOptions */
class SOAP_CMAC onvifXsd__Mpeg4DecOptions : public xsd__anyType
{
public:
	std::vector<onvifXsd__VideoResolution * >ResolutionsAvailable;	/* required element of type onvifXsd:VideoResolution */
	std::vector<enum onvifXsd__Mpeg4Profile >SupportedMpeg4Profiles;	/* required element of type onvifXsd:Mpeg4Profile */
	onvifXsd__IntRange *SupportedInputBitrate;	/* required element of type onvifXsd:IntRange */
	onvifXsd__IntRange *SupportedFrameRate;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_onvifXsd__Mpeg4DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Mpeg4DecOptions() { onvifXsd__Mpeg4DecOptions::soap_default(NULL); }
	virtual ~onvifXsd__Mpeg4DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_onvifXsd__VideoDecoderConfigurationOptionsExtension (492)
/* onvifXsd:VideoDecoderConfigurationOptionsExtension */
class SOAP_CMAC onvifXsd__VideoDecoderConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_onvifXsd__VideoDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoDecoderConfigurationOptionsExtension() { onvifXsd__VideoDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioOutputConfigurationOptions
#define SOAP_TYPE_onvifXsd__AudioOutputConfigurationOptions (495)
/* onvifXsd:AudioOutputConfigurationOptions */
class SOAP_CMAC onvifXsd__AudioOutputConfigurationOptions : public xsd__anyType
{
public:
	std::vector<std::string >OutputTokensAvailable;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<std::string >SendPrimacyOptions;	/* optional element of type xsd:anyURI */
	onvifXsd__IntRange *OutputLevelRange;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_onvifXsd__AudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioOutputConfigurationOptions() { onvifXsd__AudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__AudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioDecoderConfigurationOptions
#define SOAP_TYPE_onvifXsd__AudioDecoderConfigurationOptions (497)
/* onvifXsd:AudioDecoderConfigurationOptions */
class SOAP_CMAC onvifXsd__AudioDecoderConfigurationOptions : public xsd__anyType
{
public:
	class onvifXsd__AACDecOptions *AACDecOptions;	/* optional element of type onvifXsd:AACDecOptions */
	class onvifXsd__G711DecOptions *G711DecOptions;	/* optional element of type onvifXsd:G711DecOptions */
	class onvifXsd__G726DecOptions *G726DecOptions;	/* optional element of type onvifXsd:G726DecOptions */
	class onvifXsd__AudioDecoderConfigurationOptionsExtension *Extension;	/* optional element of type onvifXsd:AudioDecoderConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_onvifXsd__AudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioDecoderConfigurationOptions() { onvifXsd__AudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__AudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__G711DecOptions
#define SOAP_TYPE_onvifXsd__G711DecOptions (498)
/* onvifXsd:G711DecOptions */
class SOAP_CMAC onvifXsd__G711DecOptions : public xsd__anyType
{
public:
	onvifXsd__IntList *Bitrate;	/* required element of type onvifXsd:IntList */
	onvifXsd__IntList *SampleRateRange;	/* required element of type onvifXsd:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_onvifXsd__G711DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__G711DecOptions() { onvifXsd__G711DecOptions::soap_default(NULL); }
	virtual ~onvifXsd__G711DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AACDecOptions
#define SOAP_TYPE_onvifXsd__AACDecOptions (499)
/* onvifXsd:AACDecOptions */
class SOAP_CMAC onvifXsd__AACDecOptions : public xsd__anyType
{
public:
	onvifXsd__IntList *Bitrate;	/* required element of type onvifXsd:IntList */
	onvifXsd__IntList *SampleRateRange;	/* required element of type onvifXsd:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_onvifXsd__AACDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AACDecOptions() { onvifXsd__AACDecOptions::soap_default(NULL); }
	virtual ~onvifXsd__AACDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__G726DecOptions
#define SOAP_TYPE_onvifXsd__G726DecOptions (500)
/* onvifXsd:G726DecOptions */
class SOAP_CMAC onvifXsd__G726DecOptions : public xsd__anyType
{
public:
	onvifXsd__IntList *Bitrate;	/* required element of type onvifXsd:IntList */
	onvifXsd__IntList *SampleRateRange;	/* required element of type onvifXsd:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_onvifXsd__G726DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__G726DecOptions() { onvifXsd__G726DecOptions::soap_default(NULL); }
	virtual ~onvifXsd__G726DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_onvifXsd__AudioDecoderConfigurationOptionsExtension (501)
/* onvifXsd:AudioDecoderConfigurationOptionsExtension */
class SOAP_CMAC onvifXsd__AudioDecoderConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_onvifXsd__AudioDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioDecoderConfigurationOptionsExtension() { onvifXsd__AudioDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__AudioDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MulticastConfiguration
#define SOAP_TYPE_onvifXsd__MulticastConfiguration (502)
/* onvifXsd:MulticastConfiguration */
class SOAP_CMAC onvifXsd__MulticastConfiguration : public xsd__anyType
{
public:
	onvifXsd__IPAddress *Address;	/* required element of type onvifXsd:IPAddress */
	int Port;	/* required element of type xsd:int */
	int TTL;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_onvifXsd__MulticastConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MulticastConfiguration() { onvifXsd__MulticastConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__MulticastConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__StreamSetup
#define SOAP_TYPE_onvifXsd__StreamSetup (503)
/* onvifXsd:StreamSetup */
class SOAP_CMAC onvifXsd__StreamSetup : public xsd__anyType
{
public:
	enum onvifXsd__StreamType Stream;	/* required element of type onvifXsd:StreamType */
	class onvifXsd__Transport *Transport;	/* required element of type onvifXsd:Transport */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_onvifXsd__StreamSetup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__StreamSetup() { onvifXsd__StreamSetup::soap_default(NULL); }
	virtual ~onvifXsd__StreamSetup() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Transport
#define SOAP_TYPE_onvifXsd__Transport (504)
/* onvifXsd:Transport */
class SOAP_CMAC onvifXsd__Transport : public xsd__anyType
{
public:
	enum onvifXsd__TransportProtocol Protocol;	/* required element of type onvifXsd:TransportProtocol */
	onvifXsd__Transport *Tunnel;	/* optional element of type onvifXsd:Transport */
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_onvifXsd__Transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Transport() { onvifXsd__Transport::soap_default(NULL); }
	virtual ~onvifXsd__Transport() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MediaUri
#define SOAP_TYPE_onvifXsd__MediaUri (505)
/* onvifXsd:MediaUri */
class SOAP_CMAC onvifXsd__MediaUri : public xsd__anyType
{
public:
	std::string Uri;	/* required element of type xsd:anyURI */
	bool InvalidAfterConnect;	/* required element of type xsd:boolean */
	bool InvalidAfterReboot;	/* required element of type xsd:boolean */
	std::string Timeout;	/* required element of type xsd:duration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_onvifXsd__MediaUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MediaUri() { onvifXsd__MediaUri::soap_default(NULL); }
	virtual ~onvifXsd__MediaUri() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Scope
#define SOAP_TYPE_onvifXsd__Scope (506)
/* onvifXsd:Scope */
class SOAP_CMAC onvifXsd__Scope : public xsd__anyType
{
public:
	enum onvifXsd__ScopeDefinition ScopeDef;	/* required element of type onvifXsd:ScopeDefinition */
	std::string ScopeItem;	/* required element of type xsd:anyURI */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_onvifXsd__Scope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Scope() { onvifXsd__Scope::soap_default(NULL); }
	virtual ~onvifXsd__Scope() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceExtension
#define SOAP_TYPE_onvifXsd__NetworkInterfaceExtension (508)
/* onvifXsd:NetworkInterfaceExtension */
class SOAP_CMAC onvifXsd__NetworkInterfaceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int InterfaceType;	/* required element of type onvifXsd:IANA-IfTypes */
	std::vector<class onvifXsd__Dot3Configuration * >Dot3;	/* optional element of type onvifXsd:Dot3Configuration */
	std::vector<class onvifXsd__Dot11Configuration * >Dot11;	/* optional element of type onvifXsd:Dot11Configuration */
	class onvifXsd__NetworkInterfaceExtension2 *Extension;	/* optional element of type onvifXsd:NetworkInterfaceExtension2 */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceExtension() { onvifXsd__NetworkInterfaceExtension::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot3Configuration
#define SOAP_TYPE_onvifXsd__Dot3Configuration (509)
/* onvifXsd:Dot3Configuration */
class SOAP_CMAC onvifXsd__Dot3Configuration : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_onvifXsd__Dot3Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot3Configuration() { onvifXsd__Dot3Configuration::soap_default(NULL); }
	virtual ~onvifXsd__Dot3Configuration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceExtension2
#define SOAP_TYPE_onvifXsd__NetworkInterfaceExtension2 (510)
/* onvifXsd:NetworkInterfaceExtension2 */
class SOAP_CMAC onvifXsd__NetworkInterfaceExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceExtension2() { onvifXsd__NetworkInterfaceExtension2::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceLink
#define SOAP_TYPE_onvifXsd__NetworkInterfaceLink (511)
/* onvifXsd:NetworkInterfaceLink */
class SOAP_CMAC onvifXsd__NetworkInterfaceLink : public xsd__anyType
{
public:
	class onvifXsd__NetworkInterfaceConnectionSetting *AdminSettings;	/* required element of type onvifXsd:NetworkInterfaceConnectionSetting */
	onvifXsd__NetworkInterfaceConnectionSetting *OperSettings;	/* required element of type onvifXsd:NetworkInterfaceConnectionSetting */
	int InterfaceType;	/* required element of type onvifXsd:IANA-IfTypes */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceLink() { onvifXsd__NetworkInterfaceLink::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceLink() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_onvifXsd__NetworkInterfaceConnectionSetting (512)
/* onvifXsd:NetworkInterfaceConnectionSetting */
class SOAP_CMAC onvifXsd__NetworkInterfaceConnectionSetting : public xsd__anyType
{
public:
	bool AutoNegotiation;	/* required element of type xsd:boolean */
	int Speed;	/* required element of type xsd:int */
	enum onvifXsd__Duplex Duplex;	/* required element of type onvifXsd:Duplex */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceConnectionSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceConnectionSetting() { onvifXsd__NetworkInterfaceConnectionSetting::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceConnectionSetting() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceInfo
#define SOAP_TYPE_onvifXsd__NetworkInterfaceInfo (513)
/* onvifXsd:NetworkInterfaceInfo */
class SOAP_CMAC onvifXsd__NetworkInterfaceInfo : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	std::string HwAddress;	/* required element of type onvifXsd:HwAddress */
	int *MTU;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceInfo() { onvifXsd__NetworkInterfaceInfo::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceInfo() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6NetworkInterface
#define SOAP_TYPE_onvifXsd__IPv6NetworkInterface (514)
/* onvifXsd:IPv6NetworkInterface */
class SOAP_CMAC onvifXsd__IPv6NetworkInterface : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class onvifXsd__IPv6Configuration *Config;	/* optional element of type onvifXsd:IPv6Configuration */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_onvifXsd__IPv6NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv6NetworkInterface() { onvifXsd__IPv6NetworkInterface::soap_default(NULL); }
	virtual ~onvifXsd__IPv6NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv4NetworkInterface
#define SOAP_TYPE_onvifXsd__IPv4NetworkInterface (515)
/* onvifXsd:IPv4NetworkInterface */
class SOAP_CMAC onvifXsd__IPv4NetworkInterface : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class onvifXsd__IPv4Configuration *Config;	/* required element of type onvifXsd:IPv4Configuration */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_onvifXsd__IPv4NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv4NetworkInterface() { onvifXsd__IPv4NetworkInterface::soap_default(NULL); }
	virtual ~onvifXsd__IPv4NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv4Configuration
#define SOAP_TYPE_onvifXsd__IPv4Configuration (516)
/* onvifXsd:IPv4Configuration */
class SOAP_CMAC onvifXsd__IPv4Configuration : public xsd__anyType
{
public:
	std::vector<class onvifXsd__PrefixedIPv4Address * >Manual;	/* optional element of type onvifXsd:PrefixedIPv4Address */
	onvifXsd__PrefixedIPv4Address *LinkLocal;	/* optional element of type onvifXsd:PrefixedIPv4Address */
	onvifXsd__PrefixedIPv4Address *FromDHCP;	/* optional element of type onvifXsd:PrefixedIPv4Address */
	bool DHCP;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_onvifXsd__IPv4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv4Configuration() { onvifXsd__IPv4Configuration::soap_default(NULL); }
	virtual ~onvifXsd__IPv4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6Configuration
#define SOAP_TYPE_onvifXsd__IPv6Configuration (517)
/* onvifXsd:IPv6Configuration */
class SOAP_CMAC onvifXsd__IPv6Configuration : public xsd__anyType
{
public:
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	enum onvifXsd__IPv6DHCPConfiguration DHCP;	/* required element of type onvifXsd:IPv6DHCPConfiguration */
	std::vector<class onvifXsd__PrefixedIPv6Address * >Manual;	/* optional element of type onvifXsd:PrefixedIPv6Address */
	std::vector<onvifXsd__PrefixedIPv6Address * >LinkLocal;	/* optional element of type onvifXsd:PrefixedIPv6Address */
	std::vector<onvifXsd__PrefixedIPv6Address * >FromDHCP;	/* optional element of type onvifXsd:PrefixedIPv6Address */
	std::vector<onvifXsd__PrefixedIPv6Address * >FromRA;	/* optional element of type onvifXsd:PrefixedIPv6Address */
	class onvifXsd__IPv6ConfigurationExtension *Extension;	/* optional element of type onvifXsd:IPv6ConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_onvifXsd__IPv6Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv6Configuration() { onvifXsd__IPv6Configuration::soap_default(NULL); }
	virtual ~onvifXsd__IPv6Configuration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6ConfigurationExtension
#define SOAP_TYPE_onvifXsd__IPv6ConfigurationExtension (518)
/* onvifXsd:IPv6ConfigurationExtension */
class SOAP_CMAC onvifXsd__IPv6ConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_onvifXsd__IPv6ConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv6ConfigurationExtension() { onvifXsd__IPv6ConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__IPv6ConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkProtocol
#define SOAP_TYPE_onvifXsd__NetworkProtocol (519)
/* onvifXsd:NetworkProtocol */
class SOAP_CMAC onvifXsd__NetworkProtocol : public xsd__anyType
{
public:
	enum onvifXsd__NetworkProtocolType Name;	/* required element of type onvifXsd:NetworkProtocolType */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<int >Port;	/* required element of type xsd:int */
	class onvifXsd__NetworkProtocolExtension *Extension;	/* optional element of type onvifXsd:NetworkProtocolExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_onvifXsd__NetworkProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkProtocol() { onvifXsd__NetworkProtocol::soap_default(NULL); }
	virtual ~onvifXsd__NetworkProtocol() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkProtocolExtension
#define SOAP_TYPE_onvifXsd__NetworkProtocolExtension (520)
/* onvifXsd:NetworkProtocolExtension */
class SOAP_CMAC onvifXsd__NetworkProtocolExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_onvifXsd__NetworkProtocolExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkProtocolExtension() { onvifXsd__NetworkProtocolExtension::soap_default(NULL); }
	virtual ~onvifXsd__NetworkProtocolExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkHost
#define SOAP_TYPE_onvifXsd__NetworkHost (521)
/* onvifXsd:NetworkHost */
class SOAP_CMAC onvifXsd__NetworkHost : public xsd__anyType
{
public:
	enum onvifXsd__NetworkHostType Type;	/* required element of type onvifXsd:NetworkHostType */
	std::string *IPv4Address;	/* optional element of type onvifXsd:IPv4Address */
	std::string *IPv6Address;	/* optional element of type onvifXsd:IPv6Address */
	std::string *DNSname;	/* optional element of type onvifXsd:DNSName */
	class onvifXsd__NetworkHostExtension *Extension;	/* optional element of type onvifXsd:NetworkHostExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_onvifXsd__NetworkHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkHost() { onvifXsd__NetworkHost::soap_default(NULL); }
	virtual ~onvifXsd__NetworkHost() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkHostExtension
#define SOAP_TYPE_onvifXsd__NetworkHostExtension (522)
/* onvifXsd:NetworkHostExtension */
class SOAP_CMAC onvifXsd__NetworkHostExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_onvifXsd__NetworkHostExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkHostExtension() { onvifXsd__NetworkHostExtension::soap_default(NULL); }
	virtual ~onvifXsd__NetworkHostExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPAddress
#define SOAP_TYPE_onvifXsd__IPAddress (523)
/* onvifXsd:IPAddress */
class SOAP_CMAC onvifXsd__IPAddress : public xsd__anyType
{
public:
	enum onvifXsd__IPType Type;	/* required element of type onvifXsd:IPType */
	std::string *IPv4Address;	/* optional element of type onvifXsd:IPv4Address */
	std::string *IPv6Address;	/* optional element of type onvifXsd:IPv6Address */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_onvifXsd__IPAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPAddress() { onvifXsd__IPAddress::soap_default(NULL); }
	virtual ~onvifXsd__IPAddress() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PrefixedIPv4Address
#define SOAP_TYPE_onvifXsd__PrefixedIPv4Address (524)
/* onvifXsd:PrefixedIPv4Address */
class SOAP_CMAC onvifXsd__PrefixedIPv4Address : public xsd__anyType
{
public:
	std::string Address;	/* required element of type onvifXsd:IPv4Address */
	int PrefixLength;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_onvifXsd__PrefixedIPv4Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PrefixedIPv4Address() { onvifXsd__PrefixedIPv4Address::soap_default(NULL); }
	virtual ~onvifXsd__PrefixedIPv4Address() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PrefixedIPv6Address
#define SOAP_TYPE_onvifXsd__PrefixedIPv6Address (525)
/* onvifXsd:PrefixedIPv6Address */
class SOAP_CMAC onvifXsd__PrefixedIPv6Address : public xsd__anyType
{
public:
	std::string Address;	/* required element of type onvifXsd:IPv6Address */
	int PrefixLength;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_onvifXsd__PrefixedIPv6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PrefixedIPv6Address() { onvifXsd__PrefixedIPv6Address::soap_default(NULL); }
	virtual ~onvifXsd__PrefixedIPv6Address() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__HostnameInformation
#define SOAP_TYPE_onvifXsd__HostnameInformation (526)
/* onvifXsd:HostnameInformation */
class SOAP_CMAC onvifXsd__HostnameInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::string *Name;	/* optional element of type xsd:token */
	class onvifXsd__HostnameInformationExtension *Extension;	/* optional element of type onvifXsd:HostnameInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_onvifXsd__HostnameInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__HostnameInformation() { onvifXsd__HostnameInformation::soap_default(NULL); }
	virtual ~onvifXsd__HostnameInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__HostnameInformationExtension
#define SOAP_TYPE_onvifXsd__HostnameInformationExtension (527)
/* onvifXsd:HostnameInformationExtension */
class SOAP_CMAC onvifXsd__HostnameInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_onvifXsd__HostnameInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__HostnameInformationExtension() { onvifXsd__HostnameInformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__HostnameInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DNSInformation
#define SOAP_TYPE_onvifXsd__DNSInformation (528)
/* onvifXsd:DNSInformation */
class SOAP_CMAC onvifXsd__DNSInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<onvifXsd__IPAddress * >DNSFromDHCP;	/* optional element of type onvifXsd:IPAddress */
	std::vector<onvifXsd__IPAddress * >DNSManual;	/* optional element of type onvifXsd:IPAddress */
	class onvifXsd__DNSInformationExtension *Extension;	/* optional element of type onvifXsd:DNSInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_onvifXsd__DNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DNSInformation() { onvifXsd__DNSInformation::soap_default(NULL); }
	virtual ~onvifXsd__DNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DNSInformationExtension
#define SOAP_TYPE_onvifXsd__DNSInformationExtension (529)
/* onvifXsd:DNSInformationExtension */
class SOAP_CMAC onvifXsd__DNSInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_onvifXsd__DNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DNSInformationExtension() { onvifXsd__DNSInformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__DNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NTPInformation
#define SOAP_TYPE_onvifXsd__NTPInformation (530)
/* onvifXsd:NTPInformation */
class SOAP_CMAC onvifXsd__NTPInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<onvifXsd__NetworkHost * >NTPFromDHCP;	/* optional element of type onvifXsd:NetworkHost */
	std::vector<onvifXsd__NetworkHost * >NTPManual;	/* optional element of type onvifXsd:NetworkHost */
	class onvifXsd__NTPInformationExtension *Extension;	/* optional element of type onvifXsd:NTPInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_onvifXsd__NTPInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NTPInformation() { onvifXsd__NTPInformation::soap_default(NULL); }
	virtual ~onvifXsd__NTPInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NTPInformationExtension
#define SOAP_TYPE_onvifXsd__NTPInformationExtension (531)
/* onvifXsd:NTPInformationExtension */
class SOAP_CMAC onvifXsd__NTPInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_onvifXsd__NTPInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NTPInformationExtension() { onvifXsd__NTPInformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__NTPInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DynamicDNSInformation
#define SOAP_TYPE_onvifXsd__DynamicDNSInformation (532)
/* onvifXsd:DynamicDNSInformation */
class SOAP_CMAC onvifXsd__DynamicDNSInformation : public xsd__anyType
{
public:
	enum onvifXsd__DynamicDNSType Type;	/* required element of type onvifXsd:DynamicDNSType */
	std::string *Name;	/* optional element of type onvifXsd:DNSName */
	std::string *TTL;	/* optional element of type xsd:duration */
	class onvifXsd__DynamicDNSInformationExtension *Extension;	/* optional element of type onvifXsd:DynamicDNSInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_onvifXsd__DynamicDNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DynamicDNSInformation() { onvifXsd__DynamicDNSInformation::soap_default(NULL); }
	virtual ~onvifXsd__DynamicDNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DynamicDNSInformationExtension
#define SOAP_TYPE_onvifXsd__DynamicDNSInformationExtension (533)
/* onvifXsd:DynamicDNSInformationExtension */
class SOAP_CMAC onvifXsd__DynamicDNSInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_onvifXsd__DynamicDNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DynamicDNSInformationExtension() { onvifXsd__DynamicDNSInformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__DynamicDNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfiguration (534)
/* onvifXsd:NetworkInterfaceSetConfiguration */
class SOAP_CMAC onvifXsd__NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	onvifXsd__NetworkInterfaceConnectionSetting *Link;	/* optional element of type onvifXsd:NetworkInterfaceConnectionSetting */
	int *MTU;	/* optional element of type xsd:int */
	class onvifXsd__IPv4NetworkInterfaceSetConfiguration *IPv4;	/* optional element of type onvifXsd:IPv4NetworkInterfaceSetConfiguration */
	class onvifXsd__IPv6NetworkInterfaceSetConfiguration *IPv6;	/* optional element of type onvifXsd:IPv6NetworkInterfaceSetConfiguration */
	class onvifXsd__NetworkInterfaceSetConfigurationExtension *Extension;	/* optional element of type onvifXsd:NetworkInterfaceSetConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceSetConfiguration() { onvifXsd__NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfigurationExtension (535)
/* onvifXsd:NetworkInterfaceSetConfigurationExtension */
class SOAP_CMAC onvifXsd__NetworkInterfaceSetConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::vector<onvifXsd__Dot3Configuration * >Dot3;	/* optional element of type onvifXsd:Dot3Configuration */
	std::vector<onvifXsd__Dot11Configuration * >Dot11;	/* optional element of type onvifXsd:Dot11Configuration */
	class onvifXsd__NetworkInterfaceSetConfigurationExtension2 *Extension;	/* optional element of type onvifXsd:NetworkInterfaceSetConfigurationExtension2 */
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceSetConfigurationExtension() { onvifXsd__NetworkInterfaceSetConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceSetConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_onvifXsd__IPv6NetworkInterfaceSetConfiguration (536)
/* onvifXsd:IPv6NetworkInterfaceSetConfiguration */
class SOAP_CMAC onvifXsd__IPv6NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	std::vector<onvifXsd__PrefixedIPv6Address * >Manual;	/* optional element of type onvifXsd:PrefixedIPv6Address */
	enum onvifXsd__IPv6DHCPConfiguration *DHCP;	/* optional element of type onvifXsd:IPv6DHCPConfiguration */
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE_onvifXsd__IPv6NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv6NetworkInterfaceSetConfiguration() { onvifXsd__IPv6NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__IPv6NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_onvifXsd__IPv4NetworkInterfaceSetConfiguration (537)
/* onvifXsd:IPv4NetworkInterfaceSetConfiguration */
class SOAP_CMAC onvifXsd__IPv4NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	std::vector<onvifXsd__PrefixedIPv4Address * >Manual;	/* optional element of type onvifXsd:PrefixedIPv4Address */
	bool *DHCP;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_onvifXsd__IPv4NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPv4NetworkInterfaceSetConfiguration() { onvifXsd__IPv4NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__IPv4NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkGateway
#define SOAP_TYPE_onvifXsd__NetworkGateway (538)
/* onvifXsd:NetworkGateway */
class SOAP_CMAC onvifXsd__NetworkGateway : public xsd__anyType
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type onvifXsd:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type onvifXsd:IPv6Address */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_onvifXsd__NetworkGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkGateway() { onvifXsd__NetworkGateway::soap_default(NULL); }
	virtual ~onvifXsd__NetworkGateway() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkZeroConfiguration
#define SOAP_TYPE_onvifXsd__NetworkZeroConfiguration (539)
/* onvifXsd:NetworkZeroConfiguration */
class SOAP_CMAC onvifXsd__NetworkZeroConfiguration : public xsd__anyType
{
public:
	std::string InterfaceToken;	/* required element of type onvifXsd:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<std::string >Addresses;	/* optional element of type onvifXsd:IPv4Address */
	class onvifXsd__NetworkZeroConfigurationExtension *Extension;	/* optional element of type onvifXsd:NetworkZeroConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_onvifXsd__NetworkZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkZeroConfiguration() { onvifXsd__NetworkZeroConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__NetworkZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkZeroConfigurationExtension
#define SOAP_TYPE_onvifXsd__NetworkZeroConfigurationExtension (540)
/* onvifXsd:NetworkZeroConfigurationExtension */
class SOAP_CMAC onvifXsd__NetworkZeroConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::vector<onvifXsd__NetworkZeroConfiguration * >Additional;	/* optional element of type onvifXsd:NetworkZeroConfiguration */
	class onvifXsd__NetworkZeroConfigurationExtension2 *Extension;	/* optional element of type onvifXsd:NetworkZeroConfigurationExtension2 */
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE_onvifXsd__NetworkZeroConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkZeroConfigurationExtension() { onvifXsd__NetworkZeroConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__NetworkZeroConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_onvifXsd__NetworkZeroConfigurationExtension2 (541)
/* onvifXsd:NetworkZeroConfigurationExtension2 */
class SOAP_CMAC onvifXsd__NetworkZeroConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_onvifXsd__NetworkZeroConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkZeroConfigurationExtension2() { onvifXsd__NetworkZeroConfigurationExtension2::soap_default(NULL); }
	virtual ~onvifXsd__NetworkZeroConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPAddressFilter
#define SOAP_TYPE_onvifXsd__IPAddressFilter (542)
/* onvifXsd:IPAddressFilter */
class SOAP_CMAC onvifXsd__IPAddressFilter : public xsd__anyType
{
public:
	enum onvifXsd__IPAddressFilterType Type;	/* required element of type onvifXsd:IPAddressFilterType */
	std::vector<onvifXsd__PrefixedIPv4Address * >IPv4Address;	/* optional element of type onvifXsd:PrefixedIPv4Address */
	std::vector<onvifXsd__PrefixedIPv6Address * >IPv6Address;	/* optional element of type onvifXsd:PrefixedIPv6Address */
	class onvifXsd__IPAddressFilterExtension *Extension;	/* optional element of type onvifXsd:IPAddressFilterExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE_onvifXsd__IPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPAddressFilter() { onvifXsd__IPAddressFilter::soap_default(NULL); }
	virtual ~onvifXsd__IPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IPAddressFilterExtension
#define SOAP_TYPE_onvifXsd__IPAddressFilterExtension (543)
/* onvifXsd:IPAddressFilterExtension */
class SOAP_CMAC onvifXsd__IPAddressFilterExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_onvifXsd__IPAddressFilterExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IPAddressFilterExtension() { onvifXsd__IPAddressFilterExtension::soap_default(NULL); }
	virtual ~onvifXsd__IPAddressFilterExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11Configuration
#define SOAP_TYPE_onvifXsd__Dot11Configuration (544)
/* onvifXsd:Dot11Configuration */
class SOAP_CMAC onvifXsd__Dot11Configuration : public xsd__anyType
{
public:
	xsd__hexBinary SSID;	/* required element of type onvifXsd:Dot11SSIDType */
	enum onvifXsd__Dot11StationMode Mode;	/* required element of type onvifXsd:Dot11StationMode */
	std::string Alias;	/* required element of type onvifXsd:Name */
	std::string Priority;	/* required element of type onvifXsd:NetworkInterfaceConfigPriority */
	class onvifXsd__Dot11SecurityConfiguration *Security;	/* required element of type onvifXsd:Dot11SecurityConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_onvifXsd__Dot11Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11Configuration() { onvifXsd__Dot11Configuration::soap_default(NULL); }
	virtual ~onvifXsd__Dot11Configuration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SecurityConfiguration
#define SOAP_TYPE_onvifXsd__Dot11SecurityConfiguration (545)
/* onvifXsd:Dot11SecurityConfiguration */
class SOAP_CMAC onvifXsd__Dot11SecurityConfiguration : public xsd__anyType
{
public:
	enum onvifXsd__Dot11SecurityMode Mode;	/* required element of type onvifXsd:Dot11SecurityMode */
	enum onvifXsd__Dot11Cipher *Algorithm;	/* optional element of type onvifXsd:Dot11Cipher */
	class onvifXsd__Dot11PSKSet *PSK;	/* optional element of type onvifXsd:Dot11PSKSet */
	std::string *Dot1X;	/* optional element of type onvifXsd:ReferenceToken */
	class onvifXsd__Dot11SecurityConfigurationExtension *Extension;	/* optional element of type onvifXsd:Dot11SecurityConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_onvifXsd__Dot11SecurityConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11SecurityConfiguration() { onvifXsd__Dot11SecurityConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__Dot11SecurityConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_onvifXsd__Dot11SecurityConfigurationExtension (546)
/* onvifXsd:Dot11SecurityConfigurationExtension */
class SOAP_CMAC onvifXsd__Dot11SecurityConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 546; } /* = unique id SOAP_TYPE_onvifXsd__Dot11SecurityConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11SecurityConfigurationExtension() { onvifXsd__Dot11SecurityConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__Dot11SecurityConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11PSKSet
#define SOAP_TYPE_onvifXsd__Dot11PSKSet (547)
/* onvifXsd:Dot11PSKSet */
class SOAP_CMAC onvifXsd__Dot11PSKSet : public xsd__anyType
{
public:
	xsd__hexBinary *Key;	/* optional element of type onvifXsd:Dot11PSK */
	std::string *Passphrase;	/* optional element of type onvifXsd:Dot11PSKPassphrase */
	class onvifXsd__Dot11PSKSetExtension *Extension;	/* optional element of type onvifXsd:Dot11PSKSetExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_onvifXsd__Dot11PSKSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11PSKSet() { onvifXsd__Dot11PSKSet::soap_default(NULL); }
	virtual ~onvifXsd__Dot11PSKSet() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11PSKSetExtension
#define SOAP_TYPE_onvifXsd__Dot11PSKSetExtension (548)
/* onvifXsd:Dot11PSKSetExtension */
class SOAP_CMAC onvifXsd__Dot11PSKSetExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_onvifXsd__Dot11PSKSetExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11PSKSetExtension() { onvifXsd__Dot11PSKSetExtension::soap_default(NULL); }
	virtual ~onvifXsd__Dot11PSKSetExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfigurationExtension2 (549)
/* onvifXsd:NetworkInterfaceSetConfigurationExtension2 */
class SOAP_CMAC onvifXsd__NetworkInterfaceSetConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterfaceSetConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterfaceSetConfigurationExtension2() { onvifXsd__NetworkInterfaceSetConfigurationExtension2::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterfaceSetConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11Capabilities
#define SOAP_TYPE_onvifXsd__Dot11Capabilities (550)
/* onvifXsd:Dot11Capabilities */
class SOAP_CMAC onvifXsd__Dot11Capabilities : public xsd__anyType
{
public:
	bool TKIP;	/* required element of type xsd:boolean */
	bool ScanAvailableNetworks;	/* required element of type xsd:boolean */
	bool MultipleConfiguration;	/* required element of type xsd:boolean */
	bool AdHocStationMode;	/* required element of type xsd:boolean */
	bool WEP;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 550; } /* = unique id SOAP_TYPE_onvifXsd__Dot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11Capabilities() { onvifXsd__Dot11Capabilities::soap_default(NULL); }
	virtual ~onvifXsd__Dot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11Status
#define SOAP_TYPE_onvifXsd__Dot11Status (551)
/* onvifXsd:Dot11Status */
class SOAP_CMAC onvifXsd__Dot11Status : public xsd__anyType
{
public:
	xsd__hexBinary SSID;	/* required element of type onvifXsd:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	enum onvifXsd__Dot11Cipher *PairCipher;	/* optional element of type onvifXsd:Dot11Cipher */
	enum onvifXsd__Dot11Cipher *GroupCipher;	/* optional element of type onvifXsd:Dot11Cipher */
	enum onvifXsd__Dot11SignalStrength *SignalStrength;	/* optional element of type onvifXsd:Dot11SignalStrength */
	std::string ActiveConfigAlias;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_onvifXsd__Dot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11Status() { onvifXsd__Dot11Status::soap_default(NULL); }
	virtual ~onvifXsd__Dot11Status() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11AvailableNetworks
#define SOAP_TYPE_onvifXsd__Dot11AvailableNetworks (552)
/* onvifXsd:Dot11AvailableNetworks */
class SOAP_CMAC onvifXsd__Dot11AvailableNetworks : public xsd__anyType
{
public:
	xsd__hexBinary SSID;	/* required element of type onvifXsd:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	std::vector<enum onvifXsd__Dot11AuthAndMangementSuite >AuthAndMangementSuite;	/* optional element of type onvifXsd:Dot11AuthAndMangementSuite */
	std::vector<enum onvifXsd__Dot11Cipher >PairCipher;	/* optional element of type onvifXsd:Dot11Cipher */
	std::vector<enum onvifXsd__Dot11Cipher >GroupCipher;	/* optional element of type onvifXsd:Dot11Cipher */
	enum onvifXsd__Dot11SignalStrength *SignalStrength;	/* optional element of type onvifXsd:Dot11SignalStrength */
	class onvifXsd__Dot11AvailableNetworksExtension *Extension;	/* optional element of type onvifXsd:Dot11AvailableNetworksExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 552; } /* = unique id SOAP_TYPE_onvifXsd__Dot11AvailableNetworks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11AvailableNetworks() { onvifXsd__Dot11AvailableNetworks::soap_default(NULL); }
	virtual ~onvifXsd__Dot11AvailableNetworks() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11AvailableNetworksExtension
#define SOAP_TYPE_onvifXsd__Dot11AvailableNetworksExtension (553)
/* onvifXsd:Dot11AvailableNetworksExtension */
class SOAP_CMAC onvifXsd__Dot11AvailableNetworksExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_onvifXsd__Dot11AvailableNetworksExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot11AvailableNetworksExtension() { onvifXsd__Dot11AvailableNetworksExtension::soap_default(NULL); }
	virtual ~onvifXsd__Dot11AvailableNetworksExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Capabilities
#define SOAP_TYPE_onvifXsd__Capabilities (554)
/* onvifXsd:Capabilities */
class SOAP_CMAC onvifXsd__Capabilities : public xsd__anyType
{
public:
	class onvifXsd__AnalyticsCapabilities *Analytics;	/* optional element of type onvifXsd:AnalyticsCapabilities */
	class onvifXsd__DeviceCapabilities *Device;	/* optional element of type onvifXsd:DeviceCapabilities */
	class onvifXsd__EventCapabilities *Events;	/* optional element of type onvifXsd:EventCapabilities */
	class onvifXsd__ImagingCapabilities *Imaging;	/* optional element of type onvifXsd:ImagingCapabilities */
	class onvifXsd__MediaCapabilities *Media;	/* optional element of type onvifXsd:MediaCapabilities */
	class onvifXsd__PTZCapabilities *PTZ;	/* optional element of type onvifXsd:PTZCapabilities */
	class onvifXsd__CapabilitiesExtension *Extension;	/* optional element of type onvifXsd:CapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_onvifXsd__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Capabilities() { onvifXsd__Capabilities::soap_default(NULL); }
	virtual ~onvifXsd__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CapabilitiesExtension
#define SOAP_TYPE_onvifXsd__CapabilitiesExtension (555)
/* onvifXsd:CapabilitiesExtension */
class SOAP_CMAC onvifXsd__CapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__DeviceIOCapabilities *DeviceIO;	/* optional element of type onvifXsd:DeviceIOCapabilities */
	class onvifXsd__DisplayCapabilities *Display;	/* optional element of type onvifXsd:DisplayCapabilities */
	class onvifXsd__RecordingCapabilities *Recording;	/* optional element of type onvifXsd:RecordingCapabilities */
	class onvifXsd__SearchCapabilities *Search;	/* optional element of type onvifXsd:SearchCapabilities */
	class onvifXsd__ReplayCapabilities *Replay;	/* optional element of type onvifXsd:ReplayCapabilities */
	class onvifXsd__ReceiverCapabilities *Receiver;	/* optional element of type onvifXsd:ReceiverCapabilities */
	class onvifXsd__AnalyticsDeviceCapabilities *AnalyticsDevice;	/* optional element of type onvifXsd:AnalyticsDeviceCapabilities */
	class onvifXsd__CapabilitiesExtension2 *Extensions;	/* optional element of type onvifXsd:CapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_onvifXsd__CapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CapabilitiesExtension() { onvifXsd__CapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__CapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CapabilitiesExtension2
#define SOAP_TYPE_onvifXsd__CapabilitiesExtension2 (556)
/* onvifXsd:CapabilitiesExtension2 */
class SOAP_CMAC onvifXsd__CapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 556; } /* = unique id SOAP_TYPE_onvifXsd__CapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CapabilitiesExtension2() { onvifXsd__CapabilitiesExtension2::soap_default(NULL); }
	virtual ~onvifXsd__CapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsCapabilities
#define SOAP_TYPE_onvifXsd__AnalyticsCapabilities (557)
/* onvifXsd:AnalyticsCapabilities */
class SOAP_CMAC onvifXsd__AnalyticsCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RuleSupport;	/* required element of type xsd:boolean */
	bool AnalyticsModuleSupport;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsCapabilities() { onvifXsd__AnalyticsCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DeviceCapabilities
#define SOAP_TYPE_onvifXsd__DeviceCapabilities (558)
/* onvifXsd:DeviceCapabilities */
class SOAP_CMAC onvifXsd__DeviceCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class onvifXsd__NetworkCapabilities *Network;	/* optional element of type onvifXsd:NetworkCapabilities */
	class onvifXsd__SystemCapabilities *System;	/* optional element of type onvifXsd:SystemCapabilities */
	class onvifXsd__IOCapabilities *IO;	/* optional element of type onvifXsd:IOCapabilities */
	class onvifXsd__SecurityCapabilities *Security;	/* optional element of type onvifXsd:SecurityCapabilities */
	class onvifXsd__DeviceCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:DeviceCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 558; } /* = unique id SOAP_TYPE_onvifXsd__DeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DeviceCapabilities() { onvifXsd__DeviceCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__DeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DeviceCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__DeviceCapabilitiesExtension (559)
/* onvifXsd:DeviceCapabilitiesExtension */
class SOAP_CMAC onvifXsd__DeviceCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_onvifXsd__DeviceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DeviceCapabilitiesExtension() { onvifXsd__DeviceCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__DeviceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EventCapabilities
#define SOAP_TYPE_onvifXsd__EventCapabilities (560)
/* onvifXsd:EventCapabilities */
class SOAP_CMAC onvifXsd__EventCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool WSSubscriptionPolicySupport;	/* required element of type xsd:boolean */
	bool WSPullPointSupport;	/* required element of type xsd:boolean */
	bool WSPausableSubscriptionManagerInterfaceSupport;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_onvifXsd__EventCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EventCapabilities() { onvifXsd__EventCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__EventCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IOCapabilities
#define SOAP_TYPE_onvifXsd__IOCapabilities (561)
/* onvifXsd:IOCapabilities */
class SOAP_CMAC onvifXsd__IOCapabilities : public xsd__anyType
{
public:
	int *InputConnectors;	/* optional element of type xsd:int */
	int *RelayOutputs;	/* optional element of type xsd:int */
	class onvifXsd__IOCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:IOCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_onvifXsd__IOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IOCapabilities() { onvifXsd__IOCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__IOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IOCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__IOCapabilitiesExtension (562)
/* onvifXsd:IOCapabilitiesExtension */
class SOAP_CMAC onvifXsd__IOCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *Auxiliary;	/* optional element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type onvifXsd:AuxiliaryData */
	class onvifXsd__IOCapabilitiesExtension2 *Extension;	/* required element of type onvifXsd:IOCapabilitiesExtension2 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 562; } /* = unique id SOAP_TYPE_onvifXsd__IOCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IOCapabilitiesExtension() { onvifXsd__IOCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__IOCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__IOCapabilitiesExtension2
#define SOAP_TYPE_onvifXsd__IOCapabilitiesExtension2 (563)
/* onvifXsd:IOCapabilitiesExtension2 */
class SOAP_CMAC onvifXsd__IOCapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_onvifXsd__IOCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__IOCapabilitiesExtension2() { onvifXsd__IOCapabilitiesExtension2::soap_default(NULL); }
	virtual ~onvifXsd__IOCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MediaCapabilities
#define SOAP_TYPE_onvifXsd__MediaCapabilities (564)
/* onvifXsd:MediaCapabilities */
class SOAP_CMAC onvifXsd__MediaCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class onvifXsd__RealTimeStreamingCapabilities *StreamingCapabilities;	/* required element of type onvifXsd:RealTimeStreamingCapabilities */
	std::vector<char * >__any;
	class onvifXsd__MediaCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:MediaCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 564; } /* = unique id SOAP_TYPE_onvifXsd__MediaCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MediaCapabilities() { onvifXsd__MediaCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__MediaCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MediaCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__MediaCapabilitiesExtension (565)
/* onvifXsd:MediaCapabilitiesExtension */
class SOAP_CMAC onvifXsd__MediaCapabilitiesExtension : public xsd__anyType
{
public:
	class onvifXsd__ProfileCapabilities *ProfileCapabilities;	/* required element of type onvifXsd:ProfileCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_onvifXsd__MediaCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MediaCapabilitiesExtension() { onvifXsd__MediaCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__MediaCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RealTimeStreamingCapabilities
#define SOAP_TYPE_onvifXsd__RealTimeStreamingCapabilities (566)
/* onvifXsd:RealTimeStreamingCapabilities */
class SOAP_CMAC onvifXsd__RealTimeStreamingCapabilities : public xsd__anyType
{
public:
	bool *RTPMulticast;	/* optional element of type xsd:boolean */
	bool *RTP_USCORETCP;	/* optional element of type xsd:boolean */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional element of type xsd:boolean */
	class onvifXsd__RealTimeStreamingCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:RealTimeStreamingCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_onvifXsd__RealTimeStreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RealTimeStreamingCapabilities() { onvifXsd__RealTimeStreamingCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__RealTimeStreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__RealTimeStreamingCapabilitiesExtension (567)
/* onvifXsd:RealTimeStreamingCapabilitiesExtension */
class SOAP_CMAC onvifXsd__RealTimeStreamingCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_onvifXsd__RealTimeStreamingCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RealTimeStreamingCapabilitiesExtension() { onvifXsd__RealTimeStreamingCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__RealTimeStreamingCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ProfileCapabilities
#define SOAP_TYPE_onvifXsd__ProfileCapabilities (568)
/* onvifXsd:ProfileCapabilities */
class SOAP_CMAC onvifXsd__ProfileCapabilities : public xsd__anyType
{
public:
	int MaximumNumberOfProfiles;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 568; } /* = unique id SOAP_TYPE_onvifXsd__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ProfileCapabilities() { onvifXsd__ProfileCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkCapabilities
#define SOAP_TYPE_onvifXsd__NetworkCapabilities (569)
/* onvifXsd:NetworkCapabilities */
class SOAP_CMAC onvifXsd__NetworkCapabilities : public xsd__anyType
{
public:
	bool *IPFilter;	/* optional element of type xsd:boolean */
	bool *ZeroConfiguration;	/* optional element of type xsd:boolean */
	bool *IPVersion6;	/* optional element of type xsd:boolean */
	bool *DynDNS;	/* optional element of type xsd:boolean */
	class onvifXsd__NetworkCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:NetworkCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_onvifXsd__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkCapabilities() { onvifXsd__NetworkCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__NetworkCapabilitiesExtension (570)
/* onvifXsd:NetworkCapabilitiesExtension */
class SOAP_CMAC onvifXsd__NetworkCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *Dot11Configuration;	/* optional element of type xsd:boolean */
	class onvifXsd__NetworkCapabilitiesExtension2 *Extension;	/* optional element of type onvifXsd:NetworkCapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_onvifXsd__NetworkCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkCapabilitiesExtension() { onvifXsd__NetworkCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__NetworkCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkCapabilitiesExtension2
#define SOAP_TYPE_onvifXsd__NetworkCapabilitiesExtension2 (571)
/* onvifXsd:NetworkCapabilitiesExtension2 */
class SOAP_CMAC onvifXsd__NetworkCapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_onvifXsd__NetworkCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkCapabilitiesExtension2() { onvifXsd__NetworkCapabilitiesExtension2::soap_default(NULL); }
	virtual ~onvifXsd__NetworkCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SecurityCapabilities
#define SOAP_TYPE_onvifXsd__SecurityCapabilities (572)
/* onvifXsd:SecurityCapabilities */
class SOAP_CMAC onvifXsd__SecurityCapabilities : public xsd__anyType
{
public:
	bool TLS1_x002e1;	/* required element of type xsd:boolean */
	bool TLS1_x002e2;	/* required element of type xsd:boolean */
	bool OnboardKeyGeneration;	/* required element of type xsd:boolean */
	bool AccessPolicyConfig;	/* required element of type xsd:boolean */
	bool X_x002e509Token;	/* required element of type xsd:boolean */
	bool SAMLToken;	/* required element of type xsd:boolean */
	bool KerberosToken;	/* required element of type xsd:boolean */
	bool RELToken;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	class onvifXsd__SecurityCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:SecurityCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 572; } /* = unique id SOAP_TYPE_onvifXsd__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SecurityCapabilities() { onvifXsd__SecurityCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SecurityCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__SecurityCapabilitiesExtension (573)
/* onvifXsd:SecurityCapabilitiesExtension */
class SOAP_CMAC onvifXsd__SecurityCapabilitiesExtension : public xsd__anyType
{
public:
	bool TLS1_x002e0;	/* required element of type xsd:boolean */
	class onvifXsd__SecurityCapabilitiesExtension2 *Extension;	/* optional element of type onvifXsd:SecurityCapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_onvifXsd__SecurityCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SecurityCapabilitiesExtension() { onvifXsd__SecurityCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__SecurityCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SecurityCapabilitiesExtension2
#define SOAP_TYPE_onvifXsd__SecurityCapabilitiesExtension2 (574)
/* onvifXsd:SecurityCapabilitiesExtension2 */
class SOAP_CMAC onvifXsd__SecurityCapabilitiesExtension2 : public xsd__anyType
{
public:
	bool Dot1X;	/* required element of type xsd:boolean */
	std::vector<int >SupportedEAPMethod;	/* optional element of type xsd:int */
	bool RemoteUserHandling;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 574; } /* = unique id SOAP_TYPE_onvifXsd__SecurityCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SecurityCapabilitiesExtension2() { onvifXsd__SecurityCapabilitiesExtension2::soap_default(NULL); }
	virtual ~onvifXsd__SecurityCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemCapabilities
#define SOAP_TYPE_onvifXsd__SystemCapabilities (575)
/* onvifXsd:SystemCapabilities */
class SOAP_CMAC onvifXsd__SystemCapabilities : public xsd__anyType
{
public:
	bool DiscoveryResolve;	/* required element of type xsd:boolean */
	bool DiscoveryBye;	/* required element of type xsd:boolean */
	bool RemoteDiscovery;	/* required element of type xsd:boolean */
	bool SystemBackup;	/* required element of type xsd:boolean */
	bool SystemLogging;	/* required element of type xsd:boolean */
	bool FirmwareUpgrade;	/* required element of type xsd:boolean */
	std::vector<onvifXsd__OnvifVersion * >SupportedVersions;	/* required element of type onvifXsd:OnvifVersion */
	class onvifXsd__SystemCapabilitiesExtension *Extension;	/* optional element of type onvifXsd:SystemCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_onvifXsd__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemCapabilities() { onvifXsd__SystemCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemCapabilitiesExtension
#define SOAP_TYPE_onvifXsd__SystemCapabilitiesExtension (576)
/* onvifXsd:SystemCapabilitiesExtension */
class SOAP_CMAC onvifXsd__SystemCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *HttpFirmwareUpgrade;	/* optional element of type xsd:boolean */
	bool *HttpSystemBackup;	/* optional element of type xsd:boolean */
	bool *HttpSystemLogging;	/* optional element of type xsd:boolean */
	bool *HttpSupportInformation;	/* optional element of type xsd:boolean */
	class onvifXsd__SystemCapabilitiesExtension2 *Extension;	/* optional element of type onvifXsd:SystemCapabilitiesExtension2 */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_onvifXsd__SystemCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemCapabilitiesExtension() { onvifXsd__SystemCapabilitiesExtension::soap_default(NULL); }
	virtual ~onvifXsd__SystemCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemCapabilitiesExtension2
#define SOAP_TYPE_onvifXsd__SystemCapabilitiesExtension2 (577)
/* onvifXsd:SystemCapabilitiesExtension2 */
class SOAP_CMAC onvifXsd__SystemCapabilitiesExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_onvifXsd__SystemCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemCapabilitiesExtension2() { onvifXsd__SystemCapabilitiesExtension2::soap_default(NULL); }
	virtual ~onvifXsd__SystemCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__OnvifVersion
#define SOAP_TYPE_onvifXsd__OnvifVersion (578)
/* onvifXsd:OnvifVersion */
class SOAP_CMAC onvifXsd__OnvifVersion : public xsd__anyType
{
public:
	int Major;	/* required element of type xsd:int */
	int Minor;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 578; } /* = unique id SOAP_TYPE_onvifXsd__OnvifVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__OnvifVersion() { onvifXsd__OnvifVersion::soap_default(NULL); }
	virtual ~onvifXsd__OnvifVersion() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingCapabilities
#define SOAP_TYPE_onvifXsd__ImagingCapabilities (579)
/* onvifXsd:ImagingCapabilities */
class SOAP_CMAC onvifXsd__ImagingCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_onvifXsd__ImagingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingCapabilities() { onvifXsd__ImagingCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__ImagingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZCapabilities
#define SOAP_TYPE_onvifXsd__PTZCapabilities (580)
/* onvifXsd:PTZCapabilities */
class SOAP_CMAC onvifXsd__PTZCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_onvifXsd__PTZCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZCapabilities() { onvifXsd__PTZCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__PTZCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DeviceIOCapabilities
#define SOAP_TYPE_onvifXsd__DeviceIOCapabilities (581)
/* onvifXsd:DeviceIOCapabilities */
class SOAP_CMAC onvifXsd__DeviceIOCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	int VideoSources;	/* required element of type xsd:int */
	int VideoOutputs;	/* required element of type xsd:int */
	int AudioSources;	/* required element of type xsd:int */
	int AudioOutputs;	/* required element of type xsd:int */
	int RelayOutputs;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_onvifXsd__DeviceIOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DeviceIOCapabilities() { onvifXsd__DeviceIOCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__DeviceIOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DisplayCapabilities
#define SOAP_TYPE_onvifXsd__DisplayCapabilities (582)
/* onvifXsd:DisplayCapabilities */
class SOAP_CMAC onvifXsd__DisplayCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool FixedLayout;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 582; } /* = unique id SOAP_TYPE_onvifXsd__DisplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DisplayCapabilities() { onvifXsd__DisplayCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__DisplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingCapabilities
#define SOAP_TYPE_onvifXsd__RecordingCapabilities (583)
/* onvifXsd:RecordingCapabilities */
class SOAP_CMAC onvifXsd__RecordingCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool ReceiverSource;	/* required element of type xsd:boolean */
	bool MediaProfileSource;	/* required element of type xsd:boolean */
	bool DynamicRecordings;	/* required element of type xsd:boolean */
	bool DynamicTracks;	/* required element of type xsd:boolean */
	int MaxStringLength;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_onvifXsd__RecordingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingCapabilities() { onvifXsd__RecordingCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__RecordingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SearchCapabilities
#define SOAP_TYPE_onvifXsd__SearchCapabilities (584)
/* onvifXsd:SearchCapabilities */
class SOAP_CMAC onvifXsd__SearchCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool MetadataSearch;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 584; } /* = unique id SOAP_TYPE_onvifXsd__SearchCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SearchCapabilities() { onvifXsd__SearchCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__SearchCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReplayCapabilities
#define SOAP_TYPE_onvifXsd__ReplayCapabilities (585)
/* onvifXsd:ReplayCapabilities */
class SOAP_CMAC onvifXsd__ReplayCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_onvifXsd__ReplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReplayCapabilities() { onvifXsd__ReplayCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__ReplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverCapabilities
#define SOAP_TYPE_onvifXsd__ReceiverCapabilities (586)
/* onvifXsd:ReceiverCapabilities */
class SOAP_CMAC onvifXsd__ReceiverCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RTP_USCOREMulticast;	/* required element of type xsd:boolean */
	bool RTP_USCORETCP;	/* required element of type xsd:boolean */
	bool RTP_USCORERTSP_USCORETCP;	/* required element of type xsd:boolean */
	int SupportedReceivers;	/* required element of type xsd:int */
	int MaximumRTSPURILength;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_onvifXsd__ReceiverCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReceiverCapabilities() { onvifXsd__ReceiverCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__ReceiverCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsDeviceCapabilities
#define SOAP_TYPE_onvifXsd__AnalyticsDeviceCapabilities (587)
/* onvifXsd:AnalyticsDeviceCapabilities */
class SOAP_CMAC onvifXsd__AnalyticsDeviceCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool *RuleSupport;	/* optional element of type xsd:boolean */
	class onvifXsd__AnalyticsDeviceExtension *Extension;	/* optional element of type onvifXsd:AnalyticsDeviceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsDeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsDeviceCapabilities() { onvifXsd__AnalyticsDeviceCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsDeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsDeviceExtension
#define SOAP_TYPE_onvifXsd__AnalyticsDeviceExtension (588)
/* onvifXsd:AnalyticsDeviceExtension */
class SOAP_CMAC onvifXsd__AnalyticsDeviceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 588; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsDeviceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsDeviceExtension() { onvifXsd__AnalyticsDeviceExtension::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsDeviceExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemLog
#define SOAP_TYPE_onvifXsd__SystemLog (589)
/* onvifXsd:SystemLog */
class SOAP_CMAC onvifXsd__SystemLog : public xsd__anyType
{
public:
	onvifXsd__AttachmentData *Binary;	/* optional element of type onvifXsd:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_onvifXsd__SystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemLog() { onvifXsd__SystemLog::soap_default(NULL); }
	virtual ~onvifXsd__SystemLog() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SupportInformation
#define SOAP_TYPE_onvifXsd__SupportInformation (590)
/* onvifXsd:SupportInformation */
class SOAP_CMAC onvifXsd__SupportInformation : public xsd__anyType
{
public:
	onvifXsd__AttachmentData *Binary;	/* optional element of type onvifXsd:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_onvifXsd__SupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SupportInformation() { onvifXsd__SupportInformation::soap_default(NULL); }
	virtual ~onvifXsd__SupportInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BinaryData
#define SOAP_TYPE_onvifXsd__BinaryData (591)
/* onvifXsd:BinaryData */
class SOAP_CMAC onvifXsd__BinaryData : public xsd__anyType
{
public:
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	std::string *xmime__contentType;	/* optional attribute */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_onvifXsd__BinaryData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BinaryData() { onvifXsd__BinaryData::soap_default(NULL); }
	virtual ~onvifXsd__BinaryData() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AttachmentData
#define SOAP_TYPE_onvifXsd__AttachmentData (592)
/* onvifXsd:AttachmentData */
class SOAP_CMAC onvifXsd__AttachmentData : public xsd__anyType
{
public:
	class ns5__Include *ns5__Include_;	/* required element of type ns5:Include */
	std::string *xmime__contentType;	/* optional attribute */
public:
	virtual int soap_type() const { return 592; } /* = unique id SOAP_TYPE_onvifXsd__AttachmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AttachmentData() { onvifXsd__AttachmentData::soap_default(NULL); }
	virtual ~onvifXsd__AttachmentData() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BackupFile
#define SOAP_TYPE_onvifXsd__BackupFile (593)
/* onvifXsd:BackupFile */
class SOAP_CMAC onvifXsd__BackupFile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type xsd:string */
	onvifXsd__AttachmentData *Data;	/* required element of type onvifXsd:AttachmentData */
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_onvifXsd__BackupFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BackupFile() { onvifXsd__BackupFile::soap_default(NULL); }
	virtual ~onvifXsd__BackupFile() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemLogUriList
#define SOAP_TYPE_onvifXsd__SystemLogUriList (594)
/* onvifXsd:SystemLogUriList */
class SOAP_CMAC onvifXsd__SystemLogUriList : public xsd__anyType
{
public:
	std::vector<class onvifXsd__SystemLogUri * >SystemLog;	/* optional element of type onvifXsd:SystemLogUri */
public:
	virtual int soap_type() const { return 594; } /* = unique id SOAP_TYPE_onvifXsd__SystemLogUriList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemLogUriList() { onvifXsd__SystemLogUriList::soap_default(NULL); }
	virtual ~onvifXsd__SystemLogUriList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemLogUri
#define SOAP_TYPE_onvifXsd__SystemLogUri (595)
/* onvifXsd:SystemLogUri */
class SOAP_CMAC onvifXsd__SystemLogUri : public xsd__anyType
{
public:
	enum onvifXsd__SystemLogType Type;	/* required element of type onvifXsd:SystemLogType */
	std::string Uri;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_onvifXsd__SystemLogUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemLogUri() { onvifXsd__SystemLogUri::soap_default(NULL); }
	virtual ~onvifXsd__SystemLogUri() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemDateTime
#define SOAP_TYPE_onvifXsd__SystemDateTime (596)
/* onvifXsd:SystemDateTime */
class SOAP_CMAC onvifXsd__SystemDateTime : public xsd__anyType
{
public:
	enum onvifXsd__SetDateTimeType DateTimeType;	/* required element of type onvifXsd:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	onvifXsd__TimeZone *TimeZone;	/* optional element of type onvifXsd:TimeZone */
	onvifXsd__DateTime *UTCDateTime;	/* optional element of type onvifXsd:DateTime */
	onvifXsd__DateTime *LocalDateTime;	/* optional element of type onvifXsd:DateTime */
	class onvifXsd__SystemDateTimeExtension *Extension;	/* optional element of type onvifXsd:SystemDateTimeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_onvifXsd__SystemDateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemDateTime() { onvifXsd__SystemDateTime::soap_default(NULL); }
	virtual ~onvifXsd__SystemDateTime() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SystemDateTimeExtension
#define SOAP_TYPE_onvifXsd__SystemDateTimeExtension (597)
/* onvifXsd:SystemDateTimeExtension */
class SOAP_CMAC onvifXsd__SystemDateTimeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_onvifXsd__SystemDateTimeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SystemDateTimeExtension() { onvifXsd__SystemDateTimeExtension::soap_default(NULL); }
	virtual ~onvifXsd__SystemDateTimeExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DateTime
#define SOAP_TYPE_onvifXsd__DateTime (598)
/* onvifXsd:DateTime */
class SOAP_CMAC onvifXsd__DateTime : public xsd__anyType
{
public:
	class onvifXsd__Time *Time;	/* required element of type onvifXsd:Time */
	class onvifXsd__Date *Date;	/* required element of type onvifXsd:Date */
public:
	virtual int soap_type() const { return 598; } /* = unique id SOAP_TYPE_onvifXsd__DateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DateTime() { onvifXsd__DateTime::soap_default(NULL); }
	virtual ~onvifXsd__DateTime() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Date
#define SOAP_TYPE_onvifXsd__Date (599)
/* onvifXsd:Date */
class SOAP_CMAC onvifXsd__Date : public xsd__anyType
{
public:
	int Year;	/* required element of type xsd:int */
	int Month;	/* required element of type xsd:int */
	int Day;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_onvifXsd__Date */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Date() { onvifXsd__Date::soap_default(NULL); }
	virtual ~onvifXsd__Date() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Time
#define SOAP_TYPE_onvifXsd__Time (600)
/* onvifXsd:Time */
class SOAP_CMAC onvifXsd__Time : public xsd__anyType
{
public:
	int Hour;	/* required element of type xsd:int */
	int Minute;	/* required element of type xsd:int */
	int Second;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_onvifXsd__Time */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Time() { onvifXsd__Time::soap_default(NULL); }
	virtual ~onvifXsd__Time() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TimeZone
#define SOAP_TYPE_onvifXsd__TimeZone (601)
/* onvifXsd:TimeZone */
class SOAP_CMAC onvifXsd__TimeZone : public xsd__anyType
{
public:
	std::string TZ;	/* required element of type xsd:token */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_onvifXsd__TimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TimeZone() { onvifXsd__TimeZone::soap_default(NULL); }
	virtual ~onvifXsd__TimeZone() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RemoteUser
#define SOAP_TYPE_onvifXsd__RemoteUser (602)
/* onvifXsd:RemoteUser */
class SOAP_CMAC onvifXsd__RemoteUser : public xsd__anyType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	bool UseDerivedPassword;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 602; } /* = unique id SOAP_TYPE_onvifXsd__RemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RemoteUser() { onvifXsd__RemoteUser::soap_default(NULL); }
	virtual ~onvifXsd__RemoteUser() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__User
#define SOAP_TYPE_onvifXsd__User (603)
/* onvifXsd:User */
class SOAP_CMAC onvifXsd__User : public xsd__anyType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	enum onvifXsd__UserLevel UserLevel;	/* required element of type onvifXsd:UserLevel */
	class onvifXsd__UserExtension *Extension;	/* optional element of type onvifXsd:UserExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_onvifXsd__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__User() { onvifXsd__User::soap_default(NULL); }
	virtual ~onvifXsd__User() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__UserExtension
#define SOAP_TYPE_onvifXsd__UserExtension (604)
/* onvifXsd:UserExtension */
class SOAP_CMAC onvifXsd__UserExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 604; } /* = unique id SOAP_TYPE_onvifXsd__UserExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__UserExtension() { onvifXsd__UserExtension::soap_default(NULL); }
	virtual ~onvifXsd__UserExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateGenerationParameters
#define SOAP_TYPE_onvifXsd__CertificateGenerationParameters (605)
/* onvifXsd:CertificateGenerationParameters */
class SOAP_CMAC onvifXsd__CertificateGenerationParameters : public xsd__anyType
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	std::string *ValidNotBefore;	/* optional element of type xsd:token */
	std::string *ValidNotAfter;	/* optional element of type xsd:token */
	class onvifXsd__CertificateGenerationParametersExtension *Extension;	/* optional element of type onvifXsd:CertificateGenerationParametersExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_onvifXsd__CertificateGenerationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateGenerationParameters() { onvifXsd__CertificateGenerationParameters::soap_default(NULL); }
	virtual ~onvifXsd__CertificateGenerationParameters() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateGenerationParametersExtension
#define SOAP_TYPE_onvifXsd__CertificateGenerationParametersExtension (606)
/* onvifXsd:CertificateGenerationParametersExtension */
class SOAP_CMAC onvifXsd__CertificateGenerationParametersExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_onvifXsd__CertificateGenerationParametersExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateGenerationParametersExtension() { onvifXsd__CertificateGenerationParametersExtension::soap_default(NULL); }
	virtual ~onvifXsd__CertificateGenerationParametersExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Certificate
#define SOAP_TYPE_onvifXsd__Certificate (607)
/* onvifXsd:Certificate */
class SOAP_CMAC onvifXsd__Certificate : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	onvifXsd__BinaryData *Certificate;	/* required element of type onvifXsd:BinaryData */
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_onvifXsd__Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Certificate() { onvifXsd__Certificate::soap_default(NULL); }
	virtual ~onvifXsd__Certificate() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateStatus
#define SOAP_TYPE_onvifXsd__CertificateStatus (608)
/* onvifXsd:CertificateStatus */
class SOAP_CMAC onvifXsd__CertificateStatus : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	bool Status;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 608; } /* = unique id SOAP_TYPE_onvifXsd__CertificateStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateStatus() { onvifXsd__CertificateStatus::soap_default(NULL); }
	virtual ~onvifXsd__CertificateStatus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateWithPrivateKey
#define SOAP_TYPE_onvifXsd__CertificateWithPrivateKey (609)
/* onvifXsd:CertificateWithPrivateKey */
class SOAP_CMAC onvifXsd__CertificateWithPrivateKey : public xsd__anyType
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	onvifXsd__BinaryData *Certificate;	/* required element of type onvifXsd:BinaryData */
	onvifXsd__BinaryData *PrivateKey;	/* required element of type onvifXsd:BinaryData */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_onvifXsd__CertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateWithPrivateKey() { onvifXsd__CertificateWithPrivateKey::soap_default(NULL); }
	virtual ~onvifXsd__CertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateInformation
#define SOAP_TYPE_onvifXsd__CertificateInformation (610)
/* onvifXsd:CertificateInformation */
class SOAP_CMAC onvifXsd__CertificateInformation : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *IssuerDN;	/* optional element of type xsd:string */
	std::string *SubjectDN;	/* optional element of type xsd:string */
	class onvifXsd__CertificateUsage *KeyUsage;	/* optional element of type onvifXsd:CertificateUsage */
	onvifXsd__CertificateUsage *ExtendedKeyUsage;	/* optional element of type onvifXsd:CertificateUsage */
	int *KeyLength;	/* optional element of type xsd:int */
	std::string *Version;	/* optional element of type xsd:string */
	std::string *SerialNum;	/* optional element of type xsd:string */
	std::string *SignatureAlgorithm;	/* optional element of type xsd:string */
	class onvifXsd__DateTimeRange *Validity;	/* optional element of type onvifXsd:DateTimeRange */
	class onvifXsd__CertificateInformationExtension *Extension;	/* optional element of type onvifXsd:CertificateInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_onvifXsd__CertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateInformation() { onvifXsd__CertificateInformation::soap_default(NULL); }
	virtual ~onvifXsd__CertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateInformationExtension
#define SOAP_TYPE_onvifXsd__CertificateInformationExtension (612)
/* onvifXsd:CertificateInformationExtension */
class SOAP_CMAC onvifXsd__CertificateInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 612; } /* = unique id SOAP_TYPE_onvifXsd__CertificateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateInformationExtension() { onvifXsd__CertificateInformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__CertificateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot1XConfiguration
#define SOAP_TYPE_onvifXsd__Dot1XConfiguration (613)
/* onvifXsd:Dot1XConfiguration */
class SOAP_CMAC onvifXsd__Dot1XConfiguration : public xsd__anyType
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string Identity;	/* required element of type xsd:string */
	std::string *AnonymousID;	/* optional element of type xsd:string */
	int EAPMethod;	/* required element of type xsd:int */
	std::vector<std::string >CACertificateID;	/* optional element of type xsd:token */
	class onvifXsd__EAPMethodConfiguration *EAPMethodConfiguration;	/* optional element of type onvifXsd:EAPMethodConfiguration */
	class onvifXsd__Dot1XConfigurationExtension *Extension;	/* optional element of type onvifXsd:Dot1XConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_onvifXsd__Dot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot1XConfiguration() { onvifXsd__Dot1XConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__Dot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot1XConfigurationExtension
#define SOAP_TYPE_onvifXsd__Dot1XConfigurationExtension (614)
/* onvifXsd:Dot1XConfigurationExtension */
class SOAP_CMAC onvifXsd__Dot1XConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 614; } /* = unique id SOAP_TYPE_onvifXsd__Dot1XConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Dot1XConfigurationExtension() { onvifXsd__Dot1XConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__Dot1XConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EAPMethodConfiguration
#define SOAP_TYPE_onvifXsd__EAPMethodConfiguration (615)
/* onvifXsd:EAPMethodConfiguration */
class SOAP_CMAC onvifXsd__EAPMethodConfiguration : public xsd__anyType
{
public:
	class onvifXsd__TLSConfiguration *TLSConfiguration;	/* optional element of type onvifXsd:TLSConfiguration */
	std::string *Password;	/* optional element of type xsd:string */
	class onvifXsd__EapMethodExtension *Extension;	/* optional element of type onvifXsd:EapMethodExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_onvifXsd__EAPMethodConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EAPMethodConfiguration() { onvifXsd__EAPMethodConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__EAPMethodConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EapMethodExtension
#define SOAP_TYPE_onvifXsd__EapMethodExtension (616)
/* onvifXsd:EapMethodExtension */
class SOAP_CMAC onvifXsd__EapMethodExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_onvifXsd__EapMethodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EapMethodExtension() { onvifXsd__EapMethodExtension::soap_default(NULL); }
	virtual ~onvifXsd__EapMethodExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TLSConfiguration
#define SOAP_TYPE_onvifXsd__TLSConfiguration (617)
/* onvifXsd:TLSConfiguration */
class SOAP_CMAC onvifXsd__TLSConfiguration : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_onvifXsd__TLSConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TLSConfiguration() { onvifXsd__TLSConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__TLSConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_onvifXsd__GenericEapPwdConfigurationExtension (618)
/* onvifXsd:GenericEapPwdConfigurationExtension */
class SOAP_CMAC onvifXsd__GenericEapPwdConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 618; } /* = unique id SOAP_TYPE_onvifXsd__GenericEapPwdConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__GenericEapPwdConfigurationExtension() { onvifXsd__GenericEapPwdConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__GenericEapPwdConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayOutputSettings
#define SOAP_TYPE_onvifXsd__RelayOutputSettings (619)
/* onvifXsd:RelayOutputSettings */
class SOAP_CMAC onvifXsd__RelayOutputSettings : public xsd__anyType
{
public:
	enum onvifXsd__RelayMode Mode;	/* required element of type onvifXsd:RelayMode */
	std::string DelayTime;	/* required element of type xsd:duration */
	enum onvifXsd__RelayIdleState IdleState;	/* required element of type onvifXsd:RelayIdleState */
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_onvifXsd__RelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelayOutputSettings() { onvifXsd__RelayOutputSettings::soap_default(NULL); }
	virtual ~onvifXsd__RelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZNodeExtension
#define SOAP_TYPE_onvifXsd__PTZNodeExtension (623)
/* onvifXsd:PTZNodeExtension */
class SOAP_CMAC onvifXsd__PTZNodeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__PTZPresetTourSupported *SupportedPresetTour;	/* required element of type onvifXsd:PTZPresetTourSupported */
	class onvifXsd__PTZNodeExtension2 *Extension;	/* optional element of type onvifXsd:PTZNodeExtension2 */
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_onvifXsd__PTZNodeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZNodeExtension() { onvifXsd__PTZNodeExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZNodeExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZNodeExtension2
#define SOAP_TYPE_onvifXsd__PTZNodeExtension2 (624)
/* onvifXsd:PTZNodeExtension2 */
class SOAP_CMAC onvifXsd__PTZNodeExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 624; } /* = unique id SOAP_TYPE_onvifXsd__PTZNodeExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZNodeExtension2() { onvifXsd__PTZNodeExtension2::soap_default(NULL); }
	virtual ~onvifXsd__PTZNodeExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourSupported
#define SOAP_TYPE_onvifXsd__PTZPresetTourSupported (625)
/* onvifXsd:PTZPresetTourSupported */
class SOAP_CMAC onvifXsd__PTZPresetTourSupported : public xsd__anyType
{
public:
	int MaximumNumberOfPresetTours;	/* required element of type xsd:int */
	std::vector<enum onvifXsd__PTZPresetTourOperation >PTZPresetTourOperation;	/* optional element of type onvifXsd:PTZPresetTourOperation */
	class onvifXsd__PTZPresetTourSupportedExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourSupportedExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourSupported() { onvifXsd__PTZPresetTourSupported::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourSupported() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourSupportedExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourSupportedExtension (626)
/* onvifXsd:PTZPresetTourSupportedExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourSupportedExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourSupportedExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourSupportedExtension() { onvifXsd__PTZPresetTourSupportedExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourSupportedExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZConfigurationExtension
#define SOAP_TYPE_onvifXsd__PTZConfigurationExtension (628)
/* onvifXsd:PTZConfigurationExtension */
class SOAP_CMAC onvifXsd__PTZConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__PTControlDirection *PTControlDirection;	/* optional element of type onvifXsd:PTControlDirection */
	class onvifXsd__PTZConfigurationExtension2 *Extension;	/* optional element of type onvifXsd:PTZConfigurationExtension2 */
public:
	virtual int soap_type() const { return 628; } /* = unique id SOAP_TYPE_onvifXsd__PTZConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZConfigurationExtension() { onvifXsd__PTZConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZConfigurationExtension2
#define SOAP_TYPE_onvifXsd__PTZConfigurationExtension2 (629)
/* onvifXsd:PTZConfigurationExtension2 */
class SOAP_CMAC onvifXsd__PTZConfigurationExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_onvifXsd__PTZConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZConfigurationExtension2() { onvifXsd__PTZConfigurationExtension2::soap_default(NULL); }
	virtual ~onvifXsd__PTZConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTControlDirection
#define SOAP_TYPE_onvifXsd__PTControlDirection (630)
/* onvifXsd:PTControlDirection */
class SOAP_CMAC onvifXsd__PTControlDirection : public xsd__anyType
{
public:
	class onvifXsd__EFlip *EFlip;	/* optional element of type onvifXsd:EFlip */
	class onvifXsd__Reverse *Reverse;	/* optional element of type onvifXsd:Reverse */
	class onvifXsd__PTControlDirectionExtension *Extension;	/* optional element of type onvifXsd:PTControlDirectionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_onvifXsd__PTControlDirection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTControlDirection() { onvifXsd__PTControlDirection::soap_default(NULL); }
	virtual ~onvifXsd__PTControlDirection() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTControlDirectionExtension
#define SOAP_TYPE_onvifXsd__PTControlDirectionExtension (631)
/* onvifXsd:PTControlDirectionExtension */
class SOAP_CMAC onvifXsd__PTControlDirectionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_onvifXsd__PTControlDirectionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTControlDirectionExtension() { onvifXsd__PTControlDirectionExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTControlDirectionExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EFlip
#define SOAP_TYPE_onvifXsd__EFlip (632)
/* onvifXsd:EFlip */
class SOAP_CMAC onvifXsd__EFlip : public xsd__anyType
{
public:
	enum onvifXsd__EFlipMode Mode;	/* required element of type onvifXsd:EFlipMode */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 632; } /* = unique id SOAP_TYPE_onvifXsd__EFlip */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EFlip() { onvifXsd__EFlip::soap_default(NULL); }
	virtual ~onvifXsd__EFlip() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Reverse
#define SOAP_TYPE_onvifXsd__Reverse (633)
/* onvifXsd:Reverse */
class SOAP_CMAC onvifXsd__Reverse : public xsd__anyType
{
public:
	enum onvifXsd__ReverseMode Mode;	/* required element of type onvifXsd:ReverseMode */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 633; } /* = unique id SOAP_TYPE_onvifXsd__Reverse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Reverse() { onvifXsd__Reverse::soap_default(NULL); }
	virtual ~onvifXsd__Reverse() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZConfigurationOptions
#define SOAP_TYPE_onvifXsd__PTZConfigurationOptions (634)
/* onvifXsd:PTZConfigurationOptions */
class SOAP_CMAC onvifXsd__PTZConfigurationOptions : public xsd__anyType
{
public:
	class onvifXsd__PTZSpaces *Spaces;	/* required element of type onvifXsd:PTZSpaces */
	onvifXsd__DurationRange *PTZTimeout;	/* required element of type onvifXsd:DurationRange */
	std::vector<char * >__any;
	class onvifXsd__PTControlDirectionOptions *PTControlDirection;	/* optional element of type onvifXsd:PTControlDirectionOptions */
	class onvifXsd__PTZConfigurationOptions2 *Extension;	/* optional element of type onvifXsd:PTZConfigurationOptions2 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 634; } /* = unique id SOAP_TYPE_onvifXsd__PTZConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZConfigurationOptions() { onvifXsd__PTZConfigurationOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTZConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZConfigurationOptions2
#define SOAP_TYPE_onvifXsd__PTZConfigurationOptions2 (635)
/* onvifXsd:PTZConfigurationOptions2 */
class SOAP_CMAC onvifXsd__PTZConfigurationOptions2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_onvifXsd__PTZConfigurationOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZConfigurationOptions2() { onvifXsd__PTZConfigurationOptions2::soap_default(NULL); }
	virtual ~onvifXsd__PTZConfigurationOptions2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTControlDirectionOptions
#define SOAP_TYPE_onvifXsd__PTControlDirectionOptions (636)
/* onvifXsd:PTControlDirectionOptions */
class SOAP_CMAC onvifXsd__PTControlDirectionOptions : public xsd__anyType
{
public:
	class onvifXsd__EFlipOptions *EFlip;	/* optional element of type onvifXsd:EFlipOptions */
	class onvifXsd__ReverseOptions *Reverse;	/* optional element of type onvifXsd:ReverseOptions */
	class onvifXsd__PTControlDirectionOptionsExtension *Extension;	/* optional element of type onvifXsd:PTControlDirectionOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_onvifXsd__PTControlDirectionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTControlDirectionOptions() { onvifXsd__PTControlDirectionOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTControlDirectionOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTControlDirectionOptionsExtension
#define SOAP_TYPE_onvifXsd__PTControlDirectionOptionsExtension (637)
/* onvifXsd:PTControlDirectionOptionsExtension */
class SOAP_CMAC onvifXsd__PTControlDirectionOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 637; } /* = unique id SOAP_TYPE_onvifXsd__PTControlDirectionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTControlDirectionOptionsExtension() { onvifXsd__PTControlDirectionOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTControlDirectionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EFlipOptions
#define SOAP_TYPE_onvifXsd__EFlipOptions (638)
/* onvifXsd:EFlipOptions */
class SOAP_CMAC onvifXsd__EFlipOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__EFlipMode >Mode;	/* optional element of type onvifXsd:EFlipMode */
	class onvifXsd__EFlipOptionsExtension *Extension;	/* optional element of type onvifXsd:EFlipOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 638; } /* = unique id SOAP_TYPE_onvifXsd__EFlipOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EFlipOptions() { onvifXsd__EFlipOptions::soap_default(NULL); }
	virtual ~onvifXsd__EFlipOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EFlipOptionsExtension
#define SOAP_TYPE_onvifXsd__EFlipOptionsExtension (639)
/* onvifXsd:EFlipOptionsExtension */
class SOAP_CMAC onvifXsd__EFlipOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 639; } /* = unique id SOAP_TYPE_onvifXsd__EFlipOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EFlipOptionsExtension() { onvifXsd__EFlipOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__EFlipOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReverseOptions
#define SOAP_TYPE_onvifXsd__ReverseOptions (640)
/* onvifXsd:ReverseOptions */
class SOAP_CMAC onvifXsd__ReverseOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__ReverseMode >Mode;	/* optional element of type onvifXsd:ReverseMode */
	class onvifXsd__ReverseOptionsExtension *Extension;	/* optional element of type onvifXsd:ReverseOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_onvifXsd__ReverseOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReverseOptions() { onvifXsd__ReverseOptions::soap_default(NULL); }
	virtual ~onvifXsd__ReverseOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReverseOptionsExtension
#define SOAP_TYPE_onvifXsd__ReverseOptionsExtension (641)
/* onvifXsd:ReverseOptionsExtension */
class SOAP_CMAC onvifXsd__ReverseOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_onvifXsd__ReverseOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReverseOptionsExtension() { onvifXsd__ReverseOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__ReverseOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PanTiltLimits
#define SOAP_TYPE_onvifXsd__PanTiltLimits (642)
/* onvifXsd:PanTiltLimits */
class SOAP_CMAC onvifXsd__PanTiltLimits : public xsd__anyType
{
public:
	class onvifXsd__Space2DDescription *Range;	/* required element of type onvifXsd:Space2DDescription */
public:
	virtual int soap_type() const { return 642; } /* = unique id SOAP_TYPE_onvifXsd__PanTiltLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PanTiltLimits() { onvifXsd__PanTiltLimits::soap_default(NULL); }
	virtual ~onvifXsd__PanTiltLimits() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ZoomLimits
#define SOAP_TYPE_onvifXsd__ZoomLimits (643)
/* onvifXsd:ZoomLimits */
class SOAP_CMAC onvifXsd__ZoomLimits : public xsd__anyType
{
public:
	class onvifXsd__Space1DDescription *Range;	/* required element of type onvifXsd:Space1DDescription */
public:
	virtual int soap_type() const { return 643; } /* = unique id SOAP_TYPE_onvifXsd__ZoomLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ZoomLimits() { onvifXsd__ZoomLimits::soap_default(NULL); }
	virtual ~onvifXsd__ZoomLimits() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZSpaces
#define SOAP_TYPE_onvifXsd__PTZSpaces (644)
/* onvifXsd:PTZSpaces */
class SOAP_CMAC onvifXsd__PTZSpaces : public xsd__anyType
{
public:
	std::vector<onvifXsd__Space2DDescription * >AbsolutePanTiltPositionSpace;	/* optional element of type onvifXsd:Space2DDescription */
	std::vector<onvifXsd__Space1DDescription * >AbsoluteZoomPositionSpace;	/* optional element of type onvifXsd:Space1DDescription */
	std::vector<onvifXsd__Space2DDescription * >RelativePanTiltTranslationSpace;	/* optional element of type onvifXsd:Space2DDescription */
	std::vector<onvifXsd__Space1DDescription * >RelativeZoomTranslationSpace;	/* optional element of type onvifXsd:Space1DDescription */
	std::vector<onvifXsd__Space2DDescription * >ContinuousPanTiltVelocitySpace;	/* optional element of type onvifXsd:Space2DDescription */
	std::vector<onvifXsd__Space1DDescription * >ContinuousZoomVelocitySpace;	/* optional element of type onvifXsd:Space1DDescription */
	std::vector<onvifXsd__Space1DDescription * >PanTiltSpeedSpace;	/* optional element of type onvifXsd:Space1DDescription */
	std::vector<onvifXsd__Space1DDescription * >ZoomSpeedSpace;	/* optional element of type onvifXsd:Space1DDescription */
	class onvifXsd__PTZSpacesExtension *Extension;	/* optional element of type onvifXsd:PTZSpacesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 644; } /* = unique id SOAP_TYPE_onvifXsd__PTZSpaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZSpaces() { onvifXsd__PTZSpaces::soap_default(NULL); }
	virtual ~onvifXsd__PTZSpaces() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZSpacesExtension
#define SOAP_TYPE_onvifXsd__PTZSpacesExtension (645)
/* onvifXsd:PTZSpacesExtension */
class SOAP_CMAC onvifXsd__PTZSpacesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_onvifXsd__PTZSpacesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZSpacesExtension() { onvifXsd__PTZSpacesExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZSpacesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Space2DDescription
#define SOAP_TYPE_onvifXsd__Space2DDescription (646)
/* onvifXsd:Space2DDescription */
class SOAP_CMAC onvifXsd__Space2DDescription : public xsd__anyType
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	onvifXsd__FloatRange *XRange;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *YRange;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_onvifXsd__Space2DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Space2DDescription() { onvifXsd__Space2DDescription::soap_default(NULL); }
	virtual ~onvifXsd__Space2DDescription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Space1DDescription
#define SOAP_TYPE_onvifXsd__Space1DDescription (647)
/* onvifXsd:Space1DDescription */
class SOAP_CMAC onvifXsd__Space1DDescription : public xsd__anyType
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	onvifXsd__FloatRange *XRange;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 647; } /* = unique id SOAP_TYPE_onvifXsd__Space1DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Space1DDescription() { onvifXsd__Space1DDescription::soap_default(NULL); }
	virtual ~onvifXsd__Space1DDescription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Vector2D
#define SOAP_TYPE_onvifXsd__Vector2D (648)
/* Primitive onvifXsd:Vector2D schema type: */
class SOAP_CMAC onvifXsd__Vector2D : public xsd__anyType
{
public:
	float x;	/* required attribute */
	float y;	/* required attribute */
	std::string *space;	/* optional attribute */
public:
	virtual int soap_type() const { return 648; } /* = unique id SOAP_TYPE_onvifXsd__Vector2D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Vector2D() { onvifXsd__Vector2D::soap_default(NULL); }
	virtual ~onvifXsd__Vector2D() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Vector1D
#define SOAP_TYPE_onvifXsd__Vector1D (649)
/* Primitive onvifXsd:Vector1D schema type: */
class SOAP_CMAC onvifXsd__Vector1D : public xsd__anyType
{
public:
	float x;	/* required attribute */
	std::string *space;	/* optional attribute */
public:
	virtual int soap_type() const { return 649; } /* = unique id SOAP_TYPE_onvifXsd__Vector1D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Vector1D() { onvifXsd__Vector1D::soap_default(NULL); }
	virtual ~onvifXsd__Vector1D() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZVector
#define SOAP_TYPE_onvifXsd__PTZVector (650)
/* onvifXsd:PTZVector */
class SOAP_CMAC onvifXsd__PTZVector : public xsd__anyType
{
public:
	onvifXsd__Vector2D *PanTilt;	/* optional element of type onvifXsd:Vector2D */
	onvifXsd__Vector1D *Zoom;	/* optional element of type onvifXsd:Vector1D */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_onvifXsd__PTZVector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZVector() { onvifXsd__PTZVector::soap_default(NULL); }
	virtual ~onvifXsd__PTZVector() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZSpeed
#define SOAP_TYPE_onvifXsd__PTZSpeed (651)
/* onvifXsd:PTZSpeed */
class SOAP_CMAC onvifXsd__PTZSpeed : public xsd__anyType
{
public:
	onvifXsd__Vector2D *PanTilt;	/* optional element of type onvifXsd:Vector2D */
	onvifXsd__Vector1D *Zoom;	/* optional element of type onvifXsd:Vector1D */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_onvifXsd__PTZSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZSpeed() { onvifXsd__PTZSpeed::soap_default(NULL); }
	virtual ~onvifXsd__PTZSpeed() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZStatus
#define SOAP_TYPE_onvifXsd__PTZStatus (652)
/* onvifXsd:PTZStatus */
class SOAP_CMAC onvifXsd__PTZStatus : public xsd__anyType
{
public:
	onvifXsd__PTZVector *Position;	/* optional element of type onvifXsd:PTZVector */
	class onvifXsd__PTZMoveStatus *MoveStatus;	/* optional element of type onvifXsd:PTZMoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	time_t UtcTime;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 652; } /* = unique id SOAP_TYPE_onvifXsd__PTZStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZStatus() { onvifXsd__PTZStatus::soap_default(NULL); }
	virtual ~onvifXsd__PTZStatus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPreset
#define SOAP_TYPE_onvifXsd__PTZPreset (653)
/* onvifXsd:PTZPreset */
class SOAP_CMAC onvifXsd__PTZPreset : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type onvifXsd:Name */
	onvifXsd__PTZVector *PTZPosition;	/* optional element of type onvifXsd:PTZVector */
	std::string *token;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 653; } /* = unique id SOAP_TYPE_onvifXsd__PTZPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPreset() { onvifXsd__PTZPreset::soap_default(NULL); }
	virtual ~onvifXsd__PTZPreset() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZMoveStatus
#define SOAP_TYPE_onvifXsd__PTZMoveStatus (654)
/* onvifXsd:PTZMoveStatus */
class SOAP_CMAC onvifXsd__PTZMoveStatus : public xsd__anyType
{
public:
	enum onvifXsd__MoveStatus *PanTilt;	/* optional element of type onvifXsd:MoveStatus */
	enum onvifXsd__MoveStatus *Zoom;	/* optional element of type onvifXsd:MoveStatus */
public:
	virtual int soap_type() const { return 654; } /* = unique id SOAP_TYPE_onvifXsd__PTZMoveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZMoveStatus() { onvifXsd__PTZMoveStatus::soap_default(NULL); }
	virtual ~onvifXsd__PTZMoveStatus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PresetTour
#define SOAP_TYPE_onvifXsd__PresetTour (655)
/* onvifXsd:PresetTour */
class SOAP_CMAC onvifXsd__PresetTour : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type onvifXsd:Name */
	class onvifXsd__PTZPresetTourStatus *Status;	/* required element of type onvifXsd:PTZPresetTourStatus */
	bool AutoStart;	/* required element of type xsd:boolean */
	class onvifXsd__PTZPresetTourStartingCondition *StartingCondition;	/* required element of type onvifXsd:PTZPresetTourStartingCondition */
	std::vector<class onvifXsd__PTZPresetTourSpot * >TourSpot;	/* optional element of type onvifXsd:PTZPresetTourSpot */
	class onvifXsd__PTZPresetTourExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourExtension */
	std::string *token;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_onvifXsd__PresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PresetTour() { onvifXsd__PresetTour::soap_default(NULL); }
	virtual ~onvifXsd__PresetTour() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourExtension (656)
/* onvifXsd:PTZPresetTourExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourExtension() { onvifXsd__PTZPresetTourExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourSpot
#define SOAP_TYPE_onvifXsd__PTZPresetTourSpot (657)
/* onvifXsd:PTZPresetTourSpot */
class SOAP_CMAC onvifXsd__PTZPresetTourSpot : public xsd__anyType
{
public:
	class onvifXsd__PTZPresetTourPresetDetail *PresetDetail;	/* required element of type onvifXsd:PTZPresetTourPresetDetail */
	onvifXsd__PTZSpeed *Speed;	/* optional element of type onvifXsd:PTZSpeed */
	std::string *StayTime;	/* optional element of type xsd:duration */
	class onvifXsd__PTZPresetTourSpotExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourSpotExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 657; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourSpot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourSpot() { onvifXsd__PTZPresetTourSpot::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourSpot() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourSpotExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourSpotExtension (658)
/* onvifXsd:PTZPresetTourSpotExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourSpotExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 658; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourSpotExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourSpotExtension() { onvifXsd__PTZPresetTourSpotExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourSpotExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__onvifXsd__union_PTZPresetTourPresetDetail (1604)
/* xsd:choice */
union _onvifXsd__union_PTZPresetTourPresetDetail
{
#define SOAP_UNION__onvifXsd__union_PTZPresetTourPresetDetail_PresetToken	(1)
	std::string *PresetToken;
#define SOAP_UNION__onvifXsd__union_PTZPresetTourPresetDetail_Home	(2)
	bool Home;
#define SOAP_UNION__onvifXsd__union_PTZPresetTourPresetDetail_PTZPosition	(3)
	onvifXsd__PTZVector *PTZPosition;
#define SOAP_UNION__onvifXsd__union_PTZPresetTourPresetDetail_TypeExtension	(4)
	class onvifXsd__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetail
#define SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetail (659)
/* onvifXsd:PTZPresetTourPresetDetail */
class SOAP_CMAC onvifXsd__PTZPresetTourPresetDetail : public xsd__anyType
{
public:
	int __union_PTZPresetTourPresetDetail;	/* union discriminant (of union defined below) */
	union _onvifXsd__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;	/* required element of type xsd:choice */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 659; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourPresetDetail() { onvifXsd__PTZPresetTourPresetDetail::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourPresetDetail() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourTypeExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourTypeExtension (660)
/* onvifXsd:PTZPresetTourTypeExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourTypeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourTypeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourTypeExtension() { onvifXsd__PTZPresetTourTypeExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourTypeExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourStatus
#define SOAP_TYPE_onvifXsd__PTZPresetTourStatus (661)
/* onvifXsd:PTZPresetTourStatus */
class SOAP_CMAC onvifXsd__PTZPresetTourStatus : public xsd__anyType
{
public:
	enum onvifXsd__PTZPresetTourState State;	/* required element of type onvifXsd:PTZPresetTourState */
	onvifXsd__PTZPresetTourSpot *CurrentTourSpot;	/* optional element of type onvifXsd:PTZPresetTourSpot */
	class onvifXsd__PTZPresetTourStatusExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourStatusExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourStatus() { onvifXsd__PTZPresetTourStatus::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourStatus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourStatusExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourStatusExtension (662)
/* onvifXsd:PTZPresetTourStatusExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourStatusExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 662; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourStatusExtension() { onvifXsd__PTZPresetTourStatusExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourStartingCondition
#define SOAP_TYPE_onvifXsd__PTZPresetTourStartingCondition (663)
/* onvifXsd:PTZPresetTourStartingCondition */
class SOAP_CMAC onvifXsd__PTZPresetTourStartingCondition : public xsd__anyType
{
public:
	int *RecurringTime;	/* optional element of type xsd:int */
	std::string *RecurringDuration;	/* optional element of type xsd:duration */
	enum onvifXsd__PTZPresetTourDirection *Direction;	/* optional element of type onvifXsd:PTZPresetTourDirection */
	class onvifXsd__PTZPresetTourStartingConditionExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourStartingConditionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 663; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourStartingCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourStartingCondition() { onvifXsd__PTZPresetTourStartingCondition::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourStartingCondition() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionExtension (664)
/* onvifXsd:PTZPresetTourStartingConditionExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourStartingConditionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 664; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourStartingConditionExtension() { onvifXsd__PTZPresetTourStartingConditionExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourStartingConditionExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourOptions
#define SOAP_TYPE_onvifXsd__PTZPresetTourOptions (665)
/* onvifXsd:PTZPresetTourOptions */
class SOAP_CMAC onvifXsd__PTZPresetTourOptions : public xsd__anyType
{
public:
	bool AutoStart;	/* required element of type xsd:boolean */
	class onvifXsd__PTZPresetTourStartingConditionOptions *StartingCondition;	/* required element of type onvifXsd:PTZPresetTourStartingConditionOptions */
	class onvifXsd__PTZPresetTourSpotOptions *TourSpot;	/* required element of type onvifXsd:PTZPresetTourSpotOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourOptions() { onvifXsd__PTZPresetTourOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourSpotOptions
#define SOAP_TYPE_onvifXsd__PTZPresetTourSpotOptions (666)
/* onvifXsd:PTZPresetTourSpotOptions */
class SOAP_CMAC onvifXsd__PTZPresetTourSpotOptions : public xsd__anyType
{
public:
	class onvifXsd__PTZPresetTourPresetDetailOptions *PresetDetail;	/* required element of type onvifXsd:PTZPresetTourPresetDetailOptions */
	onvifXsd__DurationRange *StayTime;	/* required element of type onvifXsd:DurationRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourSpotOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourSpotOptions() { onvifXsd__PTZPresetTourSpotOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourSpotOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetailOptions (667)
/* onvifXsd:PTZPresetTourPresetDetailOptions */
class SOAP_CMAC onvifXsd__PTZPresetTourPresetDetailOptions : public xsd__anyType
{
public:
	std::vector<std::string >PresetToken;	/* optional element of type onvifXsd:ReferenceToken */
	bool *Home;	/* optional element of type xsd:boolean */
	onvifXsd__Space2DDescription *PanTiltPositionSpace;	/* optional element of type onvifXsd:Space2DDescription */
	onvifXsd__Space1DDescription *ZoomPositionSpace;	/* optional element of type onvifXsd:Space1DDescription */
	class onvifXsd__PTZPresetTourPresetDetailOptionsExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourPresetDetailOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 667; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetailOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourPresetDetailOptions() { onvifXsd__PTZPresetTourPresetDetailOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourPresetDetailOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetailOptionsExtension (668)
/* onvifXsd:PTZPresetTourPresetDetailOptionsExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourPresetDetailOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 668; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourPresetDetailOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourPresetDetailOptionsExtension() { onvifXsd__PTZPresetTourPresetDetailOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourPresetDetailOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionOptions (669)
/* onvifXsd:PTZPresetTourStartingConditionOptions */
class SOAP_CMAC onvifXsd__PTZPresetTourStartingConditionOptions : public xsd__anyType
{
public:
	onvifXsd__IntRange *RecurringTime;	/* optional element of type onvifXsd:IntRange */
	onvifXsd__DurationRange *RecurringDuration;	/* optional element of type onvifXsd:DurationRange */
	std::vector<enum onvifXsd__PTZPresetTourDirection >Direction;	/* optional element of type onvifXsd:PTZPresetTourDirection */
	class onvifXsd__PTZPresetTourStartingConditionOptionsExtension *Extension;	/* optional element of type onvifXsd:PTZPresetTourStartingConditionOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 669; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourStartingConditionOptions() { onvifXsd__PTZPresetTourStartingConditionOptions::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourStartingConditionOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionOptionsExtension (670)
/* onvifXsd:PTZPresetTourStartingConditionOptionsExtension */
class SOAP_CMAC onvifXsd__PTZPresetTourStartingConditionOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_onvifXsd__PTZPresetTourStartingConditionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPresetTourStartingConditionOptionsExtension() { onvifXsd__PTZPresetTourStartingConditionOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZPresetTourStartingConditionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingStatus
#define SOAP_TYPE_onvifXsd__ImagingStatus (671)
/* onvifXsd:ImagingStatus */
class SOAP_CMAC onvifXsd__ImagingStatus : public xsd__anyType
{
public:
	class onvifXsd__FocusStatus *FocusStatus;	/* required element of type onvifXsd:FocusStatus */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_onvifXsd__ImagingStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingStatus() { onvifXsd__ImagingStatus::soap_default(NULL); }
	virtual ~onvifXsd__ImagingStatus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusStatus
#define SOAP_TYPE_onvifXsd__FocusStatus (672)
/* onvifXsd:FocusStatus */
class SOAP_CMAC onvifXsd__FocusStatus : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	enum onvifXsd__MoveStatus MoveStatus;	/* required element of type onvifXsd:MoveStatus */
	std::string Error;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 672; } /* = unique id SOAP_TYPE_onvifXsd__FocusStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusStatus() { onvifXsd__FocusStatus::soap_default(NULL); }
	virtual ~onvifXsd__FocusStatus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusConfiguration
#define SOAP_TYPE_onvifXsd__FocusConfiguration (673)
/* onvifXsd:FocusConfiguration */
class SOAP_CMAC onvifXsd__FocusConfiguration : public xsd__anyType
{
public:
	enum onvifXsd__AutoFocusMode AutoFocusMode;	/* required element of type onvifXsd:AutoFocusMode */
	float DefaultSpeed;	/* required element of type xsd:float */
	float NearLimit;	/* required element of type xsd:float */
	float FarLimit;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 673; } /* = unique id SOAP_TYPE_onvifXsd__FocusConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusConfiguration() { onvifXsd__FocusConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__FocusConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingSettings
#define SOAP_TYPE_onvifXsd__ImagingSettings (674)
/* onvifXsd:ImagingSettings */
class SOAP_CMAC onvifXsd__ImagingSettings : public xsd__anyType
{
public:
	class onvifXsd__BacklightCompensation *BacklightCompensation;	/* optional element of type onvifXsd:BacklightCompensation */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class onvifXsd__Exposure *Exposure;	/* optional element of type onvifXsd:Exposure */
	onvifXsd__FocusConfiguration *Focus;	/* optional element of type onvifXsd:FocusConfiguration */
	enum onvifXsd__IrCutFilterMode *IrCutFilter;	/* optional element of type onvifXsd:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class onvifXsd__WideDynamicRange *WideDynamicRange;	/* optional element of type onvifXsd:WideDynamicRange */
	class onvifXsd__WhiteBalance *WhiteBalance;	/* optional element of type onvifXsd:WhiteBalance */
	class onvifXsd__ImagingSettingsExtension *Extension;	/* optional element of type onvifXsd:ImagingSettingsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 674; } /* = unique id SOAP_TYPE_onvifXsd__ImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingSettings() { onvifXsd__ImagingSettings::soap_default(NULL); }
	virtual ~onvifXsd__ImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingSettingsExtension
#define SOAP_TYPE_onvifXsd__ImagingSettingsExtension (675)
/* onvifXsd:ImagingSettingsExtension */
class SOAP_CMAC onvifXsd__ImagingSettingsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_onvifXsd__ImagingSettingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingSettingsExtension() { onvifXsd__ImagingSettingsExtension::soap_default(NULL); }
	virtual ~onvifXsd__ImagingSettingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Exposure
#define SOAP_TYPE_onvifXsd__Exposure (676)
/* onvifXsd:Exposure */
class SOAP_CMAC onvifXsd__Exposure : public xsd__anyType
{
public:
	enum onvifXsd__ExposureMode Mode;	/* required element of type onvifXsd:ExposureMode */
	enum onvifXsd__ExposurePriority Priority;	/* required element of type onvifXsd:ExposurePriority */
	class onvifXsd__Rectangle *Window;	/* required element of type onvifXsd:Rectangle */
	float MinExposureTime;	/* required element of type xsd:float */
	float MaxExposureTime;	/* required element of type xsd:float */
	float MinGain;	/* required element of type xsd:float */
	float MaxGain;	/* required element of type xsd:float */
	float MinIris;	/* required element of type xsd:float */
	float MaxIris;	/* required element of type xsd:float */
	float ExposureTime;	/* required element of type xsd:float */
	float Gain;	/* required element of type xsd:float */
	float Iris;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_onvifXsd__Exposure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Exposure() { onvifXsd__Exposure::soap_default(NULL); }
	virtual ~onvifXsd__Exposure() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WideDynamicRange
#define SOAP_TYPE_onvifXsd__WideDynamicRange (677)
/* onvifXsd:WideDynamicRange */
class SOAP_CMAC onvifXsd__WideDynamicRange : public xsd__anyType
{
public:
	enum onvifXsd__WideDynamicMode Mode;	/* required element of type onvifXsd:WideDynamicMode */
	float Level;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 677; } /* = unique id SOAP_TYPE_onvifXsd__WideDynamicRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WideDynamicRange() { onvifXsd__WideDynamicRange::soap_default(NULL); }
	virtual ~onvifXsd__WideDynamicRange() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BacklightCompensation
#define SOAP_TYPE_onvifXsd__BacklightCompensation (678)
/* onvifXsd:BacklightCompensation */
class SOAP_CMAC onvifXsd__BacklightCompensation : public xsd__anyType
{
public:
	enum onvifXsd__BacklightCompensationMode Mode;	/* required element of type onvifXsd:BacklightCompensationMode */
	float Level;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 678; } /* = unique id SOAP_TYPE_onvifXsd__BacklightCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BacklightCompensation() { onvifXsd__BacklightCompensation::soap_default(NULL); }
	virtual ~onvifXsd__BacklightCompensation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingOptions
#define SOAP_TYPE_onvifXsd__ImagingOptions (679)
/* onvifXsd:ImagingOptions */
class SOAP_CMAC onvifXsd__ImagingOptions : public xsd__anyType
{
public:
	class onvifXsd__BacklightCompensationOptions *BacklightCompensation;	/* required element of type onvifXsd:BacklightCompensationOptions */
	onvifXsd__FloatRange *Brightness;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *ColorSaturation;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Contrast;	/* required element of type onvifXsd:FloatRange */
	class onvifXsd__ExposureOptions *Exposure;	/* required element of type onvifXsd:ExposureOptions */
	class onvifXsd__FocusOptions *Focus;	/* required element of type onvifXsd:FocusOptions */
	std::vector<enum onvifXsd__IrCutFilterMode >IrCutFilterModes;	/* required element of type onvifXsd:IrCutFilterMode */
	onvifXsd__FloatRange *Sharpness;	/* required element of type onvifXsd:FloatRange */
	class onvifXsd__WideDynamicRangeOptions *WideDynamicRange;	/* required element of type onvifXsd:WideDynamicRangeOptions */
	class onvifXsd__WhiteBalanceOptions *WhiteBalance;	/* required element of type onvifXsd:WhiteBalanceOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 679; } /* = unique id SOAP_TYPE_onvifXsd__ImagingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingOptions() { onvifXsd__ImagingOptions::soap_default(NULL); }
	virtual ~onvifXsd__ImagingOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WideDynamicRangeOptions
#define SOAP_TYPE_onvifXsd__WideDynamicRangeOptions (680)
/* onvifXsd:WideDynamicRangeOptions */
class SOAP_CMAC onvifXsd__WideDynamicRangeOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__WideDynamicMode >Mode;	/* required element of type onvifXsd:WideDynamicMode */
	onvifXsd__FloatRange *Level;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_onvifXsd__WideDynamicRangeOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WideDynamicRangeOptions() { onvifXsd__WideDynamicRangeOptions::soap_default(NULL); }
	virtual ~onvifXsd__WideDynamicRangeOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BacklightCompensationOptions
#define SOAP_TYPE_onvifXsd__BacklightCompensationOptions (681)
/* onvifXsd:BacklightCompensationOptions */
class SOAP_CMAC onvifXsd__BacklightCompensationOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__WideDynamicMode >Mode;	/* required element of type onvifXsd:WideDynamicMode */
	onvifXsd__FloatRange *Level;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_onvifXsd__BacklightCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BacklightCompensationOptions() { onvifXsd__BacklightCompensationOptions::soap_default(NULL); }
	virtual ~onvifXsd__BacklightCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusOptions
#define SOAP_TYPE_onvifXsd__FocusOptions (682)
/* onvifXsd:FocusOptions */
class SOAP_CMAC onvifXsd__FocusOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__AutoFocusMode >AutoFocusModes;	/* optional element of type onvifXsd:AutoFocusMode */
	onvifXsd__FloatRange *DefaultSpeed;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *NearLimit;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *FarLimit;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 682; } /* = unique id SOAP_TYPE_onvifXsd__FocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusOptions() { onvifXsd__FocusOptions::soap_default(NULL); }
	virtual ~onvifXsd__FocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ExposureOptions
#define SOAP_TYPE_onvifXsd__ExposureOptions (683)
/* onvifXsd:ExposureOptions */
class SOAP_CMAC onvifXsd__ExposureOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__ExposureMode >Mode;	/* required element of type onvifXsd:ExposureMode */
	std::vector<enum onvifXsd__ExposurePriority >Priority;	/* required element of type onvifXsd:ExposurePriority */
	onvifXsd__FloatRange *MinExposureTime;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MaxExposureTime;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MinGain;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MaxGain;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MinIris;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MaxIris;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *ExposureTime;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Gain;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Iris;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 683; } /* = unique id SOAP_TYPE_onvifXsd__ExposureOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ExposureOptions() { onvifXsd__ExposureOptions::soap_default(NULL); }
	virtual ~onvifXsd__ExposureOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalanceOptions
#define SOAP_TYPE_onvifXsd__WhiteBalanceOptions (684)
/* onvifXsd:WhiteBalanceOptions */
class SOAP_CMAC onvifXsd__WhiteBalanceOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__WhiteBalanceMode >Mode;	/* required element of type onvifXsd:WhiteBalanceMode */
	onvifXsd__FloatRange *YrGain;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *YbGain;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 684; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalanceOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalanceOptions() { onvifXsd__WhiteBalanceOptions::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalanceOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusMove
#define SOAP_TYPE_onvifXsd__FocusMove (685)
/* onvifXsd:FocusMove */
class SOAP_CMAC onvifXsd__FocusMove : public xsd__anyType
{
public:
	class onvifXsd__AbsoluteFocus *Absolute;	/* optional element of type onvifXsd:AbsoluteFocus */
	class onvifXsd__RelativeFocus *Relative;	/* optional element of type onvifXsd:RelativeFocus */
	class onvifXsd__ContinuousFocus *Continuous;	/* optional element of type onvifXsd:ContinuousFocus */
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_onvifXsd__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusMove() { onvifXsd__FocusMove::soap_default(NULL); }
	virtual ~onvifXsd__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AbsoluteFocus
#define SOAP_TYPE_onvifXsd__AbsoluteFocus (686)
/* onvifXsd:AbsoluteFocus */
class SOAP_CMAC onvifXsd__AbsoluteFocus : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_onvifXsd__AbsoluteFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AbsoluteFocus() { onvifXsd__AbsoluteFocus::soap_default(NULL); }
	virtual ~onvifXsd__AbsoluteFocus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelativeFocus
#define SOAP_TYPE_onvifXsd__RelativeFocus (687)
/* onvifXsd:RelativeFocus */
class SOAP_CMAC onvifXsd__RelativeFocus : public xsd__anyType
{
public:
	float Distance;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 687; } /* = unique id SOAP_TYPE_onvifXsd__RelativeFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelativeFocus() { onvifXsd__RelativeFocus::soap_default(NULL); }
	virtual ~onvifXsd__RelativeFocus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ContinuousFocus
#define SOAP_TYPE_onvifXsd__ContinuousFocus (688)
/* onvifXsd:ContinuousFocus */
class SOAP_CMAC onvifXsd__ContinuousFocus : public xsd__anyType
{
public:
	float Speed;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 688; } /* = unique id SOAP_TYPE_onvifXsd__ContinuousFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ContinuousFocus() { onvifXsd__ContinuousFocus::soap_default(NULL); }
	virtual ~onvifXsd__ContinuousFocus() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MoveOptions
#define SOAP_TYPE_onvifXsd__MoveOptions (689)
/* onvifXsd:MoveOptions */
class SOAP_CMAC onvifXsd__MoveOptions : public xsd__anyType
{
public:
	class onvifXsd__AbsoluteFocusOptions *Absolute;	/* optional element of type onvifXsd:AbsoluteFocusOptions */
	class onvifXsd__RelativeFocusOptions *Relative;	/* optional element of type onvifXsd:RelativeFocusOptions */
	class onvifXsd__ContinuousFocusOptions *Continuous;	/* optional element of type onvifXsd:ContinuousFocusOptions */
public:
	virtual int soap_type() const { return 689; } /* = unique id SOAP_TYPE_onvifXsd__MoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MoveOptions() { onvifXsd__MoveOptions::soap_default(NULL); }
	virtual ~onvifXsd__MoveOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AbsoluteFocusOptions
#define SOAP_TYPE_onvifXsd__AbsoluteFocusOptions (690)
/* onvifXsd:AbsoluteFocusOptions */
class SOAP_CMAC onvifXsd__AbsoluteFocusOptions : public xsd__anyType
{
public:
	onvifXsd__FloatRange *Position;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Speed;	/* optional element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_onvifXsd__AbsoluteFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AbsoluteFocusOptions() { onvifXsd__AbsoluteFocusOptions::soap_default(NULL); }
	virtual ~onvifXsd__AbsoluteFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelativeFocusOptions
#define SOAP_TYPE_onvifXsd__RelativeFocusOptions (691)
/* onvifXsd:RelativeFocusOptions */
class SOAP_CMAC onvifXsd__RelativeFocusOptions : public xsd__anyType
{
public:
	onvifXsd__FloatRange *Distance;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Speed;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_onvifXsd__RelativeFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelativeFocusOptions() { onvifXsd__RelativeFocusOptions::soap_default(NULL); }
	virtual ~onvifXsd__RelativeFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ContinuousFocusOptions
#define SOAP_TYPE_onvifXsd__ContinuousFocusOptions (692)
/* onvifXsd:ContinuousFocusOptions */
class SOAP_CMAC onvifXsd__ContinuousFocusOptions : public xsd__anyType
{
public:
	onvifXsd__FloatRange *Speed;	/* required element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 692; } /* = unique id SOAP_TYPE_onvifXsd__ContinuousFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ContinuousFocusOptions() { onvifXsd__ContinuousFocusOptions::soap_default(NULL); }
	virtual ~onvifXsd__ContinuousFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalance
#define SOAP_TYPE_onvifXsd__WhiteBalance (693)
/* onvifXsd:WhiteBalance */
class SOAP_CMAC onvifXsd__WhiteBalance : public xsd__anyType
{
public:
	enum onvifXsd__WhiteBalanceMode Mode;	/* required element of type onvifXsd:WhiteBalanceMode */
	float CrGain;	/* required element of type xsd:float */
	float CbGain;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 693; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalance() { onvifXsd__WhiteBalance::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalance() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingStatus20
#define SOAP_TYPE_onvifXsd__ImagingStatus20 (694)
/* onvifXsd:ImagingStatus20 */
class SOAP_CMAC onvifXsd__ImagingStatus20 : public xsd__anyType
{
public:
	class onvifXsd__FocusStatus20 *FocusStatus20;	/* optional element of type onvifXsd:FocusStatus20 */
	class onvifXsd__ImagingStatus20Extension *Extension;	/* optional element of type onvifXsd:ImagingStatus20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 694; } /* = unique id SOAP_TYPE_onvifXsd__ImagingStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingStatus20() { onvifXsd__ImagingStatus20::soap_default(NULL); }
	virtual ~onvifXsd__ImagingStatus20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingStatus20Extension
#define SOAP_TYPE_onvifXsd__ImagingStatus20Extension (695)
/* onvifXsd:ImagingStatus20Extension */
class SOAP_CMAC onvifXsd__ImagingStatus20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 695; } /* = unique id SOAP_TYPE_onvifXsd__ImagingStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingStatus20Extension() { onvifXsd__ImagingStatus20Extension::soap_default(NULL); }
	virtual ~onvifXsd__ImagingStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusStatus20
#define SOAP_TYPE_onvifXsd__FocusStatus20 (696)
/* onvifXsd:FocusStatus20 */
class SOAP_CMAC onvifXsd__FocusStatus20 : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	enum onvifXsd__MoveStatus MoveStatus;	/* required element of type onvifXsd:MoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	class onvifXsd__FocusStatus20Extension *Extension;	/* optional element of type onvifXsd:FocusStatus20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_onvifXsd__FocusStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusStatus20() { onvifXsd__FocusStatus20::soap_default(NULL); }
	virtual ~onvifXsd__FocusStatus20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusStatus20Extension
#define SOAP_TYPE_onvifXsd__FocusStatus20Extension (697)
/* onvifXsd:FocusStatus20Extension */
class SOAP_CMAC onvifXsd__FocusStatus20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_onvifXsd__FocusStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusStatus20Extension() { onvifXsd__FocusStatus20Extension::soap_default(NULL); }
	virtual ~onvifXsd__FocusStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingSettings20
#define SOAP_TYPE_onvifXsd__ImagingSettings20 (698)
/* onvifXsd:ImagingSettings20 */
class SOAP_CMAC onvifXsd__ImagingSettings20 : public xsd__anyType
{
public:
	class onvifXsd__BacklightCompensation20 *BacklightCompensation;	/* optional element of type onvifXsd:BacklightCompensation20 */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class onvifXsd__Exposure20 *Exposure;	/* optional element of type onvifXsd:Exposure20 */
	class onvifXsd__FocusConfiguration20 *Focus;	/* optional element of type onvifXsd:FocusConfiguration20 */
	enum onvifXsd__IrCutFilterMode *IrCutFilter;	/* optional element of type onvifXsd:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class onvifXsd__WideDynamicRange20 *WideDynamicRange;	/* optional element of type onvifXsd:WideDynamicRange20 */
	class onvifXsd__WhiteBalance20 *WhiteBalance;	/* optional element of type onvifXsd:WhiteBalance20 */
	class onvifXsd__ImagingSettingsExtension20 *Extension;	/* optional element of type onvifXsd:ImagingSettingsExtension20 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 698; } /* = unique id SOAP_TYPE_onvifXsd__ImagingSettings20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingSettings20() { onvifXsd__ImagingSettings20::soap_default(NULL); }
	virtual ~onvifXsd__ImagingSettings20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingSettingsExtension20
#define SOAP_TYPE_onvifXsd__ImagingSettingsExtension20 (699)
/* onvifXsd:ImagingSettingsExtension20 */
class SOAP_CMAC onvifXsd__ImagingSettingsExtension20 : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__ImageStabilization *ImageStabilization;	/* optional element of type onvifXsd:ImageStabilization */
	class onvifXsd__ImagingSettingsExtension202 *Extension;	/* optional element of type onvifXsd:ImagingSettingsExtension202 */
public:
	virtual int soap_type() const { return 699; } /* = unique id SOAP_TYPE_onvifXsd__ImagingSettingsExtension20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingSettingsExtension20() { onvifXsd__ImagingSettingsExtension20::soap_default(NULL); }
	virtual ~onvifXsd__ImagingSettingsExtension20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingSettingsExtension202
#define SOAP_TYPE_onvifXsd__ImagingSettingsExtension202 (700)
/* onvifXsd:ImagingSettingsExtension202 */
class SOAP_CMAC onvifXsd__ImagingSettingsExtension202 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 700; } /* = unique id SOAP_TYPE_onvifXsd__ImagingSettingsExtension202 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingSettingsExtension202() { onvifXsd__ImagingSettingsExtension202::soap_default(NULL); }
	virtual ~onvifXsd__ImagingSettingsExtension202() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImageStabilization
#define SOAP_TYPE_onvifXsd__ImageStabilization (701)
/* onvifXsd:ImageStabilization */
class SOAP_CMAC onvifXsd__ImageStabilization : public xsd__anyType
{
public:
	enum onvifXsd__ImageStabilizationMode Mode;	/* required element of type onvifXsd:ImageStabilizationMode */
	float *Level;	/* optional element of type xsd:float */
	class onvifXsd__ImageStabilizationExtension *Extension;	/* optional element of type onvifXsd:ImageStabilizationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE_onvifXsd__ImageStabilization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImageStabilization() { onvifXsd__ImageStabilization::soap_default(NULL); }
	virtual ~onvifXsd__ImageStabilization() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImageStabilizationExtension
#define SOAP_TYPE_onvifXsd__ImageStabilizationExtension (702)
/* onvifXsd:ImageStabilizationExtension */
class SOAP_CMAC onvifXsd__ImageStabilizationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE_onvifXsd__ImageStabilizationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImageStabilizationExtension() { onvifXsd__ImageStabilizationExtension::soap_default(NULL); }
	virtual ~onvifXsd__ImageStabilizationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WideDynamicRange20
#define SOAP_TYPE_onvifXsd__WideDynamicRange20 (703)
/* onvifXsd:WideDynamicRange20 */
class SOAP_CMAC onvifXsd__WideDynamicRange20 : public xsd__anyType
{
public:
	enum onvifXsd__WideDynamicMode Mode;	/* required element of type onvifXsd:WideDynamicMode */
	float *Level;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 703; } /* = unique id SOAP_TYPE_onvifXsd__WideDynamicRange20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WideDynamicRange20() { onvifXsd__WideDynamicRange20::soap_default(NULL); }
	virtual ~onvifXsd__WideDynamicRange20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BacklightCompensation20
#define SOAP_TYPE_onvifXsd__BacklightCompensation20 (704)
/* onvifXsd:BacklightCompensation20 */
class SOAP_CMAC onvifXsd__BacklightCompensation20 : public xsd__anyType
{
public:
	enum onvifXsd__BacklightCompensationMode Mode;	/* required element of type onvifXsd:BacklightCompensationMode */
	float *Level;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 704; } /* = unique id SOAP_TYPE_onvifXsd__BacklightCompensation20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BacklightCompensation20() { onvifXsd__BacklightCompensation20::soap_default(NULL); }
	virtual ~onvifXsd__BacklightCompensation20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Exposure20
#define SOAP_TYPE_onvifXsd__Exposure20 (705)
/* onvifXsd:Exposure20 */
class SOAP_CMAC onvifXsd__Exposure20 : public xsd__anyType
{
public:
	enum onvifXsd__ExposureMode Mode;	/* required element of type onvifXsd:ExposureMode */
	enum onvifXsd__ExposurePriority *Priority;	/* optional element of type onvifXsd:ExposurePriority */
	onvifXsd__Rectangle *Window;	/* optional element of type onvifXsd:Rectangle */
	float *MinExposureTime;	/* optional element of type xsd:float */
	float *MaxExposureTime;	/* optional element of type xsd:float */
	float *MinGain;	/* optional element of type xsd:float */
	float *MaxGain;	/* optional element of type xsd:float */
	float *MinIris;	/* optional element of type xsd:float */
	float *MaxIris;	/* optional element of type xsd:float */
	float *ExposureTime;	/* optional element of type xsd:float */
	float *Gain;	/* optional element of type xsd:float */
	float *Iris;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 705; } /* = unique id SOAP_TYPE_onvifXsd__Exposure20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Exposure20() { onvifXsd__Exposure20::soap_default(NULL); }
	virtual ~onvifXsd__Exposure20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingOptions20
#define SOAP_TYPE_onvifXsd__ImagingOptions20 (706)
/* onvifXsd:ImagingOptions20 */
class SOAP_CMAC onvifXsd__ImagingOptions20 : public xsd__anyType
{
public:
	class onvifXsd__BacklightCompensationOptions20 *BacklightCompensation;	/* optional element of type onvifXsd:BacklightCompensationOptions20 */
	onvifXsd__FloatRange *Brightness;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *ColorSaturation;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Contrast;	/* optional element of type onvifXsd:FloatRange */
	class onvifXsd__ExposureOptions20 *Exposure;	/* optional element of type onvifXsd:ExposureOptions20 */
	class onvifXsd__FocusOptions20 *Focus;	/* optional element of type onvifXsd:FocusOptions20 */
	std::vector<enum onvifXsd__IrCutFilterMode >IrCutFilterModes;	/* optional element of type onvifXsd:IrCutFilterMode */
	onvifXsd__FloatRange *Sharpness;	/* optional element of type onvifXsd:FloatRange */
	class onvifXsd__WideDynamicRangeOptions20 *WideDynamicRange;	/* optional element of type onvifXsd:WideDynamicRangeOptions20 */
	class onvifXsd__WhiteBalanceOptions20 *WhiteBalance;	/* optional element of type onvifXsd:WhiteBalanceOptions20 */
	class onvifXsd__ImagingOptions20Extension *Extension;	/* optional element of type onvifXsd:ImagingOptions20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE_onvifXsd__ImagingOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingOptions20() { onvifXsd__ImagingOptions20::soap_default(NULL); }
	virtual ~onvifXsd__ImagingOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingOptions20Extension
#define SOAP_TYPE_onvifXsd__ImagingOptions20Extension (707)
/* onvifXsd:ImagingOptions20Extension */
class SOAP_CMAC onvifXsd__ImagingOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__ImageStabilizationOptions *ImageStabilization;	/* optional element of type onvifXsd:ImageStabilizationOptions */
	class onvifXsd__ImagingOptions20Extension2 *Extension;	/* optional element of type onvifXsd:ImagingOptions20Extension2 */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE_onvifXsd__ImagingOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingOptions20Extension() { onvifXsd__ImagingOptions20Extension::soap_default(NULL); }
	virtual ~onvifXsd__ImagingOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImagingOptions20Extension2
#define SOAP_TYPE_onvifXsd__ImagingOptions20Extension2 (708)
/* onvifXsd:ImagingOptions20Extension2 */
class SOAP_CMAC onvifXsd__ImagingOptions20Extension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 708; } /* = unique id SOAP_TYPE_onvifXsd__ImagingOptions20Extension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImagingOptions20Extension2() { onvifXsd__ImagingOptions20Extension2::soap_default(NULL); }
	virtual ~onvifXsd__ImagingOptions20Extension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImageStabilizationOptions
#define SOAP_TYPE_onvifXsd__ImageStabilizationOptions (709)
/* onvifXsd:ImageStabilizationOptions */
class SOAP_CMAC onvifXsd__ImageStabilizationOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__ImageStabilizationMode >Mode;	/* required element of type onvifXsd:ImageStabilizationMode */
	onvifXsd__FloatRange *Level;	/* optional element of type onvifXsd:FloatRange */
	class onvifXsd__ImageStabilizationOptionsExtension *Extension;	/* optional element of type onvifXsd:ImageStabilizationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 709; } /* = unique id SOAP_TYPE_onvifXsd__ImageStabilizationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImageStabilizationOptions() { onvifXsd__ImageStabilizationOptions::soap_default(NULL); }
	virtual ~onvifXsd__ImageStabilizationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ImageStabilizationOptionsExtension
#define SOAP_TYPE_onvifXsd__ImageStabilizationOptionsExtension (710)
/* onvifXsd:ImageStabilizationOptionsExtension */
class SOAP_CMAC onvifXsd__ImageStabilizationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 710; } /* = unique id SOAP_TYPE_onvifXsd__ImageStabilizationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ImageStabilizationOptionsExtension() { onvifXsd__ImageStabilizationOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__ImageStabilizationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WideDynamicRangeOptions20
#define SOAP_TYPE_onvifXsd__WideDynamicRangeOptions20 (711)
/* onvifXsd:WideDynamicRangeOptions20 */
class SOAP_CMAC onvifXsd__WideDynamicRangeOptions20 : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__WideDynamicMode >Mode;	/* required element of type onvifXsd:WideDynamicMode */
	onvifXsd__FloatRange *Level;	/* optional element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE_onvifXsd__WideDynamicRangeOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WideDynamicRangeOptions20() { onvifXsd__WideDynamicRangeOptions20::soap_default(NULL); }
	virtual ~onvifXsd__WideDynamicRangeOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BacklightCompensationOptions20
#define SOAP_TYPE_onvifXsd__BacklightCompensationOptions20 (712)
/* onvifXsd:BacklightCompensationOptions20 */
class SOAP_CMAC onvifXsd__BacklightCompensationOptions20 : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__BacklightCompensationMode >Mode;	/* required element of type onvifXsd:BacklightCompensationMode */
	onvifXsd__FloatRange *Level;	/* optional element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE_onvifXsd__BacklightCompensationOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BacklightCompensationOptions20() { onvifXsd__BacklightCompensationOptions20::soap_default(NULL); }
	virtual ~onvifXsd__BacklightCompensationOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ExposureOptions20
#define SOAP_TYPE_onvifXsd__ExposureOptions20 (713)
/* onvifXsd:ExposureOptions20 */
class SOAP_CMAC onvifXsd__ExposureOptions20 : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__ExposureMode >Mode;	/* required element of type onvifXsd:ExposureMode */
	std::vector<enum onvifXsd__ExposurePriority >Priority;	/* optional element of type onvifXsd:ExposurePriority */
	onvifXsd__FloatRange *MinExposureTime;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MaxExposureTime;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MinGain;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MaxGain;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MinIris;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *MaxIris;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *ExposureTime;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Gain;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Iris;	/* optional element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 713; } /* = unique id SOAP_TYPE_onvifXsd__ExposureOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ExposureOptions20() { onvifXsd__ExposureOptions20::soap_default(NULL); }
	virtual ~onvifXsd__ExposureOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MoveOptions20
#define SOAP_TYPE_onvifXsd__MoveOptions20 (714)
/* onvifXsd:MoveOptions20 */
class SOAP_CMAC onvifXsd__MoveOptions20 : public xsd__anyType
{
public:
	onvifXsd__AbsoluteFocusOptions *Absolute;	/* optional element of type onvifXsd:AbsoluteFocusOptions */
	class onvifXsd__RelativeFocusOptions20 *Relative;	/* optional element of type onvifXsd:RelativeFocusOptions20 */
	onvifXsd__ContinuousFocusOptions *Continuous;	/* optional element of type onvifXsd:ContinuousFocusOptions */
public:
	virtual int soap_type() const { return 714; } /* = unique id SOAP_TYPE_onvifXsd__MoveOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MoveOptions20() { onvifXsd__MoveOptions20::soap_default(NULL); }
	virtual ~onvifXsd__MoveOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelativeFocusOptions20
#define SOAP_TYPE_onvifXsd__RelativeFocusOptions20 (715)
/* onvifXsd:RelativeFocusOptions20 */
class SOAP_CMAC onvifXsd__RelativeFocusOptions20 : public xsd__anyType
{
public:
	onvifXsd__FloatRange *Distance;	/* required element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *Speed;	/* optional element of type onvifXsd:FloatRange */
public:
	virtual int soap_type() const { return 715; } /* = unique id SOAP_TYPE_onvifXsd__RelativeFocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelativeFocusOptions20() { onvifXsd__RelativeFocusOptions20::soap_default(NULL); }
	virtual ~onvifXsd__RelativeFocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalance20
#define SOAP_TYPE_onvifXsd__WhiteBalance20 (716)
/* onvifXsd:WhiteBalance20 */
class SOAP_CMAC onvifXsd__WhiteBalance20 : public xsd__anyType
{
public:
	enum onvifXsd__WhiteBalanceMode Mode;	/* required element of type onvifXsd:WhiteBalanceMode */
	float *CrGain;	/* optional element of type xsd:float */
	float *CbGain;	/* optional element of type xsd:float */
	class onvifXsd__WhiteBalance20Extension *Extension;	/* optional element of type onvifXsd:WhiteBalance20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalance20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalance20() { onvifXsd__WhiteBalance20::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalance20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalance20Extension
#define SOAP_TYPE_onvifXsd__WhiteBalance20Extension (717)
/* onvifXsd:WhiteBalance20Extension */
class SOAP_CMAC onvifXsd__WhiteBalance20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalance20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalance20Extension() { onvifXsd__WhiteBalance20Extension::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalance20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusConfiguration20
#define SOAP_TYPE_onvifXsd__FocusConfiguration20 (718)
/* onvifXsd:FocusConfiguration20 */
class SOAP_CMAC onvifXsd__FocusConfiguration20 : public xsd__anyType
{
public:
	enum onvifXsd__AutoFocusMode AutoFocusMode;	/* required element of type onvifXsd:AutoFocusMode */
	float *DefaultSpeed;	/* optional element of type xsd:float */
	float *NearLimit;	/* optional element of type xsd:float */
	float *FarLimit;	/* optional element of type xsd:float */
	class onvifXsd__FocusConfiguration20Extension *Extension;	/* optional element of type onvifXsd:FocusConfiguration20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE_onvifXsd__FocusConfiguration20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusConfiguration20() { onvifXsd__FocusConfiguration20::soap_default(NULL); }
	virtual ~onvifXsd__FocusConfiguration20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusConfiguration20Extension
#define SOAP_TYPE_onvifXsd__FocusConfiguration20Extension (719)
/* onvifXsd:FocusConfiguration20Extension */
class SOAP_CMAC onvifXsd__FocusConfiguration20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE_onvifXsd__FocusConfiguration20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusConfiguration20Extension() { onvifXsd__FocusConfiguration20Extension::soap_default(NULL); }
	virtual ~onvifXsd__FocusConfiguration20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalanceOptions20
#define SOAP_TYPE_onvifXsd__WhiteBalanceOptions20 (720)
/* onvifXsd:WhiteBalanceOptions20 */
class SOAP_CMAC onvifXsd__WhiteBalanceOptions20 : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__WhiteBalanceMode >Mode;	/* required element of type onvifXsd:WhiteBalanceMode */
	onvifXsd__FloatRange *YrGain;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *YbGain;	/* optional element of type onvifXsd:FloatRange */
	class onvifXsd__WhiteBalanceOptions20Extension *Extension;	/* optional element of type onvifXsd:WhiteBalanceOptions20Extension */
public:
	virtual int soap_type() const { return 720; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalanceOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalanceOptions20() { onvifXsd__WhiteBalanceOptions20::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalanceOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__WhiteBalanceOptions20Extension
#define SOAP_TYPE_onvifXsd__WhiteBalanceOptions20Extension (721)
/* onvifXsd:WhiteBalanceOptions20Extension */
class SOAP_CMAC onvifXsd__WhiteBalanceOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 721; } /* = unique id SOAP_TYPE_onvifXsd__WhiteBalanceOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__WhiteBalanceOptions20Extension() { onvifXsd__WhiteBalanceOptions20Extension::soap_default(NULL); }
	virtual ~onvifXsd__WhiteBalanceOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusOptions20
#define SOAP_TYPE_onvifXsd__FocusOptions20 (722)
/* onvifXsd:FocusOptions20 */
class SOAP_CMAC onvifXsd__FocusOptions20 : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__AutoFocusMode >AutoFocusModes;	/* optional element of type onvifXsd:AutoFocusMode */
	onvifXsd__FloatRange *DefaultSpeed;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *NearLimit;	/* optional element of type onvifXsd:FloatRange */
	onvifXsd__FloatRange *FarLimit;	/* optional element of type onvifXsd:FloatRange */
	class onvifXsd__FocusOptions20Extension *Extension;	/* optional element of type onvifXsd:FocusOptions20Extension */
public:
	virtual int soap_type() const { return 722; } /* = unique id SOAP_TYPE_onvifXsd__FocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusOptions20() { onvifXsd__FocusOptions20::soap_default(NULL); }
	virtual ~onvifXsd__FocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FocusOptions20Extension
#define SOAP_TYPE_onvifXsd__FocusOptions20Extension (723)
/* onvifXsd:FocusOptions20Extension */
class SOAP_CMAC onvifXsd__FocusOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_onvifXsd__FocusOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FocusOptions20Extension() { onvifXsd__FocusOptions20Extension::soap_default(NULL); }
	virtual ~onvifXsd__FocusOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MessageExtension
#define SOAP_TYPE_onvifXsd__MessageExtension (724)
/* onvifXsd:MessageExtension */
class SOAP_CMAC onvifXsd__MessageExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_onvifXsd__MessageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MessageExtension() { onvifXsd__MessageExtension::soap_default(NULL); }
	virtual ~onvifXsd__MessageExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ItemList_SimpleItem
#define SOAP_TYPE__onvifXsd__ItemList_SimpleItem (1670)
/* onvifXsd:ItemList-SimpleItem */
class SOAP_CMAC _onvifXsd__ItemList_SimpleItem
{
public:
	std::string Name;	/* required attribute */
	std::string Value;	/* required attribute */
public:
	virtual int soap_type() const { return 1670; } /* = unique id SOAP_TYPE__onvifXsd__ItemList_SimpleItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ItemList_SimpleItem() { _onvifXsd__ItemList_SimpleItem::soap_default(NULL); }
	virtual ~_onvifXsd__ItemList_SimpleItem() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ItemList_ElementItem
#define SOAP_TYPE__onvifXsd__ItemList_ElementItem (1673)
/* onvifXsd:ItemList-ElementItem */
class SOAP_CMAC _onvifXsd__ItemList_ElementItem
{
public:
	char *__any;
	std::string Name;	/* required attribute */
public:
	virtual int soap_type() const { return 1673; } /* = unique id SOAP_TYPE__onvifXsd__ItemList_ElementItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ItemList_ElementItem() { _onvifXsd__ItemList_ElementItem::soap_default(NULL); }
	virtual ~_onvifXsd__ItemList_ElementItem() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ItemList
#define SOAP_TYPE_onvifXsd__ItemList (725)
/* onvifXsd:ItemList */
class SOAP_CMAC onvifXsd__ItemList : public xsd__anyType
{
public:
	std::vector<_onvifXsd__ItemList_SimpleItem >*SimpleItem;	/* optional element of type onvifXsd:ItemList-SimpleItem */
	std::vector<_onvifXsd__ItemList_ElementItem >*ElementItem;	/* optional element of type onvifXsd:ItemList-ElementItem */
	class onvifXsd__ItemListExtension *Extension;	/* optional element of type onvifXsd:ItemListExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 725; } /* = unique id SOAP_TYPE_onvifXsd__ItemList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ItemList() { onvifXsd__ItemList::soap_default(NULL); }
	virtual ~onvifXsd__ItemList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ItemListExtension
#define SOAP_TYPE_onvifXsd__ItemListExtension (726)
/* onvifXsd:ItemListExtension */
class SOAP_CMAC onvifXsd__ItemListExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 726; } /* = unique id SOAP_TYPE_onvifXsd__ItemListExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ItemListExtension() { onvifXsd__ItemListExtension::soap_default(NULL); }
	virtual ~onvifXsd__ItemListExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MessageDescription
#define SOAP_TYPE_onvifXsd__MessageDescription (727)
/* onvifXsd:MessageDescription */
class SOAP_CMAC onvifXsd__MessageDescription : public xsd__anyType
{
public:
	class onvifXsd__ItemListDescription *Source;	/* optional element of type onvifXsd:ItemListDescription */
	onvifXsd__ItemListDescription *Key;	/* optional element of type onvifXsd:ItemListDescription */
	onvifXsd__ItemListDescription *Data;	/* optional element of type onvifXsd:ItemListDescription */
	class onvifXsd__MessageDescriptionExtension *Extension;	/* optional element of type onvifXsd:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 727; } /* = unique id SOAP_TYPE_onvifXsd__MessageDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MessageDescription() { onvifXsd__MessageDescription::soap_default(NULL); }
	virtual ~onvifXsd__MessageDescription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MessageDescriptionExtension
#define SOAP_TYPE_onvifXsd__MessageDescriptionExtension (728)
/* onvifXsd:MessageDescriptionExtension */
class SOAP_CMAC onvifXsd__MessageDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_onvifXsd__MessageDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MessageDescriptionExtension() { onvifXsd__MessageDescriptionExtension::soap_default(NULL); }
	virtual ~onvifXsd__MessageDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__onvifXsd__ItemListDescription_SimpleItemDescription (1679)
/* onvifXsd:ItemListDescription-SimpleItemDescription */
class SOAP_CMAC _onvifXsd__ItemListDescription_SimpleItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1679; } /* = unique id SOAP_TYPE__onvifXsd__ItemListDescription_SimpleItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ItemListDescription_SimpleItemDescription() { _onvifXsd__ItemListDescription_SimpleItemDescription::soap_default(NULL); }
	virtual ~_onvifXsd__ItemListDescription_SimpleItemDescription() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__onvifXsd__ItemListDescription_ElementItemDescription (1682)
/* onvifXsd:ItemListDescription-ElementItemDescription */
class SOAP_CMAC _onvifXsd__ItemListDescription_ElementItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1682; } /* = unique id SOAP_TYPE__onvifXsd__ItemListDescription_ElementItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ItemListDescription_ElementItemDescription() { _onvifXsd__ItemListDescription_ElementItemDescription::soap_default(NULL); }
	virtual ~_onvifXsd__ItemListDescription_ElementItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ItemListDescription
#define SOAP_TYPE_onvifXsd__ItemListDescription (729)
/* onvifXsd:ItemListDescription */
class SOAP_CMAC onvifXsd__ItemListDescription : public xsd__anyType
{
public:
	std::vector<_onvifXsd__ItemListDescription_SimpleItemDescription >*SimpleItemDescription;	/* optional element of type onvifXsd:ItemListDescription-SimpleItemDescription */
	std::vector<_onvifXsd__ItemListDescription_ElementItemDescription >*ElementItemDescription;	/* optional element of type onvifXsd:ItemListDescription-ElementItemDescription */
	class onvifXsd__ItemListDescriptionExtension *Extension;	/* optional element of type onvifXsd:ItemListDescriptionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_onvifXsd__ItemListDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ItemListDescription() { onvifXsd__ItemListDescription::soap_default(NULL); }
	virtual ~onvifXsd__ItemListDescription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ItemListDescriptionExtension
#define SOAP_TYPE_onvifXsd__ItemListDescriptionExtension (730)
/* onvifXsd:ItemListDescriptionExtension */
class SOAP_CMAC onvifXsd__ItemListDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 730; } /* = unique id SOAP_TYPE_onvifXsd__ItemListDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ItemListDescriptionExtension() { onvifXsd__ItemListDescriptionExtension::soap_default(NULL); }
	virtual ~onvifXsd__ItemListDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Vector
#define SOAP_TYPE_onvifXsd__Vector (731)
/* Primitive onvifXsd:Vector schema type: */
class SOAP_CMAC onvifXsd__Vector : public xsd__anyType
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_onvifXsd__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Vector() { onvifXsd__Vector::soap_default(NULL); }
	virtual ~onvifXsd__Vector() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Rectangle
#define SOAP_TYPE_onvifXsd__Rectangle (732)
/* Primitive onvifXsd:Rectangle schema type: */
class SOAP_CMAC onvifXsd__Rectangle : public xsd__anyType
{
public:
	float *bottom;	/* optional attribute */
	float *top;	/* optional attribute */
	float *right;	/* optional attribute */
	float *left;	/* optional attribute */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_onvifXsd__Rectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Rectangle() { onvifXsd__Rectangle::soap_default(NULL); }
	virtual ~onvifXsd__Rectangle() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Polygon
#define SOAP_TYPE_onvifXsd__Polygon (733)
/* onvifXsd:Polygon */
class SOAP_CMAC onvifXsd__Polygon : public xsd__anyType
{
public:
	std::vector<onvifXsd__Vector * >Point;	/* required element of type onvifXsd:Vector */
public:
	virtual int soap_type() const { return 733; } /* = unique id SOAP_TYPE_onvifXsd__Polygon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Polygon() { onvifXsd__Polygon::soap_default(NULL); }
	virtual ~onvifXsd__Polygon() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Polyline
#define SOAP_TYPE_onvifXsd__Polyline (734)
/* onvifXsd:Polyline */
class SOAP_CMAC onvifXsd__Polyline : public xsd__anyType
{
public:
	std::vector<onvifXsd__Vector * >Point;	/* required element of type onvifXsd:Vector */
public:
	virtual int soap_type() const { return 734; } /* = unique id SOAP_TYPE_onvifXsd__Polyline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Polyline() { onvifXsd__Polyline::soap_default(NULL); }
	virtual ~onvifXsd__Polyline() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Color
#define SOAP_TYPE_onvifXsd__Color (735)
/* Primitive onvifXsd:Color schema type: */
class SOAP_CMAC onvifXsd__Color : public xsd__anyType
{
public:
	float X;	/* required attribute */
	float Y;	/* required attribute */
	float Z;	/* required attribute */
	std::string *Colorspace;	/* optional attribute */
public:
	virtual int soap_type() const { return 735; } /* = unique id SOAP_TYPE_onvifXsd__Color */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Color() { onvifXsd__Color::soap_default(NULL); }
	virtual ~onvifXsd__Color() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ColorCovariance
#define SOAP_TYPE_onvifXsd__ColorCovariance (736)
/* Primitive onvifXsd:ColorCovariance schema type: */
class SOAP_CMAC onvifXsd__ColorCovariance : public xsd__anyType
{
public:
	float XX;	/* required attribute */
	float YY;	/* required attribute */
	float ZZ;	/* required attribute */
	float *XY;	/* optional attribute */
	float *XZ;	/* optional attribute */
	float *YZ;	/* optional attribute */
	std::string *Colorspace;	/* optional attribute */
public:
	virtual int soap_type() const { return 736; } /* = unique id SOAP_TYPE_onvifXsd__ColorCovariance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ColorCovariance() { onvifXsd__ColorCovariance::soap_default(NULL); }
	virtual ~onvifXsd__ColorCovariance() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Appearance
#define SOAP_TYPE_onvifXsd__Appearance (737)
/* onvifXsd:Appearance */
class SOAP_CMAC onvifXsd__Appearance : public xsd__anyType
{
public:
	class onvifXsd__Transformation *Transformation;	/* optional element of type onvifXsd:Transformation */
	class onvifXsd__ShapeDescriptor *Shape;	/* optional element of type onvifXsd:ShapeDescriptor */
	class onvifXsd__ColorDescriptor *Color;	/* optional element of type onvifXsd:ColorDescriptor */
	class onvifXsd__ClassDescriptor *Class;	/* optional element of type onvifXsd:ClassDescriptor */
	class onvifXsd__AppearanceExtension *Extension;	/* optional element of type onvifXsd:AppearanceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE_onvifXsd__Appearance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Appearance() { onvifXsd__Appearance::soap_default(NULL); }
	virtual ~onvifXsd__Appearance() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AppearanceExtension
#define SOAP_TYPE_onvifXsd__AppearanceExtension (738)
/* onvifXsd:AppearanceExtension */
class SOAP_CMAC onvifXsd__AppearanceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE_onvifXsd__AppearanceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AppearanceExtension() { onvifXsd__AppearanceExtension::soap_default(NULL); }
	virtual ~onvifXsd__AppearanceExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ShapeDescriptor
#define SOAP_TYPE_onvifXsd__ShapeDescriptor (739)
/* onvifXsd:ShapeDescriptor */
class SOAP_CMAC onvifXsd__ShapeDescriptor : public xsd__anyType
{
public:
	onvifXsd__Rectangle *BoundingBox;	/* required element of type onvifXsd:Rectangle */
	onvifXsd__Vector *CenterOfGravity;	/* required element of type onvifXsd:Vector */
	std::vector<onvifXsd__Polygon * >Polygon;	/* optional element of type onvifXsd:Polygon */
	class onvifXsd__ShapeDescriptorExtension *Extension;	/* optional element of type onvifXsd:ShapeDescriptorExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE_onvifXsd__ShapeDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ShapeDescriptor() { onvifXsd__ShapeDescriptor::soap_default(NULL); }
	virtual ~onvifXsd__ShapeDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ShapeDescriptorExtension
#define SOAP_TYPE_onvifXsd__ShapeDescriptorExtension (740)
/* onvifXsd:ShapeDescriptorExtension */
class SOAP_CMAC onvifXsd__ShapeDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 740; } /* = unique id SOAP_TYPE_onvifXsd__ShapeDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ShapeDescriptorExtension() { onvifXsd__ShapeDescriptorExtension::soap_default(NULL); }
	virtual ~onvifXsd__ShapeDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ColorDescriptor_ColorCluster
#define SOAP_TYPE__onvifXsd__ColorDescriptor_ColorCluster (1696)
/* onvifXsd:ColorDescriptor-ColorCluster */
class SOAP_CMAC _onvifXsd__ColorDescriptor_ColorCluster
{
public:
	onvifXsd__Color *Color;	/* required element of type onvifXsd:Color */
	float *Weight;	/* optional element of type xsd:float */
	onvifXsd__ColorCovariance *Covariance;	/* optional element of type onvifXsd:ColorCovariance */
public:
	virtual int soap_type() const { return 1696; } /* = unique id SOAP_TYPE__onvifXsd__ColorDescriptor_ColorCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ColorDescriptor_ColorCluster() { _onvifXsd__ColorDescriptor_ColorCluster::soap_default(NULL); }
	virtual ~_onvifXsd__ColorDescriptor_ColorCluster() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ColorDescriptor
#define SOAP_TYPE_onvifXsd__ColorDescriptor (741)
/* onvifXsd:ColorDescriptor */
class SOAP_CMAC onvifXsd__ColorDescriptor : public xsd__anyType
{
public:
	std::vector<_onvifXsd__ColorDescriptor_ColorCluster >*ColorCluster;	/* optional element of type onvifXsd:ColorDescriptor-ColorCluster */
	class onvifXsd__ColorDescriptorExtension *Extension;	/* optional element of type onvifXsd:ColorDescriptorExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 741; } /* = unique id SOAP_TYPE_onvifXsd__ColorDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ColorDescriptor() { onvifXsd__ColorDescriptor::soap_default(NULL); }
	virtual ~onvifXsd__ColorDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ColorDescriptorExtension
#define SOAP_TYPE_onvifXsd__ColorDescriptorExtension (742)
/* onvifXsd:ColorDescriptorExtension */
class SOAP_CMAC onvifXsd__ColorDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 742; } /* = unique id SOAP_TYPE_onvifXsd__ColorDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ColorDescriptorExtension() { onvifXsd__ColorDescriptorExtension::soap_default(NULL); }
	virtual ~onvifXsd__ColorDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ClassDescriptor_ClassCandidate
#define SOAP_TYPE__onvifXsd__ClassDescriptor_ClassCandidate (1702)
/* onvifXsd:ClassDescriptor-ClassCandidate */
class SOAP_CMAC _onvifXsd__ClassDescriptor_ClassCandidate
{
public:
	enum onvifXsd__ClassType Type;	/* required element of type onvifXsd:ClassType */
	float Likelihood;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 1702; } /* = unique id SOAP_TYPE__onvifXsd__ClassDescriptor_ClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ClassDescriptor_ClassCandidate() { _onvifXsd__ClassDescriptor_ClassCandidate::soap_default(NULL); }
	virtual ~_onvifXsd__ClassDescriptor_ClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ClassDescriptor
#define SOAP_TYPE_onvifXsd__ClassDescriptor (743)
/* onvifXsd:ClassDescriptor */
class SOAP_CMAC onvifXsd__ClassDescriptor : public xsd__anyType
{
public:
	std::vector<_onvifXsd__ClassDescriptor_ClassCandidate >*ClassCandidate;	/* optional element of type onvifXsd:ClassDescriptor-ClassCandidate */
	class onvifXsd__ClassDescriptorExtension *Extension;	/* optional element of type onvifXsd:ClassDescriptorExtension */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE_onvifXsd__ClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ClassDescriptor() { onvifXsd__ClassDescriptor::soap_default(NULL); }
	virtual ~onvifXsd__ClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ClassDescriptorExtension
#define SOAP_TYPE_onvifXsd__ClassDescriptorExtension (744)
/* onvifXsd:ClassDescriptorExtension */
class SOAP_CMAC onvifXsd__ClassDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::vector<class onvifXsd__OtherType * >OtherTypes;	/* required element of type onvifXsd:OtherType */
	class onvifXsd__ClassDescriptorExtension2 *Extension;	/* optional element of type onvifXsd:ClassDescriptorExtension2 */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE_onvifXsd__ClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ClassDescriptorExtension() { onvifXsd__ClassDescriptorExtension::soap_default(NULL); }
	virtual ~onvifXsd__ClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ClassDescriptorExtension2
#define SOAP_TYPE_onvifXsd__ClassDescriptorExtension2 (745)
/* onvifXsd:ClassDescriptorExtension2 */
class SOAP_CMAC onvifXsd__ClassDescriptorExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 745; } /* = unique id SOAP_TYPE_onvifXsd__ClassDescriptorExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ClassDescriptorExtension2() { onvifXsd__ClassDescriptorExtension2::soap_default(NULL); }
	virtual ~onvifXsd__ClassDescriptorExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__OtherType
#define SOAP_TYPE_onvifXsd__OtherType (746)
/* onvifXsd:OtherType */
class SOAP_CMAC onvifXsd__OtherType : public xsd__anyType
{
public:
	std::string Type;	/* required element of type xsd:string */
	float Likelihood;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 746; } /* = unique id SOAP_TYPE_onvifXsd__OtherType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__OtherType() { onvifXsd__OtherType::soap_default(NULL); }
	virtual ~onvifXsd__OtherType() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ObjectExtension
#define SOAP_TYPE_onvifXsd__ObjectExtension (748)
/* onvifXsd:ObjectExtension */
class SOAP_CMAC onvifXsd__ObjectExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE_onvifXsd__ObjectExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ObjectExtension() { onvifXsd__ObjectExtension::soap_default(NULL); }
	virtual ~onvifXsd__ObjectExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Transformation
#define SOAP_TYPE_onvifXsd__Transformation (749)
/* onvifXsd:Transformation */
class SOAP_CMAC onvifXsd__Transformation : public xsd__anyType
{
public:
	onvifXsd__Vector *Translate;	/* optional element of type onvifXsd:Vector */
	onvifXsd__Vector *Scale;	/* optional element of type onvifXsd:Vector */
	class onvifXsd__TransformationExtension *Extension;	/* optional element of type onvifXsd:TransformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE_onvifXsd__Transformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Transformation() { onvifXsd__Transformation::soap_default(NULL); }
	virtual ~onvifXsd__Transformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TransformationExtension
#define SOAP_TYPE_onvifXsd__TransformationExtension (750)
/* onvifXsd:TransformationExtension */
class SOAP_CMAC onvifXsd__TransformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 750; } /* = unique id SOAP_TYPE_onvifXsd__TransformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TransformationExtension() { onvifXsd__TransformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__TransformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Frame
#define SOAP_TYPE_onvifXsd__Frame (751)
/* onvifXsd:Frame */
class SOAP_CMAC onvifXsd__Frame : public xsd__anyType
{
public:
	onvifXsd__PTZStatus *PTZStatus;	/* optional element of type onvifXsd:PTZStatus */
	onvifXsd__Transformation *Transformation;	/* optional element of type onvifXsd:Transformation */
	std::vector<class onvifXsd__Object * >Object;	/* optional element of type onvifXsd:Object */
	class onvifXsd__ObjectTree *ObjectTree;	/* optional element of type onvifXsd:ObjectTree */
	class onvifXsd__FrameExtension *Extension;	/* optional element of type onvifXsd:FrameExtension */
	time_t UtcTime;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 751; } /* = unique id SOAP_TYPE_onvifXsd__Frame */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Frame() { onvifXsd__Frame::soap_default(NULL); }
	virtual ~onvifXsd__Frame() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FrameExtension
#define SOAP_TYPE_onvifXsd__FrameExtension (752)
/* onvifXsd:FrameExtension */
class SOAP_CMAC onvifXsd__FrameExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	class onvifXsd__MotionInCells *MotionInCells;	/* optional element of type onvifXsd:MotionInCells */
	class onvifXsd__FrameExtension2 *Extension;	/* optional element of type onvifXsd:FrameExtension2 */
public:
	virtual int soap_type() const { return 752; } /* = unique id SOAP_TYPE_onvifXsd__FrameExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FrameExtension() { onvifXsd__FrameExtension::soap_default(NULL); }
	virtual ~onvifXsd__FrameExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FrameExtension2
#define SOAP_TYPE_onvifXsd__FrameExtension2 (753)
/* onvifXsd:FrameExtension2 */
class SOAP_CMAC onvifXsd__FrameExtension2 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE_onvifXsd__FrameExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FrameExtension2() { onvifXsd__FrameExtension2::soap_default(NULL); }
	virtual ~onvifXsd__FrameExtension2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Merge
#define SOAP_TYPE_onvifXsd__Merge (754)
/* onvifXsd:Merge */
class SOAP_CMAC onvifXsd__Merge : public xsd__anyType
{
public:
	std::vector<class onvifXsd__ObjectId * >from;	/* required element of type onvifXsd:ObjectId */
	onvifXsd__ObjectId *to;	/* required element of type onvifXsd:ObjectId */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE_onvifXsd__Merge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Merge() { onvifXsd__Merge::soap_default(NULL); }
	virtual ~onvifXsd__Merge() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Split
#define SOAP_TYPE_onvifXsd__Split (755)
/* onvifXsd:Split */
class SOAP_CMAC onvifXsd__Split : public xsd__anyType
{
public:
	onvifXsd__ObjectId *from;	/* required element of type onvifXsd:ObjectId */
	std::vector<onvifXsd__ObjectId * >to;	/* required element of type onvifXsd:ObjectId */
public:
	virtual int soap_type() const { return 755; } /* = unique id SOAP_TYPE_onvifXsd__Split */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Split() { onvifXsd__Split::soap_default(NULL); }
	virtual ~onvifXsd__Split() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Rename
#define SOAP_TYPE_onvifXsd__Rename (756)
/* onvifXsd:Rename */
class SOAP_CMAC onvifXsd__Rename : public xsd__anyType
{
public:
	onvifXsd__ObjectId *from;	/* required element of type onvifXsd:ObjectId */
	onvifXsd__ObjectId *to;	/* required element of type onvifXsd:ObjectId */
public:
	virtual int soap_type() const { return 756; } /* = unique id SOAP_TYPE_onvifXsd__Rename */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Rename() { onvifXsd__Rename::soap_default(NULL); }
	virtual ~onvifXsd__Rename() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ObjectId
#define SOAP_TYPE_onvifXsd__ObjectId (757)
/* Primitive onvifXsd:ObjectId schema type: */
class SOAP_CMAC onvifXsd__ObjectId : public xsd__anyType
{
public:
	std::string *ObjectId;	/* optional attribute */
public:
	virtual int soap_type() const { return 757; } /* = unique id SOAP_TYPE_onvifXsd__ObjectId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ObjectId() { onvifXsd__ObjectId::soap_default(NULL); }
	virtual ~onvifXsd__ObjectId() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__Behaviour_Removed
#define SOAP_TYPE__onvifXsd__Behaviour_Removed (1720)
/* onvifXsd:Behaviour-Removed */
class SOAP_CMAC _onvifXsd__Behaviour_Removed
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1720; } /* = unique id SOAP_TYPE__onvifXsd__Behaviour_Removed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__Behaviour_Removed() { _onvifXsd__Behaviour_Removed::soap_default(NULL); }
	virtual ~_onvifXsd__Behaviour_Removed() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__Behaviour_Idle
#define SOAP_TYPE__onvifXsd__Behaviour_Idle (1722)
/* onvifXsd:Behaviour-Idle */
class SOAP_CMAC _onvifXsd__Behaviour_Idle
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1722; } /* = unique id SOAP_TYPE__onvifXsd__Behaviour_Idle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__Behaviour_Idle() { _onvifXsd__Behaviour_Idle::soap_default(NULL); }
	virtual ~_onvifXsd__Behaviour_Idle() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Behaviour
#define SOAP_TYPE_onvifXsd__Behaviour (758)
/* onvifXsd:Behaviour */
class SOAP_CMAC onvifXsd__Behaviour : public xsd__anyType
{
public:
	_onvifXsd__Behaviour_Removed *Removed;	/* optional element of type onvifXsd:Behaviour-Removed */
	_onvifXsd__Behaviour_Idle *Idle;	/* optional element of type onvifXsd:Behaviour-Idle */
	class onvifXsd__BehaviourExtension *Extension;	/* optional element of type onvifXsd:BehaviourExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE_onvifXsd__Behaviour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Behaviour() { onvifXsd__Behaviour::soap_default(NULL); }
	virtual ~onvifXsd__Behaviour() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__BehaviourExtension
#define SOAP_TYPE_onvifXsd__BehaviourExtension (759)
/* onvifXsd:BehaviourExtension */
class SOAP_CMAC onvifXsd__BehaviourExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE_onvifXsd__BehaviourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__BehaviourExtension() { onvifXsd__BehaviourExtension::soap_default(NULL); }
	virtual ~onvifXsd__BehaviourExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ObjectTree
#define SOAP_TYPE_onvifXsd__ObjectTree (760)
/* onvifXsd:ObjectTree */
class SOAP_CMAC onvifXsd__ObjectTree : public xsd__anyType
{
public:
	std::vector<onvifXsd__Rename * >Rename;	/* optional element of type onvifXsd:Rename */
	std::vector<onvifXsd__Split * >Split;	/* optional element of type onvifXsd:Split */
	std::vector<onvifXsd__Merge * >Merge;	/* optional element of type onvifXsd:Merge */
	std::vector<onvifXsd__ObjectId * >Delete;	/* optional element of type onvifXsd:ObjectId */
	class onvifXsd__ObjectTreeExtension *Extension;	/* optional element of type onvifXsd:ObjectTreeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 760; } /* = unique id SOAP_TYPE_onvifXsd__ObjectTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ObjectTree() { onvifXsd__ObjectTree::soap_default(NULL); }
	virtual ~onvifXsd__ObjectTree() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ObjectTreeExtension
#define SOAP_TYPE_onvifXsd__ObjectTreeExtension (761)
/* onvifXsd:ObjectTreeExtension */
class SOAP_CMAC onvifXsd__ObjectTreeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 761; } /* = unique id SOAP_TYPE_onvifXsd__ObjectTreeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ObjectTreeExtension() { onvifXsd__ObjectTreeExtension::soap_default(NULL); }
	virtual ~onvifXsd__ObjectTreeExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MotionInCells
#define SOAP_TYPE_onvifXsd__MotionInCells (762)
/* onvifXsd:MotionInCells */
class SOAP_CMAC onvifXsd__MotionInCells : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string Columns;	/* required attribute */
	std::string Rows;	/* required attribute */
	xsd__base64Binary Cells;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 762; } /* = unique id SOAP_TYPE_onvifXsd__MotionInCells */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MotionInCells() { onvifXsd__MotionInCells::soap_default(NULL); }
	virtual ~onvifXsd__MotionInCells() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngineConfiguration
#define SOAP_TYPE_onvifXsd__AnalyticsEngineConfiguration (763)
/* onvifXsd:AnalyticsEngineConfiguration */
class SOAP_CMAC onvifXsd__AnalyticsEngineConfiguration : public xsd__anyType
{
public:
	std::vector<class onvifXsd__Config * >AnalyticsModule;	/* optional element of type onvifXsd:Config */
	class onvifXsd__AnalyticsEngineConfigurationExtension *Extension;	/* optional element of type onvifXsd:AnalyticsEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 763; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngineConfiguration() { onvifXsd__AnalyticsEngineConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_onvifXsd__AnalyticsEngineConfigurationExtension (764)
/* onvifXsd:AnalyticsEngineConfigurationExtension */
class SOAP_CMAC onvifXsd__AnalyticsEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngineConfigurationExtension() { onvifXsd__AnalyticsEngineConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RuleEngineConfiguration
#define SOAP_TYPE_onvifXsd__RuleEngineConfiguration (765)
/* onvifXsd:RuleEngineConfiguration */
class SOAP_CMAC onvifXsd__RuleEngineConfiguration : public xsd__anyType
{
public:
	std::vector<onvifXsd__Config * >Rule;	/* optional element of type onvifXsd:Config */
	class onvifXsd__RuleEngineConfigurationExtension *Extension;	/* optional element of type onvifXsd:RuleEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE_onvifXsd__RuleEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RuleEngineConfiguration() { onvifXsd__RuleEngineConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__RuleEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RuleEngineConfigurationExtension
#define SOAP_TYPE_onvifXsd__RuleEngineConfigurationExtension (766)
/* onvifXsd:RuleEngineConfigurationExtension */
class SOAP_CMAC onvifXsd__RuleEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 766; } /* = unique id SOAP_TYPE_onvifXsd__RuleEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RuleEngineConfigurationExtension() { onvifXsd__RuleEngineConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__RuleEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Config
#define SOAP_TYPE_onvifXsd__Config (767)
/* onvifXsd:Config */
class SOAP_CMAC onvifXsd__Config : public xsd__anyType
{
public:
	onvifXsd__ItemList *Parameters;	/* required element of type onvifXsd:ItemList */
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE_onvifXsd__Config */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Config() { onvifXsd__Config::soap_default(NULL); }
	virtual ~onvifXsd__Config() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__ConfigDescription_Messages
#define SOAP_TYPE__onvifXsd__ConfigDescription_Messages (1737)
/* onvifXsd:ConfigDescription-Messages */
class SOAP_CMAC _onvifXsd__ConfigDescription_Messages
{
public:
	onvifXsd__ItemListDescription *Source;	/* optional element of type onvifXsd:ItemListDescription */
	onvifXsd__ItemListDescription *Key;	/* optional element of type onvifXsd:ItemListDescription */
	onvifXsd__ItemListDescription *Data;	/* optional element of type onvifXsd:ItemListDescription */
	onvifXsd__MessageDescriptionExtension *Extension;	/* optional element of type onvifXsd:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	std::string ParentTopic;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1737; } /* = unique id SOAP_TYPE__onvifXsd__ConfigDescription_Messages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__ConfigDescription_Messages() { _onvifXsd__ConfigDescription_Messages::soap_default(NULL); }
	virtual ~_onvifXsd__ConfigDescription_Messages() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ConfigDescription
#define SOAP_TYPE_onvifXsd__ConfigDescription (768)
/* onvifXsd:ConfigDescription */
class SOAP_CMAC onvifXsd__ConfigDescription : public xsd__anyType
{
public:
	onvifXsd__ItemListDescription *Parameters;	/* required element of type onvifXsd:ItemListDescription */
	std::vector<_onvifXsd__ConfigDescription_Messages >*Messages;	/* optional element of type onvifXsd:ConfigDescription-Messages */
	class onvifXsd__ConfigDescriptionExtension *Extension;	/* optional element of type onvifXsd:ConfigDescriptionExtension */
	std::string Name;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE_onvifXsd__ConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ConfigDescription() { onvifXsd__ConfigDescription::soap_default(NULL); }
	virtual ~onvifXsd__ConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ConfigDescriptionExtension
#define SOAP_TYPE_onvifXsd__ConfigDescriptionExtension (769)
/* onvifXsd:ConfigDescriptionExtension */
class SOAP_CMAC onvifXsd__ConfigDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 769; } /* = unique id SOAP_TYPE_onvifXsd__ConfigDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ConfigDescriptionExtension() { onvifXsd__ConfigDescriptionExtension::soap_default(NULL); }
	virtual ~onvifXsd__ConfigDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SupportedRules
#define SOAP_TYPE_onvifXsd__SupportedRules (770)
/* onvifXsd:SupportedRules */
class SOAP_CMAC onvifXsd__SupportedRules : public xsd__anyType
{
public:
	std::vector<std::string >RuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<onvifXsd__ConfigDescription * >RuleDescription;	/* optional element of type onvifXsd:ConfigDescription */
	class onvifXsd__SupportedRulesExtension *Extension;	/* optional element of type onvifXsd:SupportedRulesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 770; } /* = unique id SOAP_TYPE_onvifXsd__SupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SupportedRules() { onvifXsd__SupportedRules::soap_default(NULL); }
	virtual ~onvifXsd__SupportedRules() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SupportedRulesExtension
#define SOAP_TYPE_onvifXsd__SupportedRulesExtension (771)
/* onvifXsd:SupportedRulesExtension */
class SOAP_CMAC onvifXsd__SupportedRulesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 771; } /* = unique id SOAP_TYPE_onvifXsd__SupportedRulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SupportedRulesExtension() { onvifXsd__SupportedRulesExtension::soap_default(NULL); }
	virtual ~onvifXsd__SupportedRulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SupportedAnalyticsModules
#define SOAP_TYPE_onvifXsd__SupportedAnalyticsModules (772)
/* onvifXsd:SupportedAnalyticsModules */
class SOAP_CMAC onvifXsd__SupportedAnalyticsModules : public xsd__anyType
{
public:
	std::vector<std::string >AnalyticsModuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<onvifXsd__ConfigDescription * >AnalyticsModuleDescription;	/* optional element of type onvifXsd:ConfigDescription */
	class onvifXsd__SupportedAnalyticsModulesExtension *Extension;	/* optional element of type onvifXsd:SupportedAnalyticsModulesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 772; } /* = unique id SOAP_TYPE_onvifXsd__SupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SupportedAnalyticsModules() { onvifXsd__SupportedAnalyticsModules::soap_default(NULL); }
	virtual ~onvifXsd__SupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_onvifXsd__SupportedAnalyticsModulesExtension (773)
/* onvifXsd:SupportedAnalyticsModulesExtension */
class SOAP_CMAC onvifXsd__SupportedAnalyticsModulesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE_onvifXsd__SupportedAnalyticsModulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SupportedAnalyticsModulesExtension() { onvifXsd__SupportedAnalyticsModulesExtension::soap_default(NULL); }
	virtual ~onvifXsd__SupportedAnalyticsModulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PolygonConfiguration
#define SOAP_TYPE_onvifXsd__PolygonConfiguration (774)
/* onvifXsd:PolygonConfiguration */
class SOAP_CMAC onvifXsd__PolygonConfiguration : public xsd__anyType
{
public:
	onvifXsd__Polygon *Polygon;	/* required element of type onvifXsd:Polygon */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE_onvifXsd__PolygonConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PolygonConfiguration() { onvifXsd__PolygonConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__PolygonConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PolylineArray
#define SOAP_TYPE_onvifXsd__PolylineArray (775)
/* onvifXsd:PolylineArray */
class SOAP_CMAC onvifXsd__PolylineArray : public xsd__anyType
{
public:
	std::vector<onvifXsd__Polyline * >Segment;	/* required element of type onvifXsd:Polyline */
	class onvifXsd__PolylineArrayExtension *Extension;	/* optional element of type onvifXsd:PolylineArrayExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 775; } /* = unique id SOAP_TYPE_onvifXsd__PolylineArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PolylineArray() { onvifXsd__PolylineArray::soap_default(NULL); }
	virtual ~onvifXsd__PolylineArray() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PolylineArrayExtension
#define SOAP_TYPE_onvifXsd__PolylineArrayExtension (776)
/* onvifXsd:PolylineArrayExtension */
class SOAP_CMAC onvifXsd__PolylineArrayExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 776; } /* = unique id SOAP_TYPE_onvifXsd__PolylineArrayExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PolylineArrayExtension() { onvifXsd__PolylineArrayExtension::soap_default(NULL); }
	virtual ~onvifXsd__PolylineArrayExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PolylineArrayConfiguration
#define SOAP_TYPE_onvifXsd__PolylineArrayConfiguration (777)
/* onvifXsd:PolylineArrayConfiguration */
class SOAP_CMAC onvifXsd__PolylineArrayConfiguration : public xsd__anyType
{
public:
	onvifXsd__PolylineArray *PolylineArray;	/* required element of type onvifXsd:PolylineArray */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 777; } /* = unique id SOAP_TYPE_onvifXsd__PolylineArrayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PolylineArrayConfiguration() { onvifXsd__PolylineArrayConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__PolylineArrayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MotionExpression
#define SOAP_TYPE_onvifXsd__MotionExpression (778)
/* onvifXsd:MotionExpression */
class SOAP_CMAC onvifXsd__MotionExpression : public xsd__anyType
{
public:
	std::string Expression;	/* required element of type xsd:string */
	std::vector<char * >__any;
	std::string *Type;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE_onvifXsd__MotionExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MotionExpression() { onvifXsd__MotionExpression::soap_default(NULL); }
	virtual ~onvifXsd__MotionExpression() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MotionExpressionConfiguration
#define SOAP_TYPE_onvifXsd__MotionExpressionConfiguration (779)
/* onvifXsd:MotionExpressionConfiguration */
class SOAP_CMAC onvifXsd__MotionExpressionConfiguration : public xsd__anyType
{
public:
	onvifXsd__MotionExpression *MotionExpression;	/* required element of type onvifXsd:MotionExpression */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE_onvifXsd__MotionExpressionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MotionExpressionConfiguration() { onvifXsd__MotionExpressionConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__MotionExpressionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CellLayout
#define SOAP_TYPE_onvifXsd__CellLayout (780)
/* onvifXsd:CellLayout */
class SOAP_CMAC onvifXsd__CellLayout : public xsd__anyType
{
public:
	onvifXsd__Transformation *Transformation;	/* required element of type onvifXsd:Transformation */
	std::vector<char * >__any;
	std::string Columns;	/* required attribute */
	std::string Rows;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 780; } /* = unique id SOAP_TYPE_onvifXsd__CellLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CellLayout() { onvifXsd__CellLayout::soap_default(NULL); }
	virtual ~onvifXsd__CellLayout() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__union_MetadataStream
#define SOAP_TYPE__onvifXsd__union_MetadataStream (1755)
/* xsd:choice */
union _onvifXsd__union_MetadataStream
{
#define SOAP_UNION__onvifXsd__union_MetadataStream_VideoAnalytics	(1)
	class onvifXsd__VideoAnalyticsStream *VideoAnalytics;
#define SOAP_UNION__onvifXsd__union_MetadataStream_PTZ	(2)
	class onvifXsd__PTZStream *PTZ;
#define SOAP_UNION__onvifXsd__union_MetadataStream_Event	(3)
	class onvifXsd__EventStream *Event;
#define SOAP_UNION__onvifXsd__union_MetadataStream_Extension	(4)
	class onvifXsd__MetadataStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___onvifXsd__union_MetadataStream
#define SOAP_TYPE___onvifXsd__union_MetadataStream (1750)
/* Operation wrapper: */
class SOAP_CMAC __onvifXsd__union_MetadataStream
{
public:
	int __union_MetadataStream;	/* union discriminant (of union defined below) */
	union _onvifXsd__union_MetadataStream union_MetadataStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1750; } /* = unique id SOAP_TYPE___onvifXsd__union_MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onvifXsd__union_MetadataStream() { __onvifXsd__union_MetadataStream::soap_default(NULL); }
	virtual ~__onvifXsd__union_MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataStream
#define SOAP_TYPE_onvifXsd__MetadataStream (781)
/* onvifXsd:MetadataStream */
class SOAP_CMAC onvifXsd__MetadataStream : public xsd__anyType
{
public:
	int __size_MetadataStream;	/* sequence of elements <-union-MetadataStream> */
	__onvifXsd__union_MetadataStream *__union_MetadataStream;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 781; } /* = unique id SOAP_TYPE_onvifXsd__MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataStream() { onvifXsd__MetadataStream::soap_default(NULL); }
	virtual ~onvifXsd__MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataStreamExtension
#define SOAP_TYPE_onvifXsd__MetadataStreamExtension (782)
/* onvifXsd:MetadataStreamExtension */
class SOAP_CMAC onvifXsd__MetadataStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 782; } /* = unique id SOAP_TYPE_onvifXsd__MetadataStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataStreamExtension() { onvifXsd__MetadataStreamExtension::soap_default(NULL); }
	virtual ~onvifXsd__MetadataStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__union_VideoAnalyticsStream
#define SOAP_TYPE__onvifXsd__union_VideoAnalyticsStream (1760)
/* xsd:choice */
union _onvifXsd__union_VideoAnalyticsStream
{
#define SOAP_UNION__onvifXsd__union_VideoAnalyticsStream_Frame	(1)
	onvifXsd__Frame *Frame;
#define SOAP_UNION__onvifXsd__union_VideoAnalyticsStream_Extension	(2)
	class onvifXsd__VideoAnalyticsStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___onvifXsd__union_VideoAnalyticsStream
#define SOAP_TYPE___onvifXsd__union_VideoAnalyticsStream (1757)
/* Operation wrapper: */
class SOAP_CMAC __onvifXsd__union_VideoAnalyticsStream
{
public:
	int __union_VideoAnalyticsStream;	/* union discriminant (of union defined below) */
	union _onvifXsd__union_VideoAnalyticsStream union_VideoAnalyticsStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1757; } /* = unique id SOAP_TYPE___onvifXsd__union_VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onvifXsd__union_VideoAnalyticsStream() { __onvifXsd__union_VideoAnalyticsStream::soap_default(NULL); }
	virtual ~__onvifXsd__union_VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoAnalyticsStream
#define SOAP_TYPE_onvifXsd__VideoAnalyticsStream (783)
/* onvifXsd:VideoAnalyticsStream */
class SOAP_CMAC onvifXsd__VideoAnalyticsStream : public xsd__anyType
{
public:
	int __size_VideoAnalyticsStream;	/* sequence of elements <-union-VideoAnalyticsStream> */
	__onvifXsd__union_VideoAnalyticsStream *__union_VideoAnalyticsStream;
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE_onvifXsd__VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoAnalyticsStream() { onvifXsd__VideoAnalyticsStream::soap_default(NULL); }
	virtual ~onvifXsd__VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoAnalyticsStreamExtension
#define SOAP_TYPE_onvifXsd__VideoAnalyticsStreamExtension (784)
/* onvifXsd:VideoAnalyticsStreamExtension */
class SOAP_CMAC onvifXsd__VideoAnalyticsStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE_onvifXsd__VideoAnalyticsStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoAnalyticsStreamExtension() { onvifXsd__VideoAnalyticsStreamExtension::soap_default(NULL); }
	virtual ~onvifXsd__VideoAnalyticsStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__union_PTZStream
#define SOAP_TYPE__onvifXsd__union_PTZStream (1764)
/* xsd:choice */
union _onvifXsd__union_PTZStream
{
#define SOAP_UNION__onvifXsd__union_PTZStream_PTZStatus	(1)
	onvifXsd__PTZStatus *PTZStatus;
#define SOAP_UNION__onvifXsd__union_PTZStream_Extension	(2)
	class onvifXsd__PTZStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___onvifXsd__union_PTZStream
#define SOAP_TYPE___onvifXsd__union_PTZStream (1762)
/* Operation wrapper: */
class SOAP_CMAC __onvifXsd__union_PTZStream
{
public:
	int __union_PTZStream;	/* union discriminant (of union defined below) */
	union _onvifXsd__union_PTZStream union_PTZStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1762; } /* = unique id SOAP_TYPE___onvifXsd__union_PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onvifXsd__union_PTZStream() { __onvifXsd__union_PTZStream::soap_default(NULL); }
	virtual ~__onvifXsd__union_PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZStream
#define SOAP_TYPE_onvifXsd__PTZStream (785)
/* onvifXsd:PTZStream */
class SOAP_CMAC onvifXsd__PTZStream : public xsd__anyType
{
public:
	int __size_PTZStream;	/* sequence of elements <-union-PTZStream> */
	__onvifXsd__union_PTZStream *__union_PTZStream;
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE_onvifXsd__PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZStream() { onvifXsd__PTZStream::soap_default(NULL); }
	virtual ~onvifXsd__PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZStreamExtension
#define SOAP_TYPE_onvifXsd__PTZStreamExtension (786)
/* onvifXsd:PTZStreamExtension */
class SOAP_CMAC onvifXsd__PTZStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE_onvifXsd__PTZStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZStreamExtension() { onvifXsd__PTZStreamExtension::soap_default(NULL); }
	virtual ~onvifXsd__PTZStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__union_EventStream
#define SOAP_TYPE__onvifXsd__union_EventStream (1768)
/* xsd:choice */
union _onvifXsd__union_EventStream
{
#define SOAP_UNION__onvifXsd__union_EventStream_oasisWsnB2__NotificationMessage	(1)
	oasisWsnB2__NotificationMessageHolderType *oasisWsnB2__NotificationMessage;
#define SOAP_UNION__onvifXsd__union_EventStream_Extension	(2)
	class onvifXsd__EventStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___onvifXsd__union_EventStream
#define SOAP_TYPE___onvifXsd__union_EventStream (1766)
/* Operation wrapper: */
class SOAP_CMAC __onvifXsd__union_EventStream
{
public:
	int __union_EventStream;	/* union discriminant (of union defined below) */
	union _onvifXsd__union_EventStream union_EventStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1766; } /* = unique id SOAP_TYPE___onvifXsd__union_EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onvifXsd__union_EventStream() { __onvifXsd__union_EventStream::soap_default(NULL); }
	virtual ~__onvifXsd__union_EventStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EventStream
#define SOAP_TYPE_onvifXsd__EventStream (787)
/* onvifXsd:EventStream */
class SOAP_CMAC onvifXsd__EventStream : public xsd__anyType
{
public:
	int __size_EventStream;	/* sequence of elements <-union-EventStream> */
	__onvifXsd__union_EventStream *__union_EventStream;
public:
	virtual int soap_type() const { return 787; } /* = unique id SOAP_TYPE_onvifXsd__EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EventStream() { onvifXsd__EventStream::soap_default(NULL); }
	virtual ~onvifXsd__EventStream() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EventStreamExtension
#define SOAP_TYPE_onvifXsd__EventStreamExtension (788)
/* onvifXsd:EventStreamExtension */
class SOAP_CMAC onvifXsd__EventStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 788; } /* = unique id SOAP_TYPE_onvifXsd__EventStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EventStreamExtension() { onvifXsd__EventStreamExtension::soap_default(NULL); }
	virtual ~onvifXsd__EventStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PaneConfiguration
#define SOAP_TYPE_onvifXsd__PaneConfiguration (789)
/* onvifXsd:PaneConfiguration */
class SOAP_CMAC onvifXsd__PaneConfiguration : public xsd__anyType
{
public:
	std::string *PaneName;	/* optional element of type xsd:string */
	std::string *AudioOutputToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *AudioSourceToken;	/* optional element of type onvifXsd:ReferenceToken */
	onvifXsd__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type onvifXsd:AudioEncoderConfiguration */
	std::string *ReceiverToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string Token;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 789; } /* = unique id SOAP_TYPE_onvifXsd__PaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PaneConfiguration() { onvifXsd__PaneConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__PaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PaneLayout
#define SOAP_TYPE_onvifXsd__PaneLayout (790)
/* onvifXsd:PaneLayout */
class SOAP_CMAC onvifXsd__PaneLayout : public xsd__anyType
{
public:
	std::string Pane;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__Rectangle *Area;	/* required element of type onvifXsd:Rectangle */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE_onvifXsd__PaneLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PaneLayout() { onvifXsd__PaneLayout::soap_default(NULL); }
	virtual ~onvifXsd__PaneLayout() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Layout
#define SOAP_TYPE_onvifXsd__Layout (791)
/* onvifXsd:Layout */
class SOAP_CMAC onvifXsd__Layout : public xsd__anyType
{
public:
	std::vector<onvifXsd__PaneLayout * >PaneLayout;	/* required element of type onvifXsd:PaneLayout */
	class onvifXsd__LayoutExtension *Extension;	/* optional element of type onvifXsd:LayoutExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE_onvifXsd__Layout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Layout() { onvifXsd__Layout::soap_default(NULL); }
	virtual ~onvifXsd__Layout() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__LayoutExtension
#define SOAP_TYPE_onvifXsd__LayoutExtension (792)
/* onvifXsd:LayoutExtension */
class SOAP_CMAC onvifXsd__LayoutExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 792; } /* = unique id SOAP_TYPE_onvifXsd__LayoutExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__LayoutExtension() { onvifXsd__LayoutExtension::soap_default(NULL); }
	virtual ~onvifXsd__LayoutExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CodingCapabilities
#define SOAP_TYPE_onvifXsd__CodingCapabilities (793)
/* onvifXsd:CodingCapabilities */
class SOAP_CMAC onvifXsd__CodingCapabilities : public xsd__anyType
{
public:
	onvifXsd__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;	/* optional element of type onvifXsd:AudioEncoderConfigurationOptions */
	onvifXsd__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;	/* optional element of type onvifXsd:AudioDecoderConfigurationOptions */
	onvifXsd__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;	/* required element of type onvifXsd:VideoDecoderConfigurationOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 793; } /* = unique id SOAP_TYPE_onvifXsd__CodingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CodingCapabilities() { onvifXsd__CodingCapabilities::soap_default(NULL); }
	virtual ~onvifXsd__CodingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__LayoutOptions
#define SOAP_TYPE_onvifXsd__LayoutOptions (794)
/* onvifXsd:LayoutOptions */
class SOAP_CMAC onvifXsd__LayoutOptions : public xsd__anyType
{
public:
	std::vector<class onvifXsd__PaneLayoutOptions * >PaneLayoutOptions;	/* required element of type onvifXsd:PaneLayoutOptions */
	class onvifXsd__LayoutOptionsExtension *Extension;	/* optional element of type onvifXsd:LayoutOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 794; } /* = unique id SOAP_TYPE_onvifXsd__LayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__LayoutOptions() { onvifXsd__LayoutOptions::soap_default(NULL); }
	virtual ~onvifXsd__LayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__LayoutOptionsExtension
#define SOAP_TYPE_onvifXsd__LayoutOptionsExtension (795)
/* onvifXsd:LayoutOptionsExtension */
class SOAP_CMAC onvifXsd__LayoutOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE_onvifXsd__LayoutOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__LayoutOptionsExtension() { onvifXsd__LayoutOptionsExtension::soap_default(NULL); }
	virtual ~onvifXsd__LayoutOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PaneLayoutOptions
#define SOAP_TYPE_onvifXsd__PaneLayoutOptions (796)
/* onvifXsd:PaneLayoutOptions */
class SOAP_CMAC onvifXsd__PaneLayoutOptions : public xsd__anyType
{
public:
	std::vector<onvifXsd__Rectangle * >Area;	/* required element of type onvifXsd:Rectangle */
	class onvifXsd__PaneOptionExtension *Extension;	/* optional element of type onvifXsd:PaneOptionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE_onvifXsd__PaneLayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PaneLayoutOptions() { onvifXsd__PaneLayoutOptions::soap_default(NULL); }
	virtual ~onvifXsd__PaneLayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PaneOptionExtension
#define SOAP_TYPE_onvifXsd__PaneOptionExtension (797)
/* onvifXsd:PaneOptionExtension */
class SOAP_CMAC onvifXsd__PaneOptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 797; } /* = unique id SOAP_TYPE_onvifXsd__PaneOptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PaneOptionExtension() { onvifXsd__PaneOptionExtension::soap_default(NULL); }
	virtual ~onvifXsd__PaneOptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Receiver
#define SOAP_TYPE_onvifXsd__Receiver (798)
/* onvifXsd:Receiver */
class SOAP_CMAC onvifXsd__Receiver : public xsd__anyType
{
public:
	std::string Token;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__ReceiverConfiguration *Configuration;	/* required element of type onvifXsd:ReceiverConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 798; } /* = unique id SOAP_TYPE_onvifXsd__Receiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Receiver() { onvifXsd__Receiver::soap_default(NULL); }
	virtual ~onvifXsd__Receiver() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverConfiguration
#define SOAP_TYPE_onvifXsd__ReceiverConfiguration (799)
/* onvifXsd:ReceiverConfiguration */
class SOAP_CMAC onvifXsd__ReceiverConfiguration : public xsd__anyType
{
public:
	enum onvifXsd__ReceiverMode Mode;	/* required element of type onvifXsd:ReceiverMode */
	std::string MediaUri;	/* required element of type xsd:anyURI */
	onvifXsd__StreamSetup *StreamSetup;	/* required element of type onvifXsd:StreamSetup */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 799; } /* = unique id SOAP_TYPE_onvifXsd__ReceiverConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReceiverConfiguration() { onvifXsd__ReceiverConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__ReceiverConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverStateInformation
#define SOAP_TYPE_onvifXsd__ReceiverStateInformation (800)
/* onvifXsd:ReceiverStateInformation */
class SOAP_CMAC onvifXsd__ReceiverStateInformation : public xsd__anyType
{
public:
	enum onvifXsd__ReceiverState State;	/* required element of type onvifXsd:ReceiverState */
	bool AutoCreated;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE_onvifXsd__ReceiverStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReceiverStateInformation() { onvifXsd__ReceiverStateInformation::soap_default(NULL); }
	virtual ~onvifXsd__ReceiverStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SourceReference
#define SOAP_TYPE_onvifXsd__SourceReference (801)
/* onvifXsd:SourceReference */
class SOAP_CMAC onvifXsd__SourceReference : public xsd__anyType
{
public:
	std::string Token;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	std::string Type;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE_onvifXsd__SourceReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SourceReference() { onvifXsd__SourceReference::soap_default(NULL); }
	virtual ~onvifXsd__SourceReference() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DateTimeRange
#define SOAP_TYPE_onvifXsd__DateTimeRange (802)
/* onvifXsd:DateTimeRange */
class SOAP_CMAC onvifXsd__DateTimeRange : public xsd__anyType
{
public:
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 802; } /* = unique id SOAP_TYPE_onvifXsd__DateTimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DateTimeRange() { onvifXsd__DateTimeRange::soap_default(NULL); }
	virtual ~onvifXsd__DateTimeRange() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingSummary
#define SOAP_TYPE_onvifXsd__RecordingSummary (803)
/* onvifXsd:RecordingSummary */
class SOAP_CMAC onvifXsd__RecordingSummary : public xsd__anyType
{
public:
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataUntil;	/* required element of type xsd:dateTime */
	int NumberRecordings;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 803; } /* = unique id SOAP_TYPE_onvifXsd__RecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingSummary() { onvifXsd__RecordingSummary::soap_default(NULL); }
	virtual ~onvifXsd__RecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SearchScope
#define SOAP_TYPE_onvifXsd__SearchScope (804)
/* onvifXsd:SearchScope */
class SOAP_CMAC onvifXsd__SearchScope : public xsd__anyType
{
public:
	std::vector<onvifXsd__SourceReference * >IncludedSources;	/* optional element of type onvifXsd:SourceReference */
	std::vector<std::string >IncludedRecordings;	/* optional element of type onvifXsd:RecordingReference */
	std::string *RecordingInformationFilter;	/* optional element of type onvifXsd:XPathExpression */
	class onvifXsd__SearchScopeExtension *Extension;	/* optional element of type onvifXsd:SearchScopeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 804; } /* = unique id SOAP_TYPE_onvifXsd__SearchScope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SearchScope() { onvifXsd__SearchScope::soap_default(NULL); }
	virtual ~onvifXsd__SearchScope() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SearchScopeExtension
#define SOAP_TYPE_onvifXsd__SearchScopeExtension (805)
/* onvifXsd:SearchScopeExtension */
class SOAP_CMAC onvifXsd__SearchScopeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 805; } /* = unique id SOAP_TYPE_onvifXsd__SearchScopeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SearchScopeExtension() { onvifXsd__SearchScopeExtension::soap_default(NULL); }
	virtual ~onvifXsd__SearchScopeExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZPositionFilter
#define SOAP_TYPE_onvifXsd__PTZPositionFilter (807)
/* onvifXsd:PTZPositionFilter */
class SOAP_CMAC onvifXsd__PTZPositionFilter : public xsd__anyType
{
public:
	onvifXsd__PTZVector *MinPosition;	/* required element of type onvifXsd:PTZVector */
	onvifXsd__PTZVector *MaxPosition;	/* required element of type onvifXsd:PTZVector */
	bool EnterOrExit;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE_onvifXsd__PTZPositionFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZPositionFilter() { onvifXsd__PTZPositionFilter::soap_default(NULL); }
	virtual ~onvifXsd__PTZPositionFilter() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataFilter
#define SOAP_TYPE_onvifXsd__MetadataFilter (808)
/* onvifXsd:MetadataFilter */
class SOAP_CMAC onvifXsd__MetadataFilter : public xsd__anyType
{
public:
	std::string MetadataStreamFilter;	/* required element of type onvifXsd:XPathExpression */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 808; } /* = unique id SOAP_TYPE_onvifXsd__MetadataFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataFilter() { onvifXsd__MetadataFilter::soap_default(NULL); }
	virtual ~onvifXsd__MetadataFilter() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindRecordingResultList
#define SOAP_TYPE_onvifXsd__FindRecordingResultList (809)
/* onvifXsd:FindRecordingResultList */
class SOAP_CMAC onvifXsd__FindRecordingResultList : public xsd__anyType
{
public:
	enum onvifXsd__SearchState SearchState;	/* required element of type onvifXsd:SearchState */
	std::vector<class onvifXsd__RecordingInformation * >RecordingInformation;	/* optional element of type onvifXsd:RecordingInformation */
public:
	virtual int soap_type() const { return 809; } /* = unique id SOAP_TYPE_onvifXsd__FindRecordingResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindRecordingResultList() { onvifXsd__FindRecordingResultList::soap_default(NULL); }
	virtual ~onvifXsd__FindRecordingResultList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindEventResultList
#define SOAP_TYPE_onvifXsd__FindEventResultList (810)
/* onvifXsd:FindEventResultList */
class SOAP_CMAC onvifXsd__FindEventResultList : public xsd__anyType
{
public:
	enum onvifXsd__SearchState SearchState;	/* required element of type onvifXsd:SearchState */
	std::vector<class onvifXsd__FindEventResult * >Result;	/* optional element of type onvifXsd:FindEventResult */
public:
	virtual int soap_type() const { return 810; } /* = unique id SOAP_TYPE_onvifXsd__FindEventResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindEventResultList() { onvifXsd__FindEventResultList::soap_default(NULL); }
	virtual ~onvifXsd__FindEventResultList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindEventResult
#define SOAP_TYPE_onvifXsd__FindEventResult (811)
/* onvifXsd:FindEventResult */
class SOAP_CMAC onvifXsd__FindEventResult : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	std::string TrackToken;	/* required element of type onvifXsd:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	oasisWsnB2__NotificationMessageHolderType *Event;	/* required element of type oasisWsnB2:NotificationMessageHolderType */
	bool StartStateEvent;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE_onvifXsd__FindEventResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindEventResult() { onvifXsd__FindEventResult::soap_default(NULL); }
	virtual ~onvifXsd__FindEventResult() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindPTZPositionResultList
#define SOAP_TYPE_onvifXsd__FindPTZPositionResultList (812)
/* onvifXsd:FindPTZPositionResultList */
class SOAP_CMAC onvifXsd__FindPTZPositionResultList : public xsd__anyType
{
public:
	enum onvifXsd__SearchState SearchState;	/* required element of type onvifXsd:SearchState */
	std::vector<class onvifXsd__FindPTZPositionResult * >Result;	/* optional element of type onvifXsd:FindPTZPositionResult */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE_onvifXsd__FindPTZPositionResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindPTZPositionResultList() { onvifXsd__FindPTZPositionResultList::soap_default(NULL); }
	virtual ~onvifXsd__FindPTZPositionResultList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindPTZPositionResult
#define SOAP_TYPE_onvifXsd__FindPTZPositionResult (813)
/* onvifXsd:FindPTZPositionResult */
class SOAP_CMAC onvifXsd__FindPTZPositionResult : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	std::string TrackToken;	/* required element of type onvifXsd:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	onvifXsd__PTZVector *Position;	/* required element of type onvifXsd:PTZVector */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 813; } /* = unique id SOAP_TYPE_onvifXsd__FindPTZPositionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindPTZPositionResult() { onvifXsd__FindPTZPositionResult::soap_default(NULL); }
	virtual ~onvifXsd__FindPTZPositionResult() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindMetadataResultList
#define SOAP_TYPE_onvifXsd__FindMetadataResultList (814)
/* onvifXsd:FindMetadataResultList */
class SOAP_CMAC onvifXsd__FindMetadataResultList : public xsd__anyType
{
public:
	enum onvifXsd__SearchState SearchState;	/* required element of type onvifXsd:SearchState */
	std::vector<class onvifXsd__FindMetadataResult * >Result;	/* optional element of type onvifXsd:FindMetadataResult */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE_onvifXsd__FindMetadataResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindMetadataResultList() { onvifXsd__FindMetadataResultList::soap_default(NULL); }
	virtual ~onvifXsd__FindMetadataResultList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__FindMetadataResult
#define SOAP_TYPE_onvifXsd__FindMetadataResult (815)
/* onvifXsd:FindMetadataResult */
class SOAP_CMAC onvifXsd__FindMetadataResult : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	std::string TrackToken;	/* required element of type onvifXsd:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 815; } /* = unique id SOAP_TYPE_onvifXsd__FindMetadataResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__FindMetadataResult() { onvifXsd__FindMetadataResult::soap_default(NULL); }
	virtual ~onvifXsd__FindMetadataResult() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingInformation
#define SOAP_TYPE_onvifXsd__RecordingInformation (816)
/* onvifXsd:RecordingInformation */
class SOAP_CMAC onvifXsd__RecordingInformation : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	class onvifXsd__RecordingSourceInformation *Source;	/* required element of type onvifXsd:RecordingSourceInformation */
	time_t *EarliestRecording;	/* optional element of type xsd:dateTime */
	time_t *LatestRecording;	/* optional element of type xsd:dateTime */
	std::string Content;	/* required element of type onvifXsd:Description */
	std::vector<class onvifXsd__TrackInformation * >Track;	/* optional element of type onvifXsd:TrackInformation */
	enum onvifXsd__RecordingStatus RecordingStatus;	/* required element of type onvifXsd:RecordingStatus */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE_onvifXsd__RecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingInformation() { onvifXsd__RecordingInformation::soap_default(NULL); }
	virtual ~onvifXsd__RecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingSourceInformation
#define SOAP_TYPE_onvifXsd__RecordingSourceInformation (817)
/* onvifXsd:RecordingSourceInformation */
class SOAP_CMAC onvifXsd__RecordingSourceInformation : public xsd__anyType
{
public:
	std::string SourceId;	/* required element of type xsd:anyURI */
	std::string Name;	/* required element of type onvifXsd:Name */
	std::string Location;	/* required element of type onvifXsd:Description */
	std::string Description;	/* required element of type onvifXsd:Description */
	std::string Address;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE_onvifXsd__RecordingSourceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingSourceInformation() { onvifXsd__RecordingSourceInformation::soap_default(NULL); }
	virtual ~onvifXsd__RecordingSourceInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackInformation
#define SOAP_TYPE_onvifXsd__TrackInformation (818)
/* onvifXsd:TrackInformation */
class SOAP_CMAC onvifXsd__TrackInformation : public xsd__anyType
{
public:
	std::string TrackToken;	/* required element of type onvifXsd:TrackReference */
	enum onvifXsd__TrackType TrackType;	/* required element of type onvifXsd:TrackType */
	std::string Description;	/* required element of type onvifXsd:Description */
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataTo;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 818; } /* = unique id SOAP_TYPE_onvifXsd__TrackInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TrackInformation() { onvifXsd__TrackInformation::soap_default(NULL); }
	virtual ~onvifXsd__TrackInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MediaAttributes
#define SOAP_TYPE_onvifXsd__MediaAttributes (819)
/* onvifXsd:MediaAttributes */
class SOAP_CMAC onvifXsd__MediaAttributes : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	std::vector<class onvifXsd__TrackAttributes * >TrackAttributes;	/* optional element of type onvifXsd:TrackAttributes */
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE_onvifXsd__MediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MediaAttributes() { onvifXsd__MediaAttributes::soap_default(NULL); }
	virtual ~onvifXsd__MediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackAttributes
#define SOAP_TYPE_onvifXsd__TrackAttributes (820)
/* onvifXsd:TrackAttributes */
class SOAP_CMAC onvifXsd__TrackAttributes : public xsd__anyType
{
public:
	onvifXsd__TrackInformation *TrackInformation;	/* required element of type onvifXsd:TrackInformation */
	class onvifXsd__VideoAttributes *VideoAttributes;	/* optional element of type onvifXsd:VideoAttributes */
	class onvifXsd__AudioAttributes *AudioAttributes;	/* optional element of type onvifXsd:AudioAttributes */
	class onvifXsd__MetadataAttributes *MetadataAttributes;	/* optional element of type onvifXsd:MetadataAttributes */
	class onvifXsd__TrackAttributesExtension *Extension;	/* optional element of type onvifXsd:TrackAttributesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 820; } /* = unique id SOAP_TYPE_onvifXsd__TrackAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TrackAttributes() { onvifXsd__TrackAttributes::soap_default(NULL); }
	virtual ~onvifXsd__TrackAttributes() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackAttributesExtension
#define SOAP_TYPE_onvifXsd__TrackAttributesExtension (821)
/* onvifXsd:TrackAttributesExtension */
class SOAP_CMAC onvifXsd__TrackAttributesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE_onvifXsd__TrackAttributesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TrackAttributesExtension() { onvifXsd__TrackAttributesExtension::soap_default(NULL); }
	virtual ~onvifXsd__TrackAttributesExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoAttributes
#define SOAP_TYPE_onvifXsd__VideoAttributes (822)
/* onvifXsd:VideoAttributes */
class SOAP_CMAC onvifXsd__VideoAttributes : public xsd__anyType
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	enum onvifXsd__VideoEncoding Encoding;	/* required element of type onvifXsd:VideoEncoding */
	float Framerate;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE_onvifXsd__VideoAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoAttributes() { onvifXsd__VideoAttributes::soap_default(NULL); }
	virtual ~onvifXsd__VideoAttributes() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioAttributes
#define SOAP_TYPE_onvifXsd__AudioAttributes (823)
/* onvifXsd:AudioAttributes */
class SOAP_CMAC onvifXsd__AudioAttributes : public xsd__anyType
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	enum onvifXsd__AudioEncoding Encoding;	/* required element of type onvifXsd:AudioEncoding */
	int Samplerate;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 823; } /* = unique id SOAP_TYPE_onvifXsd__AudioAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioAttributes() { onvifXsd__AudioAttributes::soap_default(NULL); }
	virtual ~onvifXsd__AudioAttributes() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataAttributes
#define SOAP_TYPE_onvifXsd__MetadataAttributes (824)
/* onvifXsd:MetadataAttributes */
class SOAP_CMAC onvifXsd__MetadataAttributes : public xsd__anyType
{
public:
	bool CanContainPTZ;	/* required element of type xsd:boolean */
	bool CanContainAnalytics;	/* required element of type xsd:boolean */
	bool CanContainNotifications;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 824; } /* = unique id SOAP_TYPE_onvifXsd__MetadataAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataAttributes() { onvifXsd__MetadataAttributes::soap_default(NULL); }
	virtual ~onvifXsd__MetadataAttributes() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingConfiguration
#define SOAP_TYPE_onvifXsd__RecordingConfiguration (825)
/* onvifXsd:RecordingConfiguration */
class SOAP_CMAC onvifXsd__RecordingConfiguration : public xsd__anyType
{
public:
	onvifXsd__RecordingSourceInformation *Source;	/* required element of type onvifXsd:RecordingSourceInformation */
	std::string Content;	/* required element of type onvifXsd:Description */
	std::string MaximumRetentionTime;	/* required element of type xsd:duration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 825; } /* = unique id SOAP_TYPE_onvifXsd__RecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingConfiguration() { onvifXsd__RecordingConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__RecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackConfiguration
#define SOAP_TYPE_onvifXsd__TrackConfiguration (826)
/* onvifXsd:TrackConfiguration */
class SOAP_CMAC onvifXsd__TrackConfiguration : public xsd__anyType
{
public:
	enum onvifXsd__TrackType TrackType;	/* required element of type onvifXsd:TrackType */
	std::string Description;	/* required element of type onvifXsd:Description */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE_onvifXsd__TrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__TrackConfiguration() { onvifXsd__TrackConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__TrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__GetRecordingsResponseItem
#define SOAP_TYPE_onvifXsd__GetRecordingsResponseItem (827)
/* onvifXsd:GetRecordingsResponseItem */
class SOAP_CMAC onvifXsd__GetRecordingsResponseItem : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	onvifXsd__RecordingConfiguration *Configuration;	/* required element of type onvifXsd:RecordingConfiguration */
	class onvifXsd__GetTracksResponseList *Tracks;	/* required element of type onvifXsd:GetTracksResponseList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE_onvifXsd__GetRecordingsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__GetRecordingsResponseItem() { onvifXsd__GetRecordingsResponseItem::soap_default(NULL); }
	virtual ~onvifXsd__GetRecordingsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__GetTracksResponseList
#define SOAP_TYPE_onvifXsd__GetTracksResponseList (828)
/* onvifXsd:GetTracksResponseList */
class SOAP_CMAC onvifXsd__GetTracksResponseList : public xsd__anyType
{
public:
	std::vector<class onvifXsd__GetTracksResponseItem * >Track;	/* optional element of type onvifXsd:GetTracksResponseItem */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 828; } /* = unique id SOAP_TYPE_onvifXsd__GetTracksResponseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__GetTracksResponseList() { onvifXsd__GetTracksResponseList::soap_default(NULL); }
	virtual ~onvifXsd__GetTracksResponseList() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__GetTracksResponseItem
#define SOAP_TYPE_onvifXsd__GetTracksResponseItem (829)
/* onvifXsd:GetTracksResponseItem */
class SOAP_CMAC onvifXsd__GetTracksResponseItem : public xsd__anyType
{
public:
	std::string TrackToken;	/* required element of type onvifXsd:TrackReference */
	onvifXsd__TrackConfiguration *Configuration;	/* required element of type onvifXsd:TrackConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 829; } /* = unique id SOAP_TYPE_onvifXsd__GetTracksResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__GetTracksResponseItem() { onvifXsd__GetTracksResponseItem::soap_default(NULL); }
	virtual ~onvifXsd__GetTracksResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobConfiguration
#define SOAP_TYPE_onvifXsd__RecordingJobConfiguration (830)
/* onvifXsd:RecordingJobConfiguration */
class SOAP_CMAC onvifXsd__RecordingJobConfiguration : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	std::string Mode;	/* required element of type onvifXsd:RecordingJobMode */
	int Priority;	/* required element of type xsd:int */
	std::vector<class onvifXsd__RecordingJobSource * >Source;	/* optional element of type onvifXsd:RecordingJobSource */
	class onvifXsd__RecordingJobConfigurationExtension *Extension;	/* optional element of type onvifXsd:RecordingJobConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 830; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobConfiguration() { onvifXsd__RecordingJobConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobConfigurationExtension
#define SOAP_TYPE_onvifXsd__RecordingJobConfigurationExtension (831)
/* onvifXsd:RecordingJobConfigurationExtension */
class SOAP_CMAC onvifXsd__RecordingJobConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobConfigurationExtension() { onvifXsd__RecordingJobConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobSource
#define SOAP_TYPE_onvifXsd__RecordingJobSource (832)
/* onvifXsd:RecordingJobSource */
class SOAP_CMAC onvifXsd__RecordingJobSource : public xsd__anyType
{
public:
	onvifXsd__SourceReference *SourceToken;	/* optional element of type onvifXsd:SourceReference */
	bool *AutoCreateReceiver;	/* optional element of type xsd:boolean */
	std::vector<class onvifXsd__RecordingJobTrack * >Tracks;	/* optional element of type onvifXsd:RecordingJobTrack */
	class onvifXsd__RecordingJobSourceExtension *Extension;	/* optional element of type onvifXsd:RecordingJobSourceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobSource() { onvifXsd__RecordingJobSource::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobSource() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobSourceExtension
#define SOAP_TYPE_onvifXsd__RecordingJobSourceExtension (833)
/* onvifXsd:RecordingJobSourceExtension */
class SOAP_CMAC onvifXsd__RecordingJobSourceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 833; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobSourceExtension() { onvifXsd__RecordingJobSourceExtension::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobTrack
#define SOAP_TYPE_onvifXsd__RecordingJobTrack (834)
/* onvifXsd:RecordingJobTrack */
class SOAP_CMAC onvifXsd__RecordingJobTrack : public xsd__anyType
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type onvifXsd:TrackReference */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobTrack() { onvifXsd__RecordingJobTrack::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobTrack() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobStateInformation
#define SOAP_TYPE_onvifXsd__RecordingJobStateInformation (835)
/* onvifXsd:RecordingJobStateInformation */
class SOAP_CMAC onvifXsd__RecordingJobStateInformation : public xsd__anyType
{
public:
	std::string RecordingToken;	/* required element of type onvifXsd:RecordingReference */
	std::string State;	/* required element of type onvifXsd:RecordingJobState */
	std::vector<class onvifXsd__RecordingJobStateSource * >Sources;	/* optional element of type onvifXsd:RecordingJobStateSource */
	class onvifXsd__RecordingJobStateInformationExtension *Extension;	/* optional element of type onvifXsd:RecordingJobStateInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 835; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobStateInformation() { onvifXsd__RecordingJobStateInformation::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobStateInformationExtension
#define SOAP_TYPE_onvifXsd__RecordingJobStateInformationExtension (836)
/* onvifXsd:RecordingJobStateInformationExtension */
class SOAP_CMAC onvifXsd__RecordingJobStateInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobStateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobStateInformationExtension() { onvifXsd__RecordingJobStateInformationExtension::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobStateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobStateSource
#define SOAP_TYPE_onvifXsd__RecordingJobStateSource (837)
/* onvifXsd:RecordingJobStateSource */
class SOAP_CMAC onvifXsd__RecordingJobStateSource : public xsd__anyType
{
public:
	onvifXsd__SourceReference *SourceToken;	/* required element of type onvifXsd:SourceReference */
	std::string State;	/* required element of type onvifXsd:RecordingJobState */
	class onvifXsd__RecordingJobStateTracks *Tracks;	/* required element of type onvifXsd:RecordingJobStateTracks */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobStateSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobStateSource() { onvifXsd__RecordingJobStateSource::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobStateSource() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobStateTracks
#define SOAP_TYPE_onvifXsd__RecordingJobStateTracks (838)
/* onvifXsd:RecordingJobStateTracks */
class SOAP_CMAC onvifXsd__RecordingJobStateTracks : public xsd__anyType
{
public:
	std::vector<class onvifXsd__RecordingJobStateTrack * >Track;	/* optional element of type onvifXsd:RecordingJobStateTrack */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 838; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobStateTracks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobStateTracks() { onvifXsd__RecordingJobStateTracks::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobStateTracks() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobStateTrack
#define SOAP_TYPE_onvifXsd__RecordingJobStateTrack (839)
/* onvifXsd:RecordingJobStateTrack */
class SOAP_CMAC onvifXsd__RecordingJobStateTrack : public xsd__anyType
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type onvifXsd:TrackReference */
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type onvifXsd:RecordingJobState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE_onvifXsd__RecordingJobStateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RecordingJobStateTrack() { onvifXsd__RecordingJobStateTrack::soap_default(NULL); }
	virtual ~onvifXsd__RecordingJobStateTrack() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__GetRecordingJobsResponseItem
#define SOAP_TYPE_onvifXsd__GetRecordingJobsResponseItem (840)
/* onvifXsd:GetRecordingJobsResponseItem */
class SOAP_CMAC onvifXsd__GetRecordingJobsResponseItem : public xsd__anyType
{
public:
	std::string JobToken;	/* required element of type onvifXsd:RecordingJobReference */
	onvifXsd__RecordingJobConfiguration *JobConfiguration;	/* required element of type onvifXsd:RecordingJobConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 840; } /* = unique id SOAP_TYPE_onvifXsd__GetRecordingJobsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__GetRecordingJobsResponseItem() { onvifXsd__GetRecordingJobsResponseItem::soap_default(NULL); }
	virtual ~onvifXsd__GetRecordingJobsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ReplayConfiguration
#define SOAP_TYPE_onvifXsd__ReplayConfiguration (841)
/* onvifXsd:ReplayConfiguration */
class SOAP_CMAC onvifXsd__ReplayConfiguration : public xsd__anyType
{
public:
	std::string SessionTimeout;	/* required element of type xsd:duration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE_onvifXsd__ReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ReplayConfiguration() { onvifXsd__ReplayConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__ReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_onvifXsd__AnalyticsDeviceEngineConfiguration (843)
/* onvifXsd:AnalyticsDeviceEngineConfiguration */
class SOAP_CMAC onvifXsd__AnalyticsDeviceEngineConfiguration : public xsd__anyType
{
public:
	std::vector<class onvifXsd__EngineConfiguration * >EngineConfiguration;	/* required element of type onvifXsd:EngineConfiguration */
	class onvifXsd__AnalyticsDeviceEngineConfigurationExtension *Extension;	/* optional element of type onvifXsd:AnalyticsDeviceEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 843; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsDeviceEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsDeviceEngineConfiguration() { onvifXsd__AnalyticsDeviceEngineConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsDeviceEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_onvifXsd__AnalyticsDeviceEngineConfigurationExtension (844)
/* onvifXsd:AnalyticsDeviceEngineConfigurationExtension */
class SOAP_CMAC onvifXsd__AnalyticsDeviceEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 844; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsDeviceEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsDeviceEngineConfigurationExtension() { onvifXsd__AnalyticsDeviceEngineConfigurationExtension::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsDeviceEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EngineConfiguration
#define SOAP_TYPE_onvifXsd__EngineConfiguration (845)
/* onvifXsd:EngineConfiguration */
class SOAP_CMAC onvifXsd__EngineConfiguration : public xsd__anyType
{
public:
	onvifXsd__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* required element of type onvifXsd:VideoAnalyticsConfiguration */
	class onvifXsd__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;	/* required element of type onvifXsd:AnalyticsEngineInputInfo */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 845; } /* = unique id SOAP_TYPE_onvifXsd__EngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EngineConfiguration() { onvifXsd__EngineConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__EngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngineInputInfo
#define SOAP_TYPE_onvifXsd__AnalyticsEngineInputInfo (846)
/* onvifXsd:AnalyticsEngineInputInfo */
class SOAP_CMAC onvifXsd__AnalyticsEngineInputInfo : public xsd__anyType
{
public:
	onvifXsd__Config *InputInfo;	/* optional element of type onvifXsd:Config */
	class onvifXsd__AnalyticsEngineInputInfoExtension *Extension;	/* optional element of type onvifXsd:AnalyticsEngineInputInfoExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngineInputInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngineInputInfo() { onvifXsd__AnalyticsEngineInputInfo::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngineInputInfo() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_onvifXsd__AnalyticsEngineInputInfoExtension (847)
/* onvifXsd:AnalyticsEngineInputInfoExtension */
class SOAP_CMAC onvifXsd__AnalyticsEngineInputInfoExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngineInputInfoExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngineInputInfoExtension() { onvifXsd__AnalyticsEngineInputInfoExtension::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngineInputInfoExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SourceIdentification
#define SOAP_TYPE_onvifXsd__SourceIdentification (849)
/* onvifXsd:SourceIdentification */
class SOAP_CMAC onvifXsd__SourceIdentification : public xsd__anyType
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::vector<std::string >Token;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__SourceIdentificationExtension *Extension;	/* optional element of type onvifXsd:SourceIdentificationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 849; } /* = unique id SOAP_TYPE_onvifXsd__SourceIdentification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SourceIdentification() { onvifXsd__SourceIdentification::soap_default(NULL); }
	virtual ~onvifXsd__SourceIdentification() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__SourceIdentificationExtension
#define SOAP_TYPE_onvifXsd__SourceIdentificationExtension (850)
/* onvifXsd:SourceIdentificationExtension */
class SOAP_CMAC onvifXsd__SourceIdentificationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 850; } /* = unique id SOAP_TYPE_onvifXsd__SourceIdentificationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__SourceIdentificationExtension() { onvifXsd__SourceIdentificationExtension::soap_default(NULL); }
	virtual ~onvifXsd__SourceIdentificationExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataInput
#define SOAP_TYPE_onvifXsd__MetadataInput (851)
/* onvifXsd:MetadataInput */
class SOAP_CMAC onvifXsd__MetadataInput : public xsd__anyType
{
public:
	std::vector<onvifXsd__Config * >MetadataConfig;	/* optional element of type onvifXsd:Config */
	class onvifXsd__MetadataInputExtension *Extension;	/* optional element of type onvifXsd:MetadataInputExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_onvifXsd__MetadataInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataInput() { onvifXsd__MetadataInput::soap_default(NULL); }
	virtual ~onvifXsd__MetadataInput() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataInputExtension
#define SOAP_TYPE_onvifXsd__MetadataInputExtension (852)
/* onvifXsd:MetadataInputExtension */
class SOAP_CMAC onvifXsd__MetadataInputExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE_onvifXsd__MetadataInputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataInputExtension() { onvifXsd__MetadataInputExtension::soap_default(NULL); }
	virtual ~onvifXsd__MetadataInputExtension() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsStateInformation
#define SOAP_TYPE_onvifXsd__AnalyticsStateInformation (854)
/* onvifXsd:AnalyticsStateInformation */
class SOAP_CMAC onvifXsd__AnalyticsStateInformation : public xsd__anyType
{
public:
	std::string AnalyticsEngineControlToken;	/* required element of type onvifXsd:ReferenceToken */
	class onvifXsd__AnalyticsState *State;	/* required element of type onvifXsd:AnalyticsState */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 854; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsStateInformation() { onvifXsd__AnalyticsStateInformation::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsState
#define SOAP_TYPE_onvifXsd__AnalyticsState (855)
/* onvifXsd:AnalyticsState */
class SOAP_CMAC onvifXsd__AnalyticsState : public xsd__anyType
{
public:
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 855; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsState() { onvifXsd__AnalyticsState::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsState() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (1832)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

#ifndef SOAP_TYPE_onvifXsd__ActionEngineEventPayload
#define SOAP_TYPE_onvifXsd__ActionEngineEventPayload (856)
/* onvifXsd:ActionEngineEventPayload */
class SOAP_CMAC onvifXsd__ActionEngineEventPayload : public xsd__anyType
{
public:
	std::string *RequestInfo;	/* optional element of type SOAP-ENV:Envelope */
	std::string *ResponseInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Fault *Fault;	/* optional element of type SOAP-ENV:Fault */
	class onvifXsd__ActionEngineEventPayloadExtension *Extension;	/* optional element of type onvifXsd:ActionEngineEventPayloadExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE_onvifXsd__ActionEngineEventPayload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ActionEngineEventPayload() { onvifXsd__ActionEngineEventPayload::soap_default(NULL); }
	virtual ~onvifXsd__ActionEngineEventPayload() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__ActionEngineEventPayloadExtension
#define SOAP_TYPE_onvifXsd__ActionEngineEventPayloadExtension (857)
/* onvifXsd:ActionEngineEventPayloadExtension */
class SOAP_CMAC onvifXsd__ActionEngineEventPayloadExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 857; } /* = unique id SOAP_TYPE_onvifXsd__ActionEngineEventPayloadExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__ActionEngineEventPayloadExtension() { onvifXsd__ActionEngineEventPayloadExtension::soap_default(NULL); }
	virtual ~onvifXsd__ActionEngineEventPayloadExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifXsd__Message
#define SOAP_TYPE__onvifXsd__Message (858)
/* onvifXsd:Message */
class SOAP_CMAC _onvifXsd__Message
{
public:
	onvifXsd__ItemList *Source;	/* optional element of type onvifXsd:ItemList */
	onvifXsd__ItemList *Key;	/* optional element of type onvifXsd:ItemList */
	onvifXsd__ItemList *Data;	/* optional element of type onvifXsd:ItemList */
	onvifXsd__MessageExtension *Extension;	/* optional element of type onvifXsd:MessageExtension */
	time_t UtcTime;	/* required attribute */
	enum onvifXsd__PropertyOperation *PropertyOperation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE__onvifXsd__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifXsd__Message() { _onvifXsd__Message::soap_default(NULL); }
	virtual ~_onvifXsd__Message() { }
};
#endif

#ifndef SOAP_TYPE_ns5__Include
#define SOAP_TYPE_ns5__Include (859)
/* ns5:Include */
class SOAP_CMAC ns5__Include : public xsd__anyType
{
public:
	std::vector<char * >__any;
	std::string href;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 859; } /* = unique id SOAP_TYPE_ns5__Include */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__Include() { ns5__Include::soap_default(NULL); }
	virtual ~ns5__Include() { }
};
#endif

#ifndef SOAP_TYPE_onvifEvents__Capabilities
#define SOAP_TYPE_onvifEvents__Capabilities (860)
/* onvifEvents:Capabilities */
class SOAP_CMAC onvifEvents__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *WSSubscriptionPolicySupport;	/* optional attribute */
	bool *WSPullPointSupport;	/* optional attribute */
	bool *WSPausableSubscriptionManagerInterfaceSupport;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 860; } /* = unique id SOAP_TYPE_onvifEvents__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifEvents__Capabilities() { onvifEvents__Capabilities::soap_default(NULL); }
	virtual ~onvifEvents__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__GetServiceCapabilities
#define SOAP_TYPE__onvifEvents__GetServiceCapabilities (861)
/* onvifEvents:GetServiceCapabilities */
class SOAP_CMAC _onvifEvents__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 861; } /* = unique id SOAP_TYPE__onvifEvents__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__GetServiceCapabilities() { _onvifEvents__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_onvifEvents__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__GetServiceCapabilitiesResponse
#define SOAP_TYPE__onvifEvents__GetServiceCapabilitiesResponse (862)
/* onvifEvents:GetServiceCapabilitiesResponse */
class SOAP_CMAC _onvifEvents__GetServiceCapabilitiesResponse
{
public:
	onvifEvents__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifEvents:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 862; } /* = unique id SOAP_TYPE__onvifEvents__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__GetServiceCapabilitiesResponse() { _onvifEvents__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifEvents__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__onvifEvents__CreatePullPointSubscription_SubscriptionPolicy (1838)
/* onvifEvents:CreatePullPointSubscription-SubscriptionPolicy */
class SOAP_CMAC _onvifEvents__CreatePullPointSubscription_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1838; } /* = unique id SOAP_TYPE__onvifEvents__CreatePullPointSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__CreatePullPointSubscription_SubscriptionPolicy() { _onvifEvents__CreatePullPointSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_onvifEvents__CreatePullPointSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__CreatePullPointSubscription
#define SOAP_TYPE__onvifEvents__CreatePullPointSubscription (863)
/* onvifEvents:CreatePullPointSubscription */
class SOAP_CMAC _onvifEvents__CreatePullPointSubscription
{
public:
	oasisWsnB2__FilterType *Filter;	/* optional element of type oasisWsnB2:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type oasisWsnB2:AbsoluteOrRelativeTimeType */
	_onvifEvents__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type onvifEvents:CreatePullPointSubscription-SubscriptionPolicy */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 863; } /* = unique id SOAP_TYPE__onvifEvents__CreatePullPointSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__CreatePullPointSubscription() { _onvifEvents__CreatePullPointSubscription::soap_default(NULL); }
	virtual ~_onvifEvents__CreatePullPointSubscription() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__onvifEvents__CreatePullPointSubscriptionResponse (864)
/* onvifEvents:CreatePullPointSubscriptionResponse */
class SOAP_CMAC _onvifEvents__CreatePullPointSubscriptionResponse
{
public:
	ns1__EndpointReferenceType *SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:EndpointReferenceType */
	time_t oasisWsnB2__CurrentTime;	/* required element of type xsd:dateTime */
	time_t oasisWsnB2__TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 864; } /* = unique id SOAP_TYPE__onvifEvents__CreatePullPointSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__CreatePullPointSubscriptionResponse() { _onvifEvents__CreatePullPointSubscriptionResponse::soap_default(NULL); }
	virtual ~_onvifEvents__CreatePullPointSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__PullMessages
#define SOAP_TYPE__onvifEvents__PullMessages (865)
/* onvifEvents:PullMessages */
class SOAP_CMAC _onvifEvents__PullMessages
{
public:
	std::string Timeout;	/* required element of type xsd:duration */
	int MessageLimit;	/* required element of type xsd:int */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 865; } /* = unique id SOAP_TYPE__onvifEvents__PullMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__PullMessages() { _onvifEvents__PullMessages::soap_default(NULL); }
	virtual ~_onvifEvents__PullMessages() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__PullMessagesResponse
#define SOAP_TYPE__onvifEvents__PullMessagesResponse (866)
/* onvifEvents:PullMessagesResponse */
class SOAP_CMAC _onvifEvents__PullMessagesResponse
{
public:
	time_t CurrentTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<oasisWsnB2__NotificationMessageHolderType * >oasisWsnB2__NotificationMessage;	/* optional element of type oasisWsnB2:NotificationMessageHolderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 866; } /* = unique id SOAP_TYPE__onvifEvents__PullMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__PullMessagesResponse() { _onvifEvents__PullMessagesResponse::soap_default(NULL); }
	virtual ~_onvifEvents__PullMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__PullMessagesFaultResponse
#define SOAP_TYPE__onvifEvents__PullMessagesFaultResponse (867)
/* onvifEvents:PullMessagesFaultResponse */
class SOAP_CMAC _onvifEvents__PullMessagesFaultResponse
{
public:
	std::string MaxTimeout;	/* required element of type xsd:duration */
	int MaxMessageLimit;	/* required element of type xsd:int */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 867; } /* = unique id SOAP_TYPE__onvifEvents__PullMessagesFaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__PullMessagesFaultResponse() { _onvifEvents__PullMessagesFaultResponse::soap_default(NULL); }
	virtual ~_onvifEvents__PullMessagesFaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__SetSynchronizationPoint
#define SOAP_TYPE__onvifEvents__SetSynchronizationPoint (868)
/* onvifEvents:SetSynchronizationPoint */
class SOAP_CMAC _onvifEvents__SetSynchronizationPoint
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 868; } /* = unique id SOAP_TYPE__onvifEvents__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__SetSynchronizationPoint() { _onvifEvents__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_onvifEvents__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__SetSynchronizationPointResponse
#define SOAP_TYPE__onvifEvents__SetSynchronizationPointResponse (869)
/* onvifEvents:SetSynchronizationPointResponse */
class SOAP_CMAC _onvifEvents__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 869; } /* = unique id SOAP_TYPE__onvifEvents__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__SetSynchronizationPointResponse() { _onvifEvents__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_onvifEvents__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__GetEventProperties
#define SOAP_TYPE__onvifEvents__GetEventProperties (870)
/* onvifEvents:GetEventProperties */
class SOAP_CMAC _onvifEvents__GetEventProperties
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 870; } /* = unique id SOAP_TYPE__onvifEvents__GetEventProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__GetEventProperties() { _onvifEvents__GetEventProperties::soap_default(NULL); }
	virtual ~_onvifEvents__GetEventProperties() { }
};
#endif

#ifndef SOAP_TYPE__onvifEvents__GetEventPropertiesResponse
#define SOAP_TYPE__onvifEvents__GetEventPropertiesResponse (871)
/* onvifEvents:GetEventPropertiesResponse */
class SOAP_CMAC _onvifEvents__GetEventPropertiesResponse
{
public:
	std::vector<std::string >TopicNamespaceLocation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	bool oasisWsnB2__FixedTopicSet;	/* required element of type xsd:boolean */
	oasisWsnT1__TopicSetType *oasisWsnT1__TopicSet;	/* required element of type oasisWsnT1:TopicSetType */
	std::vector<std::string >oasisWsnB2__TopicExpressionDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >MessageContentFilterDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >ProducerPropertiesFilterDialect;	/* optional element of type xsd:anyURI */
	std::vector<std::string >MessageContentSchemaLocation;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 871; } /* = unique id SOAP_TYPE__onvifEvents__GetEventPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifEvents__GetEventPropertiesResponse() { _onvifEvents__GetEventPropertiesResponse::soap_default(NULL); }
	virtual ~_onvifEvents__GetEventPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_onvifImg__Capabilities
#define SOAP_TYPE_onvifImg__Capabilities (872)
/* onvifImg:Capabilities */
class SOAP_CMAC onvifImg__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *ImageStabilization;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 872; } /* = unique id SOAP_TYPE_onvifImg__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifImg__Capabilities() { onvifImg__Capabilities::soap_default(NULL); }
	virtual ~onvifImg__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetServiceCapabilities
#define SOAP_TYPE__onvifImg__GetServiceCapabilities (873)
/* onvifImg:GetServiceCapabilities */
class SOAP_CMAC _onvifImg__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 873; } /* = unique id SOAP_TYPE__onvifImg__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetServiceCapabilities() { _onvifImg__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_onvifImg__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetServiceCapabilitiesResponse
#define SOAP_TYPE__onvifImg__GetServiceCapabilitiesResponse (874)
/* onvifImg:GetServiceCapabilitiesResponse */
class SOAP_CMAC _onvifImg__GetServiceCapabilitiesResponse
{
public:
	onvifImg__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifImg:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 874; } /* = unique id SOAP_TYPE__onvifImg__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetServiceCapabilitiesResponse() { _onvifImg__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifImg__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetImagingSettings
#define SOAP_TYPE__onvifImg__GetImagingSettings (875)
/* onvifImg:GetImagingSettings */
class SOAP_CMAC _onvifImg__GetImagingSettings
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 875; } /* = unique id SOAP_TYPE__onvifImg__GetImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetImagingSettings() { _onvifImg__GetImagingSettings::soap_default(NULL); }
	virtual ~_onvifImg__GetImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetImagingSettingsResponse
#define SOAP_TYPE__onvifImg__GetImagingSettingsResponse (876)
/* onvifImg:GetImagingSettingsResponse */
class SOAP_CMAC _onvifImg__GetImagingSettingsResponse
{
public:
	onvifXsd__ImagingSettings20 *ImagingSettings;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:ImagingSettings20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 876; } /* = unique id SOAP_TYPE__onvifImg__GetImagingSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetImagingSettingsResponse() { _onvifImg__GetImagingSettingsResponse::soap_default(NULL); }
	virtual ~_onvifImg__GetImagingSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__SetImagingSettings
#define SOAP_TYPE__onvifImg__SetImagingSettings (877)
/* onvifImg:SetImagingSettings */
class SOAP_CMAC _onvifImg__SetImagingSettings
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__ImagingSettings20 *ImagingSettings;	/* required element of type onvifXsd:ImagingSettings20 */
	bool *ForcePersistence_x0020;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 877; } /* = unique id SOAP_TYPE__onvifImg__SetImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__SetImagingSettings() { _onvifImg__SetImagingSettings::soap_default(NULL); }
	virtual ~_onvifImg__SetImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__SetImagingSettingsResponse
#define SOAP_TYPE__onvifImg__SetImagingSettingsResponse (878)
/* onvifImg:SetImagingSettingsResponse */
class SOAP_CMAC _onvifImg__SetImagingSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 878; } /* = unique id SOAP_TYPE__onvifImg__SetImagingSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__SetImagingSettingsResponse() { _onvifImg__SetImagingSettingsResponse::soap_default(NULL); }
	virtual ~_onvifImg__SetImagingSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetOptions
#define SOAP_TYPE__onvifImg__GetOptions (879)
/* onvifImg:GetOptions */
class SOAP_CMAC _onvifImg__GetOptions
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 879; } /* = unique id SOAP_TYPE__onvifImg__GetOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetOptions() { _onvifImg__GetOptions::soap_default(NULL); }
	virtual ~_onvifImg__GetOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetOptionsResponse
#define SOAP_TYPE__onvifImg__GetOptionsResponse (880)
/* onvifImg:GetOptionsResponse */
class SOAP_CMAC _onvifImg__GetOptionsResponse
{
public:
	onvifXsd__ImagingOptions20 *ImagingOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:ImagingOptions20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 880; } /* = unique id SOAP_TYPE__onvifImg__GetOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetOptionsResponse() { _onvifImg__GetOptionsResponse::soap_default(NULL); }
	virtual ~_onvifImg__GetOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__Move
#define SOAP_TYPE__onvifImg__Move (881)
/* onvifImg:Move */
class SOAP_CMAC _onvifImg__Move
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__FocusMove *Focus;	/* required element of type onvifXsd:FocusMove */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 881; } /* = unique id SOAP_TYPE__onvifImg__Move */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__Move() { _onvifImg__Move::soap_default(NULL); }
	virtual ~_onvifImg__Move() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__MoveResponse
#define SOAP_TYPE__onvifImg__MoveResponse (882)
/* onvifImg:MoveResponse */
class SOAP_CMAC _onvifImg__MoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 882; } /* = unique id SOAP_TYPE__onvifImg__MoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__MoveResponse() { _onvifImg__MoveResponse::soap_default(NULL); }
	virtual ~_onvifImg__MoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetMoveOptions
#define SOAP_TYPE__onvifImg__GetMoveOptions (883)
/* onvifImg:GetMoveOptions */
class SOAP_CMAC _onvifImg__GetMoveOptions
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 883; } /* = unique id SOAP_TYPE__onvifImg__GetMoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetMoveOptions() { _onvifImg__GetMoveOptions::soap_default(NULL); }
	virtual ~_onvifImg__GetMoveOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetMoveOptionsResponse
#define SOAP_TYPE__onvifImg__GetMoveOptionsResponse (884)
/* onvifImg:GetMoveOptionsResponse */
class SOAP_CMAC _onvifImg__GetMoveOptionsResponse
{
public:
	onvifXsd__MoveOptions20 *MoveOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:MoveOptions20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 884; } /* = unique id SOAP_TYPE__onvifImg__GetMoveOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetMoveOptionsResponse() { _onvifImg__GetMoveOptionsResponse::soap_default(NULL); }
	virtual ~_onvifImg__GetMoveOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__Stop
#define SOAP_TYPE__onvifImg__Stop (885)
/* onvifImg:Stop */
class SOAP_CMAC _onvifImg__Stop
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 885; } /* = unique id SOAP_TYPE__onvifImg__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__Stop() { _onvifImg__Stop::soap_default(NULL); }
	virtual ~_onvifImg__Stop() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__StopResponse
#define SOAP_TYPE__onvifImg__StopResponse (886)
/* onvifImg:StopResponse */
class SOAP_CMAC _onvifImg__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 886; } /* = unique id SOAP_TYPE__onvifImg__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__StopResponse() { _onvifImg__StopResponse::soap_default(NULL); }
	virtual ~_onvifImg__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetStatus
#define SOAP_TYPE__onvifImg__GetStatus (887)
/* onvifImg:GetStatus */
class SOAP_CMAC _onvifImg__GetStatus
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 887; } /* = unique id SOAP_TYPE__onvifImg__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetStatus() { _onvifImg__GetStatus::soap_default(NULL); }
	virtual ~_onvifImg__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__onvifImg__GetStatusResponse
#define SOAP_TYPE__onvifImg__GetStatusResponse (888)
/* onvifImg:GetStatusResponse */
class SOAP_CMAC _onvifImg__GetStatusResponse
{
public:
	onvifXsd__ImagingStatus20 *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:ImagingStatus20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE__onvifImg__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifImg__GetStatusResponse() { _onvifImg__GetStatusResponse::soap_default(NULL); }
	virtual ~_onvifImg__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_onvifMedia__Capabilities
#define SOAP_TYPE_onvifMedia__Capabilities (889)
/* onvifMedia:Capabilities */
class SOAP_CMAC onvifMedia__Capabilities : public xsd__anyType
{
public:
	class onvifMedia__ProfileCapabilities *ProfileCapabilities;	/* required element of type onvifMedia:ProfileCapabilities */
	class onvifMedia__StreamingCapabilities *StreamingCapabilities;	/* required element of type onvifMedia:StreamingCapabilities */
	std::vector<char * >__any;
	bool *SnapshotUri;	/* optional attribute */
	bool *Rotation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 889; } /* = unique id SOAP_TYPE_onvifMedia__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifMedia__Capabilities() { onvifMedia__Capabilities::soap_default(NULL); }
	virtual ~onvifMedia__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifMedia__ProfileCapabilities
#define SOAP_TYPE_onvifMedia__ProfileCapabilities (890)
/* onvifMedia:ProfileCapabilities */
class SOAP_CMAC onvifMedia__ProfileCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int *MaximumNumberOfProfiles;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 890; } /* = unique id SOAP_TYPE_onvifMedia__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifMedia__ProfileCapabilities() { onvifMedia__ProfileCapabilities::soap_default(NULL); }
	virtual ~onvifMedia__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifMedia__StreamingCapabilities
#define SOAP_TYPE_onvifMedia__StreamingCapabilities (891)
/* onvifMedia:StreamingCapabilities */
class SOAP_CMAC onvifMedia__StreamingCapabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *RTPMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	bool *NonAggregateControl;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 891; } /* = unique id SOAP_TYPE_onvifMedia__StreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifMedia__StreamingCapabilities() { onvifMedia__StreamingCapabilities::soap_default(NULL); }
	virtual ~onvifMedia__StreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetServiceCapabilities
#define SOAP_TYPE__onvifMedia__GetServiceCapabilities (892)
/* onvifMedia:GetServiceCapabilities */
class SOAP_CMAC _onvifMedia__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE__onvifMedia__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetServiceCapabilities() { _onvifMedia__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_onvifMedia__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetServiceCapabilitiesResponse
#define SOAP_TYPE__onvifMedia__GetServiceCapabilitiesResponse (893)
/* onvifMedia:GetServiceCapabilitiesResponse */
class SOAP_CMAC _onvifMedia__GetServiceCapabilitiesResponse
{
public:
	onvifMedia__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifMedia:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 893; } /* = unique id SOAP_TYPE__onvifMedia__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetServiceCapabilitiesResponse() { _onvifMedia__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSources
#define SOAP_TYPE__onvifMedia__GetVideoSources (894)
/* onvifMedia:GetVideoSources */
class SOAP_CMAC _onvifMedia__GetVideoSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 894; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSources() { _onvifMedia__GetVideoSources::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSources() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourcesResponse
#define SOAP_TYPE__onvifMedia__GetVideoSourcesResponse (895)
/* onvifMedia:GetVideoSourcesResponse */
class SOAP_CMAC _onvifMedia__GetVideoSourcesResponse
{
public:
	std::vector<class onvifXsd__VideoSource * >VideoSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 895; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourcesResponse() { _onvifMedia__GetVideoSourcesResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSources
#define SOAP_TYPE__onvifMedia__GetAudioSources (896)
/* onvifMedia:GetAudioSources */
class SOAP_CMAC _onvifMedia__GetAudioSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 896; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSources() { _onvifMedia__GetAudioSources::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSources() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourcesResponse
#define SOAP_TYPE__onvifMedia__GetAudioSourcesResponse (897)
/* onvifMedia:GetAudioSourcesResponse */
class SOAP_CMAC _onvifMedia__GetAudioSourcesResponse
{
public:
	std::vector<class onvifXsd__AudioSource * >AudioSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 897; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourcesResponse() { _onvifMedia__GetAudioSourcesResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputs
#define SOAP_TYPE__onvifMedia__GetAudioOutputs (898)
/* onvifMedia:GetAudioOutputs */
class SOAP_CMAC _onvifMedia__GetAudioOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 898; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputs() { _onvifMedia__GetAudioOutputs::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputs() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputsResponse
#define SOAP_TYPE__onvifMedia__GetAudioOutputsResponse (899)
/* onvifMedia:GetAudioOutputsResponse */
class SOAP_CMAC _onvifMedia__GetAudioOutputsResponse
{
public:
	std::vector<class onvifXsd__AudioOutput * >AudioOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 899; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputsResponse() { _onvifMedia__GetAudioOutputsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__CreateProfile
#define SOAP_TYPE__onvifMedia__CreateProfile (900)
/* onvifMedia:CreateProfile */
class SOAP_CMAC _onvifMedia__CreateProfile
{
public:
	std::string Name;	/* required element of type onvifXsd:Name */
	std::string *Token;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 900; } /* = unique id SOAP_TYPE__onvifMedia__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__CreateProfile() { _onvifMedia__CreateProfile::soap_default(NULL); }
	virtual ~_onvifMedia__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__CreateProfileResponse
#define SOAP_TYPE__onvifMedia__CreateProfileResponse (901)
/* onvifMedia:CreateProfileResponse */
class SOAP_CMAC _onvifMedia__CreateProfileResponse
{
public:
	onvifXsd__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 901; } /* = unique id SOAP_TYPE__onvifMedia__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__CreateProfileResponse() { _onvifMedia__CreateProfileResponse::soap_default(NULL); }
	virtual ~_onvifMedia__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetProfile
#define SOAP_TYPE__onvifMedia__GetProfile (902)
/* onvifMedia:GetProfile */
class SOAP_CMAC _onvifMedia__GetProfile
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 902; } /* = unique id SOAP_TYPE__onvifMedia__GetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetProfile() { _onvifMedia__GetProfile::soap_default(NULL); }
	virtual ~_onvifMedia__GetProfile() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetProfileResponse
#define SOAP_TYPE__onvifMedia__GetProfileResponse (903)
/* onvifMedia:GetProfileResponse */
class SOAP_CMAC _onvifMedia__GetProfileResponse
{
public:
	onvifXsd__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 903; } /* = unique id SOAP_TYPE__onvifMedia__GetProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetProfileResponse() { _onvifMedia__GetProfileResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetProfiles
#define SOAP_TYPE__onvifMedia__GetProfiles (904)
/* onvifMedia:GetProfiles */
class SOAP_CMAC _onvifMedia__GetProfiles
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 904; } /* = unique id SOAP_TYPE__onvifMedia__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetProfiles() { _onvifMedia__GetProfiles::soap_default(NULL); }
	virtual ~_onvifMedia__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetProfilesResponse
#define SOAP_TYPE__onvifMedia__GetProfilesResponse (905)
/* onvifMedia:GetProfilesResponse */
class SOAP_CMAC _onvifMedia__GetProfilesResponse
{
public:
	std::vector<onvifXsd__Profile * >Profiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 905; } /* = unique id SOAP_TYPE__onvifMedia__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetProfilesResponse() { _onvifMedia__GetProfilesResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddVideoEncoderConfiguration
#define SOAP_TYPE__onvifMedia__AddVideoEncoderConfiguration (906)
/* onvifMedia:AddVideoEncoderConfiguration */
class SOAP_CMAC _onvifMedia__AddVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 906; } /* = unique id SOAP_TYPE__onvifMedia__AddVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddVideoEncoderConfiguration() { _onvifMedia__AddVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddVideoEncoderConfigurationResponse (907)
/* onvifMedia:AddVideoEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 907; } /* = unique id SOAP_TYPE__onvifMedia__AddVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddVideoEncoderConfigurationResponse() { _onvifMedia__AddVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__onvifMedia__RemoveVideoEncoderConfiguration (908)
/* onvifMedia:RemoveVideoEncoderConfiguration */
class SOAP_CMAC _onvifMedia__RemoveVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE__onvifMedia__RemoveVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveVideoEncoderConfiguration() { _onvifMedia__RemoveVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveVideoEncoderConfigurationResponse (909)
/* onvifMedia:RemoveVideoEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 909; } /* = unique id SOAP_TYPE__onvifMedia__RemoveVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveVideoEncoderConfigurationResponse() { _onvifMedia__RemoveVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddVideoSourceConfiguration
#define SOAP_TYPE__onvifMedia__AddVideoSourceConfiguration (910)
/* onvifMedia:AddVideoSourceConfiguration */
class SOAP_CMAC _onvifMedia__AddVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 910; } /* = unique id SOAP_TYPE__onvifMedia__AddVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddVideoSourceConfiguration() { _onvifMedia__AddVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddVideoSourceConfigurationResponse (911)
/* onvifMedia:AddVideoSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE__onvifMedia__AddVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddVideoSourceConfigurationResponse() { _onvifMedia__AddVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveVideoSourceConfiguration
#define SOAP_TYPE__onvifMedia__RemoveVideoSourceConfiguration (912)
/* onvifMedia:RemoveVideoSourceConfiguration */
class SOAP_CMAC _onvifMedia__RemoveVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 912; } /* = unique id SOAP_TYPE__onvifMedia__RemoveVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveVideoSourceConfiguration() { _onvifMedia__RemoveVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveVideoSourceConfigurationResponse (913)
/* onvifMedia:RemoveVideoSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 913; } /* = unique id SOAP_TYPE__onvifMedia__RemoveVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveVideoSourceConfigurationResponse() { _onvifMedia__RemoveVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioEncoderConfiguration
#define SOAP_TYPE__onvifMedia__AddAudioEncoderConfiguration (914)
/* onvifMedia:AddAudioEncoderConfiguration */
class SOAP_CMAC _onvifMedia__AddAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 914; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioEncoderConfiguration() { _onvifMedia__AddAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddAudioEncoderConfigurationResponse (915)
/* onvifMedia:AddAudioEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 915; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioEncoderConfigurationResponse() { _onvifMedia__AddAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__onvifMedia__RemoveAudioEncoderConfiguration (916)
/* onvifMedia:RemoveAudioEncoderConfiguration */
class SOAP_CMAC _onvifMedia__RemoveAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 916; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioEncoderConfiguration() { _onvifMedia__RemoveAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveAudioEncoderConfigurationResponse (917)
/* onvifMedia:RemoveAudioEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 917; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioEncoderConfigurationResponse() { _onvifMedia__RemoveAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioSourceConfiguration
#define SOAP_TYPE__onvifMedia__AddAudioSourceConfiguration (918)
/* onvifMedia:AddAudioSourceConfiguration */
class SOAP_CMAC _onvifMedia__AddAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 918; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioSourceConfiguration() { _onvifMedia__AddAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddAudioSourceConfigurationResponse (919)
/* onvifMedia:AddAudioSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 919; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioSourceConfigurationResponse() { _onvifMedia__AddAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioSourceConfiguration
#define SOAP_TYPE__onvifMedia__RemoveAudioSourceConfiguration (920)
/* onvifMedia:RemoveAudioSourceConfiguration */
class SOAP_CMAC _onvifMedia__RemoveAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 920; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioSourceConfiguration() { _onvifMedia__RemoveAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveAudioSourceConfigurationResponse (921)
/* onvifMedia:RemoveAudioSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 921; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioSourceConfigurationResponse() { _onvifMedia__RemoveAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddPTZConfiguration
#define SOAP_TYPE__onvifMedia__AddPTZConfiguration (922)
/* onvifMedia:AddPTZConfiguration */
class SOAP_CMAC _onvifMedia__AddPTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 922; } /* = unique id SOAP_TYPE__onvifMedia__AddPTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddPTZConfiguration() { _onvifMedia__AddPTZConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddPTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddPTZConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddPTZConfigurationResponse (923)
/* onvifMedia:AddPTZConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddPTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 923; } /* = unique id SOAP_TYPE__onvifMedia__AddPTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddPTZConfigurationResponse() { _onvifMedia__AddPTZConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddPTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemovePTZConfiguration
#define SOAP_TYPE__onvifMedia__RemovePTZConfiguration (924)
/* onvifMedia:RemovePTZConfiguration */
class SOAP_CMAC _onvifMedia__RemovePTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 924; } /* = unique id SOAP_TYPE__onvifMedia__RemovePTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemovePTZConfiguration() { _onvifMedia__RemovePTZConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemovePTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemovePTZConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemovePTZConfigurationResponse (925)
/* onvifMedia:RemovePTZConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemovePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 925; } /* = unique id SOAP_TYPE__onvifMedia__RemovePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemovePTZConfigurationResponse() { _onvifMedia__RemovePTZConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemovePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__onvifMedia__AddVideoAnalyticsConfiguration (926)
/* onvifMedia:AddVideoAnalyticsConfiguration */
class SOAP_CMAC _onvifMedia__AddVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 926; } /* = unique id SOAP_TYPE__onvifMedia__AddVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddVideoAnalyticsConfiguration() { _onvifMedia__AddVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddVideoAnalyticsConfigurationResponse (927)
/* onvifMedia:AddVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 927; } /* = unique id SOAP_TYPE__onvifMedia__AddVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddVideoAnalyticsConfigurationResponse() { _onvifMedia__AddVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__onvifMedia__RemoveVideoAnalyticsConfiguration (928)
/* onvifMedia:RemoveVideoAnalyticsConfiguration */
class SOAP_CMAC _onvifMedia__RemoveVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 928; } /* = unique id SOAP_TYPE__onvifMedia__RemoveVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveVideoAnalyticsConfiguration() { _onvifMedia__RemoveVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveVideoAnalyticsConfigurationResponse (929)
/* onvifMedia:RemoveVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 929; } /* = unique id SOAP_TYPE__onvifMedia__RemoveVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveVideoAnalyticsConfigurationResponse() { _onvifMedia__RemoveVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddMetadataConfiguration
#define SOAP_TYPE__onvifMedia__AddMetadataConfiguration (930)
/* onvifMedia:AddMetadataConfiguration */
class SOAP_CMAC _onvifMedia__AddMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 930; } /* = unique id SOAP_TYPE__onvifMedia__AddMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddMetadataConfiguration() { _onvifMedia__AddMetadataConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddMetadataConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddMetadataConfigurationResponse (931)
/* onvifMedia:AddMetadataConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 931; } /* = unique id SOAP_TYPE__onvifMedia__AddMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddMetadataConfigurationResponse() { _onvifMedia__AddMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveMetadataConfiguration
#define SOAP_TYPE__onvifMedia__RemoveMetadataConfiguration (932)
/* onvifMedia:RemoveMetadataConfiguration */
class SOAP_CMAC _onvifMedia__RemoveMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 932; } /* = unique id SOAP_TYPE__onvifMedia__RemoveMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveMetadataConfiguration() { _onvifMedia__RemoveMetadataConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveMetadataConfigurationResponse (933)
/* onvifMedia:RemoveMetadataConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 933; } /* = unique id SOAP_TYPE__onvifMedia__RemoveMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveMetadataConfigurationResponse() { _onvifMedia__RemoveMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioOutputConfiguration
#define SOAP_TYPE__onvifMedia__AddAudioOutputConfiguration (934)
/* onvifMedia:AddAudioOutputConfiguration */
class SOAP_CMAC _onvifMedia__AddAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 934; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioOutputConfiguration() { _onvifMedia__AddAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddAudioOutputConfigurationResponse (935)
/* onvifMedia:AddAudioOutputConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 935; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioOutputConfigurationResponse() { _onvifMedia__AddAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioOutputConfiguration
#define SOAP_TYPE__onvifMedia__RemoveAudioOutputConfiguration (936)
/* onvifMedia:RemoveAudioOutputConfiguration */
class SOAP_CMAC _onvifMedia__RemoveAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 936; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioOutputConfiguration() { _onvifMedia__RemoveAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveAudioOutputConfigurationResponse (937)
/* onvifMedia:RemoveAudioOutputConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 937; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioOutputConfigurationResponse() { _onvifMedia__RemoveAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioDecoderConfiguration
#define SOAP_TYPE__onvifMedia__AddAudioDecoderConfiguration (938)
/* onvifMedia:AddAudioDecoderConfiguration */
class SOAP_CMAC _onvifMedia__AddAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 938; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioDecoderConfiguration() { _onvifMedia__AddAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__AddAudioDecoderConfigurationResponse (939)
/* onvifMedia:AddAudioDecoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__AddAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 939; } /* = unique id SOAP_TYPE__onvifMedia__AddAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__AddAudioDecoderConfigurationResponse() { _onvifMedia__AddAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__AddAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__onvifMedia__RemoveAudioDecoderConfiguration (940)
/* onvifMedia:RemoveAudioDecoderConfiguration */
class SOAP_CMAC _onvifMedia__RemoveAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 940; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioDecoderConfiguration() { _onvifMedia__RemoveAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__RemoveAudioDecoderConfigurationResponse (941)
/* onvifMedia:RemoveAudioDecoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__RemoveAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 941; } /* = unique id SOAP_TYPE__onvifMedia__RemoveAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__RemoveAudioDecoderConfigurationResponse() { _onvifMedia__RemoveAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__RemoveAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__DeleteProfile
#define SOAP_TYPE__onvifMedia__DeleteProfile (942)
/* onvifMedia:DeleteProfile */
class SOAP_CMAC _onvifMedia__DeleteProfile
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 942; } /* = unique id SOAP_TYPE__onvifMedia__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__DeleteProfile() { _onvifMedia__DeleteProfile::soap_default(NULL); }
	virtual ~_onvifMedia__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__DeleteProfileResponse
#define SOAP_TYPE__onvifMedia__DeleteProfileResponse (943)
/* onvifMedia:DeleteProfileResponse */
class SOAP_CMAC _onvifMedia__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 943; } /* = unique id SOAP_TYPE__onvifMedia__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__DeleteProfileResponse() { _onvifMedia__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_onvifMedia__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurations
#define SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurations (944)
/* onvifMedia:GetVideoEncoderConfigurations */
class SOAP_CMAC _onvifMedia__GetVideoEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 944; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoEncoderConfigurations() { _onvifMedia__GetVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationsResponse (945)
/* onvifMedia:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetVideoEncoderConfigurationsResponse
{
public:
	std::vector<onvifXsd__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 945; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoEncoderConfigurationsResponse() { _onvifMedia__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourceConfigurations
#define SOAP_TYPE__onvifMedia__GetVideoSourceConfigurations (946)
/* onvifMedia:GetVideoSourceConfigurations */
class SOAP_CMAC _onvifMedia__GetVideoSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 946; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourceConfigurations() { _onvifMedia__GetVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationsResponse (947)
/* onvifMedia:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetVideoSourceConfigurationsResponse
{
public:
	std::vector<onvifXsd__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 947; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourceConfigurationsResponse() { _onvifMedia__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurations
#define SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurations (948)
/* onvifMedia:GetAudioEncoderConfigurations */
class SOAP_CMAC _onvifMedia__GetAudioEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 948; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioEncoderConfigurations() { _onvifMedia__GetAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationsResponse (949)
/* onvifMedia:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetAudioEncoderConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 949; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioEncoderConfigurationsResponse() { _onvifMedia__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourceConfigurations
#define SOAP_TYPE__onvifMedia__GetAudioSourceConfigurations (950)
/* onvifMedia:GetAudioSourceConfigurations */
class SOAP_CMAC _onvifMedia__GetAudioSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 950; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourceConfigurations() { _onvifMedia__GetAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationsResponse (951)
/* onvifMedia:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetAudioSourceConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 951; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourceConfigurationsResponse() { _onvifMedia__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurations (952)
/* onvifMedia:GetVideoAnalyticsConfigurations */
class SOAP_CMAC _onvifMedia__GetVideoAnalyticsConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 952; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoAnalyticsConfigurations() { _onvifMedia__GetVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurationsResponse (953)
/* onvifMedia:GetVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<onvifXsd__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 953; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoAnalyticsConfigurationsResponse() { _onvifMedia__GetVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetMetadataConfigurations
#define SOAP_TYPE__onvifMedia__GetMetadataConfigurations (954)
/* onvifMedia:GetMetadataConfigurations */
class SOAP_CMAC _onvifMedia__GetMetadataConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 954; } /* = unique id SOAP_TYPE__onvifMedia__GetMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetMetadataConfigurations() { _onvifMedia__GetMetadataConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetMetadataConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetMetadataConfigurationsResponse (955)
/* onvifMedia:GetMetadataConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetMetadataConfigurationsResponse
{
public:
	std::vector<onvifXsd__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 955; } /* = unique id SOAP_TYPE__onvifMedia__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetMetadataConfigurationsResponse() { _onvifMedia__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputConfigurations
#define SOAP_TYPE__onvifMedia__GetAudioOutputConfigurations (956)
/* onvifMedia:GetAudioOutputConfigurations */
class SOAP_CMAC _onvifMedia__GetAudioOutputConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 956; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputConfigurations() { _onvifMedia__GetAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationsResponse (957)
/* onvifMedia:GetAudioOutputConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetAudioOutputConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 957; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputConfigurationsResponse() { _onvifMedia__GetAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurations
#define SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurations (958)
/* onvifMedia:GetAudioDecoderConfigurations */
class SOAP_CMAC _onvifMedia__GetAudioDecoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 958; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioDecoderConfigurations() { _onvifMedia__GetAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationsResponse (959)
/* onvifMedia:GetAudioDecoderConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetAudioDecoderConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 959; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioDecoderConfigurationsResponse() { _onvifMedia__GetAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourceConfiguration
#define SOAP_TYPE__onvifMedia__GetVideoSourceConfiguration (960)
/* onvifMedia:GetVideoSourceConfiguration */
class SOAP_CMAC _onvifMedia__GetVideoSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 960; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourceConfiguration() { _onvifMedia__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationResponse (961)
/* onvifMedia:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetVideoSourceConfigurationResponse
{
public:
	onvifXsd__VideoSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 961; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourceConfigurationResponse() { _onvifMedia__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoEncoderConfiguration
#define SOAP_TYPE__onvifMedia__GetVideoEncoderConfiguration (962)
/* onvifMedia:GetVideoEncoderConfiguration */
class SOAP_CMAC _onvifMedia__GetVideoEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 962; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoEncoderConfiguration() { _onvifMedia__GetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationResponse (963)
/* onvifMedia:GetVideoEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetVideoEncoderConfigurationResponse
{
public:
	onvifXsd__VideoEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 963; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoEncoderConfigurationResponse() { _onvifMedia__GetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourceConfiguration
#define SOAP_TYPE__onvifMedia__GetAudioSourceConfiguration (964)
/* onvifMedia:GetAudioSourceConfiguration */
class SOAP_CMAC _onvifMedia__GetAudioSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 964; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourceConfiguration() { _onvifMedia__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationResponse (965)
/* onvifMedia:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetAudioSourceConfigurationResponse
{
public:
	onvifXsd__AudioSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 965; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourceConfigurationResponse() { _onvifMedia__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioEncoderConfiguration
#define SOAP_TYPE__onvifMedia__GetAudioEncoderConfiguration (966)
/* onvifMedia:GetAudioEncoderConfiguration */
class SOAP_CMAC _onvifMedia__GetAudioEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 966; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioEncoderConfiguration() { _onvifMedia__GetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationResponse (967)
/* onvifMedia:GetAudioEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetAudioEncoderConfigurationResponse
{
public:
	onvifXsd__AudioEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 967; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioEncoderConfigurationResponse() { _onvifMedia__GetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfiguration (968)
/* onvifMedia:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _onvifMedia__GetVideoAnalyticsConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 968; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoAnalyticsConfiguration() { _onvifMedia__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurationResponse (969)
/* onvifMedia:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetVideoAnalyticsConfigurationResponse
{
public:
	onvifXsd__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 969; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoAnalyticsConfigurationResponse() { _onvifMedia__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetMetadataConfiguration
#define SOAP_TYPE__onvifMedia__GetMetadataConfiguration (970)
/* onvifMedia:GetMetadataConfiguration */
class SOAP_CMAC _onvifMedia__GetMetadataConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 970; } /* = unique id SOAP_TYPE__onvifMedia__GetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetMetadataConfiguration() { _onvifMedia__GetMetadataConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetMetadataConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetMetadataConfigurationResponse (971)
/* onvifMedia:GetMetadataConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetMetadataConfigurationResponse
{
public:
	onvifXsd__MetadataConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 971; } /* = unique id SOAP_TYPE__onvifMedia__GetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetMetadataConfigurationResponse() { _onvifMedia__GetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputConfiguration
#define SOAP_TYPE__onvifMedia__GetAudioOutputConfiguration (972)
/* onvifMedia:GetAudioOutputConfiguration */
class SOAP_CMAC _onvifMedia__GetAudioOutputConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 972; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputConfiguration() { _onvifMedia__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationResponse (973)
/* onvifMedia:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetAudioOutputConfigurationResponse
{
public:
	onvifXsd__AudioOutputConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 973; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputConfigurationResponse() { _onvifMedia__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioDecoderConfiguration
#define SOAP_TYPE__onvifMedia__GetAudioDecoderConfiguration (974)
/* onvifMedia:GetAudioDecoderConfiguration */
class SOAP_CMAC _onvifMedia__GetAudioDecoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 974; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioDecoderConfiguration() { _onvifMedia__GetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationResponse (975)
/* onvifMedia:GetAudioDecoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__GetAudioDecoderConfigurationResponse
{
public:
	onvifXsd__AudioDecoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 975; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioDecoderConfigurationResponse() { _onvifMedia__GetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleVideoEncoderConfigurations (976)
/* onvifMedia:GetCompatibleVideoEncoderConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleVideoEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 976; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleVideoEncoderConfigurations() { _onvifMedia__GetCompatibleVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse (977)
/* onvifMedia:GetCompatibleVideoEncoderConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse
{
public:
	std::vector<onvifXsd__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 977; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse() { _onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleVideoSourceConfigurations (978)
/* onvifMedia:GetCompatibleVideoSourceConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleVideoSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 978; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleVideoSourceConfigurations() { _onvifMedia__GetCompatibleVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleVideoSourceConfigurationsResponse (979)
/* onvifMedia:GetCompatibleVideoSourceConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleVideoSourceConfigurationsResponse
{
public:
	std::vector<onvifXsd__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 979; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleVideoSourceConfigurationsResponse() { _onvifMedia__GetCompatibleVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioEncoderConfigurations (980)
/* onvifMedia:GetCompatibleAudioEncoderConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 980; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioEncoderConfigurations() { _onvifMedia__GetCompatibleAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse (981)
/* onvifMedia:GetCompatibleAudioEncoderConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 981; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse() { _onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioSourceConfigurations (982)
/* onvifMedia:GetCompatibleAudioSourceConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 982; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioSourceConfigurations() { _onvifMedia__GetCompatibleAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioSourceConfigurationsResponse (983)
/* onvifMedia:GetCompatibleAudioSourceConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioSourceConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 983; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioSourceConfigurationsResponse() { _onvifMedia__GetCompatibleAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleVideoAnalyticsConfigurations (984)
/* onvifMedia:GetCompatibleVideoAnalyticsConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleVideoAnalyticsConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 984; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleVideoAnalyticsConfigurations() { _onvifMedia__GetCompatibleVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse (985)
/* onvifMedia:GetCompatibleVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<onvifXsd__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 985; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse() { _onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleMetadataConfigurations (986)
/* onvifMedia:GetCompatibleMetadataConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleMetadataConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 986; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleMetadataConfigurations() { _onvifMedia__GetCompatibleMetadataConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleMetadataConfigurationsResponse (987)
/* onvifMedia:GetCompatibleMetadataConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleMetadataConfigurationsResponse
{
public:
	std::vector<onvifXsd__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 987; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleMetadataConfigurationsResponse() { _onvifMedia__GetCompatibleMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioOutputConfigurations (988)
/* onvifMedia:GetCompatibleAudioOutputConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioOutputConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 988; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioOutputConfigurations() { _onvifMedia__GetCompatibleAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioOutputConfigurationsResponse (989)
/* onvifMedia:GetCompatibleAudioOutputConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioOutputConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 989; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioOutputConfigurationsResponse() { _onvifMedia__GetCompatibleAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioDecoderConfigurations (990)
/* onvifMedia:GetCompatibleAudioDecoderConfigurations */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioDecoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 990; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioDecoderConfigurations() { _onvifMedia__GetCompatibleAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse (991)
/* onvifMedia:GetCompatibleAudioDecoderConfigurationsResponse */
class SOAP_CMAC _onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse
{
public:
	std::vector<onvifXsd__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 991; } /* = unique id SOAP_TYPE__onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse() { _onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetCompatibleAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetVideoEncoderConfiguration
#define SOAP_TYPE__onvifMedia__SetVideoEncoderConfiguration (992)
/* onvifMedia:SetVideoEncoderConfiguration */
class SOAP_CMAC _onvifMedia__SetVideoEncoderConfiguration
{
public:
	onvifXsd__VideoEncoderConfiguration *Configuration;	/* required element of type onvifXsd:VideoEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 992; } /* = unique id SOAP_TYPE__onvifMedia__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetVideoEncoderConfiguration() { _onvifMedia__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetVideoEncoderConfigurationResponse (993)
/* onvifMedia:SetVideoEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 993; } /* = unique id SOAP_TYPE__onvifMedia__SetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetVideoEncoderConfigurationResponse() { _onvifMedia__SetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetVideoSourceConfiguration
#define SOAP_TYPE__onvifMedia__SetVideoSourceConfiguration (994)
/* onvifMedia:SetVideoSourceConfiguration */
class SOAP_CMAC _onvifMedia__SetVideoSourceConfiguration
{
public:
	onvifXsd__VideoSourceConfiguration *Configuration;	/* required element of type onvifXsd:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 994; } /* = unique id SOAP_TYPE__onvifMedia__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetVideoSourceConfiguration() { _onvifMedia__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetVideoSourceConfigurationResponse (995)
/* onvifMedia:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 995; } /* = unique id SOAP_TYPE__onvifMedia__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetVideoSourceConfigurationResponse() { _onvifMedia__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioEncoderConfiguration
#define SOAP_TYPE__onvifMedia__SetAudioEncoderConfiguration (996)
/* onvifMedia:SetAudioEncoderConfiguration */
class SOAP_CMAC _onvifMedia__SetAudioEncoderConfiguration
{
public:
	onvifXsd__AudioEncoderConfiguration *Configuration;	/* required element of type onvifXsd:AudioEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 996; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioEncoderConfiguration() { _onvifMedia__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetAudioEncoderConfigurationResponse (997)
/* onvifMedia:SetAudioEncoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 997; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioEncoderConfigurationResponse() { _onvifMedia__SetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioSourceConfiguration
#define SOAP_TYPE__onvifMedia__SetAudioSourceConfiguration (998)
/* onvifMedia:SetAudioSourceConfiguration */
class SOAP_CMAC _onvifMedia__SetAudioSourceConfiguration
{
public:
	onvifXsd__AudioSourceConfiguration *Configuration;	/* required element of type onvifXsd:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 998; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioSourceConfiguration() { _onvifMedia__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetAudioSourceConfigurationResponse (999)
/* onvifMedia:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 999; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioSourceConfigurationResponse() { _onvifMedia__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__onvifMedia__SetVideoAnalyticsConfiguration (1000)
/* onvifMedia:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _onvifMedia__SetVideoAnalyticsConfiguration
{
public:
	onvifXsd__VideoAnalyticsConfiguration *Configuration;	/* required element of type onvifXsd:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1000; } /* = unique id SOAP_TYPE__onvifMedia__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetVideoAnalyticsConfiguration() { _onvifMedia__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetVideoAnalyticsConfigurationResponse (1001)
/* onvifMedia:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1001; } /* = unique id SOAP_TYPE__onvifMedia__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetVideoAnalyticsConfigurationResponse() { _onvifMedia__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetMetadataConfiguration
#define SOAP_TYPE__onvifMedia__SetMetadataConfiguration (1002)
/* onvifMedia:SetMetadataConfiguration */
class SOAP_CMAC _onvifMedia__SetMetadataConfiguration
{
public:
	onvifXsd__MetadataConfiguration *Configuration;	/* required element of type onvifXsd:MetadataConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1002; } /* = unique id SOAP_TYPE__onvifMedia__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetMetadataConfiguration() { _onvifMedia__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetMetadataConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetMetadataConfigurationResponse (1003)
/* onvifMedia:SetMetadataConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1003; } /* = unique id SOAP_TYPE__onvifMedia__SetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetMetadataConfigurationResponse() { _onvifMedia__SetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioOutputConfiguration
#define SOAP_TYPE__onvifMedia__SetAudioOutputConfiguration (1004)
/* onvifMedia:SetAudioOutputConfiguration */
class SOAP_CMAC _onvifMedia__SetAudioOutputConfiguration
{
public:
	onvifXsd__AudioOutputConfiguration *Configuration;	/* required element of type onvifXsd:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1004; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioOutputConfiguration() { _onvifMedia__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetAudioOutputConfigurationResponse (1005)
/* onvifMedia:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1005; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioOutputConfigurationResponse() { _onvifMedia__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioDecoderConfiguration
#define SOAP_TYPE__onvifMedia__SetAudioDecoderConfiguration (1006)
/* onvifMedia:SetAudioDecoderConfiguration */
class SOAP_CMAC _onvifMedia__SetAudioDecoderConfiguration
{
public:
	onvifXsd__AudioDecoderConfiguration *Configuration;	/* required element of type onvifXsd:AudioDecoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1006; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioDecoderConfiguration() { _onvifMedia__SetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__onvifMedia__SetAudioDecoderConfigurationResponse (1007)
/* onvifMedia:SetAudioDecoderConfigurationResponse */
class SOAP_CMAC _onvifMedia__SetAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1007; } /* = unique id SOAP_TYPE__onvifMedia__SetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetAudioDecoderConfigurationResponse() { _onvifMedia__SetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationOptions (1008)
/* onvifMedia:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetVideoSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1008; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourceConfigurationOptions() { _onvifMedia__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationOptionsResponse (1009)
/* onvifMedia:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetVideoSourceConfigurationOptionsResponse
{
public:
	onvifXsd__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1009; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoSourceConfigurationOptionsResponse() { _onvifMedia__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationOptions (1010)
/* onvifMedia:GetVideoEncoderConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetVideoEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1010; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoEncoderConfigurationOptions() { _onvifMedia__GetVideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationOptionsResponse (1011)
/* onvifMedia:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetVideoEncoderConfigurationOptionsResponse
{
public:
	onvifXsd__VideoEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1011; } /* = unique id SOAP_TYPE__onvifMedia__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetVideoEncoderConfigurationOptionsResponse() { _onvifMedia__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationOptions (1012)
/* onvifMedia:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetAudioSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1012; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourceConfigurationOptions() { _onvifMedia__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationOptionsResponse (1013)
/* onvifMedia:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetAudioSourceConfigurationOptionsResponse
{
public:
	onvifXsd__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1013; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioSourceConfigurationOptionsResponse() { _onvifMedia__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationOptions (1014)
/* onvifMedia:GetAudioEncoderConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetAudioEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1014; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioEncoderConfigurationOptions() { _onvifMedia__GetAudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationOptionsResponse (1015)
/* onvifMedia:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetAudioEncoderConfigurationOptionsResponse
{
public:
	onvifXsd__AudioEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1015; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioEncoderConfigurationOptionsResponse() { _onvifMedia__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetMetadataConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetMetadataConfigurationOptions (1016)
/* onvifMedia:GetMetadataConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetMetadataConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1016; } /* = unique id SOAP_TYPE__onvifMedia__GetMetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetMetadataConfigurationOptions() { _onvifMedia__GetMetadataConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetMetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetMetadataConfigurationOptionsResponse (1017)
/* onvifMedia:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetMetadataConfigurationOptionsResponse
{
public:
	onvifXsd__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1017; } /* = unique id SOAP_TYPE__onvifMedia__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetMetadataConfigurationOptionsResponse() { _onvifMedia__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationOptions (1018)
/* onvifMedia:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetAudioOutputConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1018; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputConfigurationOptions() { _onvifMedia__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationOptionsResponse (1019)
/* onvifMedia:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetAudioOutputConfigurationOptionsResponse
{
public:
	onvifXsd__AudioOutputConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1019; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioOutputConfigurationOptionsResponse() { _onvifMedia__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationOptions (1020)
/* onvifMedia:GetAudioDecoderConfigurationOptions */
class SOAP_CMAC _onvifMedia__GetAudioDecoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onvifXsd:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1020; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioDecoderConfigurationOptions() { _onvifMedia__GetAudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationOptionsResponse (1021)
/* onvifMedia:GetAudioDecoderConfigurationOptionsResponse */
class SOAP_CMAC _onvifMedia__GetAudioDecoderConfigurationOptionsResponse
{
public:
	onvifXsd__AudioDecoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioDecoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1021; } /* = unique id SOAP_TYPE__onvifMedia__GetAudioDecoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetAudioDecoderConfigurationOptionsResponse() { _onvifMedia__GetAudioDecoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetAudioDecoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances (1022)
/* onvifMedia:GetGuaranteedNumberOfVideoEncoderInstances */
class SOAP_CMAC _onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1022; } /* = unique id SOAP_TYPE__onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances() { _onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances::soap_default(NULL); }
	virtual ~_onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse (1023)
/* onvifMedia:GetGuaranteedNumberOfVideoEncoderInstancesResponse */
class SOAP_CMAC _onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
public:
	int TotalNumber;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int *JPEG;	/* optional element of type xsd:int */
	int *H264;	/* optional element of type xsd:int */
	int *MPEG4;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1023; } /* = unique id SOAP_TYPE__onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { _onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetStreamUri
#define SOAP_TYPE__onvifMedia__GetStreamUri (1024)
/* onvifMedia:GetStreamUri */
class SOAP_CMAC _onvifMedia__GetStreamUri
{
public:
	onvifXsd__StreamSetup *StreamSetup;	/* required element of type onvifXsd:StreamSetup */
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1024; } /* = unique id SOAP_TYPE__onvifMedia__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetStreamUri() { _onvifMedia__GetStreamUri::soap_default(NULL); }
	virtual ~_onvifMedia__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetStreamUriResponse
#define SOAP_TYPE__onvifMedia__GetStreamUriResponse (1025)
/* onvifMedia:GetStreamUriResponse */
class SOAP_CMAC _onvifMedia__GetStreamUriResponse
{
public:
	onvifXsd__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1025; } /* = unique id SOAP_TYPE__onvifMedia__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetStreamUriResponse() { _onvifMedia__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__StartMulticastStreaming
#define SOAP_TYPE__onvifMedia__StartMulticastStreaming (1026)
/* onvifMedia:StartMulticastStreaming */
class SOAP_CMAC _onvifMedia__StartMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1026; } /* = unique id SOAP_TYPE__onvifMedia__StartMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__StartMulticastStreaming() { _onvifMedia__StartMulticastStreaming::soap_default(NULL); }
	virtual ~_onvifMedia__StartMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__StartMulticastStreamingResponse
#define SOAP_TYPE__onvifMedia__StartMulticastStreamingResponse (1027)
/* onvifMedia:StartMulticastStreamingResponse */
class SOAP_CMAC _onvifMedia__StartMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1027; } /* = unique id SOAP_TYPE__onvifMedia__StartMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__StartMulticastStreamingResponse() { _onvifMedia__StartMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_onvifMedia__StartMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__StopMulticastStreaming
#define SOAP_TYPE__onvifMedia__StopMulticastStreaming (1028)
/* onvifMedia:StopMulticastStreaming */
class SOAP_CMAC _onvifMedia__StopMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1028; } /* = unique id SOAP_TYPE__onvifMedia__StopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__StopMulticastStreaming() { _onvifMedia__StopMulticastStreaming::soap_default(NULL); }
	virtual ~_onvifMedia__StopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__StopMulticastStreamingResponse
#define SOAP_TYPE__onvifMedia__StopMulticastStreamingResponse (1029)
/* onvifMedia:StopMulticastStreamingResponse */
class SOAP_CMAC _onvifMedia__StopMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1029; } /* = unique id SOAP_TYPE__onvifMedia__StopMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__StopMulticastStreamingResponse() { _onvifMedia__StopMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_onvifMedia__StopMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetSynchronizationPoint
#define SOAP_TYPE__onvifMedia__SetSynchronizationPoint (1030)
/* onvifMedia:SetSynchronizationPoint */
class SOAP_CMAC _onvifMedia__SetSynchronizationPoint
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1030; } /* = unique id SOAP_TYPE__onvifMedia__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetSynchronizationPoint() { _onvifMedia__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_onvifMedia__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__SetSynchronizationPointResponse
#define SOAP_TYPE__onvifMedia__SetSynchronizationPointResponse (1031)
/* onvifMedia:SetSynchronizationPointResponse */
class SOAP_CMAC _onvifMedia__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1031; } /* = unique id SOAP_TYPE__onvifMedia__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__SetSynchronizationPointResponse() { _onvifMedia__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_onvifMedia__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetSnapshotUri
#define SOAP_TYPE__onvifMedia__GetSnapshotUri (1032)
/* onvifMedia:GetSnapshotUri */
class SOAP_CMAC _onvifMedia__GetSnapshotUri
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1032; } /* = unique id SOAP_TYPE__onvifMedia__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetSnapshotUri() { _onvifMedia__GetSnapshotUri::soap_default(NULL); }
	virtual ~_onvifMedia__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE__onvifMedia__GetSnapshotUriResponse
#define SOAP_TYPE__onvifMedia__GetSnapshotUriResponse (1033)
/* onvifMedia:GetSnapshotUriResponse */
class SOAP_CMAC _onvifMedia__GetSnapshotUriResponse
{
public:
	onvifXsd__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1033; } /* = unique id SOAP_TYPE__onvifMedia__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifMedia__GetSnapshotUriResponse() { _onvifMedia__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_onvifMedia__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE_onvifPtz__Capabilities
#define SOAP_TYPE_onvifPtz__Capabilities (1034)
/* onvifPtz:Capabilities */
class SOAP_CMAC onvifPtz__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	bool *EFlip;	/* optional attribute */
	bool *Reverse;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1034; } /* = unique id SOAP_TYPE_onvifPtz__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifPtz__Capabilities() { onvifPtz__Capabilities::soap_default(NULL); }
	virtual ~onvifPtz__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetServiceCapabilities
#define SOAP_TYPE__onvifPtz__GetServiceCapabilities (1035)
/* onvifPtz:GetServiceCapabilities */
class SOAP_CMAC _onvifPtz__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1035; } /* = unique id SOAP_TYPE__onvifPtz__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetServiceCapabilities() { _onvifPtz__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_onvifPtz__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetServiceCapabilitiesResponse
#define SOAP_TYPE__onvifPtz__GetServiceCapabilitiesResponse (1036)
/* onvifPtz:GetServiceCapabilitiesResponse */
class SOAP_CMAC _onvifPtz__GetServiceCapabilitiesResponse
{
public:
	onvifPtz__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifPtz:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1036; } /* = unique id SOAP_TYPE__onvifPtz__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetServiceCapabilitiesResponse() { _onvifPtz__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetNodes
#define SOAP_TYPE__onvifPtz__GetNodes (1037)
/* onvifPtz:GetNodes */
class SOAP_CMAC _onvifPtz__GetNodes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1037; } /* = unique id SOAP_TYPE__onvifPtz__GetNodes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetNodes() { _onvifPtz__GetNodes::soap_default(NULL); }
	virtual ~_onvifPtz__GetNodes() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetNodesResponse
#define SOAP_TYPE__onvifPtz__GetNodesResponse (1038)
/* onvifPtz:GetNodesResponse */
class SOAP_CMAC _onvifPtz__GetNodesResponse
{
public:
	std::vector<class onvifXsd__PTZNode * >PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1038; } /* = unique id SOAP_TYPE__onvifPtz__GetNodesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetNodesResponse() { _onvifPtz__GetNodesResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetNodesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetNode
#define SOAP_TYPE__onvifPtz__GetNode (1039)
/* onvifPtz:GetNode */
class SOAP_CMAC _onvifPtz__GetNode
{
public:
	std::string NodeToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1039; } /* = unique id SOAP_TYPE__onvifPtz__GetNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetNode() { _onvifPtz__GetNode::soap_default(NULL); }
	virtual ~_onvifPtz__GetNode() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetNodeResponse
#define SOAP_TYPE__onvifPtz__GetNodeResponse (1040)
/* onvifPtz:GetNodeResponse */
class SOAP_CMAC _onvifPtz__GetNodeResponse
{
public:
	onvifXsd__PTZNode *PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1040; } /* = unique id SOAP_TYPE__onvifPtz__GetNodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetNodeResponse() { _onvifPtz__GetNodeResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetNodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetConfigurations
#define SOAP_TYPE__onvifPtz__GetConfigurations (1041)
/* onvifPtz:GetConfigurations */
class SOAP_CMAC _onvifPtz__GetConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1041; } /* = unique id SOAP_TYPE__onvifPtz__GetConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetConfigurations() { _onvifPtz__GetConfigurations::soap_default(NULL); }
	virtual ~_onvifPtz__GetConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetConfigurationsResponse
#define SOAP_TYPE__onvifPtz__GetConfigurationsResponse (1042)
/* onvifPtz:GetConfigurationsResponse */
class SOAP_CMAC _onvifPtz__GetConfigurationsResponse
{
public:
	std::vector<onvifXsd__PTZConfiguration * >PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1042; } /* = unique id SOAP_TYPE__onvifPtz__GetConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetConfigurationsResponse() { _onvifPtz__GetConfigurationsResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetConfiguration
#define SOAP_TYPE__onvifPtz__GetConfiguration (1043)
/* onvifPtz:GetConfiguration */
class SOAP_CMAC _onvifPtz__GetConfiguration
{
public:
	std::string PTZConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1043; } /* = unique id SOAP_TYPE__onvifPtz__GetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetConfiguration() { _onvifPtz__GetConfiguration::soap_default(NULL); }
	virtual ~_onvifPtz__GetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetConfigurationResponse
#define SOAP_TYPE__onvifPtz__GetConfigurationResponse (1044)
/* onvifPtz:GetConfigurationResponse */
class SOAP_CMAC _onvifPtz__GetConfigurationResponse
{
public:
	onvifXsd__PTZConfiguration *PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1044; } /* = unique id SOAP_TYPE__onvifPtz__GetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetConfigurationResponse() { _onvifPtz__GetConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SetConfiguration
#define SOAP_TYPE__onvifPtz__SetConfiguration (1045)
/* onvifPtz:SetConfiguration */
class SOAP_CMAC _onvifPtz__SetConfiguration
{
public:
	onvifXsd__PTZConfiguration *PTZConfiguration;	/* required element of type onvifXsd:PTZConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1045; } /* = unique id SOAP_TYPE__onvifPtz__SetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SetConfiguration() { _onvifPtz__SetConfiguration::soap_default(NULL); }
	virtual ~_onvifPtz__SetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE___onvifPtz__SetConfigurationResponse_sequence
#define SOAP_TYPE___onvifPtz__SetConfigurationResponse_sequence (1874)
/* Operation wrapper: */
class SOAP_CMAC __onvifPtz__SetConfigurationResponse_sequence
{
public:
	virtual int soap_type() const { return 1874; } /* = unique id SOAP_TYPE___onvifPtz__SetConfigurationResponse_sequence */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onvifPtz__SetConfigurationResponse_sequence() { __onvifPtz__SetConfigurationResponse_sequence::soap_default(NULL); }
	virtual ~__onvifPtz__SetConfigurationResponse_sequence() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SetConfigurationResponse
#define SOAP_TYPE__onvifPtz__SetConfigurationResponse (1046)
/* onvifPtz:SetConfigurationResponse */
class SOAP_CMAC _onvifPtz__SetConfigurationResponse
{
public:
	std::vector<__onvifPtz__SetConfigurationResponse_sequence >__SetConfigurationResponse_sequence;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1046; } /* = unique id SOAP_TYPE__onvifPtz__SetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SetConfigurationResponse() { _onvifPtz__SetConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifPtz__SetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetConfigurationOptions
#define SOAP_TYPE__onvifPtz__GetConfigurationOptions (1047)
/* onvifPtz:GetConfigurationOptions */
class SOAP_CMAC _onvifPtz__GetConfigurationOptions
{
public:
	std::string ConfigurationToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1047; } /* = unique id SOAP_TYPE__onvifPtz__GetConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetConfigurationOptions() { _onvifPtz__GetConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifPtz__GetConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetConfigurationOptionsResponse
#define SOAP_TYPE__onvifPtz__GetConfigurationOptionsResponse (1048)
/* onvifPtz:GetConfigurationOptionsResponse */
class SOAP_CMAC _onvifPtz__GetConfigurationOptionsResponse
{
public:
	onvifXsd__PTZConfigurationOptions *PTZConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:PTZConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1048; } /* = unique id SOAP_TYPE__onvifPtz__GetConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetConfigurationOptionsResponse() { _onvifPtz__GetConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SendAuxiliaryCommand
#define SOAP_TYPE__onvifPtz__SendAuxiliaryCommand (1049)
/* onvifPtz:SendAuxiliaryCommand */
class SOAP_CMAC _onvifPtz__SendAuxiliaryCommand
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string AuxiliaryData;	/* required element of type onvifXsd:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1049; } /* = unique id SOAP_TYPE__onvifPtz__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SendAuxiliaryCommand() { _onvifPtz__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_onvifPtz__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SendAuxiliaryCommandResponse
#define SOAP_TYPE__onvifPtz__SendAuxiliaryCommandResponse (1050)
/* onvifPtz:SendAuxiliaryCommandResponse */
class SOAP_CMAC _onvifPtz__SendAuxiliaryCommandResponse
{
public:
	std::string AuxiliaryResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1050; } /* = unique id SOAP_TYPE__onvifPtz__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SendAuxiliaryCommandResponse() { _onvifPtz__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_onvifPtz__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresets
#define SOAP_TYPE__onvifPtz__GetPresets (1051)
/* onvifPtz:GetPresets */
class SOAP_CMAC _onvifPtz__GetPresets
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1051; } /* = unique id SOAP_TYPE__onvifPtz__GetPresets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresets() { _onvifPtz__GetPresets::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresets() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetsResponse
#define SOAP_TYPE__onvifPtz__GetPresetsResponse (1052)
/* onvifPtz:GetPresetsResponse */
class SOAP_CMAC _onvifPtz__GetPresetsResponse
{
public:
	std::vector<onvifXsd__PTZPreset * >Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:PTZPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1052; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetsResponse() { _onvifPtz__GetPresetsResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SetPreset
#define SOAP_TYPE__onvifPtz__SetPreset (1053)
/* onvifPtz:SetPreset */
class SOAP_CMAC _onvifPtz__SetPreset
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string *PresetName;	/* optional element of type xsd:string */
	std::string *PresetToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1053; } /* = unique id SOAP_TYPE__onvifPtz__SetPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SetPreset() { _onvifPtz__SetPreset::soap_default(NULL); }
	virtual ~_onvifPtz__SetPreset() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SetPresetResponse
#define SOAP_TYPE__onvifPtz__SetPresetResponse (1054)
/* onvifPtz:SetPresetResponse */
class SOAP_CMAC _onvifPtz__SetPresetResponse
{
public:
	std::string PresetToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1054; } /* = unique id SOAP_TYPE__onvifPtz__SetPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SetPresetResponse() { _onvifPtz__SetPresetResponse::soap_default(NULL); }
	virtual ~_onvifPtz__SetPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__RemovePreset
#define SOAP_TYPE__onvifPtz__RemovePreset (1055)
/* onvifPtz:RemovePreset */
class SOAP_CMAC _onvifPtz__RemovePreset
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string PresetToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1055; } /* = unique id SOAP_TYPE__onvifPtz__RemovePreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__RemovePreset() { _onvifPtz__RemovePreset::soap_default(NULL); }
	virtual ~_onvifPtz__RemovePreset() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__RemovePresetResponse
#define SOAP_TYPE__onvifPtz__RemovePresetResponse (1056)
/* onvifPtz:RemovePresetResponse */
class SOAP_CMAC _onvifPtz__RemovePresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1056; } /* = unique id SOAP_TYPE__onvifPtz__RemovePresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__RemovePresetResponse() { _onvifPtz__RemovePresetResponse::soap_default(NULL); }
	virtual ~_onvifPtz__RemovePresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GotoPreset
#define SOAP_TYPE__onvifPtz__GotoPreset (1057)
/* onvifPtz:GotoPreset */
class SOAP_CMAC _onvifPtz__GotoPreset
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string PresetToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__PTZSpeed *Speed;	/* optional element of type onvifXsd:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1057; } /* = unique id SOAP_TYPE__onvifPtz__GotoPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GotoPreset() { _onvifPtz__GotoPreset::soap_default(NULL); }
	virtual ~_onvifPtz__GotoPreset() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GotoPresetResponse
#define SOAP_TYPE__onvifPtz__GotoPresetResponse (1058)
/* onvifPtz:GotoPresetResponse */
class SOAP_CMAC _onvifPtz__GotoPresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1058; } /* = unique id SOAP_TYPE__onvifPtz__GotoPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GotoPresetResponse() { _onvifPtz__GotoPresetResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GotoPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetStatus
#define SOAP_TYPE__onvifPtz__GetStatus (1059)
/* onvifPtz:GetStatus */
class SOAP_CMAC _onvifPtz__GetStatus
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1059; } /* = unique id SOAP_TYPE__onvifPtz__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetStatus() { _onvifPtz__GetStatus::soap_default(NULL); }
	virtual ~_onvifPtz__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetStatusResponse
#define SOAP_TYPE__onvifPtz__GetStatusResponse (1060)
/* onvifPtz:GetStatusResponse */
class SOAP_CMAC _onvifPtz__GetStatusResponse
{
public:
	onvifXsd__PTZStatus *PTZStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:PTZStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1060; } /* = unique id SOAP_TYPE__onvifPtz__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetStatusResponse() { _onvifPtz__GetStatusResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GotoHomePosition
#define SOAP_TYPE__onvifPtz__GotoHomePosition (1061)
/* onvifPtz:GotoHomePosition */
class SOAP_CMAC _onvifPtz__GotoHomePosition
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__PTZSpeed *Speed;	/* optional element of type onvifXsd:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1061; } /* = unique id SOAP_TYPE__onvifPtz__GotoHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GotoHomePosition() { _onvifPtz__GotoHomePosition::soap_default(NULL); }
	virtual ~_onvifPtz__GotoHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GotoHomePositionResponse
#define SOAP_TYPE__onvifPtz__GotoHomePositionResponse (1062)
/* onvifPtz:GotoHomePositionResponse */
class SOAP_CMAC _onvifPtz__GotoHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1062; } /* = unique id SOAP_TYPE__onvifPtz__GotoHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GotoHomePositionResponse() { _onvifPtz__GotoHomePositionResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GotoHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SetHomePosition
#define SOAP_TYPE__onvifPtz__SetHomePosition (1063)
/* onvifPtz:SetHomePosition */
class SOAP_CMAC _onvifPtz__SetHomePosition
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1063; } /* = unique id SOAP_TYPE__onvifPtz__SetHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SetHomePosition() { _onvifPtz__SetHomePosition::soap_default(NULL); }
	virtual ~_onvifPtz__SetHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__SetHomePositionResponse
#define SOAP_TYPE__onvifPtz__SetHomePositionResponse (1064)
/* onvifPtz:SetHomePositionResponse */
class SOAP_CMAC _onvifPtz__SetHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1064; } /* = unique id SOAP_TYPE__onvifPtz__SetHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__SetHomePositionResponse() { _onvifPtz__SetHomePositionResponse::soap_default(NULL); }
	virtual ~_onvifPtz__SetHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__ContinuousMove
#define SOAP_TYPE__onvifPtz__ContinuousMove (1065)
/* onvifPtz:ContinuousMove */
class SOAP_CMAC _onvifPtz__ContinuousMove
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__PTZSpeed *Velocity;	/* required element of type onvifXsd:PTZSpeed */
	std::string *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1065; } /* = unique id SOAP_TYPE__onvifPtz__ContinuousMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__ContinuousMove() { _onvifPtz__ContinuousMove::soap_default(NULL); }
	virtual ~_onvifPtz__ContinuousMove() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__ContinuousMoveResponse
#define SOAP_TYPE__onvifPtz__ContinuousMoveResponse (1066)
/* onvifPtz:ContinuousMoveResponse */
class SOAP_CMAC _onvifPtz__ContinuousMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1066; } /* = unique id SOAP_TYPE__onvifPtz__ContinuousMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__ContinuousMoveResponse() { _onvifPtz__ContinuousMoveResponse::soap_default(NULL); }
	virtual ~_onvifPtz__ContinuousMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__RelativeMove
#define SOAP_TYPE__onvifPtz__RelativeMove (1067)
/* onvifPtz:RelativeMove */
class SOAP_CMAC _onvifPtz__RelativeMove
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__PTZVector *Translation;	/* required element of type onvifXsd:PTZVector */
	onvifXsd__PTZSpeed *Speed;	/* optional element of type onvifXsd:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1067; } /* = unique id SOAP_TYPE__onvifPtz__RelativeMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__RelativeMove() { _onvifPtz__RelativeMove::soap_default(NULL); }
	virtual ~_onvifPtz__RelativeMove() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__RelativeMoveResponse
#define SOAP_TYPE__onvifPtz__RelativeMoveResponse (1068)
/* onvifPtz:RelativeMoveResponse */
class SOAP_CMAC _onvifPtz__RelativeMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1068; } /* = unique id SOAP_TYPE__onvifPtz__RelativeMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__RelativeMoveResponse() { _onvifPtz__RelativeMoveResponse::soap_default(NULL); }
	virtual ~_onvifPtz__RelativeMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__AbsoluteMove
#define SOAP_TYPE__onvifPtz__AbsoluteMove (1069)
/* onvifPtz:AbsoluteMove */
class SOAP_CMAC _onvifPtz__AbsoluteMove
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__PTZVector *Position;	/* required element of type onvifXsd:PTZVector */
	onvifXsd__PTZSpeed *Speed;	/* optional element of type onvifXsd:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1069; } /* = unique id SOAP_TYPE__onvifPtz__AbsoluteMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__AbsoluteMove() { _onvifPtz__AbsoluteMove::soap_default(NULL); }
	virtual ~_onvifPtz__AbsoluteMove() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__AbsoluteMoveResponse
#define SOAP_TYPE__onvifPtz__AbsoluteMoveResponse (1070)
/* onvifPtz:AbsoluteMoveResponse */
class SOAP_CMAC _onvifPtz__AbsoluteMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1070; } /* = unique id SOAP_TYPE__onvifPtz__AbsoluteMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__AbsoluteMoveResponse() { _onvifPtz__AbsoluteMoveResponse::soap_default(NULL); }
	virtual ~_onvifPtz__AbsoluteMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__Stop
#define SOAP_TYPE__onvifPtz__Stop (1071)
/* onvifPtz:Stop */
class SOAP_CMAC _onvifPtz__Stop
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	bool *PanTilt;	/* optional element of type xsd:boolean */
	bool *Zoom;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1071; } /* = unique id SOAP_TYPE__onvifPtz__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__Stop() { _onvifPtz__Stop::soap_default(NULL); }
	virtual ~_onvifPtz__Stop() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__StopResponse
#define SOAP_TYPE__onvifPtz__StopResponse (1072)
/* onvifPtz:StopResponse */
class SOAP_CMAC _onvifPtz__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1072; } /* = unique id SOAP_TYPE__onvifPtz__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__StopResponse() { _onvifPtz__StopResponse::soap_default(NULL); }
	virtual ~_onvifPtz__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetTours
#define SOAP_TYPE__onvifPtz__GetPresetTours (1073)
/* onvifPtz:GetPresetTours */
class SOAP_CMAC _onvifPtz__GetPresetTours
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1073; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetTours */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetTours() { _onvifPtz__GetPresetTours::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetTours() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetToursResponse
#define SOAP_TYPE__onvifPtz__GetPresetToursResponse (1074)
/* onvifPtz:GetPresetToursResponse */
class SOAP_CMAC _onvifPtz__GetPresetToursResponse
{
public:
	std::vector<onvifXsd__PresetTour * >PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1074; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetToursResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetToursResponse() { _onvifPtz__GetPresetToursResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetToursResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetTour
#define SOAP_TYPE__onvifPtz__GetPresetTour (1075)
/* onvifPtz:GetPresetTour */
class SOAP_CMAC _onvifPtz__GetPresetTour
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string PresetTourToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1075; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetTour() { _onvifPtz__GetPresetTour::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetTourResponse
#define SOAP_TYPE__onvifPtz__GetPresetTourResponse (1076)
/* onvifPtz:GetPresetTourResponse */
class SOAP_CMAC _onvifPtz__GetPresetTourResponse
{
public:
	onvifXsd__PresetTour *PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1076; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetTourResponse() { _onvifPtz__GetPresetTourResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetTourOptions
#define SOAP_TYPE__onvifPtz__GetPresetTourOptions (1077)
/* onvifPtz:GetPresetTourOptions */
class SOAP_CMAC _onvifPtz__GetPresetTourOptions
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string *PresetTourToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1077; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetTourOptions() { _onvifPtz__GetPresetTourOptions::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__GetPresetTourOptionsResponse
#define SOAP_TYPE__onvifPtz__GetPresetTourOptionsResponse (1078)
/* onvifPtz:GetPresetTourOptionsResponse */
class SOAP_CMAC _onvifPtz__GetPresetTourOptionsResponse
{
public:
	onvifXsd__PTZPresetTourOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:PTZPresetTourOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1078; } /* = unique id SOAP_TYPE__onvifPtz__GetPresetTourOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__GetPresetTourOptionsResponse() { _onvifPtz__GetPresetTourOptionsResponse::soap_default(NULL); }
	virtual ~_onvifPtz__GetPresetTourOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__CreatePresetTour
#define SOAP_TYPE__onvifPtz__CreatePresetTour (1079)
/* onvifPtz:CreatePresetTour */
class SOAP_CMAC _onvifPtz__CreatePresetTour
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1079; } /* = unique id SOAP_TYPE__onvifPtz__CreatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__CreatePresetTour() { _onvifPtz__CreatePresetTour::soap_default(NULL); }
	virtual ~_onvifPtz__CreatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__CreatePresetTourResponse
#define SOAP_TYPE__onvifPtz__CreatePresetTourResponse (1080)
/* onvifPtz:CreatePresetTourResponse */
class SOAP_CMAC _onvifPtz__CreatePresetTourResponse
{
public:
	std::string PresetTourToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1080; } /* = unique id SOAP_TYPE__onvifPtz__CreatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__CreatePresetTourResponse() { _onvifPtz__CreatePresetTourResponse::soap_default(NULL); }
	virtual ~_onvifPtz__CreatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__ModifyPresetTour
#define SOAP_TYPE__onvifPtz__ModifyPresetTour (1081)
/* onvifPtz:ModifyPresetTour */
class SOAP_CMAC _onvifPtz__ModifyPresetTour
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__PresetTour *PresetTour;	/* required element of type onvifXsd:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1081; } /* = unique id SOAP_TYPE__onvifPtz__ModifyPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__ModifyPresetTour() { _onvifPtz__ModifyPresetTour::soap_default(NULL); }
	virtual ~_onvifPtz__ModifyPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__ModifyPresetTourResponse
#define SOAP_TYPE__onvifPtz__ModifyPresetTourResponse (1082)
/* onvifPtz:ModifyPresetTourResponse */
class SOAP_CMAC _onvifPtz__ModifyPresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1082; } /* = unique id SOAP_TYPE__onvifPtz__ModifyPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__ModifyPresetTourResponse() { _onvifPtz__ModifyPresetTourResponse::soap_default(NULL); }
	virtual ~_onvifPtz__ModifyPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__OperatePresetTour
#define SOAP_TYPE__onvifPtz__OperatePresetTour (1083)
/* onvifPtz:OperatePresetTour */
class SOAP_CMAC _onvifPtz__OperatePresetTour
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string PresetTourToken;	/* required element of type onvifXsd:ReferenceToken */
	enum onvifXsd__PTZPresetTourOperation Operation;	/* required element of type onvifXsd:PTZPresetTourOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1083; } /* = unique id SOAP_TYPE__onvifPtz__OperatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__OperatePresetTour() { _onvifPtz__OperatePresetTour::soap_default(NULL); }
	virtual ~_onvifPtz__OperatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__OperatePresetTourResponse
#define SOAP_TYPE__onvifPtz__OperatePresetTourResponse (1084)
/* onvifPtz:OperatePresetTourResponse */
class SOAP_CMAC _onvifPtz__OperatePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1084; } /* = unique id SOAP_TYPE__onvifPtz__OperatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__OperatePresetTourResponse() { _onvifPtz__OperatePresetTourResponse::soap_default(NULL); }
	virtual ~_onvifPtz__OperatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__RemovePresetTour
#define SOAP_TYPE__onvifPtz__RemovePresetTour (1085)
/* onvifPtz:RemovePresetTour */
class SOAP_CMAC _onvifPtz__RemovePresetTour
{
public:
	std::string ProfileToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string PresetTourToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1085; } /* = unique id SOAP_TYPE__onvifPtz__RemovePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__RemovePresetTour() { _onvifPtz__RemovePresetTour::soap_default(NULL); }
	virtual ~_onvifPtz__RemovePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__onvifPtz__RemovePresetTourResponse
#define SOAP_TYPE__onvifPtz__RemovePresetTourResponse (1086)
/* onvifPtz:RemovePresetTourResponse */
class SOAP_CMAC _onvifPtz__RemovePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1086; } /* = unique id SOAP_TYPE__onvifPtz__RemovePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifPtz__RemovePresetTourResponse() { _onvifPtz__RemovePresetTourResponse::soap_default(NULL); }
	virtual ~_onvifPtz__RemovePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__Capabilities
#define SOAP_TYPE_onvifDeviceIO__Capabilities (1087)
/* onvifDeviceIO:Capabilities */
class SOAP_CMAC onvifDeviceIO__Capabilities : public xsd__anyType
{
public:
	std::vector<char * >__any;
	int VideoSources;	/* optional attribute */
	int VideoOutputs;	/* optional attribute */
	int AudioSources;	/* optional attribute */
	int AudioOutputs;	/* optional attribute */
	int RelayOutputs;	/* optional attribute */
	int SerialPorts;	/* optional attribute */
	int DigitalInputs;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1087; } /* = unique id SOAP_TYPE_onvifDeviceIO__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__Capabilities() { onvifDeviceIO__Capabilities::soap_default(NULL); }
	virtual ~onvifDeviceIO__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__RelayOutputOptions
#define SOAP_TYPE_onvifDeviceIO__RelayOutputOptions (1088)
/* onvifDeviceIO:RelayOutputOptions */
class SOAP_CMAC onvifDeviceIO__RelayOutputOptions : public xsd__anyType
{
public:
	std::vector<enum onvifXsd__RelayMode >Mode;	/* required element of type onvifXsd:RelayMode */
	std::string *DelayTimes;	/* optional element of type onvifDeviceIO:DelayTimes */
	bool *Discrete;	/* optional element of type xsd:boolean */
	class onvifDeviceIO__RelayOutputOptionsExtension *Extension;	/* optional element of type onvifDeviceIO:RelayOutputOptionsExtension */
	std::string token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1088; } /* = unique id SOAP_TYPE_onvifDeviceIO__RelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__RelayOutputOptions() { onvifDeviceIO__RelayOutputOptions::soap_default(NULL); }
	virtual ~onvifDeviceIO__RelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__RelayOutputOptionsExtension
#define SOAP_TYPE_onvifDeviceIO__RelayOutputOptionsExtension (1089)
/* onvifDeviceIO:RelayOutputOptionsExtension */
class SOAP_CMAC onvifDeviceIO__RelayOutputOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 1089; } /* = unique id SOAP_TYPE_onvifDeviceIO__RelayOutputOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__RelayOutputOptionsExtension() { onvifDeviceIO__RelayOutputOptionsExtension::soap_default(NULL); }
	virtual ~onvifDeviceIO__RelayOutputOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__union_SerialData
#define SOAP_TYPE__onvifDeviceIO__union_SerialData (1886)
/* xsd:choice */
union _onvifDeviceIO__union_SerialData
{
#define SOAP_UNION__onvifDeviceIO__union_SerialData_Binary	(1)
	xsd__base64Binary *Binary;
#define SOAP_UNION__onvifDeviceIO__union_SerialData_String	(2)
	std::string *String;
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__SerialData
#define SOAP_TYPE_onvifDeviceIO__SerialData (1090)
/* onvifDeviceIO:SerialData */
class SOAP_CMAC onvifDeviceIO__SerialData : public xsd__anyType
{
public:
	int __union_SerialData;	/* union discriminant (of union defined below) */
	union _onvifDeviceIO__union_SerialData union_SerialData;	/* required element of type xsd:choice */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1090; } /* = unique id SOAP_TYPE_onvifDeviceIO__SerialData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__SerialData() { onvifDeviceIO__SerialData::soap_default(NULL); }
	virtual ~onvifDeviceIO__SerialData() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__SerialPortConfiguration
#define SOAP_TYPE_onvifDeviceIO__SerialPortConfiguration (1092)
/* onvifDeviceIO:SerialPortConfiguration */
class SOAP_CMAC onvifDeviceIO__SerialPortConfiguration : public xsd__anyType
{
public:
	int BaudRate;	/* required element of type xsd:int */
	enum onvifDeviceIO__ParityBit ParityBit;	/* required element of type onvifDeviceIO:ParityBit */
	int CharacterLength;	/* required element of type xsd:int */
	float StopBit;	/* required element of type xsd:float */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	enum onvifDeviceIO__SerialPortType type;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1092; } /* = unique id SOAP_TYPE_onvifDeviceIO__SerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__SerialPortConfiguration() { onvifDeviceIO__SerialPortConfiguration::soap_default(NULL); }
	virtual ~onvifDeviceIO__SerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__SerialPortConfigurationOptions
#define SOAP_TYPE_onvifDeviceIO__SerialPortConfigurationOptions (1093)
/* onvifDeviceIO:SerialPortConfigurationOptions */
class SOAP_CMAC onvifDeviceIO__SerialPortConfigurationOptions : public xsd__anyType
{
public:
	onvifXsd__IntList *BaudRateList;	/* required element of type onvifXsd:IntList */
	class onvifDeviceIO__ParityBitList *ParityBitList;	/* required element of type onvifDeviceIO:ParityBitList */
	onvifXsd__IntList *CharacterLengthList;	/* required element of type onvifXsd:IntList */
	onvifXsd__FloatList *StopBitList;	/* required element of type onvifXsd:FloatList */
	std::vector<char * >__any;
	std::string token;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1093; } /* = unique id SOAP_TYPE_onvifDeviceIO__SerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__SerialPortConfigurationOptions() { onvifDeviceIO__SerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~onvifDeviceIO__SerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__ParityBitList
#define SOAP_TYPE_onvifDeviceIO__ParityBitList (1094)
/* onvifDeviceIO:ParityBitList */
class SOAP_CMAC onvifDeviceIO__ParityBitList : public xsd__anyType
{
public:
	std::vector<enum onvifDeviceIO__ParityBit >Items;	/* optional element of type onvifDeviceIO:ParityBit */
public:
	virtual int soap_type() const { return 1094; } /* = unique id SOAP_TYPE_onvifDeviceIO__ParityBitList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__ParityBitList() { onvifDeviceIO__ParityBitList::soap_default(NULL); }
	virtual ~onvifDeviceIO__ParityBitList() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetServiceCapabilities
#define SOAP_TYPE__onvifDeviceIO__GetServiceCapabilities (1095)
/* onvifDeviceIO:GetServiceCapabilities */
class SOAP_CMAC _onvifDeviceIO__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1095; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetServiceCapabilities() { _onvifDeviceIO__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetServiceCapabilitiesResponse
#define SOAP_TYPE__onvifDeviceIO__GetServiceCapabilitiesResponse (1096)
/* onvifDeviceIO:GetServiceCapabilitiesResponse */
class SOAP_CMAC _onvifDeviceIO__GetServiceCapabilitiesResponse
{
public:
	onvifDeviceIO__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifDeviceIO:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1096; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetServiceCapabilitiesResponse() { _onvifDeviceIO__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetRelayOutputOptions
#define SOAP_TYPE__onvifDeviceIO__GetRelayOutputOptions (1097)
/* onvifDeviceIO:GetRelayOutputOptions */
class SOAP_CMAC _onvifDeviceIO__GetRelayOutputOptions
{
public:
	std::string *RelayOutputToken;	/* optional element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1097; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetRelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetRelayOutputOptions() { _onvifDeviceIO__GetRelayOutputOptions::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetRelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetRelayOutputOptionsResponse
#define SOAP_TYPE__onvifDeviceIO__GetRelayOutputOptionsResponse (1098)
/* onvifDeviceIO:GetRelayOutputOptionsResponse */
class SOAP_CMAC _onvifDeviceIO__GetRelayOutputOptionsResponse
{
public:
	std::vector<onvifDeviceIO__RelayOutputOptions * >RelayOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifDeviceIO:RelayOutputOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1098; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetRelayOutputOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetRelayOutputOptionsResponse() { _onvifDeviceIO__GetRelayOutputOptionsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetRelayOutputOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoOutputs
#define SOAP_TYPE__onvifDeviceIO__GetVideoOutputs (1099)
/* onvifDeviceIO:GetVideoOutputs */
class SOAP_CMAC _onvifDeviceIO__GetVideoOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1099; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoOutputs() { _onvifDeviceIO__GetVideoOutputs::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoOutputs() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoOutputsResponse
#define SOAP_TYPE__onvifDeviceIO__GetVideoOutputsResponse (1100)
/* onvifDeviceIO:GetVideoOutputsResponse */
class SOAP_CMAC _onvifDeviceIO__GetVideoOutputsResponse
{
public:
	std::vector<class onvifXsd__VideoOutput * >VideoOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:VideoOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1100; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoOutputsResponse() { _onvifDeviceIO__GetVideoOutputsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfiguration
#define SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfiguration (1101)
/* onvifDeviceIO:GetAudioSourceConfiguration */
class SOAP_CMAC _onvifDeviceIO__GetAudioSourceConfiguration
{
public:
	std::string AudioSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1101; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioSourceConfiguration() { _onvifDeviceIO__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationResponse (1102)
/* onvifDeviceIO:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__GetAudioSourceConfigurationResponse
{
public:
	onvifXsd__AudioSourceConfiguration *AudioSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioSourceConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1102; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioSourceConfigurationResponse() { _onvifDeviceIO__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfiguration
#define SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfiguration (1103)
/* onvifDeviceIO:GetAudioOutputConfiguration */
class SOAP_CMAC _onvifDeviceIO__GetAudioOutputConfiguration
{
public:
	std::string AudioOutputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1103; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioOutputConfiguration() { _onvifDeviceIO__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationResponse (1104)
/* onvifDeviceIO:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__GetAudioOutputConfigurationResponse
{
public:
	onvifXsd__AudioOutputConfiguration *AudioOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioOutputConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1104; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioOutputConfigurationResponse() { _onvifDeviceIO__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfiguration
#define SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfiguration (1105)
/* onvifDeviceIO:GetVideoSourceConfiguration */
class SOAP_CMAC _onvifDeviceIO__GetVideoSourceConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1105; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoSourceConfiguration() { _onvifDeviceIO__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationResponse (1106)
/* onvifDeviceIO:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__GetVideoSourceConfigurationResponse
{
public:
	onvifXsd__VideoSourceConfiguration *VideoSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoSourceConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1106; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoSourceConfigurationResponse() { _onvifDeviceIO__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfiguration
#define SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfiguration (1107)
/* onvifDeviceIO:GetVideoOutputConfiguration */
class SOAP_CMAC _onvifDeviceIO__GetVideoOutputConfiguration
{
public:
	std::string VideoOutputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1107; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoOutputConfiguration() { _onvifDeviceIO__GetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationResponse (1108)
/* onvifDeviceIO:GetVideoOutputConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__GetVideoOutputConfigurationResponse
{
public:
	class onvifXsd__VideoOutputConfiguration *VideoOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoOutputConfiguration */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1108; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoOutputConfigurationResponse() { _onvifDeviceIO__GetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetAudioSourceConfiguration
#define SOAP_TYPE__onvifDeviceIO__SetAudioSourceConfiguration (1109)
/* onvifDeviceIO:SetAudioSourceConfiguration */
class SOAP_CMAC _onvifDeviceIO__SetAudioSourceConfiguration
{
public:
	onvifXsd__AudioSourceConfiguration *Configuration;	/* required element of type onvifXsd:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1109; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetAudioSourceConfiguration() { _onvifDeviceIO__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__SetAudioSourceConfigurationResponse (1110)
/* onvifDeviceIO:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__SetAudioSourceConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1110; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetAudioSourceConfigurationResponse() { _onvifDeviceIO__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetAudioOutputConfiguration
#define SOAP_TYPE__onvifDeviceIO__SetAudioOutputConfiguration (1111)
/* onvifDeviceIO:SetAudioOutputConfiguration */
class SOAP_CMAC _onvifDeviceIO__SetAudioOutputConfiguration
{
public:
	onvifXsd__AudioOutputConfiguration *Configuration;	/* required element of type onvifXsd:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1111; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetAudioOutputConfiguration() { _onvifDeviceIO__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__SetAudioOutputConfigurationResponse (1112)
/* onvifDeviceIO:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__SetAudioOutputConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1112; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetAudioOutputConfigurationResponse() { _onvifDeviceIO__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetVideoSourceConfiguration
#define SOAP_TYPE__onvifDeviceIO__SetVideoSourceConfiguration (1113)
/* onvifDeviceIO:SetVideoSourceConfiguration */
class SOAP_CMAC _onvifDeviceIO__SetVideoSourceConfiguration
{
public:
	onvifXsd__VideoSourceConfiguration *Configuration;	/* required element of type onvifXsd:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1113; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetVideoSourceConfiguration() { _onvifDeviceIO__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__SetVideoSourceConfigurationResponse (1114)
/* onvifDeviceIO:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__SetVideoSourceConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1114; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetVideoSourceConfigurationResponse() { _onvifDeviceIO__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetVideoOutputConfiguration
#define SOAP_TYPE__onvifDeviceIO__SetVideoOutputConfiguration (1115)
/* onvifDeviceIO:SetVideoOutputConfiguration */
class SOAP_CMAC _onvifDeviceIO__SetVideoOutputConfiguration
{
public:
	onvifXsd__VideoOutputConfiguration *Configuration;	/* required element of type onvifXsd:VideoOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1115; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetVideoOutputConfiguration() { _onvifDeviceIO__SetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetVideoOutputConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__SetVideoOutputConfigurationResponse (1116)
/* onvifDeviceIO:SetVideoOutputConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__SetVideoOutputConfigurationResponse
{
public:
	std::vector<char * >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1116; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetVideoOutputConfigurationResponse() { _onvifDeviceIO__SetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationOptions (1117)
/* onvifDeviceIO:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _onvifDeviceIO__GetVideoSourceConfigurationOptions
{
public:
	std::string VideoSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1117; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoSourceConfigurationOptions() { _onvifDeviceIO__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse (1118)
/* onvifDeviceIO:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse
{
public:
	onvifXsd__VideoSourceConfigurationOptions *VideoSourceConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoSourceConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1118; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse() { _onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationOptions
#define SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationOptions (1119)
/* onvifDeviceIO:GetVideoOutputConfigurationOptions */
class SOAP_CMAC _onvifDeviceIO__GetVideoOutputConfigurationOptions
{
public:
	std::string VideoOutputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1119; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoOutputConfigurationOptions() { _onvifDeviceIO__GetVideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse
#define SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse (1120)
/* onvifDeviceIO:GetVideoOutputConfigurationOptionsResponse */
class SOAP_CMAC _onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse
{
public:
	onvifXsd__VideoOutputConfigurationOptions *VideoOutputConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:VideoOutputConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1120; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse() { _onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetVideoOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationOptions (1121)
/* onvifDeviceIO:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _onvifDeviceIO__GetAudioSourceConfigurationOptions
{
public:
	std::string AudioSourceToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1121; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioSourceConfigurationOptions() { _onvifDeviceIO__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse (1122)
/* onvifDeviceIO:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse
{
public:
	onvifXsd__AudioSourceConfigurationOptions *AudioSourceOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioSourceConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1122; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse() { _onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationOptions (1123)
/* onvifDeviceIO:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _onvifDeviceIO__GetAudioOutputConfigurationOptions
{
public:
	std::string AudioOutputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1123; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioOutputConfigurationOptions() { _onvifDeviceIO__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse (1124)
/* onvifDeviceIO:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse
{
public:
	onvifXsd__AudioOutputConfigurationOptions *AudioOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifXsd:AudioOutputConfigurationOptions */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1124; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse() { _onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetRelayOutputSettings
#define SOAP_TYPE__onvifDeviceIO__SetRelayOutputSettings (1125)
/* onvifDeviceIO:SetRelayOutputSettings */
class SOAP_CMAC _onvifDeviceIO__SetRelayOutputSettings
{
public:
	onvifXsd__RelayOutput *RelayOutput;	/* required element of type onvifXsd:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1125; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetRelayOutputSettings() { _onvifDeviceIO__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetRelayOutputSettingsResponse
#define SOAP_TYPE__onvifDeviceIO__SetRelayOutputSettingsResponse (1126)
/* onvifDeviceIO:SetRelayOutputSettingsResponse */
class SOAP_CMAC _onvifDeviceIO__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1126; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetRelayOutputSettingsResponse() { _onvifDeviceIO__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetDigitalInputs
#define SOAP_TYPE__onvifDeviceIO__GetDigitalInputs (1127)
/* onvifDeviceIO:GetDigitalInputs */
class SOAP_CMAC _onvifDeviceIO__GetDigitalInputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1127; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetDigitalInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetDigitalInputs() { _onvifDeviceIO__GetDigitalInputs::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetDigitalInputs() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetDigitalInputsResponse
#define SOAP_TYPE__onvifDeviceIO__GetDigitalInputsResponse (1128)
/* onvifDeviceIO:GetDigitalInputsResponse */
class SOAP_CMAC _onvifDeviceIO__GetDigitalInputsResponse
{
public:
	std::vector<class onvifXsd__DigitalInput * >DigitalInputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifXsd:DigitalInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1128; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetDigitalInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetDigitalInputsResponse() { _onvifDeviceIO__GetDigitalInputsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetDigitalInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetSerialPorts
#define SOAP_TYPE__onvifDeviceIO__GetSerialPorts (1129)
/* onvifDeviceIO:GetSerialPorts */
class SOAP_CMAC _onvifDeviceIO__GetSerialPorts
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1129; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetSerialPorts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetSerialPorts() { _onvifDeviceIO__GetSerialPorts::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetSerialPorts() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetSerialPortsResponse
#define SOAP_TYPE__onvifDeviceIO__GetSerialPortsResponse (1130)
/* onvifDeviceIO:GetSerialPortsResponse */
class SOAP_CMAC _onvifDeviceIO__GetSerialPortsResponse
{
public:
	std::vector<class onvifDeviceIO__SerialPort * >SerialPort;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifDeviceIO:SerialPort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1130; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetSerialPortsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetSerialPortsResponse() { _onvifDeviceIO__GetSerialPortsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetSerialPortsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetSerialPortConfiguration
#define SOAP_TYPE__onvifDeviceIO__GetSerialPortConfiguration (1131)
/* onvifDeviceIO:GetSerialPortConfiguration */
class SOAP_CMAC _onvifDeviceIO__GetSerialPortConfiguration
{
public:
	std::string SerialPortToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1131; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetSerialPortConfiguration() { _onvifDeviceIO__GetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationResponse (1132)
/* onvifDeviceIO:GetSerialPortConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__GetSerialPortConfigurationResponse
{
public:
	onvifDeviceIO__SerialPortConfiguration *SerialPortConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifDeviceIO:SerialPortConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1132; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetSerialPortConfigurationResponse() { _onvifDeviceIO__GetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetSerialPortConfiguration
#define SOAP_TYPE__onvifDeviceIO__SetSerialPortConfiguration (1133)
/* onvifDeviceIO:SetSerialPortConfiguration */
class SOAP_CMAC _onvifDeviceIO__SetSerialPortConfiguration
{
public:
	onvifDeviceIO__SerialPortConfiguration *SerialPortConfiguration;	/* required element of type onvifDeviceIO:SerialPortConfiguration */
	bool ForcePersistance;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1133; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetSerialPortConfiguration() { _onvifDeviceIO__SetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SetSerialPortConfigurationResponse
#define SOAP_TYPE__onvifDeviceIO__SetSerialPortConfigurationResponse (1134)
/* onvifDeviceIO:SetSerialPortConfigurationResponse */
class SOAP_CMAC _onvifDeviceIO__SetSerialPortConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1134; } /* = unique id SOAP_TYPE__onvifDeviceIO__SetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SetSerialPortConfigurationResponse() { _onvifDeviceIO__SetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationOptions
#define SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationOptions (1135)
/* onvifDeviceIO:GetSerialPortConfigurationOptions */
class SOAP_CMAC _onvifDeviceIO__GetSerialPortConfigurationOptions
{
public:
	std::string SerialPortToken;	/* required element of type onvifXsd:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1135; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetSerialPortConfigurationOptions() { _onvifDeviceIO__GetSerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetSerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationOptionsResponse
#define SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationOptionsResponse (1136)
/* onvifDeviceIO:GetSerialPortConfigurationOptionsResponse */
class SOAP_CMAC _onvifDeviceIO__GetSerialPortConfigurationOptionsResponse
{
public:
	onvifDeviceIO__SerialPortConfigurationOptions *SerialPortOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onvifDeviceIO:SerialPortConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1136; } /* = unique id SOAP_TYPE__onvifDeviceIO__GetSerialPortConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__GetSerialPortConfigurationOptionsResponse() { _onvifDeviceIO__GetSerialPortConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__GetSerialPortConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SendReceiveSerialCommand
#define SOAP_TYPE__onvifDeviceIO__SendReceiveSerialCommand (1137)
/* onvifDeviceIO:SendReceiveSerialCommand */
class SOAP_CMAC _onvifDeviceIO__SendReceiveSerialCommand
{
public:
	onvifDeviceIO__SerialData *SerialData;	/* optional element of type onvifDeviceIO:SerialData */
	std::string *TimeOut;	/* optional element of type xsd:duration */
	std::string *DataLength;	/* optional element of type xsd:integer */
	std::string *Delimiter;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1137; } /* = unique id SOAP_TYPE__onvifDeviceIO__SendReceiveSerialCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SendReceiveSerialCommand() { _onvifDeviceIO__SendReceiveSerialCommand::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SendReceiveSerialCommand() { }
};
#endif

#ifndef SOAP_TYPE__onvifDeviceIO__SendReceiveSerialCommandResponse
#define SOAP_TYPE__onvifDeviceIO__SendReceiveSerialCommandResponse (1138)
/* onvifDeviceIO:SendReceiveSerialCommandResponse */
class SOAP_CMAC _onvifDeviceIO__SendReceiveSerialCommandResponse
{
public:
	onvifDeviceIO__SerialData *SerialData;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onvifDeviceIO:SerialData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1138; } /* = unique id SOAP_TYPE__onvifDeviceIO__SendReceiveSerialCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onvifDeviceIO__SendReceiveSerialCommandResponse() { _onvifDeviceIO__SendReceiveSerialCommandResponse::soap_default(NULL); }
	virtual ~_onvifDeviceIO__SendReceiveSerialCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RelatesToType
#define SOAP_TYPE_ns1__RelatesToType (198)
/* Primitive ns1:RelatesToType schema type: */
class SOAP_CMAC ns1__RelatesToType : public xsd__anyType
{
public:
	std::string __item;
	std::string RelationshipType;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE_ns1__RelatesToType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RelatesToType() { ns1__RelatesToType::soap_default(NULL); }
	virtual ~ns1__RelatesToType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AttributedURIType
#define SOAP_TYPE_ns1__AttributedURIType (199)
/* Primitive ns1:AttributedURIType schema type: */
class SOAP_CMAC ns1__AttributedURIType : public xsd__anyType
{
public:
	std::string __item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_ns1__AttributedURIType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AttributedURIType() { ns1__AttributedURIType::soap_default(NULL); }
	virtual ~ns1__AttributedURIType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AttributedUnsignedLongType
#define SOAP_TYPE_ns1__AttributedUnsignedLongType (200)
/* Primitive ns1:AttributedUnsignedLongType schema type: */
class SOAP_CMAC ns1__AttributedUnsignedLongType : public xsd__anyType
{
public:
	ULONG64 __item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_ns1__AttributedUnsignedLongType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AttributedUnsignedLongType() { ns1__AttributedUnsignedLongType::soap_default(NULL); }
	virtual ~ns1__AttributedUnsignedLongType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AttributedQNameType
#define SOAP_TYPE_ns1__AttributedQNameType (201)
/* Primitive ns1:AttributedQNameType schema type: */
class SOAP_CMAC ns1__AttributedQNameType : public xsd__anyType
{
public:
	std::string __item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE_ns1__AttributedQNameType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AttributedQNameType() { ns1__AttributedQNameType::soap_default(NULL); }
	virtual ~ns1__AttributedQNameType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsrfR2__ResourceUnknownFaultType
#define SOAP_TYPE_oasisWsrfR2__ResourceUnknownFaultType (203)
/* oasisWsrfR2:ResourceUnknownFaultType */
class SOAP_CMAC oasisWsrfR2__ResourceUnknownFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE_oasisWsrfR2__ResourceUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsrfR2__ResourceUnknownFaultType() { oasisWsrfR2__ResourceUnknownFaultType::soap_default(NULL); }
	virtual ~oasisWsrfR2__ResourceUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsrfR2__ResourceUnavailableFaultType
#define SOAP_TYPE_oasisWsrfR2__ResourceUnavailableFaultType (204)
/* oasisWsrfR2:ResourceUnavailableFaultType */
class SOAP_CMAC oasisWsrfR2__ResourceUnavailableFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE_oasisWsrfR2__ResourceUnavailableFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsrfR2__ResourceUnavailableFaultType() { oasisWsrfR2__ResourceUnavailableFaultType::soap_default(NULL); }
	virtual ~oasisWsrfR2__ResourceUnavailableFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__SubscribeCreationFailedFaultType
#define SOAP_TYPE_oasisWsnB2__SubscribeCreationFailedFaultType (211)
/* oasisWsnB2:SubscribeCreationFailedFaultType */
class SOAP_CMAC oasisWsnB2__SubscribeCreationFailedFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_oasisWsnB2__SubscribeCreationFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__SubscribeCreationFailedFaultType() { oasisWsnB2__SubscribeCreationFailedFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__SubscribeCreationFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__InvalidFilterFaultType
#define SOAP_TYPE_oasisWsnB2__InvalidFilterFaultType (212)
/* oasisWsnB2:InvalidFilterFaultType */
class SOAP_CMAC oasisWsnB2__InvalidFilterFaultType : public oasisWsrf__BaseFaultType
{
public:
	std::vector<std::string >UnknownFilter;	/* required element of type xsd:QName */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE_oasisWsnB2__InvalidFilterFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__InvalidFilterFaultType() { oasisWsnB2__InvalidFilterFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__InvalidFilterFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_oasisWsnB2__TopicExpressionDialectUnknownFaultType (213)
/* oasisWsnB2:TopicExpressionDialectUnknownFaultType */
class SOAP_CMAC oasisWsnB2__TopicExpressionDialectUnknownFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_oasisWsnB2__TopicExpressionDialectUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__TopicExpressionDialectUnknownFaultType() { oasisWsnB2__TopicExpressionDialectUnknownFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__TopicExpressionDialectUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__InvalidTopicExpressionFaultType
#define SOAP_TYPE_oasisWsnB2__InvalidTopicExpressionFaultType (214)
/* oasisWsnB2:InvalidTopicExpressionFaultType */
class SOAP_CMAC oasisWsnB2__InvalidTopicExpressionFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_oasisWsnB2__InvalidTopicExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__InvalidTopicExpressionFaultType() { oasisWsnB2__InvalidTopicExpressionFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__InvalidTopicExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__TopicNotSupportedFaultType
#define SOAP_TYPE_oasisWsnB2__TopicNotSupportedFaultType (215)
/* oasisWsnB2:TopicNotSupportedFaultType */
class SOAP_CMAC oasisWsnB2__TopicNotSupportedFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_oasisWsnB2__TopicNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__TopicNotSupportedFaultType() { oasisWsnB2__TopicNotSupportedFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__TopicNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_oasisWsnB2__MultipleTopicsSpecifiedFaultType (216)
/* oasisWsnB2:MultipleTopicsSpecifiedFaultType */
class SOAP_CMAC oasisWsnB2__MultipleTopicsSpecifiedFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_oasisWsnB2__MultipleTopicsSpecifiedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__MultipleTopicsSpecifiedFaultType() { oasisWsnB2__MultipleTopicsSpecifiedFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__MultipleTopicsSpecifiedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_oasisWsnB2__InvalidProducerPropertiesExpressionFaultType (217)
/* oasisWsnB2:InvalidProducerPropertiesExpressionFaultType */
class SOAP_CMAC oasisWsnB2__InvalidProducerPropertiesExpressionFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_oasisWsnB2__InvalidProducerPropertiesExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__InvalidProducerPropertiesExpressionFaultType() { oasisWsnB2__InvalidProducerPropertiesExpressionFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__InvalidProducerPropertiesExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_oasisWsnB2__InvalidMessageContentExpressionFaultType (218)
/* oasisWsnB2:InvalidMessageContentExpressionFaultType */
class SOAP_CMAC oasisWsnB2__InvalidMessageContentExpressionFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_oasisWsnB2__InvalidMessageContentExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__InvalidMessageContentExpressionFaultType() { oasisWsnB2__InvalidMessageContentExpressionFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__InvalidMessageContentExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_oasisWsnB2__UnrecognizedPolicyRequestFaultType (219)
/* oasisWsnB2:UnrecognizedPolicyRequestFaultType */
class SOAP_CMAC oasisWsnB2__UnrecognizedPolicyRequestFaultType : public oasisWsrf__BaseFaultType
{
public:
	std::vector<std::string >UnrecognizedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_oasisWsnB2__UnrecognizedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnrecognizedPolicyRequestFaultType() { oasisWsnB2__UnrecognizedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnrecognizedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_oasisWsnB2__UnsupportedPolicyRequestFaultType (220)
/* oasisWsnB2:UnsupportedPolicyRequestFaultType */
class SOAP_CMAC oasisWsnB2__UnsupportedPolicyRequestFaultType : public oasisWsrf__BaseFaultType
{
public:
	std::vector<std::string >UnsupportedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE_oasisWsnB2__UnsupportedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnsupportedPolicyRequestFaultType() { oasisWsnB2__UnsupportedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnsupportedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_oasisWsnB2__NotifyMessageNotSupportedFaultType (221)
/* oasisWsnB2:NotifyMessageNotSupportedFaultType */
class SOAP_CMAC oasisWsnB2__NotifyMessageNotSupportedFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_oasisWsnB2__NotifyMessageNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__NotifyMessageNotSupportedFaultType() { oasisWsnB2__NotifyMessageNotSupportedFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__NotifyMessageNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_oasisWsnB2__UnacceptableInitialTerminationTimeFaultType (222)
/* oasisWsnB2:UnacceptableInitialTerminationTimeFaultType */
class SOAP_CMAC oasisWsnB2__UnacceptableInitialTerminationTimeFaultType : public oasisWsrf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_oasisWsnB2__UnacceptableInitialTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnacceptableInitialTerminationTimeFaultType() { oasisWsnB2__UnacceptableInitialTerminationTimeFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnacceptableInitialTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_oasisWsnB2__NoCurrentMessageOnTopicFaultType (223)
/* oasisWsnB2:NoCurrentMessageOnTopicFaultType */
class SOAP_CMAC oasisWsnB2__NoCurrentMessageOnTopicFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_oasisWsnB2__NoCurrentMessageOnTopicFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__NoCurrentMessageOnTopicFaultType() { oasisWsnB2__NoCurrentMessageOnTopicFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__NoCurrentMessageOnTopicFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnableToGetMessagesFaultType
#define SOAP_TYPE_oasisWsnB2__UnableToGetMessagesFaultType (224)
/* oasisWsnB2:UnableToGetMessagesFaultType */
class SOAP_CMAC oasisWsnB2__UnableToGetMessagesFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_oasisWsnB2__UnableToGetMessagesFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnableToGetMessagesFaultType() { oasisWsnB2__UnableToGetMessagesFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnableToGetMessagesFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_oasisWsnB2__UnableToDestroyPullPointFaultType (225)
/* oasisWsnB2:UnableToDestroyPullPointFaultType */
class SOAP_CMAC oasisWsnB2__UnableToDestroyPullPointFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_oasisWsnB2__UnableToDestroyPullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnableToDestroyPullPointFaultType() { oasisWsnB2__UnableToDestroyPullPointFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnableToDestroyPullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnableToCreatePullPointFaultType
#define SOAP_TYPE_oasisWsnB2__UnableToCreatePullPointFaultType (226)
/* oasisWsnB2:UnableToCreatePullPointFaultType */
class SOAP_CMAC oasisWsnB2__UnableToCreatePullPointFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_oasisWsnB2__UnableToCreatePullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnableToCreatePullPointFaultType() { oasisWsnB2__UnableToCreatePullPointFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnableToCreatePullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_oasisWsnB2__UnacceptableTerminationTimeFaultType (227)
/* oasisWsnB2:UnacceptableTerminationTimeFaultType */
class SOAP_CMAC oasisWsnB2__UnacceptableTerminationTimeFaultType : public oasisWsrf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE_oasisWsnB2__UnacceptableTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnacceptableTerminationTimeFaultType() { oasisWsnB2__UnacceptableTerminationTimeFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnacceptableTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_oasisWsnB2__UnableToDestroySubscriptionFaultType (228)
/* oasisWsnB2:UnableToDestroySubscriptionFaultType */
class SOAP_CMAC oasisWsnB2__UnableToDestroySubscriptionFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE_oasisWsnB2__UnableToDestroySubscriptionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__UnableToDestroySubscriptionFaultType() { oasisWsnB2__UnableToDestroySubscriptionFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__UnableToDestroySubscriptionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__PauseFailedFaultType
#define SOAP_TYPE_oasisWsnB2__PauseFailedFaultType (229)
/* oasisWsnB2:PauseFailedFaultType */
class SOAP_CMAC oasisWsnB2__PauseFailedFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE_oasisWsnB2__PauseFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__PauseFailedFaultType() { oasisWsnB2__PauseFailedFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__PauseFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnB2__ResumeFailedFaultType
#define SOAP_TYPE_oasisWsnB2__ResumeFailedFaultType (230)
/* oasisWsnB2:ResumeFailedFaultType */
class SOAP_CMAC oasisWsnB2__ResumeFailedFaultType : public oasisWsrf__BaseFaultType
{
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE_oasisWsnB2__ResumeFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnB2__ResumeFailedFaultType() { oasisWsnB2__ResumeFailedFaultType::soap_default(NULL); }
	virtual ~oasisWsnB2__ResumeFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE__oasisWsnT1__TopicNamespaceType_Topic
#define SOAP_TYPE__oasisWsnT1__TopicNamespaceType_Topic (1905)
/* oasisWsnT1:TopicNamespaceType-Topic */
class SOAP_CMAC _oasisWsnT1__TopicNamespaceType_Topic
{
public:
	oasisWsnT1__Documentation *documentation;	/* optional element of type oasisWsnT1:Documentation */
	char *__anyAttribute;	/* optional attribute */
	oasisWsnT1__QueryExpressionType *MessagePattern;	/* optional element of type oasisWsnT1:QueryExpressionType */
	std::vector<class oasisWsnT1__TopicType * >Topic;	/* optional element of type oasisWsnT1:TopicType */
	std::vector<char * >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
	std::string *parent;	/* optional attribute */
public:
	virtual int soap_type() const { return 1905; } /* = unique id SOAP_TYPE__oasisWsnT1__TopicNamespaceType_Topic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _oasisWsnT1__TopicNamespaceType_Topic() { _oasisWsnT1__TopicNamespaceType_Topic::soap_default(NULL); }
	virtual ~_oasisWsnT1__TopicNamespaceType_Topic() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__TopicNamespaceType
#define SOAP_TYPE_oasisWsnT1__TopicNamespaceType (256)
/* oasisWsnT1:TopicNamespaceType */
class SOAP_CMAC oasisWsnT1__TopicNamespaceType : public oasisWsnT1__ExtensibleDocumented
{
public:
	std::vector<_oasisWsnT1__TopicNamespaceType_Topic >*Topic;	/* optional element of type oasisWsnT1:TopicNamespaceType-Topic */
	std::vector<char * >__any;
	std::string *name;	/* optional attribute */
	std::string targetNamespace;	/* required attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_oasisWsnT1__TopicNamespaceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__TopicNamespaceType() { oasisWsnT1__TopicNamespaceType::soap_default(NULL); }
	virtual ~oasisWsnT1__TopicNamespaceType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__TopicType
#define SOAP_TYPE_oasisWsnT1__TopicType (257)
/* oasisWsnT1:TopicType */
class SOAP_CMAC oasisWsnT1__TopicType : public oasisWsnT1__ExtensibleDocumented
{
public:
	oasisWsnT1__QueryExpressionType *MessagePattern;	/* optional element of type oasisWsnT1:QueryExpressionType */
	std::vector<oasisWsnT1__TopicType * >Topic;	/* optional element of type oasisWsnT1:TopicType */
	std::vector<char * >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_oasisWsnT1__TopicType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__TopicType() { oasisWsnT1__TopicType::soap_default(NULL); }
	virtual ~oasisWsnT1__TopicType() { }
};
#endif

#ifndef SOAP_TYPE_oasisWsnT1__TopicSetType
#define SOAP_TYPE_oasisWsnT1__TopicSetType (258)
/* oasisWsnT1:TopicSetType */
class SOAP_CMAC oasisWsnT1__TopicSetType : public oasisWsnT1__ExtensibleDocumented
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_oasisWsnT1__TopicSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         oasisWsnT1__TopicSetType() { oasisWsnT1__TopicSetType::soap_default(NULL); }
	virtual ~oasisWsnT1__TopicSetType() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSource
#define SOAP_TYPE_onvifXsd__VideoSource (438)
/* onvifXsd:VideoSource */
class SOAP_CMAC onvifXsd__VideoSource : public onvifXsd__DeviceEntity
{
public:
	float Framerate;	/* required element of type xsd:float */
	onvifXsd__VideoResolution *Resolution;	/* required element of type onvifXsd:VideoResolution */
	onvifXsd__ImagingSettings *Imaging;	/* optional element of type onvifXsd:ImagingSettings */
	onvifXsd__VideoSourceExtension *Extension;	/* optional element of type onvifXsd:VideoSourceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_onvifXsd__VideoSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSource() { onvifXsd__VideoSource::soap_default(NULL); }
	virtual ~onvifXsd__VideoSource() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioSource
#define SOAP_TYPE_onvifXsd__AudioSource (441)
/* onvifXsd:AudioSource */
class SOAP_CMAC onvifXsd__AudioSource : public onvifXsd__DeviceEntity
{
public:
	int Channels;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_onvifXsd__AudioSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioSource() { onvifXsd__AudioSource::soap_default(NULL); }
	virtual ~onvifXsd__AudioSource() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoSourceConfiguration
#define SOAP_TYPE_onvifXsd__VideoSourceConfiguration (446)
/* onvifXsd:VideoSourceConfiguration */
class SOAP_CMAC onvifXsd__VideoSourceConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__IntRectangle *Bounds;	/* required element of type onvifXsd:IntRectangle */
	std::vector<char * >__any;
	onvifXsd__VideoSourceConfigurationExtension *Extension;	/* optional element of type onvifXsd:VideoSourceConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_onvifXsd__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoSourceConfiguration() { onvifXsd__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoEncoderConfiguration
#define SOAP_TYPE_onvifXsd__VideoEncoderConfiguration (456)
/* onvifXsd:VideoEncoderConfiguration */
class SOAP_CMAC onvifXsd__VideoEncoderConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	enum onvifXsd__VideoEncoding Encoding;	/* required element of type onvifXsd:VideoEncoding */
	onvifXsd__VideoResolution *Resolution;	/* required element of type onvifXsd:VideoResolution */
	float Quality;	/* required element of type xsd:float */
	onvifXsd__VideoRateControl *RateControl;	/* optional element of type onvifXsd:VideoRateControl */
	onvifXsd__Mpeg4Configuration *MPEG4;	/* optional element of type onvifXsd:Mpeg4Configuration */
	onvifXsd__H264Configuration *H264;	/* optional element of type onvifXsd:H264Configuration */
	onvifXsd__MulticastConfiguration *Multicast;	/* required element of type onvifXsd:MulticastConfiguration */
	std::string SessionTimeout;	/* required element of type xsd:duration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_onvifXsd__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoEncoderConfiguration() { onvifXsd__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__JpegOptions2
#define SOAP_TYPE_onvifXsd__JpegOptions2 (465)
/* onvifXsd:JpegOptions2 */
class SOAP_CMAC onvifXsd__JpegOptions2 : public onvifXsd__JpegOptions
{
public:
	onvifXsd__IntRange *BitrateRange;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_onvifXsd__JpegOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__JpegOptions2() { onvifXsd__JpegOptions2::soap_default(NULL); }
	virtual ~onvifXsd__JpegOptions2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Mpeg4Options2
#define SOAP_TYPE_onvifXsd__Mpeg4Options2 (467)
/* onvifXsd:Mpeg4Options2 */
class SOAP_CMAC onvifXsd__Mpeg4Options2 : public onvifXsd__Mpeg4Options
{
public:
	onvifXsd__IntRange *BitrateRange;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_onvifXsd__Mpeg4Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Mpeg4Options2() { onvifXsd__Mpeg4Options2::soap_default(NULL); }
	virtual ~onvifXsd__Mpeg4Options2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__H264Options2
#define SOAP_TYPE_onvifXsd__H264Options2 (469)
/* onvifXsd:H264Options2 */
class SOAP_CMAC onvifXsd__H264Options2 : public onvifXsd__H264Options
{
public:
	onvifXsd__IntRange *BitrateRange;	/* required element of type onvifXsd:IntRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_onvifXsd__H264Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__H264Options2() { onvifXsd__H264Options2::soap_default(NULL); }
	virtual ~onvifXsd__H264Options2() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioSourceConfiguration
#define SOAP_TYPE_onvifXsd__AudioSourceConfiguration (470)
/* onvifXsd:AudioSourceConfiguration */
class SOAP_CMAC onvifXsd__AudioSourceConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_onvifXsd__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioSourceConfiguration() { onvifXsd__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioEncoderConfiguration
#define SOAP_TYPE_onvifXsd__AudioEncoderConfiguration (473)
/* onvifXsd:AudioEncoderConfiguration */
class SOAP_CMAC onvifXsd__AudioEncoderConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	enum onvifXsd__AudioEncoding Encoding;	/* required element of type onvifXsd:AudioEncoding */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	onvifXsd__MulticastConfiguration *Multicast;	/* required element of type onvifXsd:MulticastConfiguration */
	std::string SessionTimeout;	/* required element of type xsd:duration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_onvifXsd__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioEncoderConfiguration() { onvifXsd__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoAnalyticsConfiguration
#define SOAP_TYPE_onvifXsd__VideoAnalyticsConfiguration (476)
/* onvifXsd:VideoAnalyticsConfiguration */
class SOAP_CMAC onvifXsd__VideoAnalyticsConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	onvifXsd__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type onvifXsd:AnalyticsEngineConfiguration */
	onvifXsd__RuleEngineConfiguration *RuleEngineConfiguration;	/* required element of type onvifXsd:RuleEngineConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_onvifXsd__VideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoAnalyticsConfiguration() { onvifXsd__VideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__VideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__MetadataConfiguration
#define SOAP_TYPE_onvifXsd__MetadataConfiguration (477)
/* onvifXsd:MetadataConfiguration */
class SOAP_CMAC onvifXsd__MetadataConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	onvifXsd__PTZFilter *PTZStatus;	/* optional element of type onvifXsd:PTZFilter */
	onvifXsd__EventSubscription *Events;	/* optional element of type onvifXsd:EventSubscription */
	bool *Analytics;	/* optional element of type xsd:boolean */
	onvifXsd__MulticastConfiguration *Multicast;	/* required element of type onvifXsd:MulticastConfiguration */
	std::string SessionTimeout;	/* required element of type xsd:duration */
	std::vector<char * >__any;
	onvifXsd__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* optional element of type onvifXsd:AnalyticsEngineConfiguration */
	onvifXsd__MetadataConfigurationExtension *Extension;	/* optional element of type onvifXsd:MetadataConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_onvifXsd__MetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__MetadataConfiguration() { onvifXsd__MetadataConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__MetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoOutput
#define SOAP_TYPE_onvifXsd__VideoOutput (484)
/* onvifXsd:VideoOutput */
class SOAP_CMAC onvifXsd__VideoOutput : public onvifXsd__DeviceEntity
{
public:
	onvifXsd__Layout *Layout;	/* required element of type onvifXsd:Layout */
	onvifXsd__VideoResolution *Resolution;	/* optional element of type onvifXsd:VideoResolution */
	float *RefreshRate;	/* optional element of type xsd:float */
	float *AspectRatio;	/* optional element of type xsd:float */
	onvifXsd__VideoOutputExtension *Extension;	/* optional element of type onvifXsd:VideoOutputExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_onvifXsd__VideoOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoOutput() { onvifXsd__VideoOutput::soap_default(NULL); }
	virtual ~onvifXsd__VideoOutput() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__VideoOutputConfiguration
#define SOAP_TYPE_onvifXsd__VideoOutputConfiguration (486)
/* onvifXsd:VideoOutputConfiguration */
class SOAP_CMAC onvifXsd__VideoOutputConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_onvifXsd__VideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__VideoOutputConfiguration() { onvifXsd__VideoOutputConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__VideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioOutput
#define SOAP_TYPE_onvifXsd__AudioOutput (493)
/* onvifXsd:AudioOutput */
class SOAP_CMAC onvifXsd__AudioOutput : public onvifXsd__DeviceEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_onvifXsd__AudioOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioOutput() { onvifXsd__AudioOutput::soap_default(NULL); }
	virtual ~onvifXsd__AudioOutput() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioOutputConfiguration
#define SOAP_TYPE_onvifXsd__AudioOutputConfiguration (494)
/* onvifXsd:AudioOutputConfiguration */
class SOAP_CMAC onvifXsd__AudioOutputConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string *SendPrimacy;	/* optional element of type xsd:anyURI */
	int OutputLevel;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_onvifXsd__AudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioOutputConfiguration() { onvifXsd__AudioOutputConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__AudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AudioDecoderConfiguration
#define SOAP_TYPE_onvifXsd__AudioDecoderConfiguration (496)
/* onvifXsd:AudioDecoderConfiguration */
class SOAP_CMAC onvifXsd__AudioDecoderConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_onvifXsd__AudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AudioDecoderConfiguration() { onvifXsd__AudioDecoderConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__AudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterface
#define SOAP_TYPE_onvifXsd__NetworkInterface (507)
/* onvifXsd:NetworkInterface */
class SOAP_CMAC onvifXsd__NetworkInterface : public onvifXsd__DeviceEntity
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	onvifXsd__NetworkInterfaceInfo *Info;	/* optional element of type onvifXsd:NetworkInterfaceInfo */
	onvifXsd__NetworkInterfaceLink *Link;	/* optional element of type onvifXsd:NetworkInterfaceLink */
	onvifXsd__IPv4NetworkInterface *IPv4;	/* optional element of type onvifXsd:IPv4NetworkInterface */
	onvifXsd__IPv6NetworkInterface *IPv6;	/* optional element of type onvifXsd:IPv6NetworkInterface */
	onvifXsd__NetworkInterfaceExtension *Extension;	/* optional element of type onvifXsd:NetworkInterfaceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_onvifXsd__NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__NetworkInterface() { onvifXsd__NetworkInterface::soap_default(NULL); }
	virtual ~onvifXsd__NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__CertificateUsage
#define SOAP_TYPE_onvifXsd__CertificateUsage (611)
/* Primitive onvifXsd:CertificateUsage schema type: */
class SOAP_CMAC onvifXsd__CertificateUsage : public xsd__anyType
{
public:
	std::string __item;
	bool Critical;	/* required attribute */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_onvifXsd__CertificateUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__CertificateUsage() { onvifXsd__CertificateUsage::soap_default(NULL); }
	virtual ~onvifXsd__CertificateUsage() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__RelayOutput
#define SOAP_TYPE_onvifXsd__RelayOutput (620)
/* onvifXsd:RelayOutput */
class SOAP_CMAC onvifXsd__RelayOutput : public onvifXsd__DeviceEntity
{
public:
	onvifXsd__RelayOutputSettings *Properties;	/* required element of type onvifXsd:RelayOutputSettings */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_onvifXsd__RelayOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__RelayOutput() { onvifXsd__RelayOutput::soap_default(NULL); }
	virtual ~onvifXsd__RelayOutput() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__DigitalInput
#define SOAP_TYPE_onvifXsd__DigitalInput (621)
/* onvifXsd:DigitalInput */
class SOAP_CMAC onvifXsd__DigitalInput : public onvifXsd__DeviceEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_onvifXsd__DigitalInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__DigitalInput() { onvifXsd__DigitalInput::soap_default(NULL); }
	virtual ~onvifXsd__DigitalInput() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZNode
#define SOAP_TYPE_onvifXsd__PTZNode (622)
/* onvifXsd:PTZNode */
class SOAP_CMAC onvifXsd__PTZNode : public onvifXsd__DeviceEntity
{
public:
	std::string *Name;	/* optional element of type onvifXsd:Name */
	onvifXsd__PTZSpaces *SupportedPTZSpaces;	/* required element of type onvifXsd:PTZSpaces */
	int MaximumNumberOfPresets;	/* required element of type xsd:int */
	bool HomeSupported;	/* required element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type onvifXsd:AuxiliaryData */
	onvifXsd__PTZNodeExtension *Extension;	/* optional element of type onvifXsd:PTZNodeExtension */
	bool *FixedHomePosition;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 622; } /* = unique id SOAP_TYPE_onvifXsd__PTZNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZNode() { onvifXsd__PTZNode::soap_default(NULL); }
	virtual ~onvifXsd__PTZNode() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__PTZConfiguration
#define SOAP_TYPE_onvifXsd__PTZConfiguration (627)
/* onvifXsd:PTZConfiguration */
class SOAP_CMAC onvifXsd__PTZConfiguration : public onvifXsd__ConfigurationEntity
{
public:
	std::string NodeToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string *DefaultAbsolutePantTiltPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:anyURI */
	onvifXsd__PTZSpeed *DefaultPTZSpeed;	/* optional element of type onvifXsd:PTZSpeed */
	std::string *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	onvifXsd__PanTiltLimits *PanTiltLimits;	/* optional element of type onvifXsd:PanTiltLimits */
	onvifXsd__ZoomLimits *ZoomLimits;	/* optional element of type onvifXsd:ZoomLimits */
	onvifXsd__PTZConfigurationExtension *Extension;	/* optional element of type onvifXsd:PTZConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_onvifXsd__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__PTZConfiguration() { onvifXsd__PTZConfiguration::soap_default(NULL); }
	virtual ~onvifXsd__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__Object
#define SOAP_TYPE_onvifXsd__Object (747)
/* onvifXsd:Object */
class SOAP_CMAC onvifXsd__Object : public onvifXsd__ObjectId
{
public:
	onvifXsd__Appearance *Appearance;	/* optional element of type onvifXsd:Appearance */
	onvifXsd__Behaviour *Behaviour;	/* optional element of type onvifXsd:Behaviour */
	onvifXsd__ObjectExtension *Extension;	/* optional element of type onvifXsd:ObjectExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 747; } /* = unique id SOAP_TYPE_onvifXsd__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__Object() { onvifXsd__Object::soap_default(NULL); }
	virtual ~onvifXsd__Object() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__EventFilter
#define SOAP_TYPE_onvifXsd__EventFilter (806)
/* onvifXsd:EventFilter */
class SOAP_CMAC onvifXsd__EventFilter : public oasisWsnB2__FilterType
{
public:
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE_onvifXsd__EventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__EventFilter() { onvifXsd__EventFilter::soap_default(NULL); }
	virtual ~onvifXsd__EventFilter() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngine
#define SOAP_TYPE_onvifXsd__AnalyticsEngine (842)
/* onvifXsd:AnalyticsEngine */
class SOAP_CMAC onvifXsd__AnalyticsEngine : public onvifXsd__ConfigurationEntity
{
public:
	onvifXsd__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type onvifXsd:AnalyticsDeviceEngineConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngine() { onvifXsd__AnalyticsEngine::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngine() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngineInput
#define SOAP_TYPE_onvifXsd__AnalyticsEngineInput (848)
/* onvifXsd:AnalyticsEngineInput */
class SOAP_CMAC onvifXsd__AnalyticsEngineInput : public onvifXsd__ConfigurationEntity
{
public:
	onvifXsd__SourceIdentification *SourceIdentification;	/* required element of type onvifXsd:SourceIdentification */
	onvifXsd__VideoEncoderConfiguration *VideoInput;	/* required element of type onvifXsd:VideoEncoderConfiguration */
	onvifXsd__MetadataInput *MetadataInput;	/* required element of type onvifXsd:MetadataInput */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 848; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngineInput() { onvifXsd__AnalyticsEngineInput::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE_onvifXsd__AnalyticsEngineControl
#define SOAP_TYPE_onvifXsd__AnalyticsEngineControl (853)
/* onvifXsd:AnalyticsEngineControl */
class SOAP_CMAC onvifXsd__AnalyticsEngineControl : public onvifXsd__ConfigurationEntity
{
public:
	std::string EngineToken;	/* required element of type onvifXsd:ReferenceToken */
	std::string EngineConfigToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<std::string >InputToken;	/* required element of type onvifXsd:ReferenceToken */
	std::vector<std::string >ReceiverToken;	/* required element of type onvifXsd:ReferenceToken */
	onvifXsd__MulticastConfiguration *Multicast;	/* optional element of type onvifXsd:MulticastConfiguration */
	onvifXsd__Config *Subscription;	/* required element of type onvifXsd:Config */
	enum onvifXsd__ModeOfOperation Mode;	/* required element of type onvifXsd:ModeOfOperation */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE_onvifXsd__AnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifXsd__AnalyticsEngineControl() { onvifXsd__AnalyticsEngineControl::soap_default(NULL); }
	virtual ~onvifXsd__AnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__SerialPort
#define SOAP_TYPE_onvifDeviceIO__SerialPort (1091)
/* onvifDeviceIO:SerialPort */
class SOAP_CMAC onvifDeviceIO__SerialPort : public onvifXsd__DeviceEntity
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 1091; } /* = unique id SOAP_TYPE_onvifDeviceIO__SerialPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onvifDeviceIO__SerialPort() { onvifDeviceIO__SerialPort::soap_default(NULL); }
	virtual ~onvifDeviceIO__SerialPort() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (1944)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	oasisWsnB2__PauseFailedFaultType *oasisWsnB2__PauseFailedFault;	/* optional element of type oasisWsnB2:PauseFailedFaultType */
	oasisWsrfR2__ResourceUnknownFaultType *oasisWsrfR2__ResourceUnknownFault;	/* optional element of type oasisWsrfR2:ResourceUnknownFaultType */
	oasisWsnB2__ResumeFailedFaultType *oasisWsnB2__ResumeFailedFault;	/* optional element of type oasisWsnB2:ResumeFailedFaultType */
	oasisWsnB2__UnableToDestroySubscriptionFaultType *oasisWsnB2__UnableToDestroySubscriptionFault;	/* optional element of type oasisWsnB2:UnableToDestroySubscriptionFaultType */
	oasisWsnB2__UnacceptableTerminationTimeFaultType *oasisWsnB2__UnacceptableTerminationTimeFault;	/* optional element of type oasisWsnB2:UnacceptableTerminationTimeFaultType */
	oasisWsnB2__UnableToCreatePullPointFaultType *oasisWsnB2__UnableToCreatePullPointFault;	/* optional element of type oasisWsnB2:UnableToCreatePullPointFaultType */
	oasisWsnB2__InvalidFilterFaultType *oasisWsnB2__InvalidFilterFault;	/* optional element of type oasisWsnB2:InvalidFilterFaultType */
	oasisWsnB2__InvalidMessageContentExpressionFaultType *oasisWsnB2__InvalidMessageContentExpressionFault;	/* optional element of type oasisWsnB2:InvalidMessageContentExpressionFaultType */
	oasisWsnB2__InvalidProducerPropertiesExpressionFaultType *oasisWsnB2__InvalidProducerPropertiesExpressionFault;	/* optional element of type oasisWsnB2:InvalidProducerPropertiesExpressionFaultType */
	oasisWsnB2__InvalidTopicExpressionFaultType *oasisWsnB2__InvalidTopicExpressionFault;	/* optional element of type oasisWsnB2:InvalidTopicExpressionFaultType */
	oasisWsnB2__NotifyMessageNotSupportedFaultType *oasisWsnB2__NotifyMessageNotSupportedFault;	/* optional element of type oasisWsnB2:NotifyMessageNotSupportedFaultType */
	oasisWsnB2__SubscribeCreationFailedFaultType *oasisWsnB2__SubscribeCreationFailedFault;	/* optional element of type oasisWsnB2:SubscribeCreationFailedFaultType */
	oasisWsnB2__TopicExpressionDialectUnknownFaultType *oasisWsnB2__TopicExpressionDialectUnknownFault;	/* optional element of type oasisWsnB2:TopicExpressionDialectUnknownFaultType */
	oasisWsnB2__TopicNotSupportedFaultType *oasisWsnB2__TopicNotSupportedFault;	/* optional element of type oasisWsnB2:TopicNotSupportedFaultType */
	oasisWsnB2__UnacceptableInitialTerminationTimeFaultType *oasisWsnB2__UnacceptableInitialTerminationTimeFault;	/* optional element of type oasisWsnB2:UnacceptableInitialTerminationTimeFaultType */
	oasisWsnB2__UnrecognizedPolicyRequestFaultType *oasisWsnB2__UnrecognizedPolicyRequestFault;	/* optional element of type oasisWsnB2:UnrecognizedPolicyRequestFaultType */
	oasisWsnB2__UnsupportedPolicyRequestFaultType *oasisWsnB2__UnsupportedPolicyRequestFault;	/* optional element of type oasisWsnB2:UnsupportedPolicyRequestFaultType */
	oasisWsnB2__MultipleTopicsSpecifiedFaultType *oasisWsnB2__MultipleTopicsSpecifiedFault;	/* optional element of type oasisWsnB2:MultipleTopicsSpecifiedFaultType */
	oasisWsnB2__NoCurrentMessageOnTopicFaultType *oasisWsnB2__NoCurrentMessageOnTopicFault;	/* optional element of type oasisWsnB2:NoCurrentMessageOnTopicFaultType */
	oasisWsnB2__UnableToDestroyPullPointFaultType *oasisWsnB2__UnableToDestroyPullPointFault;	/* optional element of type oasisWsnB2:UnableToDestroyPullPointFaultType */
	oasisWsnB2__UnableToGetMessagesFaultType *oasisWsnB2__UnableToGetMessagesFault;	/* optional element of type oasisWsnB2:UnableToGetMessagesFaultType */
	_onvifEvents__PullMessagesFaultResponse *onvifEvents__PullMessagesFaultResponse;	/* optional element of type onvifEvents:PullMessagesFaultResponse */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef SOAP_TYPE___ns2__Renew
#define SOAP_TYPE___ns2__Renew (1971)
/* Operation wrapper: */
struct __ns2__Renew
{
public:
	_oasisWsnB2__Renew *oasisWsnB2__Renew;	/* optional element of type oasisWsnB2:Renew */
};
#endif

#ifndef SOAP_TYPE___ns2__Unsubscribe
#define SOAP_TYPE___ns2__Unsubscribe (1975)
/* Operation wrapper: */
struct __ns2__Unsubscribe
{
public:
	_oasisWsnB2__Unsubscribe *oasisWsnB2__Unsubscribe;	/* optional element of type oasisWsnB2:Unsubscribe */
};
#endif

#ifndef SOAP_TYPE___ns2__PauseSubscription
#define SOAP_TYPE___ns2__PauseSubscription (1979)
/* Operation wrapper: */
struct __ns2__PauseSubscription
{
public:
	_oasisWsnB2__PauseSubscription *oasisWsnB2__PauseSubscription;	/* optional element of type oasisWsnB2:PauseSubscription */
};
#endif

#ifndef SOAP_TYPE___ns2__ResumeSubscription
#define SOAP_TYPE___ns2__ResumeSubscription (1983)
/* Operation wrapper: */
struct __ns2__ResumeSubscription
{
public:
	_oasisWsnB2__ResumeSubscription *oasisWsnB2__ResumeSubscription;	/* optional element of type oasisWsnB2:ResumeSubscription */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetServices
#define SOAP_TYPE___onvifDevice__GetServices (1987)
/* Operation wrapper: */
struct __onvifDevice__GetServices
{
public:
	_onvifDevice__GetServices *onvifDevice__GetServices;	/* optional element of type onvifDevice:GetServices */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetServiceCapabilities
#define SOAP_TYPE___onvifDevice__GetServiceCapabilities (1991)
/* Operation wrapper: */
struct __onvifDevice__GetServiceCapabilities
{
public:
	_onvifDevice__GetServiceCapabilities *onvifDevice__GetServiceCapabilities;	/* optional element of type onvifDevice:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDeviceInformation
#define SOAP_TYPE___onvifDevice__GetDeviceInformation (1995)
/* Operation wrapper: */
struct __onvifDevice__GetDeviceInformation
{
public:
	_onvifDevice__GetDeviceInformation *onvifDevice__GetDeviceInformation;	/* optional element of type onvifDevice:GetDeviceInformation */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetSystemDateAndTime
#define SOAP_TYPE___onvifDevice__SetSystemDateAndTime (1999)
/* Operation wrapper: */
struct __onvifDevice__SetSystemDateAndTime
{
public:
	_onvifDevice__SetSystemDateAndTime *onvifDevice__SetSystemDateAndTime;	/* optional element of type onvifDevice:SetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemDateAndTime
#define SOAP_TYPE___onvifDevice__GetSystemDateAndTime (2003)
/* Operation wrapper: */
struct __onvifDevice__GetSystemDateAndTime
{
public:
	_onvifDevice__GetSystemDateAndTime *onvifDevice__GetSystemDateAndTime;	/* optional element of type onvifDevice:GetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetSystemFactoryDefault
#define SOAP_TYPE___onvifDevice__SetSystemFactoryDefault (2007)
/* Operation wrapper: */
struct __onvifDevice__SetSystemFactoryDefault
{
public:
	_onvifDevice__SetSystemFactoryDefault *onvifDevice__SetSystemFactoryDefault;	/* optional element of type onvifDevice:SetSystemFactoryDefault */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__UpgradeSystemFirmware
#define SOAP_TYPE___onvifDevice__UpgradeSystemFirmware (2011)
/* Operation wrapper: */
struct __onvifDevice__UpgradeSystemFirmware
{
public:
	_onvifDevice__UpgradeSystemFirmware *onvifDevice__UpgradeSystemFirmware;	/* optional element of type onvifDevice:UpgradeSystemFirmware */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SystemReboot
#define SOAP_TYPE___onvifDevice__SystemReboot (2015)
/* Operation wrapper: */
struct __onvifDevice__SystemReboot
{
public:
	_onvifDevice__SystemReboot *onvifDevice__SystemReboot;	/* optional element of type onvifDevice:SystemReboot */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__RestoreSystem
#define SOAP_TYPE___onvifDevice__RestoreSystem (2019)
/* Operation wrapper: */
struct __onvifDevice__RestoreSystem
{
public:
	_onvifDevice__RestoreSystem *onvifDevice__RestoreSystem;	/* optional element of type onvifDevice:RestoreSystem */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemBackup
#define SOAP_TYPE___onvifDevice__GetSystemBackup (2023)
/* Operation wrapper: */
struct __onvifDevice__GetSystemBackup
{
public:
	_onvifDevice__GetSystemBackup *onvifDevice__GetSystemBackup;	/* optional element of type onvifDevice:GetSystemBackup */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemLog
#define SOAP_TYPE___onvifDevice__GetSystemLog (2027)
/* Operation wrapper: */
struct __onvifDevice__GetSystemLog
{
public:
	_onvifDevice__GetSystemLog *onvifDevice__GetSystemLog;	/* optional element of type onvifDevice:GetSystemLog */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemSupportInformation
#define SOAP_TYPE___onvifDevice__GetSystemSupportInformation (2031)
/* Operation wrapper: */
struct __onvifDevice__GetSystemSupportInformation
{
public:
	_onvifDevice__GetSystemSupportInformation *onvifDevice__GetSystemSupportInformation;	/* optional element of type onvifDevice:GetSystemSupportInformation */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetScopes
#define SOAP_TYPE___onvifDevice__GetScopes (2035)
/* Operation wrapper: */
struct __onvifDevice__GetScopes
{
public:
	_onvifDevice__GetScopes *onvifDevice__GetScopes;	/* optional element of type onvifDevice:GetScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetScopes
#define SOAP_TYPE___onvifDevice__SetScopes (2039)
/* Operation wrapper: */
struct __onvifDevice__SetScopes
{
public:
	_onvifDevice__SetScopes *onvifDevice__SetScopes;	/* optional element of type onvifDevice:SetScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__AddScopes
#define SOAP_TYPE___onvifDevice__AddScopes (2043)
/* Operation wrapper: */
struct __onvifDevice__AddScopes
{
public:
	_onvifDevice__AddScopes *onvifDevice__AddScopes;	/* optional element of type onvifDevice:AddScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__RemoveScopes
#define SOAP_TYPE___onvifDevice__RemoveScopes (2047)
/* Operation wrapper: */
struct __onvifDevice__RemoveScopes
{
public:
	_onvifDevice__RemoveScopes *onvifDevice__RemoveScopes;	/* optional element of type onvifDevice:RemoveScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDiscoveryMode
#define SOAP_TYPE___onvifDevice__GetDiscoveryMode (2051)
/* Operation wrapper: */
struct __onvifDevice__GetDiscoveryMode
{
public:
	_onvifDevice__GetDiscoveryMode *onvifDevice__GetDiscoveryMode;	/* optional element of type onvifDevice:GetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDiscoveryMode
#define SOAP_TYPE___onvifDevice__SetDiscoveryMode (2055)
/* Operation wrapper: */
struct __onvifDevice__SetDiscoveryMode
{
public:
	_onvifDevice__SetDiscoveryMode *onvifDevice__SetDiscoveryMode;	/* optional element of type onvifDevice:SetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetRemoteDiscoveryMode
#define SOAP_TYPE___onvifDevice__GetRemoteDiscoveryMode (2059)
/* Operation wrapper: */
struct __onvifDevice__GetRemoteDiscoveryMode
{
public:
	_onvifDevice__GetRemoteDiscoveryMode *onvifDevice__GetRemoteDiscoveryMode;	/* optional element of type onvifDevice:GetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRemoteDiscoveryMode
#define SOAP_TYPE___onvifDevice__SetRemoteDiscoveryMode (2063)
/* Operation wrapper: */
struct __onvifDevice__SetRemoteDiscoveryMode
{
public:
	_onvifDevice__SetRemoteDiscoveryMode *onvifDevice__SetRemoteDiscoveryMode;	/* optional element of type onvifDevice:SetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDPAddresses
#define SOAP_TYPE___onvifDevice__GetDPAddresses (2067)
/* Operation wrapper: */
struct __onvifDevice__GetDPAddresses
{
public:
	_onvifDevice__GetDPAddresses *onvifDevice__GetDPAddresses;	/* optional element of type onvifDevice:GetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetEndpointReference
#define SOAP_TYPE___onvifDevice__GetEndpointReference (2071)
/* Operation wrapper: */
struct __onvifDevice__GetEndpointReference
{
public:
	_onvifDevice__GetEndpointReference *onvifDevice__GetEndpointReference;	/* optional element of type onvifDevice:GetEndpointReference */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetRemoteUser
#define SOAP_TYPE___onvifDevice__GetRemoteUser (2075)
/* Operation wrapper: */
struct __onvifDevice__GetRemoteUser
{
public:
	_onvifDevice__GetRemoteUser *onvifDevice__GetRemoteUser;	/* optional element of type onvifDevice:GetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRemoteUser
#define SOAP_TYPE___onvifDevice__SetRemoteUser (2079)
/* Operation wrapper: */
struct __onvifDevice__SetRemoteUser
{
public:
	_onvifDevice__SetRemoteUser *onvifDevice__SetRemoteUser;	/* optional element of type onvifDevice:SetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetUsers
#define SOAP_TYPE___onvifDevice__GetUsers (2083)
/* Operation wrapper: */
struct __onvifDevice__GetUsers
{
public:
	_onvifDevice__GetUsers *onvifDevice__GetUsers;	/* optional element of type onvifDevice:GetUsers */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__CreateUsers
#define SOAP_TYPE___onvifDevice__CreateUsers (2087)
/* Operation wrapper: */
struct __onvifDevice__CreateUsers
{
public:
	_onvifDevice__CreateUsers *onvifDevice__CreateUsers;	/* optional element of type onvifDevice:CreateUsers */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__DeleteUsers
#define SOAP_TYPE___onvifDevice__DeleteUsers (2091)
/* Operation wrapper: */
struct __onvifDevice__DeleteUsers
{
public:
	_onvifDevice__DeleteUsers *onvifDevice__DeleteUsers;	/* optional element of type onvifDevice:DeleteUsers */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetUser
#define SOAP_TYPE___onvifDevice__SetUser (2095)
/* Operation wrapper: */
struct __onvifDevice__SetUser
{
public:
	_onvifDevice__SetUser *onvifDevice__SetUser;	/* optional element of type onvifDevice:SetUser */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetWsdlUrl
#define SOAP_TYPE___onvifDevice__GetWsdlUrl (2099)
/* Operation wrapper: */
struct __onvifDevice__GetWsdlUrl
{
public:
	_onvifDevice__GetWsdlUrl *onvifDevice__GetWsdlUrl;	/* optional element of type onvifDevice:GetWsdlUrl */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCapabilities
#define SOAP_TYPE___onvifDevice__GetCapabilities (2103)
/* Operation wrapper: */
struct __onvifDevice__GetCapabilities
{
public:
	_onvifDevice__GetCapabilities *onvifDevice__GetCapabilities;	/* optional element of type onvifDevice:GetCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDPAddresses
#define SOAP_TYPE___onvifDevice__SetDPAddresses (2107)
/* Operation wrapper: */
struct __onvifDevice__SetDPAddresses
{
public:
	_onvifDevice__SetDPAddresses *onvifDevice__SetDPAddresses;	/* optional element of type onvifDevice:SetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetHostname
#define SOAP_TYPE___onvifDevice__GetHostname (2111)
/* Operation wrapper: */
struct __onvifDevice__GetHostname
{
public:
	_onvifDevice__GetHostname *onvifDevice__GetHostname;	/* optional element of type onvifDevice:GetHostname */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetHostname
#define SOAP_TYPE___onvifDevice__SetHostname (2115)
/* Operation wrapper: */
struct __onvifDevice__SetHostname
{
public:
	_onvifDevice__SetHostname *onvifDevice__SetHostname;	/* optional element of type onvifDevice:SetHostname */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetHostnameFromDHCP
#define SOAP_TYPE___onvifDevice__SetHostnameFromDHCP (2119)
/* Operation wrapper: */
struct __onvifDevice__SetHostnameFromDHCP
{
public:
	_onvifDevice__SetHostnameFromDHCP *onvifDevice__SetHostnameFromDHCP;	/* optional element of type onvifDevice:SetHostnameFromDHCP */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDNS
#define SOAP_TYPE___onvifDevice__GetDNS (2123)
/* Operation wrapper: */
struct __onvifDevice__GetDNS
{
public:
	_onvifDevice__GetDNS *onvifDevice__GetDNS;	/* optional element of type onvifDevice:GetDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDNS
#define SOAP_TYPE___onvifDevice__SetDNS (2127)
/* Operation wrapper: */
struct __onvifDevice__SetDNS
{
public:
	_onvifDevice__SetDNS *onvifDevice__SetDNS;	/* optional element of type onvifDevice:SetDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNTP
#define SOAP_TYPE___onvifDevice__GetNTP (2131)
/* Operation wrapper: */
struct __onvifDevice__GetNTP
{
public:
	_onvifDevice__GetNTP *onvifDevice__GetNTP;	/* optional element of type onvifDevice:GetNTP */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNTP
#define SOAP_TYPE___onvifDevice__SetNTP (2135)
/* Operation wrapper: */
struct __onvifDevice__SetNTP
{
public:
	_onvifDevice__SetNTP *onvifDevice__SetNTP;	/* optional element of type onvifDevice:SetNTP */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDynamicDNS
#define SOAP_TYPE___onvifDevice__GetDynamicDNS (2139)
/* Operation wrapper: */
struct __onvifDevice__GetDynamicDNS
{
public:
	_onvifDevice__GetDynamicDNS *onvifDevice__GetDynamicDNS;	/* optional element of type onvifDevice:GetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDynamicDNS
#define SOAP_TYPE___onvifDevice__SetDynamicDNS (2143)
/* Operation wrapper: */
struct __onvifDevice__SetDynamicDNS
{
public:
	_onvifDevice__SetDynamicDNS *onvifDevice__SetDynamicDNS;	/* optional element of type onvifDevice:SetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNetworkInterfaces
#define SOAP_TYPE___onvifDevice__GetNetworkInterfaces (2147)
/* Operation wrapper: */
struct __onvifDevice__GetNetworkInterfaces
{
public:
	_onvifDevice__GetNetworkInterfaces *onvifDevice__GetNetworkInterfaces;	/* optional element of type onvifDevice:GetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNetworkInterfaces
#define SOAP_TYPE___onvifDevice__SetNetworkInterfaces (2151)
/* Operation wrapper: */
struct __onvifDevice__SetNetworkInterfaces
{
public:
	_onvifDevice__SetNetworkInterfaces *onvifDevice__SetNetworkInterfaces;	/* optional element of type onvifDevice:SetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNetworkProtocols
#define SOAP_TYPE___onvifDevice__GetNetworkProtocols (2155)
/* Operation wrapper: */
struct __onvifDevice__GetNetworkProtocols
{
public:
	_onvifDevice__GetNetworkProtocols *onvifDevice__GetNetworkProtocols;	/* optional element of type onvifDevice:GetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNetworkProtocols
#define SOAP_TYPE___onvifDevice__SetNetworkProtocols (2159)
/* Operation wrapper: */
struct __onvifDevice__SetNetworkProtocols
{
public:
	_onvifDevice__SetNetworkProtocols *onvifDevice__SetNetworkProtocols;	/* optional element of type onvifDevice:SetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNetworkDefaultGateway
#define SOAP_TYPE___onvifDevice__GetNetworkDefaultGateway (2163)
/* Operation wrapper: */
struct __onvifDevice__GetNetworkDefaultGateway
{
public:
	_onvifDevice__GetNetworkDefaultGateway *onvifDevice__GetNetworkDefaultGateway;	/* optional element of type onvifDevice:GetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNetworkDefaultGateway
#define SOAP_TYPE___onvifDevice__SetNetworkDefaultGateway (2167)
/* Operation wrapper: */
struct __onvifDevice__SetNetworkDefaultGateway
{
public:
	_onvifDevice__SetNetworkDefaultGateway *onvifDevice__SetNetworkDefaultGateway;	/* optional element of type onvifDevice:SetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetZeroConfiguration
#define SOAP_TYPE___onvifDevice__GetZeroConfiguration (2171)
/* Operation wrapper: */
struct __onvifDevice__GetZeroConfiguration
{
public:
	_onvifDevice__GetZeroConfiguration *onvifDevice__GetZeroConfiguration;	/* optional element of type onvifDevice:GetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetZeroConfiguration
#define SOAP_TYPE___onvifDevice__SetZeroConfiguration (2175)
/* Operation wrapper: */
struct __onvifDevice__SetZeroConfiguration
{
public:
	_onvifDevice__SetZeroConfiguration *onvifDevice__SetZeroConfiguration;	/* optional element of type onvifDevice:SetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetIPAddressFilter
#define SOAP_TYPE___onvifDevice__GetIPAddressFilter (2179)
/* Operation wrapper: */
struct __onvifDevice__GetIPAddressFilter
{
public:
	_onvifDevice__GetIPAddressFilter *onvifDevice__GetIPAddressFilter;	/* optional element of type onvifDevice:GetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetIPAddressFilter
#define SOAP_TYPE___onvifDevice__SetIPAddressFilter (2183)
/* Operation wrapper: */
struct __onvifDevice__SetIPAddressFilter
{
public:
	_onvifDevice__SetIPAddressFilter *onvifDevice__SetIPAddressFilter;	/* optional element of type onvifDevice:SetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__AddIPAddressFilter
#define SOAP_TYPE___onvifDevice__AddIPAddressFilter (2187)
/* Operation wrapper: */
struct __onvifDevice__AddIPAddressFilter
{
public:
	_onvifDevice__AddIPAddressFilter *onvifDevice__AddIPAddressFilter;	/* optional element of type onvifDevice:AddIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__RemoveIPAddressFilter
#define SOAP_TYPE___onvifDevice__RemoveIPAddressFilter (2191)
/* Operation wrapper: */
struct __onvifDevice__RemoveIPAddressFilter
{
public:
	_onvifDevice__RemoveIPAddressFilter *onvifDevice__RemoveIPAddressFilter;	/* optional element of type onvifDevice:RemoveIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetAccessPolicy
#define SOAP_TYPE___onvifDevice__GetAccessPolicy (2195)
/* Operation wrapper: */
struct __onvifDevice__GetAccessPolicy
{
public:
	_onvifDevice__GetAccessPolicy *onvifDevice__GetAccessPolicy;	/* optional element of type onvifDevice:GetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetAccessPolicy
#define SOAP_TYPE___onvifDevice__SetAccessPolicy (2199)
/* Operation wrapper: */
struct __onvifDevice__SetAccessPolicy
{
public:
	_onvifDevice__SetAccessPolicy *onvifDevice__SetAccessPolicy;	/* optional element of type onvifDevice:SetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__CreateCertificate
#define SOAP_TYPE___onvifDevice__CreateCertificate (2203)
/* Operation wrapper: */
struct __onvifDevice__CreateCertificate
{
public:
	_onvifDevice__CreateCertificate *onvifDevice__CreateCertificate;	/* optional element of type onvifDevice:CreateCertificate */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCertificates
#define SOAP_TYPE___onvifDevice__GetCertificates (2207)
/* Operation wrapper: */
struct __onvifDevice__GetCertificates
{
public:
	_onvifDevice__GetCertificates *onvifDevice__GetCertificates;	/* optional element of type onvifDevice:GetCertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCertificatesStatus
#define SOAP_TYPE___onvifDevice__GetCertificatesStatus (2211)
/* Operation wrapper: */
struct __onvifDevice__GetCertificatesStatus
{
public:
	_onvifDevice__GetCertificatesStatus *onvifDevice__GetCertificatesStatus;	/* optional element of type onvifDevice:GetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetCertificatesStatus
#define SOAP_TYPE___onvifDevice__SetCertificatesStatus (2215)
/* Operation wrapper: */
struct __onvifDevice__SetCertificatesStatus
{
public:
	_onvifDevice__SetCertificatesStatus *onvifDevice__SetCertificatesStatus;	/* optional element of type onvifDevice:SetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__DeleteCertificates
#define SOAP_TYPE___onvifDevice__DeleteCertificates (2219)
/* Operation wrapper: */
struct __onvifDevice__DeleteCertificates
{
public:
	_onvifDevice__DeleteCertificates *onvifDevice__DeleteCertificates;	/* optional element of type onvifDevice:DeleteCertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetPkcs10Request
#define SOAP_TYPE___onvifDevice__GetPkcs10Request (2223)
/* Operation wrapper: */
struct __onvifDevice__GetPkcs10Request
{
public:
	_onvifDevice__GetPkcs10Request *onvifDevice__GetPkcs10Request;	/* optional element of type onvifDevice:GetPkcs10Request */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__LoadCertificates
#define SOAP_TYPE___onvifDevice__LoadCertificates (2227)
/* Operation wrapper: */
struct __onvifDevice__LoadCertificates
{
public:
	_onvifDevice__LoadCertificates *onvifDevice__LoadCertificates;	/* optional element of type onvifDevice:LoadCertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetClientCertificateMode
#define SOAP_TYPE___onvifDevice__GetClientCertificateMode (2231)
/* Operation wrapper: */
struct __onvifDevice__GetClientCertificateMode
{
public:
	_onvifDevice__GetClientCertificateMode *onvifDevice__GetClientCertificateMode;	/* optional element of type onvifDevice:GetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetClientCertificateMode
#define SOAP_TYPE___onvifDevice__SetClientCertificateMode (2235)
/* Operation wrapper: */
struct __onvifDevice__SetClientCertificateMode
{
public:
	_onvifDevice__SetClientCertificateMode *onvifDevice__SetClientCertificateMode;	/* optional element of type onvifDevice:SetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetRelayOutputs
#define SOAP_TYPE___onvifDevice__GetRelayOutputs (2239)
/* Operation wrapper: */
struct __onvifDevice__GetRelayOutputs
{
public:
	_onvifDevice__GetRelayOutputs *onvifDevice__GetRelayOutputs;	/* optional element of type onvifDevice:GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRelayOutputSettings
#define SOAP_TYPE___onvifDevice__SetRelayOutputSettings (2243)
/* Operation wrapper: */
struct __onvifDevice__SetRelayOutputSettings
{
public:
	_onvifDevice__SetRelayOutputSettings *onvifDevice__SetRelayOutputSettings;	/* optional element of type onvifDevice:SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRelayOutputState
#define SOAP_TYPE___onvifDevice__SetRelayOutputState (2247)
/* Operation wrapper: */
struct __onvifDevice__SetRelayOutputState
{
public:
	_onvifDevice__SetRelayOutputState *onvifDevice__SetRelayOutputState;	/* optional element of type onvifDevice:SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SendAuxiliaryCommand
#define SOAP_TYPE___onvifDevice__SendAuxiliaryCommand (2251)
/* Operation wrapper: */
struct __onvifDevice__SendAuxiliaryCommand
{
public:
	_onvifDevice__SendAuxiliaryCommand *onvifDevice__SendAuxiliaryCommand;	/* optional element of type onvifDevice:SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCACertificates
#define SOAP_TYPE___onvifDevice__GetCACertificates (2255)
/* Operation wrapper: */
struct __onvifDevice__GetCACertificates
{
public:
	_onvifDevice__GetCACertificates *onvifDevice__GetCACertificates;	/* optional element of type onvifDevice:GetCACertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__LoadCertificateWithPrivateKey
#define SOAP_TYPE___onvifDevice__LoadCertificateWithPrivateKey (2259)
/* Operation wrapper: */
struct __onvifDevice__LoadCertificateWithPrivateKey
{
public:
	_onvifDevice__LoadCertificateWithPrivateKey *onvifDevice__LoadCertificateWithPrivateKey;	/* optional element of type onvifDevice:LoadCertificateWithPrivateKey */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCertificateInformation
#define SOAP_TYPE___onvifDevice__GetCertificateInformation (2263)
/* Operation wrapper: */
struct __onvifDevice__GetCertificateInformation
{
public:
	_onvifDevice__GetCertificateInformation *onvifDevice__GetCertificateInformation;	/* optional element of type onvifDevice:GetCertificateInformation */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__LoadCACertificates
#define SOAP_TYPE___onvifDevice__LoadCACertificates (2267)
/* Operation wrapper: */
struct __onvifDevice__LoadCACertificates
{
public:
	_onvifDevice__LoadCACertificates *onvifDevice__LoadCACertificates;	/* optional element of type onvifDevice:LoadCACertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__CreateDot1XConfiguration
#define SOAP_TYPE___onvifDevice__CreateDot1XConfiguration (2271)
/* Operation wrapper: */
struct __onvifDevice__CreateDot1XConfiguration
{
public:
	_onvifDevice__CreateDot1XConfiguration *onvifDevice__CreateDot1XConfiguration;	/* optional element of type onvifDevice:CreateDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDot1XConfiguration
#define SOAP_TYPE___onvifDevice__SetDot1XConfiguration (2275)
/* Operation wrapper: */
struct __onvifDevice__SetDot1XConfiguration
{
public:
	_onvifDevice__SetDot1XConfiguration *onvifDevice__SetDot1XConfiguration;	/* optional element of type onvifDevice:SetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot1XConfiguration
#define SOAP_TYPE___onvifDevice__GetDot1XConfiguration (2279)
/* Operation wrapper: */
struct __onvifDevice__GetDot1XConfiguration
{
public:
	_onvifDevice__GetDot1XConfiguration *onvifDevice__GetDot1XConfiguration;	/* optional element of type onvifDevice:GetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot1XConfigurations
#define SOAP_TYPE___onvifDevice__GetDot1XConfigurations (2283)
/* Operation wrapper: */
struct __onvifDevice__GetDot1XConfigurations
{
public:
	_onvifDevice__GetDot1XConfigurations *onvifDevice__GetDot1XConfigurations;	/* optional element of type onvifDevice:GetDot1XConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__DeleteDot1XConfiguration
#define SOAP_TYPE___onvifDevice__DeleteDot1XConfiguration (2287)
/* Operation wrapper: */
struct __onvifDevice__DeleteDot1XConfiguration
{
public:
	_onvifDevice__DeleteDot1XConfiguration *onvifDevice__DeleteDot1XConfiguration;	/* optional element of type onvifDevice:DeleteDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot11Capabilities
#define SOAP_TYPE___onvifDevice__GetDot11Capabilities (2291)
/* Operation wrapper: */
struct __onvifDevice__GetDot11Capabilities
{
public:
	_onvifDevice__GetDot11Capabilities *onvifDevice__GetDot11Capabilities;	/* optional element of type onvifDevice:GetDot11Capabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot11Status
#define SOAP_TYPE___onvifDevice__GetDot11Status (2295)
/* Operation wrapper: */
struct __onvifDevice__GetDot11Status
{
public:
	_onvifDevice__GetDot11Status *onvifDevice__GetDot11Status;	/* optional element of type onvifDevice:GetDot11Status */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__ScanAvailableDot11Networks
#define SOAP_TYPE___onvifDevice__ScanAvailableDot11Networks (2299)
/* Operation wrapper: */
struct __onvifDevice__ScanAvailableDot11Networks
{
public:
	_onvifDevice__ScanAvailableDot11Networks *onvifDevice__ScanAvailableDot11Networks;	/* optional element of type onvifDevice:ScanAvailableDot11Networks */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemUris
#define SOAP_TYPE___onvifDevice__GetSystemUris (2303)
/* Operation wrapper: */
struct __onvifDevice__GetSystemUris
{
public:
	_onvifDevice__GetSystemUris *onvifDevice__GetSystemUris;	/* optional element of type onvifDevice:GetSystemUris */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__StartFirmwareUpgrade
#define SOAP_TYPE___onvifDevice__StartFirmwareUpgrade (2307)
/* Operation wrapper: */
struct __onvifDevice__StartFirmwareUpgrade
{
public:
	_onvifDevice__StartFirmwareUpgrade *onvifDevice__StartFirmwareUpgrade;	/* optional element of type onvifDevice:StartFirmwareUpgrade */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__StartSystemRestore
#define SOAP_TYPE___onvifDevice__StartSystemRestore (2311)
/* Operation wrapper: */
struct __onvifDevice__StartSystemRestore
{
public:
	_onvifDevice__StartSystemRestore *onvifDevice__StartSystemRestore;	/* optional element of type onvifDevice:StartSystemRestore */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetServices_
#define SOAP_TYPE___onvifDevice__GetServices_ (2313)
/* Operation wrapper: */
struct __onvifDevice__GetServices_
{
public:
	_onvifDevice__GetServices *onvifDevice__GetServices;	/* optional element of type onvifDevice:GetServices */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetServiceCapabilities_
#define SOAP_TYPE___onvifDevice__GetServiceCapabilities_ (2315)
/* Operation wrapper: */
struct __onvifDevice__GetServiceCapabilities_
{
public:
	_onvifDevice__GetServiceCapabilities *onvifDevice__GetServiceCapabilities;	/* optional element of type onvifDevice:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDeviceInformation_
#define SOAP_TYPE___onvifDevice__GetDeviceInformation_ (2317)
/* Operation wrapper: */
struct __onvifDevice__GetDeviceInformation_
{
public:
	_onvifDevice__GetDeviceInformation *onvifDevice__GetDeviceInformation;	/* optional element of type onvifDevice:GetDeviceInformation */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetSystemDateAndTime_
#define SOAP_TYPE___onvifDevice__SetSystemDateAndTime_ (2319)
/* Operation wrapper: */
struct __onvifDevice__SetSystemDateAndTime_
{
public:
	_onvifDevice__SetSystemDateAndTime *onvifDevice__SetSystemDateAndTime;	/* optional element of type onvifDevice:SetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemDateAndTime_
#define SOAP_TYPE___onvifDevice__GetSystemDateAndTime_ (2321)
/* Operation wrapper: */
struct __onvifDevice__GetSystemDateAndTime_
{
public:
	_onvifDevice__GetSystemDateAndTime *onvifDevice__GetSystemDateAndTime;	/* optional element of type onvifDevice:GetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetSystemFactoryDefault_
#define SOAP_TYPE___onvifDevice__SetSystemFactoryDefault_ (2323)
/* Operation wrapper: */
struct __onvifDevice__SetSystemFactoryDefault_
{
public:
	_onvifDevice__SetSystemFactoryDefault *onvifDevice__SetSystemFactoryDefault;	/* optional element of type onvifDevice:SetSystemFactoryDefault */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__UpgradeSystemFirmware_
#define SOAP_TYPE___onvifDevice__UpgradeSystemFirmware_ (2325)
/* Operation wrapper: */
struct __onvifDevice__UpgradeSystemFirmware_
{
public:
	_onvifDevice__UpgradeSystemFirmware *onvifDevice__UpgradeSystemFirmware;	/* optional element of type onvifDevice:UpgradeSystemFirmware */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SystemReboot_
#define SOAP_TYPE___onvifDevice__SystemReboot_ (2327)
/* Operation wrapper: */
struct __onvifDevice__SystemReboot_
{
public:
	_onvifDevice__SystemReboot *onvifDevice__SystemReboot;	/* optional element of type onvifDevice:SystemReboot */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__RestoreSystem_
#define SOAP_TYPE___onvifDevice__RestoreSystem_ (2329)
/* Operation wrapper: */
struct __onvifDevice__RestoreSystem_
{
public:
	_onvifDevice__RestoreSystem *onvifDevice__RestoreSystem;	/* optional element of type onvifDevice:RestoreSystem */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemBackup_
#define SOAP_TYPE___onvifDevice__GetSystemBackup_ (2331)
/* Operation wrapper: */
struct __onvifDevice__GetSystemBackup_
{
public:
	_onvifDevice__GetSystemBackup *onvifDevice__GetSystemBackup;	/* optional element of type onvifDevice:GetSystemBackup */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemLog_
#define SOAP_TYPE___onvifDevice__GetSystemLog_ (2333)
/* Operation wrapper: */
struct __onvifDevice__GetSystemLog_
{
public:
	_onvifDevice__GetSystemLog *onvifDevice__GetSystemLog;	/* optional element of type onvifDevice:GetSystemLog */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemSupportInformation_
#define SOAP_TYPE___onvifDevice__GetSystemSupportInformation_ (2335)
/* Operation wrapper: */
struct __onvifDevice__GetSystemSupportInformation_
{
public:
	_onvifDevice__GetSystemSupportInformation *onvifDevice__GetSystemSupportInformation;	/* optional element of type onvifDevice:GetSystemSupportInformation */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetScopes_
#define SOAP_TYPE___onvifDevice__GetScopes_ (2337)
/* Operation wrapper: */
struct __onvifDevice__GetScopes_
{
public:
	_onvifDevice__GetScopes *onvifDevice__GetScopes;	/* optional element of type onvifDevice:GetScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetScopes_
#define SOAP_TYPE___onvifDevice__SetScopes_ (2339)
/* Operation wrapper: */
struct __onvifDevice__SetScopes_
{
public:
	_onvifDevice__SetScopes *onvifDevice__SetScopes;	/* optional element of type onvifDevice:SetScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__AddScopes_
#define SOAP_TYPE___onvifDevice__AddScopes_ (2341)
/* Operation wrapper: */
struct __onvifDevice__AddScopes_
{
public:
	_onvifDevice__AddScopes *onvifDevice__AddScopes;	/* optional element of type onvifDevice:AddScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__RemoveScopes_
#define SOAP_TYPE___onvifDevice__RemoveScopes_ (2343)
/* Operation wrapper: */
struct __onvifDevice__RemoveScopes_
{
public:
	_onvifDevice__RemoveScopes *onvifDevice__RemoveScopes;	/* optional element of type onvifDevice:RemoveScopes */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDiscoveryMode_
#define SOAP_TYPE___onvifDevice__GetDiscoveryMode_ (2345)
/* Operation wrapper: */
struct __onvifDevice__GetDiscoveryMode_
{
public:
	_onvifDevice__GetDiscoveryMode *onvifDevice__GetDiscoveryMode;	/* optional element of type onvifDevice:GetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDiscoveryMode_
#define SOAP_TYPE___onvifDevice__SetDiscoveryMode_ (2347)
/* Operation wrapper: */
struct __onvifDevice__SetDiscoveryMode_
{
public:
	_onvifDevice__SetDiscoveryMode *onvifDevice__SetDiscoveryMode;	/* optional element of type onvifDevice:SetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetRemoteDiscoveryMode_
#define SOAP_TYPE___onvifDevice__GetRemoteDiscoveryMode_ (2349)
/* Operation wrapper: */
struct __onvifDevice__GetRemoteDiscoveryMode_
{
public:
	_onvifDevice__GetRemoteDiscoveryMode *onvifDevice__GetRemoteDiscoveryMode;	/* optional element of type onvifDevice:GetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRemoteDiscoveryMode_
#define SOAP_TYPE___onvifDevice__SetRemoteDiscoveryMode_ (2351)
/* Operation wrapper: */
struct __onvifDevice__SetRemoteDiscoveryMode_
{
public:
	_onvifDevice__SetRemoteDiscoveryMode *onvifDevice__SetRemoteDiscoveryMode;	/* optional element of type onvifDevice:SetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDPAddresses_
#define SOAP_TYPE___onvifDevice__GetDPAddresses_ (2353)
/* Operation wrapper: */
struct __onvifDevice__GetDPAddresses_
{
public:
	_onvifDevice__GetDPAddresses *onvifDevice__GetDPAddresses;	/* optional element of type onvifDevice:GetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetEndpointReference_
#define SOAP_TYPE___onvifDevice__GetEndpointReference_ (2355)
/* Operation wrapper: */
struct __onvifDevice__GetEndpointReference_
{
public:
	_onvifDevice__GetEndpointReference *onvifDevice__GetEndpointReference;	/* optional element of type onvifDevice:GetEndpointReference */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetRemoteUser_
#define SOAP_TYPE___onvifDevice__GetRemoteUser_ (2357)
/* Operation wrapper: */
struct __onvifDevice__GetRemoteUser_
{
public:
	_onvifDevice__GetRemoteUser *onvifDevice__GetRemoteUser;	/* optional element of type onvifDevice:GetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRemoteUser_
#define SOAP_TYPE___onvifDevice__SetRemoteUser_ (2359)
/* Operation wrapper: */
struct __onvifDevice__SetRemoteUser_
{
public:
	_onvifDevice__SetRemoteUser *onvifDevice__SetRemoteUser;	/* optional element of type onvifDevice:SetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetUsers_
#define SOAP_TYPE___onvifDevice__GetUsers_ (2361)
/* Operation wrapper: */
struct __onvifDevice__GetUsers_
{
public:
	_onvifDevice__GetUsers *onvifDevice__GetUsers;	/* optional element of type onvifDevice:GetUsers */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__CreateUsers_
#define SOAP_TYPE___onvifDevice__CreateUsers_ (2363)
/* Operation wrapper: */
struct __onvifDevice__CreateUsers_
{
public:
	_onvifDevice__CreateUsers *onvifDevice__CreateUsers;	/* optional element of type onvifDevice:CreateUsers */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__DeleteUsers_
#define SOAP_TYPE___onvifDevice__DeleteUsers_ (2365)
/* Operation wrapper: */
struct __onvifDevice__DeleteUsers_
{
public:
	_onvifDevice__DeleteUsers *onvifDevice__DeleteUsers;	/* optional element of type onvifDevice:DeleteUsers */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetUser_
#define SOAP_TYPE___onvifDevice__SetUser_ (2367)
/* Operation wrapper: */
struct __onvifDevice__SetUser_
{
public:
	_onvifDevice__SetUser *onvifDevice__SetUser;	/* optional element of type onvifDevice:SetUser */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetWsdlUrl_
#define SOAP_TYPE___onvifDevice__GetWsdlUrl_ (2369)
/* Operation wrapper: */
struct __onvifDevice__GetWsdlUrl_
{
public:
	_onvifDevice__GetWsdlUrl *onvifDevice__GetWsdlUrl;	/* optional element of type onvifDevice:GetWsdlUrl */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCapabilities_
#define SOAP_TYPE___onvifDevice__GetCapabilities_ (2371)
/* Operation wrapper: */
struct __onvifDevice__GetCapabilities_
{
public:
	_onvifDevice__GetCapabilities *onvifDevice__GetCapabilities;	/* optional element of type onvifDevice:GetCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDPAddresses_
#define SOAP_TYPE___onvifDevice__SetDPAddresses_ (2373)
/* Operation wrapper: */
struct __onvifDevice__SetDPAddresses_
{
public:
	_onvifDevice__SetDPAddresses *onvifDevice__SetDPAddresses;	/* optional element of type onvifDevice:SetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetHostname_
#define SOAP_TYPE___onvifDevice__GetHostname_ (2375)
/* Operation wrapper: */
struct __onvifDevice__GetHostname_
{
public:
	_onvifDevice__GetHostname *onvifDevice__GetHostname;	/* optional element of type onvifDevice:GetHostname */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetHostname_
#define SOAP_TYPE___onvifDevice__SetHostname_ (2377)
/* Operation wrapper: */
struct __onvifDevice__SetHostname_
{
public:
	_onvifDevice__SetHostname *onvifDevice__SetHostname;	/* optional element of type onvifDevice:SetHostname */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetHostnameFromDHCP_
#define SOAP_TYPE___onvifDevice__SetHostnameFromDHCP_ (2379)
/* Operation wrapper: */
struct __onvifDevice__SetHostnameFromDHCP_
{
public:
	_onvifDevice__SetHostnameFromDHCP *onvifDevice__SetHostnameFromDHCP;	/* optional element of type onvifDevice:SetHostnameFromDHCP */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDNS_
#define SOAP_TYPE___onvifDevice__GetDNS_ (2381)
/* Operation wrapper: */
struct __onvifDevice__GetDNS_
{
public:
	_onvifDevice__GetDNS *onvifDevice__GetDNS;	/* optional element of type onvifDevice:GetDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDNS_
#define SOAP_TYPE___onvifDevice__SetDNS_ (2383)
/* Operation wrapper: */
struct __onvifDevice__SetDNS_
{
public:
	_onvifDevice__SetDNS *onvifDevice__SetDNS;	/* optional element of type onvifDevice:SetDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNTP_
#define SOAP_TYPE___onvifDevice__GetNTP_ (2385)
/* Operation wrapper: */
struct __onvifDevice__GetNTP_
{
public:
	_onvifDevice__GetNTP *onvifDevice__GetNTP;	/* optional element of type onvifDevice:GetNTP */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNTP_
#define SOAP_TYPE___onvifDevice__SetNTP_ (2387)
/* Operation wrapper: */
struct __onvifDevice__SetNTP_
{
public:
	_onvifDevice__SetNTP *onvifDevice__SetNTP;	/* optional element of type onvifDevice:SetNTP */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDynamicDNS_
#define SOAP_TYPE___onvifDevice__GetDynamicDNS_ (2389)
/* Operation wrapper: */
struct __onvifDevice__GetDynamicDNS_
{
public:
	_onvifDevice__GetDynamicDNS *onvifDevice__GetDynamicDNS;	/* optional element of type onvifDevice:GetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDynamicDNS_
#define SOAP_TYPE___onvifDevice__SetDynamicDNS_ (2391)
/* Operation wrapper: */
struct __onvifDevice__SetDynamicDNS_
{
public:
	_onvifDevice__SetDynamicDNS *onvifDevice__SetDynamicDNS;	/* optional element of type onvifDevice:SetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNetworkInterfaces_
#define SOAP_TYPE___onvifDevice__GetNetworkInterfaces_ (2393)
/* Operation wrapper: */
struct __onvifDevice__GetNetworkInterfaces_
{
public:
	_onvifDevice__GetNetworkInterfaces *onvifDevice__GetNetworkInterfaces;	/* optional element of type onvifDevice:GetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNetworkInterfaces_
#define SOAP_TYPE___onvifDevice__SetNetworkInterfaces_ (2395)
/* Operation wrapper: */
struct __onvifDevice__SetNetworkInterfaces_
{
public:
	_onvifDevice__SetNetworkInterfaces *onvifDevice__SetNetworkInterfaces;	/* optional element of type onvifDevice:SetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNetworkProtocols_
#define SOAP_TYPE___onvifDevice__GetNetworkProtocols_ (2397)
/* Operation wrapper: */
struct __onvifDevice__GetNetworkProtocols_
{
public:
	_onvifDevice__GetNetworkProtocols *onvifDevice__GetNetworkProtocols;	/* optional element of type onvifDevice:GetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNetworkProtocols_
#define SOAP_TYPE___onvifDevice__SetNetworkProtocols_ (2399)
/* Operation wrapper: */
struct __onvifDevice__SetNetworkProtocols_
{
public:
	_onvifDevice__SetNetworkProtocols *onvifDevice__SetNetworkProtocols;	/* optional element of type onvifDevice:SetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetNetworkDefaultGateway_
#define SOAP_TYPE___onvifDevice__GetNetworkDefaultGateway_ (2401)
/* Operation wrapper: */
struct __onvifDevice__GetNetworkDefaultGateway_
{
public:
	_onvifDevice__GetNetworkDefaultGateway *onvifDevice__GetNetworkDefaultGateway;	/* optional element of type onvifDevice:GetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetNetworkDefaultGateway_
#define SOAP_TYPE___onvifDevice__SetNetworkDefaultGateway_ (2403)
/* Operation wrapper: */
struct __onvifDevice__SetNetworkDefaultGateway_
{
public:
	_onvifDevice__SetNetworkDefaultGateway *onvifDevice__SetNetworkDefaultGateway;	/* optional element of type onvifDevice:SetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetZeroConfiguration_
#define SOAP_TYPE___onvifDevice__GetZeroConfiguration_ (2405)
/* Operation wrapper: */
struct __onvifDevice__GetZeroConfiguration_
{
public:
	_onvifDevice__GetZeroConfiguration *onvifDevice__GetZeroConfiguration;	/* optional element of type onvifDevice:GetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetZeroConfiguration_
#define SOAP_TYPE___onvifDevice__SetZeroConfiguration_ (2407)
/* Operation wrapper: */
struct __onvifDevice__SetZeroConfiguration_
{
public:
	_onvifDevice__SetZeroConfiguration *onvifDevice__SetZeroConfiguration;	/* optional element of type onvifDevice:SetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetIPAddressFilter_
#define SOAP_TYPE___onvifDevice__GetIPAddressFilter_ (2409)
/* Operation wrapper: */
struct __onvifDevice__GetIPAddressFilter_
{
public:
	_onvifDevice__GetIPAddressFilter *onvifDevice__GetIPAddressFilter;	/* optional element of type onvifDevice:GetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetIPAddressFilter_
#define SOAP_TYPE___onvifDevice__SetIPAddressFilter_ (2411)
/* Operation wrapper: */
struct __onvifDevice__SetIPAddressFilter_
{
public:
	_onvifDevice__SetIPAddressFilter *onvifDevice__SetIPAddressFilter;	/* optional element of type onvifDevice:SetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__AddIPAddressFilter_
#define SOAP_TYPE___onvifDevice__AddIPAddressFilter_ (2413)
/* Operation wrapper: */
struct __onvifDevice__AddIPAddressFilter_
{
public:
	_onvifDevice__AddIPAddressFilter *onvifDevice__AddIPAddressFilter;	/* optional element of type onvifDevice:AddIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__RemoveIPAddressFilter_
#define SOAP_TYPE___onvifDevice__RemoveIPAddressFilter_ (2415)
/* Operation wrapper: */
struct __onvifDevice__RemoveIPAddressFilter_
{
public:
	_onvifDevice__RemoveIPAddressFilter *onvifDevice__RemoveIPAddressFilter;	/* optional element of type onvifDevice:RemoveIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetAccessPolicy_
#define SOAP_TYPE___onvifDevice__GetAccessPolicy_ (2417)
/* Operation wrapper: */
struct __onvifDevice__GetAccessPolicy_
{
public:
	_onvifDevice__GetAccessPolicy *onvifDevice__GetAccessPolicy;	/* optional element of type onvifDevice:GetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetAccessPolicy_
#define SOAP_TYPE___onvifDevice__SetAccessPolicy_ (2419)
/* Operation wrapper: */
struct __onvifDevice__SetAccessPolicy_
{
public:
	_onvifDevice__SetAccessPolicy *onvifDevice__SetAccessPolicy;	/* optional element of type onvifDevice:SetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__CreateCertificate_
#define SOAP_TYPE___onvifDevice__CreateCertificate_ (2421)
/* Operation wrapper: */
struct __onvifDevice__CreateCertificate_
{
public:
	_onvifDevice__CreateCertificate *onvifDevice__CreateCertificate;	/* optional element of type onvifDevice:CreateCertificate */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCertificates_
#define SOAP_TYPE___onvifDevice__GetCertificates_ (2423)
/* Operation wrapper: */
struct __onvifDevice__GetCertificates_
{
public:
	_onvifDevice__GetCertificates *onvifDevice__GetCertificates;	/* optional element of type onvifDevice:GetCertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCertificatesStatus_
#define SOAP_TYPE___onvifDevice__GetCertificatesStatus_ (2425)
/* Operation wrapper: */
struct __onvifDevice__GetCertificatesStatus_
{
public:
	_onvifDevice__GetCertificatesStatus *onvifDevice__GetCertificatesStatus;	/* optional element of type onvifDevice:GetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetCertificatesStatus_
#define SOAP_TYPE___onvifDevice__SetCertificatesStatus_ (2427)
/* Operation wrapper: */
struct __onvifDevice__SetCertificatesStatus_
{
public:
	_onvifDevice__SetCertificatesStatus *onvifDevice__SetCertificatesStatus;	/* optional element of type onvifDevice:SetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__DeleteCertificates_
#define SOAP_TYPE___onvifDevice__DeleteCertificates_ (2429)
/* Operation wrapper: */
struct __onvifDevice__DeleteCertificates_
{
public:
	_onvifDevice__DeleteCertificates *onvifDevice__DeleteCertificates;	/* optional element of type onvifDevice:DeleteCertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetPkcs10Request_
#define SOAP_TYPE___onvifDevice__GetPkcs10Request_ (2431)
/* Operation wrapper: */
struct __onvifDevice__GetPkcs10Request_
{
public:
	_onvifDevice__GetPkcs10Request *onvifDevice__GetPkcs10Request;	/* optional element of type onvifDevice:GetPkcs10Request */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__LoadCertificates_
#define SOAP_TYPE___onvifDevice__LoadCertificates_ (2433)
/* Operation wrapper: */
struct __onvifDevice__LoadCertificates_
{
public:
	_onvifDevice__LoadCertificates *onvifDevice__LoadCertificates;	/* optional element of type onvifDevice:LoadCertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetClientCertificateMode_
#define SOAP_TYPE___onvifDevice__GetClientCertificateMode_ (2435)
/* Operation wrapper: */
struct __onvifDevice__GetClientCertificateMode_
{
public:
	_onvifDevice__GetClientCertificateMode *onvifDevice__GetClientCertificateMode;	/* optional element of type onvifDevice:GetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetClientCertificateMode_
#define SOAP_TYPE___onvifDevice__SetClientCertificateMode_ (2437)
/* Operation wrapper: */
struct __onvifDevice__SetClientCertificateMode_
{
public:
	_onvifDevice__SetClientCertificateMode *onvifDevice__SetClientCertificateMode;	/* optional element of type onvifDevice:SetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetRelayOutputs_
#define SOAP_TYPE___onvifDevice__GetRelayOutputs_ (2439)
/* Operation wrapper: */
struct __onvifDevice__GetRelayOutputs_
{
public:
	_onvifDevice__GetRelayOutputs *onvifDevice__GetRelayOutputs;	/* optional element of type onvifDevice:GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRelayOutputSettings_
#define SOAP_TYPE___onvifDevice__SetRelayOutputSettings_ (2441)
/* Operation wrapper: */
struct __onvifDevice__SetRelayOutputSettings_
{
public:
	_onvifDevice__SetRelayOutputSettings *onvifDevice__SetRelayOutputSettings;	/* optional element of type onvifDevice:SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetRelayOutputState_
#define SOAP_TYPE___onvifDevice__SetRelayOutputState_ (2443)
/* Operation wrapper: */
struct __onvifDevice__SetRelayOutputState_
{
public:
	_onvifDevice__SetRelayOutputState *onvifDevice__SetRelayOutputState;	/* optional element of type onvifDevice:SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SendAuxiliaryCommand_
#define SOAP_TYPE___onvifDevice__SendAuxiliaryCommand_ (2445)
/* Operation wrapper: */
struct __onvifDevice__SendAuxiliaryCommand_
{
public:
	_onvifDevice__SendAuxiliaryCommand *onvifDevice__SendAuxiliaryCommand;	/* optional element of type onvifDevice:SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCACertificates_
#define SOAP_TYPE___onvifDevice__GetCACertificates_ (2447)
/* Operation wrapper: */
struct __onvifDevice__GetCACertificates_
{
public:
	_onvifDevice__GetCACertificates *onvifDevice__GetCACertificates;	/* optional element of type onvifDevice:GetCACertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__LoadCertificateWithPrivateKey_
#define SOAP_TYPE___onvifDevice__LoadCertificateWithPrivateKey_ (2449)
/* Operation wrapper: */
struct __onvifDevice__LoadCertificateWithPrivateKey_
{
public:
	_onvifDevice__LoadCertificateWithPrivateKey *onvifDevice__LoadCertificateWithPrivateKey;	/* optional element of type onvifDevice:LoadCertificateWithPrivateKey */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetCertificateInformation_
#define SOAP_TYPE___onvifDevice__GetCertificateInformation_ (2451)
/* Operation wrapper: */
struct __onvifDevice__GetCertificateInformation_
{
public:
	_onvifDevice__GetCertificateInformation *onvifDevice__GetCertificateInformation;	/* optional element of type onvifDevice:GetCertificateInformation */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__LoadCACertificates_
#define SOAP_TYPE___onvifDevice__LoadCACertificates_ (2453)
/* Operation wrapper: */
struct __onvifDevice__LoadCACertificates_
{
public:
	_onvifDevice__LoadCACertificates *onvifDevice__LoadCACertificates;	/* optional element of type onvifDevice:LoadCACertificates */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__CreateDot1XConfiguration_
#define SOAP_TYPE___onvifDevice__CreateDot1XConfiguration_ (2455)
/* Operation wrapper: */
struct __onvifDevice__CreateDot1XConfiguration_
{
public:
	_onvifDevice__CreateDot1XConfiguration *onvifDevice__CreateDot1XConfiguration;	/* optional element of type onvifDevice:CreateDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__SetDot1XConfiguration_
#define SOAP_TYPE___onvifDevice__SetDot1XConfiguration_ (2457)
/* Operation wrapper: */
struct __onvifDevice__SetDot1XConfiguration_
{
public:
	_onvifDevice__SetDot1XConfiguration *onvifDevice__SetDot1XConfiguration;	/* optional element of type onvifDevice:SetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot1XConfiguration_
#define SOAP_TYPE___onvifDevice__GetDot1XConfiguration_ (2459)
/* Operation wrapper: */
struct __onvifDevice__GetDot1XConfiguration_
{
public:
	_onvifDevice__GetDot1XConfiguration *onvifDevice__GetDot1XConfiguration;	/* optional element of type onvifDevice:GetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot1XConfigurations_
#define SOAP_TYPE___onvifDevice__GetDot1XConfigurations_ (2461)
/* Operation wrapper: */
struct __onvifDevice__GetDot1XConfigurations_
{
public:
	_onvifDevice__GetDot1XConfigurations *onvifDevice__GetDot1XConfigurations;	/* optional element of type onvifDevice:GetDot1XConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__DeleteDot1XConfiguration_
#define SOAP_TYPE___onvifDevice__DeleteDot1XConfiguration_ (2463)
/* Operation wrapper: */
struct __onvifDevice__DeleteDot1XConfiguration_
{
public:
	_onvifDevice__DeleteDot1XConfiguration *onvifDevice__DeleteDot1XConfiguration;	/* optional element of type onvifDevice:DeleteDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot11Capabilities_
#define SOAP_TYPE___onvifDevice__GetDot11Capabilities_ (2465)
/* Operation wrapper: */
struct __onvifDevice__GetDot11Capabilities_
{
public:
	_onvifDevice__GetDot11Capabilities *onvifDevice__GetDot11Capabilities;	/* optional element of type onvifDevice:GetDot11Capabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetDot11Status_
#define SOAP_TYPE___onvifDevice__GetDot11Status_ (2467)
/* Operation wrapper: */
struct __onvifDevice__GetDot11Status_
{
public:
	_onvifDevice__GetDot11Status *onvifDevice__GetDot11Status;	/* optional element of type onvifDevice:GetDot11Status */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__ScanAvailableDot11Networks_
#define SOAP_TYPE___onvifDevice__ScanAvailableDot11Networks_ (2469)
/* Operation wrapper: */
struct __onvifDevice__ScanAvailableDot11Networks_
{
public:
	_onvifDevice__ScanAvailableDot11Networks *onvifDevice__ScanAvailableDot11Networks;	/* optional element of type onvifDevice:ScanAvailableDot11Networks */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__GetSystemUris_
#define SOAP_TYPE___onvifDevice__GetSystemUris_ (2471)
/* Operation wrapper: */
struct __onvifDevice__GetSystemUris_
{
public:
	_onvifDevice__GetSystemUris *onvifDevice__GetSystemUris;	/* optional element of type onvifDevice:GetSystemUris */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__StartFirmwareUpgrade_
#define SOAP_TYPE___onvifDevice__StartFirmwareUpgrade_ (2473)
/* Operation wrapper: */
struct __onvifDevice__StartFirmwareUpgrade_
{
public:
	_onvifDevice__StartFirmwareUpgrade *onvifDevice__StartFirmwareUpgrade;	/* optional element of type onvifDevice:StartFirmwareUpgrade */
};
#endif

#ifndef SOAP_TYPE___onvifDevice__StartSystemRestore_
#define SOAP_TYPE___onvifDevice__StartSystemRestore_ (2475)
/* Operation wrapper: */
struct __onvifDevice__StartSystemRestore_
{
public:
	_onvifDevice__StartSystemRestore *onvifDevice__StartSystemRestore;	/* optional element of type onvifDevice:StartSystemRestore */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetServiceCapabilities
#define SOAP_TYPE___onvifDeviceIO__GetServiceCapabilities (2479)
/* Operation wrapper: */
struct __onvifDeviceIO__GetServiceCapabilities
{
public:
	_onvifDeviceIO__GetServiceCapabilities *onvifDeviceIO__GetServiceCapabilities;	/* optional element of type onvifDeviceIO:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetRelayOutputOptions
#define SOAP_TYPE___onvifDeviceIO__GetRelayOutputOptions (2483)
/* Operation wrapper: */
struct __onvifDeviceIO__GetRelayOutputOptions
{
public:
	_onvifDeviceIO__GetRelayOutputOptions *onvifDeviceIO__GetRelayOutputOptions;	/* optional element of type onvifDeviceIO:GetRelayOutputOptions */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetAudioSources
#define SOAP_TYPE___onvifDeviceIO__GetAudioSources (2487)
/* Operation wrapper: */
struct __onvifDeviceIO__GetAudioSources
{
public:
	_onvifMedia__GetAudioSources *onvifMedia__GetAudioSources;	/* optional element of type onvifMedia:GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetAudioOutputs
#define SOAP_TYPE___onvifDeviceIO__GetAudioOutputs (2491)
/* Operation wrapper: */
struct __onvifDeviceIO__GetAudioOutputs
{
public:
	_onvifMedia__GetAudioOutputs *onvifMedia__GetAudioOutputs;	/* optional element of type onvifMedia:GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetVideoSources
#define SOAP_TYPE___onvifDeviceIO__GetVideoSources (2495)
/* Operation wrapper: */
struct __onvifDeviceIO__GetVideoSources
{
public:
	_onvifMedia__GetVideoSources *onvifMedia__GetVideoSources;	/* optional element of type onvifMedia:GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetVideoOutputs
#define SOAP_TYPE___onvifDeviceIO__GetVideoOutputs (2499)
/* Operation wrapper: */
struct __onvifDeviceIO__GetVideoOutputs
{
public:
	_onvifDeviceIO__GetVideoOutputs *onvifDeviceIO__GetVideoOutputs;	/* optional element of type onvifDeviceIO:GetVideoOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetVideoSourceConfiguration
#define SOAP_TYPE___onvifDeviceIO__GetVideoSourceConfiguration (2503)
/* Operation wrapper: */
struct __onvifDeviceIO__GetVideoSourceConfiguration
{
public:
	_onvifDeviceIO__GetVideoSourceConfiguration *onvifDeviceIO__GetVideoSourceConfiguration;	/* optional element of type onvifDeviceIO:GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetVideoOutputConfiguration
#define SOAP_TYPE___onvifDeviceIO__GetVideoOutputConfiguration (2507)
/* Operation wrapper: */
struct __onvifDeviceIO__GetVideoOutputConfiguration
{
public:
	_onvifDeviceIO__GetVideoOutputConfiguration *onvifDeviceIO__GetVideoOutputConfiguration;	/* optional element of type onvifDeviceIO:GetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetAudioSourceConfiguration
#define SOAP_TYPE___onvifDeviceIO__GetAudioSourceConfiguration (2511)
/* Operation wrapper: */
struct __onvifDeviceIO__GetAudioSourceConfiguration
{
public:
	_onvifDeviceIO__GetAudioSourceConfiguration *onvifDeviceIO__GetAudioSourceConfiguration;	/* optional element of type onvifDeviceIO:GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetAudioOutputConfiguration
#define SOAP_TYPE___onvifDeviceIO__GetAudioOutputConfiguration (2515)
/* Operation wrapper: */
struct __onvifDeviceIO__GetAudioOutputConfiguration
{
public:
	_onvifDeviceIO__GetAudioOutputConfiguration *onvifDeviceIO__GetAudioOutputConfiguration;	/* optional element of type onvifDeviceIO:GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetVideoSourceConfiguration
#define SOAP_TYPE___onvifDeviceIO__SetVideoSourceConfiguration (2519)
/* Operation wrapper: */
struct __onvifDeviceIO__SetVideoSourceConfiguration
{
public:
	_onvifDeviceIO__SetVideoSourceConfiguration *onvifDeviceIO__SetVideoSourceConfiguration;	/* optional element of type onvifDeviceIO:SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetVideoOutputConfiguration
#define SOAP_TYPE___onvifDeviceIO__SetVideoOutputConfiguration (2523)
/* Operation wrapper: */
struct __onvifDeviceIO__SetVideoOutputConfiguration
{
public:
	_onvifDeviceIO__SetVideoOutputConfiguration *onvifDeviceIO__SetVideoOutputConfiguration;	/* optional element of type onvifDeviceIO:SetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetAudioSourceConfiguration
#define SOAP_TYPE___onvifDeviceIO__SetAudioSourceConfiguration (2527)
/* Operation wrapper: */
struct __onvifDeviceIO__SetAudioSourceConfiguration
{
public:
	_onvifDeviceIO__SetAudioSourceConfiguration *onvifDeviceIO__SetAudioSourceConfiguration;	/* optional element of type onvifDeviceIO:SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetAudioOutputConfiguration
#define SOAP_TYPE___onvifDeviceIO__SetAudioOutputConfiguration (2531)
/* Operation wrapper: */
struct __onvifDeviceIO__SetAudioOutputConfiguration
{
public:
	_onvifDeviceIO__SetAudioOutputConfiguration *onvifDeviceIO__SetAudioOutputConfiguration;	/* optional element of type onvifDeviceIO:SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___onvifDeviceIO__GetVideoSourceConfigurationOptions (2535)
/* Operation wrapper: */
struct __onvifDeviceIO__GetVideoSourceConfigurationOptions
{
public:
	_onvifDeviceIO__GetVideoSourceConfigurationOptions *onvifDeviceIO__GetVideoSourceConfigurationOptions;	/* optional element of type onvifDeviceIO:GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetVideoOutputConfigurationOptions
#define SOAP_TYPE___onvifDeviceIO__GetVideoOutputConfigurationOptions (2539)
/* Operation wrapper: */
struct __onvifDeviceIO__GetVideoOutputConfigurationOptions
{
public:
	_onvifDeviceIO__GetVideoOutputConfigurationOptions *onvifDeviceIO__GetVideoOutputConfigurationOptions;	/* optional element of type onvifDeviceIO:GetVideoOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___onvifDeviceIO__GetAudioSourceConfigurationOptions (2543)
/* Operation wrapper: */
struct __onvifDeviceIO__GetAudioSourceConfigurationOptions
{
public:
	_onvifDeviceIO__GetAudioSourceConfigurationOptions *onvifDeviceIO__GetAudioSourceConfigurationOptions;	/* optional element of type onvifDeviceIO:GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___onvifDeviceIO__GetAudioOutputConfigurationOptions (2547)
/* Operation wrapper: */
struct __onvifDeviceIO__GetAudioOutputConfigurationOptions
{
public:
	_onvifDeviceIO__GetAudioOutputConfigurationOptions *onvifDeviceIO__GetAudioOutputConfigurationOptions;	/* optional element of type onvifDeviceIO:GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetRelayOutputs
#define SOAP_TYPE___onvifDeviceIO__GetRelayOutputs (2549)
/* Operation wrapper: */
struct __onvifDeviceIO__GetRelayOutputs
{
public:
	_onvifDevice__GetRelayOutputs *onvifDevice__GetRelayOutputs;	/* optional element of type onvifDevice:GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetRelayOutputSettings
#define SOAP_TYPE___onvifDeviceIO__SetRelayOutputSettings (2553)
/* Operation wrapper: */
struct __onvifDeviceIO__SetRelayOutputSettings
{
public:
	_onvifDeviceIO__SetRelayOutputSettings *onvifDeviceIO__SetRelayOutputSettings;	/* optional element of type onvifDeviceIO:SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetRelayOutputState
#define SOAP_TYPE___onvifDeviceIO__SetRelayOutputState (2555)
/* Operation wrapper: */
struct __onvifDeviceIO__SetRelayOutputState
{
public:
	_onvifDevice__SetRelayOutputState *onvifDevice__SetRelayOutputState;	/* optional element of type onvifDevice:SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetDigitalInputs
#define SOAP_TYPE___onvifDeviceIO__GetDigitalInputs (2559)
/* Operation wrapper: */
struct __onvifDeviceIO__GetDigitalInputs
{
public:
	_onvifDeviceIO__GetDigitalInputs *onvifDeviceIO__GetDigitalInputs;	/* optional element of type onvifDeviceIO:GetDigitalInputs */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetSerialPorts
#define SOAP_TYPE___onvifDeviceIO__GetSerialPorts (2563)
/* Operation wrapper: */
struct __onvifDeviceIO__GetSerialPorts
{
public:
	_onvifDeviceIO__GetSerialPorts *onvifDeviceIO__GetSerialPorts;	/* optional element of type onvifDeviceIO:GetSerialPorts */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetSerialPortConfiguration
#define SOAP_TYPE___onvifDeviceIO__GetSerialPortConfiguration (2567)
/* Operation wrapper: */
struct __onvifDeviceIO__GetSerialPortConfiguration
{
public:
	_onvifDeviceIO__GetSerialPortConfiguration *onvifDeviceIO__GetSerialPortConfiguration;	/* optional element of type onvifDeviceIO:GetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SetSerialPortConfiguration
#define SOAP_TYPE___onvifDeviceIO__SetSerialPortConfiguration (2571)
/* Operation wrapper: */
struct __onvifDeviceIO__SetSerialPortConfiguration
{
public:
	_onvifDeviceIO__SetSerialPortConfiguration *onvifDeviceIO__SetSerialPortConfiguration;	/* optional element of type onvifDeviceIO:SetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__GetSerialPortConfigurationOptions
#define SOAP_TYPE___onvifDeviceIO__GetSerialPortConfigurationOptions (2575)
/* Operation wrapper: */
struct __onvifDeviceIO__GetSerialPortConfigurationOptions
{
public:
	_onvifDeviceIO__GetSerialPortConfigurationOptions *onvifDeviceIO__GetSerialPortConfigurationOptions;	/* optional element of type onvifDeviceIO:GetSerialPortConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifDeviceIO__SendReceiveSerialCommand
#define SOAP_TYPE___onvifDeviceIO__SendReceiveSerialCommand (2579)
/* Operation wrapper: */
struct __onvifDeviceIO__SendReceiveSerialCommand
{
public:
	_onvifDeviceIO__SendReceiveSerialCommand *onvifDeviceIO__SendReceiveSerialCommand;	/* optional element of type onvifDeviceIO:SendReceiveSerialCommand */
};
#endif

#ifndef SOAP_TYPE___onvifImg__GetServiceCapabilities
#define SOAP_TYPE___onvifImg__GetServiceCapabilities (2583)
/* Operation wrapper: */
struct __onvifImg__GetServiceCapabilities
{
public:
	_onvifImg__GetServiceCapabilities *onvifImg__GetServiceCapabilities;	/* optional element of type onvifImg:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifImg__GetImagingSettings
#define SOAP_TYPE___onvifImg__GetImagingSettings (2587)
/* Operation wrapper: */
struct __onvifImg__GetImagingSettings
{
public:
	_onvifImg__GetImagingSettings *onvifImg__GetImagingSettings;	/* optional element of type onvifImg:GetImagingSettings */
};
#endif

#ifndef SOAP_TYPE___onvifImg__SetImagingSettings
#define SOAP_TYPE___onvifImg__SetImagingSettings (2591)
/* Operation wrapper: */
struct __onvifImg__SetImagingSettings
{
public:
	_onvifImg__SetImagingSettings *onvifImg__SetImagingSettings;	/* optional element of type onvifImg:SetImagingSettings */
};
#endif

#ifndef SOAP_TYPE___onvifImg__GetOptions
#define SOAP_TYPE___onvifImg__GetOptions (2595)
/* Operation wrapper: */
struct __onvifImg__GetOptions
{
public:
	_onvifImg__GetOptions *onvifImg__GetOptions;	/* optional element of type onvifImg:GetOptions */
};
#endif

#ifndef SOAP_TYPE___onvifImg__Move
#define SOAP_TYPE___onvifImg__Move (2599)
/* Operation wrapper: */
struct __onvifImg__Move
{
public:
	_onvifImg__Move *onvifImg__Move;	/* optional element of type onvifImg:Move */
};
#endif

#ifndef SOAP_TYPE___onvifImg__Stop
#define SOAP_TYPE___onvifImg__Stop (2603)
/* Operation wrapper: */
struct __onvifImg__Stop
{
public:
	_onvifImg__Stop *onvifImg__Stop;	/* optional element of type onvifImg:Stop */
};
#endif

#ifndef SOAP_TYPE___onvifImg__GetStatus
#define SOAP_TYPE___onvifImg__GetStatus (2607)
/* Operation wrapper: */
struct __onvifImg__GetStatus
{
public:
	_onvifImg__GetStatus *onvifImg__GetStatus;	/* optional element of type onvifImg:GetStatus */
};
#endif

#ifndef SOAP_TYPE___onvifImg__GetMoveOptions
#define SOAP_TYPE___onvifImg__GetMoveOptions (2611)
/* Operation wrapper: */
struct __onvifImg__GetMoveOptions
{
public:
	_onvifImg__GetMoveOptions *onvifImg__GetMoveOptions;	/* optional element of type onvifImg:GetMoveOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetServiceCapabilities
#define SOAP_TYPE___onvifMedia__GetServiceCapabilities (2615)
/* Operation wrapper: */
struct __onvifMedia__GetServiceCapabilities
{
public:
	_onvifMedia__GetServiceCapabilities *onvifMedia__GetServiceCapabilities;	/* optional element of type onvifMedia:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSources
#define SOAP_TYPE___onvifMedia__GetVideoSources (2617)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSources
{
public:
	_onvifMedia__GetVideoSources *onvifMedia__GetVideoSources;	/* optional element of type onvifMedia:GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSources
#define SOAP_TYPE___onvifMedia__GetAudioSources (2619)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSources
{
public:
	_onvifMedia__GetAudioSources *onvifMedia__GetAudioSources;	/* optional element of type onvifMedia:GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputs
#define SOAP_TYPE___onvifMedia__GetAudioOutputs (2621)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputs
{
public:
	_onvifMedia__GetAudioOutputs *onvifMedia__GetAudioOutputs;	/* optional element of type onvifMedia:GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__CreateProfile
#define SOAP_TYPE___onvifMedia__CreateProfile (2625)
/* Operation wrapper: */
struct __onvifMedia__CreateProfile
{
public:
	_onvifMedia__CreateProfile *onvifMedia__CreateProfile;	/* optional element of type onvifMedia:CreateProfile */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetProfile
#define SOAP_TYPE___onvifMedia__GetProfile (2629)
/* Operation wrapper: */
struct __onvifMedia__GetProfile
{
public:
	_onvifMedia__GetProfile *onvifMedia__GetProfile;	/* optional element of type onvifMedia:GetProfile */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetProfiles
#define SOAP_TYPE___onvifMedia__GetProfiles (2633)
/* Operation wrapper: */
struct __onvifMedia__GetProfiles
{
public:
	_onvifMedia__GetProfiles *onvifMedia__GetProfiles;	/* optional element of type onvifMedia:GetProfiles */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddVideoEncoderConfiguration
#define SOAP_TYPE___onvifMedia__AddVideoEncoderConfiguration (2637)
/* Operation wrapper: */
struct __onvifMedia__AddVideoEncoderConfiguration
{
public:
	_onvifMedia__AddVideoEncoderConfiguration *onvifMedia__AddVideoEncoderConfiguration;	/* optional element of type onvifMedia:AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddVideoSourceConfiguration
#define SOAP_TYPE___onvifMedia__AddVideoSourceConfiguration (2641)
/* Operation wrapper: */
struct __onvifMedia__AddVideoSourceConfiguration
{
public:
	_onvifMedia__AddVideoSourceConfiguration *onvifMedia__AddVideoSourceConfiguration;	/* optional element of type onvifMedia:AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioEncoderConfiguration
#define SOAP_TYPE___onvifMedia__AddAudioEncoderConfiguration (2645)
/* Operation wrapper: */
struct __onvifMedia__AddAudioEncoderConfiguration
{
public:
	_onvifMedia__AddAudioEncoderConfiguration *onvifMedia__AddAudioEncoderConfiguration;	/* optional element of type onvifMedia:AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioSourceConfiguration
#define SOAP_TYPE___onvifMedia__AddAudioSourceConfiguration (2649)
/* Operation wrapper: */
struct __onvifMedia__AddAudioSourceConfiguration
{
public:
	_onvifMedia__AddAudioSourceConfiguration *onvifMedia__AddAudioSourceConfiguration;	/* optional element of type onvifMedia:AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddPTZConfiguration
#define SOAP_TYPE___onvifMedia__AddPTZConfiguration (2653)
/* Operation wrapper: */
struct __onvifMedia__AddPTZConfiguration
{
public:
	_onvifMedia__AddPTZConfiguration *onvifMedia__AddPTZConfiguration;	/* optional element of type onvifMedia:AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___onvifMedia__AddVideoAnalyticsConfiguration (2657)
/* Operation wrapper: */
struct __onvifMedia__AddVideoAnalyticsConfiguration
{
public:
	_onvifMedia__AddVideoAnalyticsConfiguration *onvifMedia__AddVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddMetadataConfiguration
#define SOAP_TYPE___onvifMedia__AddMetadataConfiguration (2661)
/* Operation wrapper: */
struct __onvifMedia__AddMetadataConfiguration
{
public:
	_onvifMedia__AddMetadataConfiguration *onvifMedia__AddMetadataConfiguration;	/* optional element of type onvifMedia:AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioOutputConfiguration
#define SOAP_TYPE___onvifMedia__AddAudioOutputConfiguration (2665)
/* Operation wrapper: */
struct __onvifMedia__AddAudioOutputConfiguration
{
public:
	_onvifMedia__AddAudioOutputConfiguration *onvifMedia__AddAudioOutputConfiguration;	/* optional element of type onvifMedia:AddAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioDecoderConfiguration
#define SOAP_TYPE___onvifMedia__AddAudioDecoderConfiguration (2669)
/* Operation wrapper: */
struct __onvifMedia__AddAudioDecoderConfiguration
{
public:
	_onvifMedia__AddAudioDecoderConfiguration *onvifMedia__AddAudioDecoderConfiguration;	/* optional element of type onvifMedia:AddAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___onvifMedia__RemoveVideoEncoderConfiguration (2673)
/* Operation wrapper: */
struct __onvifMedia__RemoveVideoEncoderConfiguration
{
public:
	_onvifMedia__RemoveVideoEncoderConfiguration *onvifMedia__RemoveVideoEncoderConfiguration;	/* optional element of type onvifMedia:RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveVideoSourceConfiguration
#define SOAP_TYPE___onvifMedia__RemoveVideoSourceConfiguration (2677)
/* Operation wrapper: */
struct __onvifMedia__RemoveVideoSourceConfiguration
{
public:
	_onvifMedia__RemoveVideoSourceConfiguration *onvifMedia__RemoveVideoSourceConfiguration;	/* optional element of type onvifMedia:RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___onvifMedia__RemoveAudioEncoderConfiguration (2681)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioEncoderConfiguration
{
public:
	_onvifMedia__RemoveAudioEncoderConfiguration *onvifMedia__RemoveAudioEncoderConfiguration;	/* optional element of type onvifMedia:RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioSourceConfiguration
#define SOAP_TYPE___onvifMedia__RemoveAudioSourceConfiguration (2685)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioSourceConfiguration
{
public:
	_onvifMedia__RemoveAudioSourceConfiguration *onvifMedia__RemoveAudioSourceConfiguration;	/* optional element of type onvifMedia:RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemovePTZConfiguration
#define SOAP_TYPE___onvifMedia__RemovePTZConfiguration (2689)
/* Operation wrapper: */
struct __onvifMedia__RemovePTZConfiguration
{
public:
	_onvifMedia__RemovePTZConfiguration *onvifMedia__RemovePTZConfiguration;	/* optional element of type onvifMedia:RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___onvifMedia__RemoveVideoAnalyticsConfiguration (2693)
/* Operation wrapper: */
struct __onvifMedia__RemoveVideoAnalyticsConfiguration
{
public:
	_onvifMedia__RemoveVideoAnalyticsConfiguration *onvifMedia__RemoveVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveMetadataConfiguration
#define SOAP_TYPE___onvifMedia__RemoveMetadataConfiguration (2697)
/* Operation wrapper: */
struct __onvifMedia__RemoveMetadataConfiguration
{
public:
	_onvifMedia__RemoveMetadataConfiguration *onvifMedia__RemoveMetadataConfiguration;	/* optional element of type onvifMedia:RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioOutputConfiguration
#define SOAP_TYPE___onvifMedia__RemoveAudioOutputConfiguration (2701)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioOutputConfiguration
{
public:
	_onvifMedia__RemoveAudioOutputConfiguration *onvifMedia__RemoveAudioOutputConfiguration;	/* optional element of type onvifMedia:RemoveAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___onvifMedia__RemoveAudioDecoderConfiguration (2705)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioDecoderConfiguration
{
public:
	_onvifMedia__RemoveAudioDecoderConfiguration *onvifMedia__RemoveAudioDecoderConfiguration;	/* optional element of type onvifMedia:RemoveAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__DeleteProfile
#define SOAP_TYPE___onvifMedia__DeleteProfile (2709)
/* Operation wrapper: */
struct __onvifMedia__DeleteProfile
{
public:
	_onvifMedia__DeleteProfile *onvifMedia__DeleteProfile;	/* optional element of type onvifMedia:DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSourceConfigurations
#define SOAP_TYPE___onvifMedia__GetVideoSourceConfigurations (2713)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSourceConfigurations
{
public:
	_onvifMedia__GetVideoSourceConfigurations *onvifMedia__GetVideoSourceConfigurations;	/* optional element of type onvifMedia:GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurations
#define SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurations (2717)
/* Operation wrapper: */
struct __onvifMedia__GetVideoEncoderConfigurations
{
public:
	_onvifMedia__GetVideoEncoderConfigurations *onvifMedia__GetVideoEncoderConfigurations;	/* optional element of type onvifMedia:GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSourceConfigurations
#define SOAP_TYPE___onvifMedia__GetAudioSourceConfigurations (2721)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSourceConfigurations
{
public:
	_onvifMedia__GetAudioSourceConfigurations *onvifMedia__GetAudioSourceConfigurations;	/* optional element of type onvifMedia:GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurations
#define SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurations (2725)
/* Operation wrapper: */
struct __onvifMedia__GetAudioEncoderConfigurations
{
public:
	_onvifMedia__GetAudioEncoderConfigurations *onvifMedia__GetAudioEncoderConfigurations;	/* optional element of type onvifMedia:GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfigurations (2729)
/* Operation wrapper: */
struct __onvifMedia__GetVideoAnalyticsConfigurations
{
public:
	_onvifMedia__GetVideoAnalyticsConfigurations *onvifMedia__GetVideoAnalyticsConfigurations;	/* optional element of type onvifMedia:GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetMetadataConfigurations
#define SOAP_TYPE___onvifMedia__GetMetadataConfigurations (2733)
/* Operation wrapper: */
struct __onvifMedia__GetMetadataConfigurations
{
public:
	_onvifMedia__GetMetadataConfigurations *onvifMedia__GetMetadataConfigurations;	/* optional element of type onvifMedia:GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputConfigurations
#define SOAP_TYPE___onvifMedia__GetAudioOutputConfigurations (2737)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputConfigurations
{
public:
	_onvifMedia__GetAudioOutputConfigurations *onvifMedia__GetAudioOutputConfigurations;	/* optional element of type onvifMedia:GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurations
#define SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurations (2741)
/* Operation wrapper: */
struct __onvifMedia__GetAudioDecoderConfigurations
{
public:
	_onvifMedia__GetAudioDecoderConfigurations *onvifMedia__GetAudioDecoderConfigurations;	/* optional element of type onvifMedia:GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSourceConfiguration
#define SOAP_TYPE___onvifMedia__GetVideoSourceConfiguration (2745)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSourceConfiguration
{
public:
	_onvifMedia__GetVideoSourceConfiguration *onvifMedia__GetVideoSourceConfiguration;	/* optional element of type onvifMedia:GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoEncoderConfiguration
#define SOAP_TYPE___onvifMedia__GetVideoEncoderConfiguration (2749)
/* Operation wrapper: */
struct __onvifMedia__GetVideoEncoderConfiguration
{
public:
	_onvifMedia__GetVideoEncoderConfiguration *onvifMedia__GetVideoEncoderConfiguration;	/* optional element of type onvifMedia:GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSourceConfiguration
#define SOAP_TYPE___onvifMedia__GetAudioSourceConfiguration (2753)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSourceConfiguration
{
public:
	_onvifMedia__GetAudioSourceConfiguration *onvifMedia__GetAudioSourceConfiguration;	/* optional element of type onvifMedia:GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioEncoderConfiguration
#define SOAP_TYPE___onvifMedia__GetAudioEncoderConfiguration (2757)
/* Operation wrapper: */
struct __onvifMedia__GetAudioEncoderConfiguration
{
public:
	_onvifMedia__GetAudioEncoderConfiguration *onvifMedia__GetAudioEncoderConfiguration;	/* optional element of type onvifMedia:GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfiguration (2761)
/* Operation wrapper: */
struct __onvifMedia__GetVideoAnalyticsConfiguration
{
public:
	_onvifMedia__GetVideoAnalyticsConfiguration *onvifMedia__GetVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetMetadataConfiguration
#define SOAP_TYPE___onvifMedia__GetMetadataConfiguration (2765)
/* Operation wrapper: */
struct __onvifMedia__GetMetadataConfiguration
{
public:
	_onvifMedia__GetMetadataConfiguration *onvifMedia__GetMetadataConfiguration;	/* optional element of type onvifMedia:GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputConfiguration
#define SOAP_TYPE___onvifMedia__GetAudioOutputConfiguration (2769)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputConfiguration
{
public:
	_onvifMedia__GetAudioOutputConfiguration *onvifMedia__GetAudioOutputConfiguration;	/* optional element of type onvifMedia:GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioDecoderConfiguration
#define SOAP_TYPE___onvifMedia__GetAudioDecoderConfiguration (2773)
/* Operation wrapper: */
struct __onvifMedia__GetAudioDecoderConfiguration
{
public:
	_onvifMedia__GetAudioDecoderConfiguration *onvifMedia__GetAudioDecoderConfiguration;	/* optional element of type onvifMedia:GetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleVideoEncoderConfigurations (2777)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleVideoEncoderConfigurations
{
public:
	_onvifMedia__GetCompatibleVideoEncoderConfigurations *onvifMedia__GetCompatibleVideoEncoderConfigurations;	/* optional element of type onvifMedia:GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleVideoSourceConfigurations (2781)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleVideoSourceConfigurations
{
public:
	_onvifMedia__GetCompatibleVideoSourceConfigurations *onvifMedia__GetCompatibleVideoSourceConfigurations;	/* optional element of type onvifMedia:GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioEncoderConfigurations (2785)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioEncoderConfigurations
{
public:
	_onvifMedia__GetCompatibleAudioEncoderConfigurations *onvifMedia__GetCompatibleAudioEncoderConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioSourceConfigurations (2789)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioSourceConfigurations
{
public:
	_onvifMedia__GetCompatibleAudioSourceConfigurations *onvifMedia__GetCompatibleAudioSourceConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleVideoAnalyticsConfigurations (2793)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleVideoAnalyticsConfigurations
{
public:
	_onvifMedia__GetCompatibleVideoAnalyticsConfigurations *onvifMedia__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type onvifMedia:GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleMetadataConfigurations (2797)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleMetadataConfigurations
{
public:
	_onvifMedia__GetCompatibleMetadataConfigurations *onvifMedia__GetCompatibleMetadataConfigurations;	/* optional element of type onvifMedia:GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioOutputConfigurations (2801)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioOutputConfigurations
{
public:
	_onvifMedia__GetCompatibleAudioOutputConfigurations *onvifMedia__GetCompatibleAudioOutputConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioDecoderConfigurations (2805)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioDecoderConfigurations
{
public:
	_onvifMedia__GetCompatibleAudioDecoderConfigurations *onvifMedia__GetCompatibleAudioDecoderConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetVideoSourceConfiguration
#define SOAP_TYPE___onvifMedia__SetVideoSourceConfiguration (2809)
/* Operation wrapper: */
struct __onvifMedia__SetVideoSourceConfiguration
{
public:
	_onvifMedia__SetVideoSourceConfiguration *onvifMedia__SetVideoSourceConfiguration;	/* optional element of type onvifMedia:SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetVideoEncoderConfiguration
#define SOAP_TYPE___onvifMedia__SetVideoEncoderConfiguration (2813)
/* Operation wrapper: */
struct __onvifMedia__SetVideoEncoderConfiguration
{
public:
	_onvifMedia__SetVideoEncoderConfiguration *onvifMedia__SetVideoEncoderConfiguration;	/* optional element of type onvifMedia:SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioSourceConfiguration
#define SOAP_TYPE___onvifMedia__SetAudioSourceConfiguration (2817)
/* Operation wrapper: */
struct __onvifMedia__SetAudioSourceConfiguration
{
public:
	_onvifMedia__SetAudioSourceConfiguration *onvifMedia__SetAudioSourceConfiguration;	/* optional element of type onvifMedia:SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioEncoderConfiguration
#define SOAP_TYPE___onvifMedia__SetAudioEncoderConfiguration (2821)
/* Operation wrapper: */
struct __onvifMedia__SetAudioEncoderConfiguration
{
public:
	_onvifMedia__SetAudioEncoderConfiguration *onvifMedia__SetAudioEncoderConfiguration;	/* optional element of type onvifMedia:SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___onvifMedia__SetVideoAnalyticsConfiguration (2825)
/* Operation wrapper: */
struct __onvifMedia__SetVideoAnalyticsConfiguration
{
public:
	_onvifMedia__SetVideoAnalyticsConfiguration *onvifMedia__SetVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetMetadataConfiguration
#define SOAP_TYPE___onvifMedia__SetMetadataConfiguration (2829)
/* Operation wrapper: */
struct __onvifMedia__SetMetadataConfiguration
{
public:
	_onvifMedia__SetMetadataConfiguration *onvifMedia__SetMetadataConfiguration;	/* optional element of type onvifMedia:SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioOutputConfiguration
#define SOAP_TYPE___onvifMedia__SetAudioOutputConfiguration (2833)
/* Operation wrapper: */
struct __onvifMedia__SetAudioOutputConfiguration
{
public:
	_onvifMedia__SetAudioOutputConfiguration *onvifMedia__SetAudioOutputConfiguration;	/* optional element of type onvifMedia:SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioDecoderConfiguration
#define SOAP_TYPE___onvifMedia__SetAudioDecoderConfiguration (2837)
/* Operation wrapper: */
struct __onvifMedia__SetAudioDecoderConfiguration
{
public:
	_onvifMedia__SetAudioDecoderConfiguration *onvifMedia__SetAudioDecoderConfiguration;	/* optional element of type onvifMedia:SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetVideoSourceConfigurationOptions (2841)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSourceConfigurationOptions
{
public:
	_onvifMedia__GetVideoSourceConfigurationOptions *onvifMedia__GetVideoSourceConfigurationOptions;	/* optional element of type onvifMedia:GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurationOptions (2845)
/* Operation wrapper: */
struct __onvifMedia__GetVideoEncoderConfigurationOptions
{
public:
	_onvifMedia__GetVideoEncoderConfigurationOptions *onvifMedia__GetVideoEncoderConfigurationOptions;	/* optional element of type onvifMedia:GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetAudioSourceConfigurationOptions (2849)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSourceConfigurationOptions
{
public:
	_onvifMedia__GetAudioSourceConfigurationOptions *onvifMedia__GetAudioSourceConfigurationOptions;	/* optional element of type onvifMedia:GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurationOptions (2853)
/* Operation wrapper: */
struct __onvifMedia__GetAudioEncoderConfigurationOptions
{
public:
	_onvifMedia__GetAudioEncoderConfigurationOptions *onvifMedia__GetAudioEncoderConfigurationOptions;	/* optional element of type onvifMedia:GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetMetadataConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetMetadataConfigurationOptions (2857)
/* Operation wrapper: */
struct __onvifMedia__GetMetadataConfigurationOptions
{
public:
	_onvifMedia__GetMetadataConfigurationOptions *onvifMedia__GetMetadataConfigurationOptions;	/* optional element of type onvifMedia:GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetAudioOutputConfigurationOptions (2861)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputConfigurationOptions
{
public:
	_onvifMedia__GetAudioOutputConfigurationOptions *onvifMedia__GetAudioOutputConfigurationOptions;	/* optional element of type onvifMedia:GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurationOptions (2865)
/* Operation wrapper: */
struct __onvifMedia__GetAudioDecoderConfigurationOptions
{
public:
	_onvifMedia__GetAudioDecoderConfigurationOptions *onvifMedia__GetAudioDecoderConfigurationOptions;	/* optional element of type onvifMedia:GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances (2869)
/* Operation wrapper: */
struct __onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	_onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances *onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type onvifMedia:GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetStreamUri
#define SOAP_TYPE___onvifMedia__GetStreamUri (2873)
/* Operation wrapper: */
struct __onvifMedia__GetStreamUri
{
public:
	_onvifMedia__GetStreamUri *onvifMedia__GetStreamUri;	/* optional element of type onvifMedia:GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__StartMulticastStreaming
#define SOAP_TYPE___onvifMedia__StartMulticastStreaming (2877)
/* Operation wrapper: */
struct __onvifMedia__StartMulticastStreaming
{
public:
	_onvifMedia__StartMulticastStreaming *onvifMedia__StartMulticastStreaming;	/* optional element of type onvifMedia:StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__StopMulticastStreaming
#define SOAP_TYPE___onvifMedia__StopMulticastStreaming (2881)
/* Operation wrapper: */
struct __onvifMedia__StopMulticastStreaming
{
public:
	_onvifMedia__StopMulticastStreaming *onvifMedia__StopMulticastStreaming;	/* optional element of type onvifMedia:StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetSynchronizationPoint
#define SOAP_TYPE___onvifMedia__SetSynchronizationPoint (2885)
/* Operation wrapper: */
struct __onvifMedia__SetSynchronizationPoint
{
public:
	_onvifMedia__SetSynchronizationPoint *onvifMedia__SetSynchronizationPoint;	/* optional element of type onvifMedia:SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetSnapshotUri
#define SOAP_TYPE___onvifMedia__GetSnapshotUri (2889)
/* Operation wrapper: */
struct __onvifMedia__GetSnapshotUri
{
public:
	_onvifMedia__GetSnapshotUri *onvifMedia__GetSnapshotUri;	/* optional element of type onvifMedia:GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetServiceCapabilities_
#define SOAP_TYPE___onvifMedia__GetServiceCapabilities_ (2891)
/* Operation wrapper: */
struct __onvifMedia__GetServiceCapabilities_
{
public:
	_onvifMedia__GetServiceCapabilities *onvifMedia__GetServiceCapabilities;	/* optional element of type onvifMedia:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSources_
#define SOAP_TYPE___onvifMedia__GetVideoSources_ (2893)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSources_
{
public:
	_onvifMedia__GetVideoSources *onvifMedia__GetVideoSources;	/* optional element of type onvifMedia:GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSources_
#define SOAP_TYPE___onvifMedia__GetAudioSources_ (2895)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSources_
{
public:
	_onvifMedia__GetAudioSources *onvifMedia__GetAudioSources;	/* optional element of type onvifMedia:GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputs_
#define SOAP_TYPE___onvifMedia__GetAudioOutputs_ (2897)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputs_
{
public:
	_onvifMedia__GetAudioOutputs *onvifMedia__GetAudioOutputs;	/* optional element of type onvifMedia:GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__CreateProfile_
#define SOAP_TYPE___onvifMedia__CreateProfile_ (2899)
/* Operation wrapper: */
struct __onvifMedia__CreateProfile_
{
public:
	_onvifMedia__CreateProfile *onvifMedia__CreateProfile;	/* optional element of type onvifMedia:CreateProfile */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetProfile_
#define SOAP_TYPE___onvifMedia__GetProfile_ (2901)
/* Operation wrapper: */
struct __onvifMedia__GetProfile_
{
public:
	_onvifMedia__GetProfile *onvifMedia__GetProfile;	/* optional element of type onvifMedia:GetProfile */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetProfiles_
#define SOAP_TYPE___onvifMedia__GetProfiles_ (2903)
/* Operation wrapper: */
struct __onvifMedia__GetProfiles_
{
public:
	_onvifMedia__GetProfiles *onvifMedia__GetProfiles;	/* optional element of type onvifMedia:GetProfiles */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddVideoEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__AddVideoEncoderConfiguration_ (2905)
/* Operation wrapper: */
struct __onvifMedia__AddVideoEncoderConfiguration_
{
public:
	_onvifMedia__AddVideoEncoderConfiguration *onvifMedia__AddVideoEncoderConfiguration;	/* optional element of type onvifMedia:AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddVideoSourceConfiguration_
#define SOAP_TYPE___onvifMedia__AddVideoSourceConfiguration_ (2907)
/* Operation wrapper: */
struct __onvifMedia__AddVideoSourceConfiguration_
{
public:
	_onvifMedia__AddVideoSourceConfiguration *onvifMedia__AddVideoSourceConfiguration;	/* optional element of type onvifMedia:AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__AddAudioEncoderConfiguration_ (2909)
/* Operation wrapper: */
struct __onvifMedia__AddAudioEncoderConfiguration_
{
public:
	_onvifMedia__AddAudioEncoderConfiguration *onvifMedia__AddAudioEncoderConfiguration;	/* optional element of type onvifMedia:AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioSourceConfiguration_
#define SOAP_TYPE___onvifMedia__AddAudioSourceConfiguration_ (2911)
/* Operation wrapper: */
struct __onvifMedia__AddAudioSourceConfiguration_
{
public:
	_onvifMedia__AddAudioSourceConfiguration *onvifMedia__AddAudioSourceConfiguration;	/* optional element of type onvifMedia:AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddPTZConfiguration_
#define SOAP_TYPE___onvifMedia__AddPTZConfiguration_ (2913)
/* Operation wrapper: */
struct __onvifMedia__AddPTZConfiguration_
{
public:
	_onvifMedia__AddPTZConfiguration *onvifMedia__AddPTZConfiguration;	/* optional element of type onvifMedia:AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddVideoAnalyticsConfiguration_
#define SOAP_TYPE___onvifMedia__AddVideoAnalyticsConfiguration_ (2915)
/* Operation wrapper: */
struct __onvifMedia__AddVideoAnalyticsConfiguration_
{
public:
	_onvifMedia__AddVideoAnalyticsConfiguration *onvifMedia__AddVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddMetadataConfiguration_
#define SOAP_TYPE___onvifMedia__AddMetadataConfiguration_ (2917)
/* Operation wrapper: */
struct __onvifMedia__AddMetadataConfiguration_
{
public:
	_onvifMedia__AddMetadataConfiguration *onvifMedia__AddMetadataConfiguration;	/* optional element of type onvifMedia:AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioOutputConfiguration_
#define SOAP_TYPE___onvifMedia__AddAudioOutputConfiguration_ (2919)
/* Operation wrapper: */
struct __onvifMedia__AddAudioOutputConfiguration_
{
public:
	_onvifMedia__AddAudioOutputConfiguration *onvifMedia__AddAudioOutputConfiguration;	/* optional element of type onvifMedia:AddAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__AddAudioDecoderConfiguration_
#define SOAP_TYPE___onvifMedia__AddAudioDecoderConfiguration_ (2921)
/* Operation wrapper: */
struct __onvifMedia__AddAudioDecoderConfiguration_
{
public:
	_onvifMedia__AddAudioDecoderConfiguration *onvifMedia__AddAudioDecoderConfiguration;	/* optional element of type onvifMedia:AddAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveVideoEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveVideoEncoderConfiguration_ (2923)
/* Operation wrapper: */
struct __onvifMedia__RemoveVideoEncoderConfiguration_
{
public:
	_onvifMedia__RemoveVideoEncoderConfiguration *onvifMedia__RemoveVideoEncoderConfiguration;	/* optional element of type onvifMedia:RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveVideoSourceConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveVideoSourceConfiguration_ (2925)
/* Operation wrapper: */
struct __onvifMedia__RemoveVideoSourceConfiguration_
{
public:
	_onvifMedia__RemoveVideoSourceConfiguration *onvifMedia__RemoveVideoSourceConfiguration;	/* optional element of type onvifMedia:RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveAudioEncoderConfiguration_ (2927)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioEncoderConfiguration_
{
public:
	_onvifMedia__RemoveAudioEncoderConfiguration *onvifMedia__RemoveAudioEncoderConfiguration;	/* optional element of type onvifMedia:RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioSourceConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveAudioSourceConfiguration_ (2929)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioSourceConfiguration_
{
public:
	_onvifMedia__RemoveAudioSourceConfiguration *onvifMedia__RemoveAudioSourceConfiguration;	/* optional element of type onvifMedia:RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemovePTZConfiguration_
#define SOAP_TYPE___onvifMedia__RemovePTZConfiguration_ (2931)
/* Operation wrapper: */
struct __onvifMedia__RemovePTZConfiguration_
{
public:
	_onvifMedia__RemovePTZConfiguration *onvifMedia__RemovePTZConfiguration;	/* optional element of type onvifMedia:RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveVideoAnalyticsConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveVideoAnalyticsConfiguration_ (2933)
/* Operation wrapper: */
struct __onvifMedia__RemoveVideoAnalyticsConfiguration_
{
public:
	_onvifMedia__RemoveVideoAnalyticsConfiguration *onvifMedia__RemoveVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveMetadataConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveMetadataConfiguration_ (2935)
/* Operation wrapper: */
struct __onvifMedia__RemoveMetadataConfiguration_
{
public:
	_onvifMedia__RemoveMetadataConfiguration *onvifMedia__RemoveMetadataConfiguration;	/* optional element of type onvifMedia:RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioOutputConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveAudioOutputConfiguration_ (2937)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioOutputConfiguration_
{
public:
	_onvifMedia__RemoveAudioOutputConfiguration *onvifMedia__RemoveAudioOutputConfiguration;	/* optional element of type onvifMedia:RemoveAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__RemoveAudioDecoderConfiguration_
#define SOAP_TYPE___onvifMedia__RemoveAudioDecoderConfiguration_ (2939)
/* Operation wrapper: */
struct __onvifMedia__RemoveAudioDecoderConfiguration_
{
public:
	_onvifMedia__RemoveAudioDecoderConfiguration *onvifMedia__RemoveAudioDecoderConfiguration;	/* optional element of type onvifMedia:RemoveAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__DeleteProfile_
#define SOAP_TYPE___onvifMedia__DeleteProfile_ (2941)
/* Operation wrapper: */
struct __onvifMedia__DeleteProfile_
{
public:
	_onvifMedia__DeleteProfile *onvifMedia__DeleteProfile;	/* optional element of type onvifMedia:DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSourceConfigurations_
#define SOAP_TYPE___onvifMedia__GetVideoSourceConfigurations_ (2943)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSourceConfigurations_
{
public:
	_onvifMedia__GetVideoSourceConfigurations *onvifMedia__GetVideoSourceConfigurations;	/* optional element of type onvifMedia:GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurations_
#define SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurations_ (2945)
/* Operation wrapper: */
struct __onvifMedia__GetVideoEncoderConfigurations_
{
public:
	_onvifMedia__GetVideoEncoderConfigurations *onvifMedia__GetVideoEncoderConfigurations;	/* optional element of type onvifMedia:GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSourceConfigurations_
#define SOAP_TYPE___onvifMedia__GetAudioSourceConfigurations_ (2947)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSourceConfigurations_
{
public:
	_onvifMedia__GetAudioSourceConfigurations *onvifMedia__GetAudioSourceConfigurations;	/* optional element of type onvifMedia:GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurations_
#define SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurations_ (2949)
/* Operation wrapper: */
struct __onvifMedia__GetAudioEncoderConfigurations_
{
public:
	_onvifMedia__GetAudioEncoderConfigurations *onvifMedia__GetAudioEncoderConfigurations;	/* optional element of type onvifMedia:GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfigurations_
#define SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfigurations_ (2951)
/* Operation wrapper: */
struct __onvifMedia__GetVideoAnalyticsConfigurations_
{
public:
	_onvifMedia__GetVideoAnalyticsConfigurations *onvifMedia__GetVideoAnalyticsConfigurations;	/* optional element of type onvifMedia:GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetMetadataConfigurations_
#define SOAP_TYPE___onvifMedia__GetMetadataConfigurations_ (2953)
/* Operation wrapper: */
struct __onvifMedia__GetMetadataConfigurations_
{
public:
	_onvifMedia__GetMetadataConfigurations *onvifMedia__GetMetadataConfigurations;	/* optional element of type onvifMedia:GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputConfigurations_
#define SOAP_TYPE___onvifMedia__GetAudioOutputConfigurations_ (2955)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputConfigurations_
{
public:
	_onvifMedia__GetAudioOutputConfigurations *onvifMedia__GetAudioOutputConfigurations;	/* optional element of type onvifMedia:GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurations_
#define SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurations_ (2957)
/* Operation wrapper: */
struct __onvifMedia__GetAudioDecoderConfigurations_
{
public:
	_onvifMedia__GetAudioDecoderConfigurations *onvifMedia__GetAudioDecoderConfigurations;	/* optional element of type onvifMedia:GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSourceConfiguration_
#define SOAP_TYPE___onvifMedia__GetVideoSourceConfiguration_ (2959)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSourceConfiguration_
{
public:
	_onvifMedia__GetVideoSourceConfiguration *onvifMedia__GetVideoSourceConfiguration;	/* optional element of type onvifMedia:GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__GetVideoEncoderConfiguration_ (2961)
/* Operation wrapper: */
struct __onvifMedia__GetVideoEncoderConfiguration_
{
public:
	_onvifMedia__GetVideoEncoderConfiguration *onvifMedia__GetVideoEncoderConfiguration;	/* optional element of type onvifMedia:GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSourceConfiguration_
#define SOAP_TYPE___onvifMedia__GetAudioSourceConfiguration_ (2963)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSourceConfiguration_
{
public:
	_onvifMedia__GetAudioSourceConfiguration *onvifMedia__GetAudioSourceConfiguration;	/* optional element of type onvifMedia:GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__GetAudioEncoderConfiguration_ (2965)
/* Operation wrapper: */
struct __onvifMedia__GetAudioEncoderConfiguration_
{
public:
	_onvifMedia__GetAudioEncoderConfiguration *onvifMedia__GetAudioEncoderConfiguration;	/* optional element of type onvifMedia:GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfiguration_
#define SOAP_TYPE___onvifMedia__GetVideoAnalyticsConfiguration_ (2967)
/* Operation wrapper: */
struct __onvifMedia__GetVideoAnalyticsConfiguration_
{
public:
	_onvifMedia__GetVideoAnalyticsConfiguration *onvifMedia__GetVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetMetadataConfiguration_
#define SOAP_TYPE___onvifMedia__GetMetadataConfiguration_ (2969)
/* Operation wrapper: */
struct __onvifMedia__GetMetadataConfiguration_
{
public:
	_onvifMedia__GetMetadataConfiguration *onvifMedia__GetMetadataConfiguration;	/* optional element of type onvifMedia:GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputConfiguration_
#define SOAP_TYPE___onvifMedia__GetAudioOutputConfiguration_ (2971)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputConfiguration_
{
public:
	_onvifMedia__GetAudioOutputConfiguration *onvifMedia__GetAudioOutputConfiguration;	/* optional element of type onvifMedia:GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioDecoderConfiguration_
#define SOAP_TYPE___onvifMedia__GetAudioDecoderConfiguration_ (2973)
/* Operation wrapper: */
struct __onvifMedia__GetAudioDecoderConfiguration_
{
public:
	_onvifMedia__GetAudioDecoderConfiguration *onvifMedia__GetAudioDecoderConfiguration;	/* optional element of type onvifMedia:GetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleVideoEncoderConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleVideoEncoderConfigurations_ (2975)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleVideoEncoderConfigurations_
{
public:
	_onvifMedia__GetCompatibleVideoEncoderConfigurations *onvifMedia__GetCompatibleVideoEncoderConfigurations;	/* optional element of type onvifMedia:GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleVideoSourceConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleVideoSourceConfigurations_ (2977)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleVideoSourceConfigurations_
{
public:
	_onvifMedia__GetCompatibleVideoSourceConfigurations *onvifMedia__GetCompatibleVideoSourceConfigurations;	/* optional element of type onvifMedia:GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioEncoderConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioEncoderConfigurations_ (2979)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioEncoderConfigurations_
{
public:
	_onvifMedia__GetCompatibleAudioEncoderConfigurations *onvifMedia__GetCompatibleAudioEncoderConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioSourceConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioSourceConfigurations_ (2981)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioSourceConfigurations_
{
public:
	_onvifMedia__GetCompatibleAudioSourceConfigurations *onvifMedia__GetCompatibleAudioSourceConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleVideoAnalyticsConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleVideoAnalyticsConfigurations_ (2983)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleVideoAnalyticsConfigurations_
{
public:
	_onvifMedia__GetCompatibleVideoAnalyticsConfigurations *onvifMedia__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type onvifMedia:GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleMetadataConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleMetadataConfigurations_ (2985)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleMetadataConfigurations_
{
public:
	_onvifMedia__GetCompatibleMetadataConfigurations *onvifMedia__GetCompatibleMetadataConfigurations;	/* optional element of type onvifMedia:GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioOutputConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioOutputConfigurations_ (2987)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioOutputConfigurations_
{
public:
	_onvifMedia__GetCompatibleAudioOutputConfigurations *onvifMedia__GetCompatibleAudioOutputConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetCompatibleAudioDecoderConfigurations_
#define SOAP_TYPE___onvifMedia__GetCompatibleAudioDecoderConfigurations_ (2989)
/* Operation wrapper: */
struct __onvifMedia__GetCompatibleAudioDecoderConfigurations_
{
public:
	_onvifMedia__GetCompatibleAudioDecoderConfigurations *onvifMedia__GetCompatibleAudioDecoderConfigurations;	/* optional element of type onvifMedia:GetCompatibleAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetVideoSourceConfiguration_
#define SOAP_TYPE___onvifMedia__SetVideoSourceConfiguration_ (2991)
/* Operation wrapper: */
struct __onvifMedia__SetVideoSourceConfiguration_
{
public:
	_onvifMedia__SetVideoSourceConfiguration *onvifMedia__SetVideoSourceConfiguration;	/* optional element of type onvifMedia:SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetVideoEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__SetVideoEncoderConfiguration_ (2993)
/* Operation wrapper: */
struct __onvifMedia__SetVideoEncoderConfiguration_
{
public:
	_onvifMedia__SetVideoEncoderConfiguration *onvifMedia__SetVideoEncoderConfiguration;	/* optional element of type onvifMedia:SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioSourceConfiguration_
#define SOAP_TYPE___onvifMedia__SetAudioSourceConfiguration_ (2995)
/* Operation wrapper: */
struct __onvifMedia__SetAudioSourceConfiguration_
{
public:
	_onvifMedia__SetAudioSourceConfiguration *onvifMedia__SetAudioSourceConfiguration;	/* optional element of type onvifMedia:SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioEncoderConfiguration_
#define SOAP_TYPE___onvifMedia__SetAudioEncoderConfiguration_ (2997)
/* Operation wrapper: */
struct __onvifMedia__SetAudioEncoderConfiguration_
{
public:
	_onvifMedia__SetAudioEncoderConfiguration *onvifMedia__SetAudioEncoderConfiguration;	/* optional element of type onvifMedia:SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetVideoAnalyticsConfiguration_
#define SOAP_TYPE___onvifMedia__SetVideoAnalyticsConfiguration_ (2999)
/* Operation wrapper: */
struct __onvifMedia__SetVideoAnalyticsConfiguration_
{
public:
	_onvifMedia__SetVideoAnalyticsConfiguration *onvifMedia__SetVideoAnalyticsConfiguration;	/* optional element of type onvifMedia:SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetMetadataConfiguration_
#define SOAP_TYPE___onvifMedia__SetMetadataConfiguration_ (3001)
/* Operation wrapper: */
struct __onvifMedia__SetMetadataConfiguration_
{
public:
	_onvifMedia__SetMetadataConfiguration *onvifMedia__SetMetadataConfiguration;	/* optional element of type onvifMedia:SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioOutputConfiguration_
#define SOAP_TYPE___onvifMedia__SetAudioOutputConfiguration_ (3003)
/* Operation wrapper: */
struct __onvifMedia__SetAudioOutputConfiguration_
{
public:
	_onvifMedia__SetAudioOutputConfiguration *onvifMedia__SetAudioOutputConfiguration;	/* optional element of type onvifMedia:SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetAudioDecoderConfiguration_
#define SOAP_TYPE___onvifMedia__SetAudioDecoderConfiguration_ (3005)
/* Operation wrapper: */
struct __onvifMedia__SetAudioDecoderConfiguration_
{
public:
	_onvifMedia__SetAudioDecoderConfiguration *onvifMedia__SetAudioDecoderConfiguration;	/* optional element of type onvifMedia:SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoSourceConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetVideoSourceConfigurationOptions_ (3007)
/* Operation wrapper: */
struct __onvifMedia__GetVideoSourceConfigurationOptions_
{
public:
	_onvifMedia__GetVideoSourceConfigurationOptions *onvifMedia__GetVideoSourceConfigurationOptions;	/* optional element of type onvifMedia:GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetVideoEncoderConfigurationOptions_ (3009)
/* Operation wrapper: */
struct __onvifMedia__GetVideoEncoderConfigurationOptions_
{
public:
	_onvifMedia__GetVideoEncoderConfigurationOptions *onvifMedia__GetVideoEncoderConfigurationOptions;	/* optional element of type onvifMedia:GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioSourceConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetAudioSourceConfigurationOptions_ (3011)
/* Operation wrapper: */
struct __onvifMedia__GetAudioSourceConfigurationOptions_
{
public:
	_onvifMedia__GetAudioSourceConfigurationOptions *onvifMedia__GetAudioSourceConfigurationOptions;	/* optional element of type onvifMedia:GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetAudioEncoderConfigurationOptions_ (3013)
/* Operation wrapper: */
struct __onvifMedia__GetAudioEncoderConfigurationOptions_
{
public:
	_onvifMedia__GetAudioEncoderConfigurationOptions *onvifMedia__GetAudioEncoderConfigurationOptions;	/* optional element of type onvifMedia:GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetMetadataConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetMetadataConfigurationOptions_ (3015)
/* Operation wrapper: */
struct __onvifMedia__GetMetadataConfigurationOptions_
{
public:
	_onvifMedia__GetMetadataConfigurationOptions *onvifMedia__GetMetadataConfigurationOptions;	/* optional element of type onvifMedia:GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioOutputConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetAudioOutputConfigurationOptions_ (3017)
/* Operation wrapper: */
struct __onvifMedia__GetAudioOutputConfigurationOptions_
{
public:
	_onvifMedia__GetAudioOutputConfigurationOptions *onvifMedia__GetAudioOutputConfigurationOptions;	/* optional element of type onvifMedia:GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurationOptions_
#define SOAP_TYPE___onvifMedia__GetAudioDecoderConfigurationOptions_ (3019)
/* Operation wrapper: */
struct __onvifMedia__GetAudioDecoderConfigurationOptions_
{
public:
	_onvifMedia__GetAudioDecoderConfigurationOptions *onvifMedia__GetAudioDecoderConfigurationOptions;	/* optional element of type onvifMedia:GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances_
#define SOAP_TYPE___onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances_ (3021)
/* Operation wrapper: */
struct __onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances_
{
public:
	_onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances *onvifMedia__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type onvifMedia:GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetStreamUri_
#define SOAP_TYPE___onvifMedia__GetStreamUri_ (3023)
/* Operation wrapper: */
struct __onvifMedia__GetStreamUri_
{
public:
	_onvifMedia__GetStreamUri *onvifMedia__GetStreamUri;	/* optional element of type onvifMedia:GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__StartMulticastStreaming_
#define SOAP_TYPE___onvifMedia__StartMulticastStreaming_ (3025)
/* Operation wrapper: */
struct __onvifMedia__StartMulticastStreaming_
{
public:
	_onvifMedia__StartMulticastStreaming *onvifMedia__StartMulticastStreaming;	/* optional element of type onvifMedia:StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__StopMulticastStreaming_
#define SOAP_TYPE___onvifMedia__StopMulticastStreaming_ (3027)
/* Operation wrapper: */
struct __onvifMedia__StopMulticastStreaming_
{
public:
	_onvifMedia__StopMulticastStreaming *onvifMedia__StopMulticastStreaming;	/* optional element of type onvifMedia:StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__SetSynchronizationPoint_
#define SOAP_TYPE___onvifMedia__SetSynchronizationPoint_ (3029)
/* Operation wrapper: */
struct __onvifMedia__SetSynchronizationPoint_
{
public:
	_onvifMedia__SetSynchronizationPoint *onvifMedia__SetSynchronizationPoint;	/* optional element of type onvifMedia:SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___onvifMedia__GetSnapshotUri_
#define SOAP_TYPE___onvifMedia__GetSnapshotUri_ (3031)
/* Operation wrapper: */
struct __onvifMedia__GetSnapshotUri_
{
public:
	_onvifMedia__GetSnapshotUri *onvifMedia__GetSnapshotUri;	/* optional element of type onvifMedia:GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetServiceCapabilities
#define SOAP_TYPE___onvifPtz__GetServiceCapabilities (3035)
/* Operation wrapper: */
struct __onvifPtz__GetServiceCapabilities
{
public:
	_onvifPtz__GetServiceCapabilities *onvifPtz__GetServiceCapabilities;	/* optional element of type onvifPtz:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetConfigurations
#define SOAP_TYPE___onvifPtz__GetConfigurations (3039)
/* Operation wrapper: */
struct __onvifPtz__GetConfigurations
{
public:
	_onvifPtz__GetConfigurations *onvifPtz__GetConfigurations;	/* optional element of type onvifPtz:GetConfigurations */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetPresets
#define SOAP_TYPE___onvifPtz__GetPresets (3043)
/* Operation wrapper: */
struct __onvifPtz__GetPresets
{
public:
	_onvifPtz__GetPresets *onvifPtz__GetPresets;	/* optional element of type onvifPtz:GetPresets */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__SetPreset
#define SOAP_TYPE___onvifPtz__SetPreset (3047)
/* Operation wrapper: */
struct __onvifPtz__SetPreset
{
public:
	_onvifPtz__SetPreset *onvifPtz__SetPreset;	/* optional element of type onvifPtz:SetPreset */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__RemovePreset
#define SOAP_TYPE___onvifPtz__RemovePreset (3051)
/* Operation wrapper: */
struct __onvifPtz__RemovePreset
{
public:
	_onvifPtz__RemovePreset *onvifPtz__RemovePreset;	/* optional element of type onvifPtz:RemovePreset */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GotoPreset
#define SOAP_TYPE___onvifPtz__GotoPreset (3055)
/* Operation wrapper: */
struct __onvifPtz__GotoPreset
{
public:
	_onvifPtz__GotoPreset *onvifPtz__GotoPreset;	/* optional element of type onvifPtz:GotoPreset */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetStatus
#define SOAP_TYPE___onvifPtz__GetStatus (3059)
/* Operation wrapper: */
struct __onvifPtz__GetStatus
{
public:
	_onvifPtz__GetStatus *onvifPtz__GetStatus;	/* optional element of type onvifPtz:GetStatus */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetConfiguration
#define SOAP_TYPE___onvifPtz__GetConfiguration (3063)
/* Operation wrapper: */
struct __onvifPtz__GetConfiguration
{
public:
	_onvifPtz__GetConfiguration *onvifPtz__GetConfiguration;	/* optional element of type onvifPtz:GetConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetNodes
#define SOAP_TYPE___onvifPtz__GetNodes (3067)
/* Operation wrapper: */
struct __onvifPtz__GetNodes
{
public:
	_onvifPtz__GetNodes *onvifPtz__GetNodes;	/* optional element of type onvifPtz:GetNodes */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetNode
#define SOAP_TYPE___onvifPtz__GetNode (3071)
/* Operation wrapper: */
struct __onvifPtz__GetNode
{
public:
	_onvifPtz__GetNode *onvifPtz__GetNode;	/* optional element of type onvifPtz:GetNode */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__SetConfiguration
#define SOAP_TYPE___onvifPtz__SetConfiguration (3075)
/* Operation wrapper: */
struct __onvifPtz__SetConfiguration
{
public:
	_onvifPtz__SetConfiguration *onvifPtz__SetConfiguration;	/* optional element of type onvifPtz:SetConfiguration */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetConfigurationOptions
#define SOAP_TYPE___onvifPtz__GetConfigurationOptions (3079)
/* Operation wrapper: */
struct __onvifPtz__GetConfigurationOptions
{
public:
	_onvifPtz__GetConfigurationOptions *onvifPtz__GetConfigurationOptions;	/* optional element of type onvifPtz:GetConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GotoHomePosition
#define SOAP_TYPE___onvifPtz__GotoHomePosition (3083)
/* Operation wrapper: */
struct __onvifPtz__GotoHomePosition
{
public:
	_onvifPtz__GotoHomePosition *onvifPtz__GotoHomePosition;	/* optional element of type onvifPtz:GotoHomePosition */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__SetHomePosition
#define SOAP_TYPE___onvifPtz__SetHomePosition (3087)
/* Operation wrapper: */
struct __onvifPtz__SetHomePosition
{
public:
	_onvifPtz__SetHomePosition *onvifPtz__SetHomePosition;	/* optional element of type onvifPtz:SetHomePosition */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__ContinuousMove
#define SOAP_TYPE___onvifPtz__ContinuousMove (3091)
/* Operation wrapper: */
struct __onvifPtz__ContinuousMove
{
public:
	_onvifPtz__ContinuousMove *onvifPtz__ContinuousMove;	/* optional element of type onvifPtz:ContinuousMove */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__RelativeMove
#define SOAP_TYPE___onvifPtz__RelativeMove (3095)
/* Operation wrapper: */
struct __onvifPtz__RelativeMove
{
public:
	_onvifPtz__RelativeMove *onvifPtz__RelativeMove;	/* optional element of type onvifPtz:RelativeMove */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__SendAuxiliaryCommand
#define SOAP_TYPE___onvifPtz__SendAuxiliaryCommand (3099)
/* Operation wrapper: */
struct __onvifPtz__SendAuxiliaryCommand
{
public:
	_onvifPtz__SendAuxiliaryCommand *onvifPtz__SendAuxiliaryCommand;	/* optional element of type onvifPtz:SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__AbsoluteMove
#define SOAP_TYPE___onvifPtz__AbsoluteMove (3103)
/* Operation wrapper: */
struct __onvifPtz__AbsoluteMove
{
public:
	_onvifPtz__AbsoluteMove *onvifPtz__AbsoluteMove;	/* optional element of type onvifPtz:AbsoluteMove */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__Stop
#define SOAP_TYPE___onvifPtz__Stop (3107)
/* Operation wrapper: */
struct __onvifPtz__Stop
{
public:
	_onvifPtz__Stop *onvifPtz__Stop;	/* optional element of type onvifPtz:Stop */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetPresetTours
#define SOAP_TYPE___onvifPtz__GetPresetTours (3111)
/* Operation wrapper: */
struct __onvifPtz__GetPresetTours
{
public:
	_onvifPtz__GetPresetTours *onvifPtz__GetPresetTours;	/* optional element of type onvifPtz:GetPresetTours */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetPresetTour
#define SOAP_TYPE___onvifPtz__GetPresetTour (3115)
/* Operation wrapper: */
struct __onvifPtz__GetPresetTour
{
public:
	_onvifPtz__GetPresetTour *onvifPtz__GetPresetTour;	/* optional element of type onvifPtz:GetPresetTour */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__GetPresetTourOptions
#define SOAP_TYPE___onvifPtz__GetPresetTourOptions (3119)
/* Operation wrapper: */
struct __onvifPtz__GetPresetTourOptions
{
public:
	_onvifPtz__GetPresetTourOptions *onvifPtz__GetPresetTourOptions;	/* optional element of type onvifPtz:GetPresetTourOptions */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__CreatePresetTour
#define SOAP_TYPE___onvifPtz__CreatePresetTour (3123)
/* Operation wrapper: */
struct __onvifPtz__CreatePresetTour
{
public:
	_onvifPtz__CreatePresetTour *onvifPtz__CreatePresetTour;	/* optional element of type onvifPtz:CreatePresetTour */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__ModifyPresetTour
#define SOAP_TYPE___onvifPtz__ModifyPresetTour (3127)
/* Operation wrapper: */
struct __onvifPtz__ModifyPresetTour
{
public:
	_onvifPtz__ModifyPresetTour *onvifPtz__ModifyPresetTour;	/* optional element of type onvifPtz:ModifyPresetTour */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__OperatePresetTour
#define SOAP_TYPE___onvifPtz__OperatePresetTour (3131)
/* Operation wrapper: */
struct __onvifPtz__OperatePresetTour
{
public:
	_onvifPtz__OperatePresetTour *onvifPtz__OperatePresetTour;	/* optional element of type onvifPtz:OperatePresetTour */
};
#endif

#ifndef SOAP_TYPE___onvifPtz__RemovePresetTour
#define SOAP_TYPE___onvifPtz__RemovePresetTour (3135)
/* Operation wrapper: */
struct __onvifPtz__RemovePresetTour
{
public:
	_onvifPtz__RemovePresetTour *onvifPtz__RemovePresetTour;	/* optional element of type onvifPtz:RemovePresetTour */
};
#endif

#ifndef SOAP_TYPE___tev_cpb__CreatePullPoint
#define SOAP_TYPE___tev_cpb__CreatePullPoint (3139)
/* Operation wrapper: */
struct __tev_cpb__CreatePullPoint
{
public:
	_oasisWsnB2__CreatePullPoint *oasisWsnB2__CreatePullPoint;	/* optional element of type oasisWsnB2:CreatePullPoint */
};
#endif

#ifndef SOAP_TYPE___tev_eb__GetServiceCapabilities
#define SOAP_TYPE___tev_eb__GetServiceCapabilities (3143)
/* Operation wrapper: */
struct __tev_eb__GetServiceCapabilities
{
public:
	_onvifEvents__GetServiceCapabilities *onvifEvents__GetServiceCapabilities;	/* optional element of type onvifEvents:GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tev_eb__CreatePullPointSubscription
#define SOAP_TYPE___tev_eb__CreatePullPointSubscription (3147)
/* Operation wrapper: */
struct __tev_eb__CreatePullPointSubscription
{
public:
	_onvifEvents__CreatePullPointSubscription *onvifEvents__CreatePullPointSubscription;	/* optional element of type onvifEvents:CreatePullPointSubscription */
};
#endif

#ifndef SOAP_TYPE___tev_eb__GetEventProperties
#define SOAP_TYPE___tev_eb__GetEventProperties (3151)
/* Operation wrapper: */
struct __tev_eb__GetEventProperties
{
public:
	_onvifEvents__GetEventProperties *onvifEvents__GetEventProperties;	/* optional element of type onvifEvents:GetEventProperties */
};
#endif

#ifndef SOAP_TYPE___tev_ncb__Notify
#define SOAP_TYPE___tev_ncb__Notify (3154)
/* Operation wrapper: */
struct __tev_ncb__Notify
{
public:
	_oasisWsnB2__Notify *oasisWsnB2__Notify;	/* optional element of type oasisWsnB2:Notify */
};
#endif

#ifndef SOAP_TYPE___tev_npb__Subscribe
#define SOAP_TYPE___tev_npb__Subscribe (3158)
/* Operation wrapper: */
struct __tev_npb__Subscribe
{
public:
	_oasisWsnB2__Subscribe *oasisWsnB2__Subscribe;	/* optional element of type oasisWsnB2:Subscribe */
};
#endif

#ifndef SOAP_TYPE___tev_npb__GetCurrentMessage
#define SOAP_TYPE___tev_npb__GetCurrentMessage (3162)
/* Operation wrapper: */
struct __tev_npb__GetCurrentMessage
{
public:
	_oasisWsnB2__GetCurrentMessage *oasisWsnB2__GetCurrentMessage;	/* optional element of type oasisWsnB2:GetCurrentMessage */
};
#endif

#ifndef SOAP_TYPE___tev_ppb__GetMessages
#define SOAP_TYPE___tev_ppb__GetMessages (3166)
/* Operation wrapper: */
struct __tev_ppb__GetMessages
{
public:
	_oasisWsnB2__GetMessages *oasisWsnB2__GetMessages;	/* optional element of type oasisWsnB2:GetMessages */
};
#endif

#ifndef SOAP_TYPE___tev_ppb__DestroyPullPoint
#define SOAP_TYPE___tev_ppb__DestroyPullPoint (3170)
/* Operation wrapper: */
struct __tev_ppb__DestroyPullPoint
{
public:
	_oasisWsnB2__DestroyPullPoint *oasisWsnB2__DestroyPullPoint;	/* optional element of type oasisWsnB2:DestroyPullPoint */
};
#endif

#ifndef SOAP_TYPE___tev_ppb__Notify
#define SOAP_TYPE___tev_ppb__Notify (3172)
/* Operation wrapper: */
struct __tev_ppb__Notify
{
public:
	_oasisWsnB2__Notify *oasisWsnB2__Notify;	/* optional element of type oasisWsnB2:Notify */
};
#endif

#ifndef SOAP_TYPE___tev_pps__PullMessages
#define SOAP_TYPE___tev_pps__PullMessages (3176)
/* Operation wrapper: */
struct __tev_pps__PullMessages
{
public:
	_onvifEvents__PullMessages *onvifEvents__PullMessages;	/* optional element of type onvifEvents:PullMessages */
};
#endif

#ifndef SOAP_TYPE___tev_pps__SetSynchronizationPoint
#define SOAP_TYPE___tev_pps__SetSynchronizationPoint (3180)
/* Operation wrapper: */
struct __tev_pps__SetSynchronizationPoint
{
public:
	_onvifEvents__SetSynchronizationPoint *onvifEvents__SetSynchronizationPoint;	/* optional element of type onvifEvents:SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___tev_smb__Renew
#define SOAP_TYPE___tev_smb__Renew (3182)
/* Operation wrapper: */
struct __tev_smb__Renew
{
public:
	_oasisWsnB2__Renew *oasisWsnB2__Renew;	/* optional element of type oasisWsnB2:Renew */
};
#endif

#ifndef SOAP_TYPE___tev_smb__Unsubscribe
#define SOAP_TYPE___tev_smb__Unsubscribe (3184)
/* Operation wrapper: */
struct __tev_smb__Unsubscribe
{
public:
	_oasisWsnB2__Unsubscribe *oasisWsnB2__Unsubscribe;	/* optional element of type oasisWsnB2:Unsubscribe */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (3185)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (3187)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__ds__Signature
#define SOAP_TYPE__ds__Signature (27)
typedef struct ds__SignatureType _ds__Signature;
#endif

#ifndef SOAP_TYPE__ds__Transform
#define SOAP_TYPE__ds__Transform (35)
typedef struct ds__TransformType _ds__Transform;
#endif

#ifndef SOAP_TYPE__ds__KeyInfo
#define SOAP_TYPE__ds__KeyInfo (44)
typedef struct ds__KeyInfoType _ds__KeyInfo;
#endif

#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (102)
typedef struct wsa__EndpointReferenceType _wsa__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (103)
typedef char *_wsa__MessageID;
#endif

#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (104)
typedef struct wsa__Relationship _wsa__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (105)
typedef char *_wsa__To;
#endif

#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (106)
typedef char *_wsa__Action;
#endif

#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (107)
typedef struct wsa__EndpointReferenceType _wsa__From;
#endif

#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (108)
typedef struct wsa__EndpointReferenceType _wsa__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (109)
typedef struct wsa__EndpointReferenceType _wsa__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (111)
typedef unsigned int _wsa__ReplyAfter;
#endif

#ifndef SOAP_TYPE_wsdd__QNameListType
#define SOAP_TYPE_wsdd__QNameListType (128)
typedef char *wsdd__QNameListType;
#endif

#ifndef SOAP_TYPE_wsdd__UriListType
#define SOAP_TYPE_wsdd__UriListType (129)
typedef char *wsdd__UriListType;
#endif

#ifndef SOAP_TYPE_wsdd__FaultCodeOpenType
#define SOAP_TYPE_wsdd__FaultCodeOpenType (130)
typedef char *wsdd__FaultCodeOpenType;
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (160)
typedef std::string SOAP_ENV__Envelope;
#endif

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (161)
typedef std::string xsd__NCName;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (165)
typedef std::string xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (167)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (177)
typedef std::string xsd__duration;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (184)
typedef std::string xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (186)
typedef std::string xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (189)
typedef std::string xsd__token;
#endif

#ifndef SOAP_TYPE__xmime__contentType
#define SOAP_TYPE__xmime__contentType (193)
typedef std::string _xmime__contentType;
#endif

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (194)
typedef std::string _xml__lang;
#endif

#ifndef SOAP_TYPE_ns1__RelationshipTypeOpenEnum
#define SOAP_TYPE_ns1__RelationshipTypeOpenEnum (1139)
typedef std::string ns1__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_ns1__FaultCodesOpenEnumType
#define SOAP_TYPE_ns1__FaultCodesOpenEnumType (1140)
typedef std::string ns1__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE_oasisWsnB2__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_oasisWsnB2__AbsoluteOrRelativeTimeType (1141)
typedef std::string oasisWsnB2__AbsoluteOrRelativeTimeType;
#endif

#ifndef SOAP_TYPE_onvifDevice__EAPMethodTypes
#define SOAP_TYPE_onvifDevice__EAPMethodTypes (1142)
typedef std::string onvifDevice__EAPMethodTypes;
#endif

#ifndef SOAP_TYPE_onvifXsd__IntAttrList
#define SOAP_TYPE_onvifXsd__IntAttrList (1143)
typedef std::string onvifXsd__IntAttrList;
#endif

#ifndef SOAP_TYPE_onvifXsd__FloatAttrList
#define SOAP_TYPE_onvifXsd__FloatAttrList (1144)
typedef std::string onvifXsd__FloatAttrList;
#endif

#ifndef SOAP_TYPE_onvifXsd__StringAttrList
#define SOAP_TYPE_onvifXsd__StringAttrList (1145)
typedef std::string onvifXsd__StringAttrList;
#endif

#ifndef SOAP_TYPE_onvifDeviceIO__DelayTimes
#define SOAP_TYPE_onvifDeviceIO__DelayTimes (1146)
typedef std::string onvifDeviceIO__DelayTimes;
#endif

#ifndef SOAP_TYPE_oasisWsnT1__FullTopicExpression
#define SOAP_TYPE_oasisWsnT1__FullTopicExpression (1151)
typedef std::string oasisWsnT1__FullTopicExpression;
#endif

#ifndef SOAP_TYPE_oasisWsnT1__ConcreteTopicExpression
#define SOAP_TYPE_oasisWsnT1__ConcreteTopicExpression (1153)
typedef std::string oasisWsnT1__ConcreteTopicExpression;
#endif

#ifndef SOAP_TYPE_oasisWsnT1__SimpleTopicExpression
#define SOAP_TYPE_oasisWsnT1__SimpleTopicExpression (1155)
typedef std::string oasisWsnT1__SimpleTopicExpression;
#endif

#ifndef SOAP_TYPE_onvifXsd__ReferenceToken
#define SOAP_TYPE_onvifXsd__ReferenceToken (1157)
typedef std::string onvifXsd__ReferenceToken;
#endif

#ifndef SOAP_TYPE_onvifXsd__Name
#define SOAP_TYPE_onvifXsd__Name (1159)
typedef std::string onvifXsd__Name;
#endif

#ifndef SOAP_TYPE_onvifXsd__NetworkInterfaceConfigPriority
#define SOAP_TYPE_onvifXsd__NetworkInterfaceConfigPriority (1179)
typedef std::string onvifXsd__NetworkInterfaceConfigPriority;
#endif

#ifndef SOAP_TYPE_onvifXsd__IANA_IfTypes
#define SOAP_TYPE_onvifXsd__IANA_IfTypes (1183)
typedef int onvifXsd__IANA_IfTypes;
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv4Address
#define SOAP_TYPE_onvifXsd__IPv4Address (1191)
typedef std::string onvifXsd__IPv4Address;
#endif

#ifndef SOAP_TYPE_onvifXsd__IPv6Address
#define SOAP_TYPE_onvifXsd__IPv6Address (1193)
typedef std::string onvifXsd__IPv6Address;
#endif

#ifndef SOAP_TYPE_onvifXsd__HwAddress
#define SOAP_TYPE_onvifXsd__HwAddress (1195)
typedef std::string onvifXsd__HwAddress;
#endif

#ifndef SOAP_TYPE_onvifXsd__DNSName
#define SOAP_TYPE_onvifXsd__DNSName (1199)
typedef std::string onvifXsd__DNSName;
#endif

#ifndef SOAP_TYPE_onvifXsd__Domain
#define SOAP_TYPE_onvifXsd__Domain (1201)
typedef std::string onvifXsd__Domain;
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11SSIDType
#define SOAP_TYPE_onvifXsd__Dot11SSIDType (1207)
typedef xsd__hexBinary onvifXsd__Dot11SSIDType;
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11PSK
#define SOAP_TYPE_onvifXsd__Dot11PSK (1215)
typedef xsd__hexBinary onvifXsd__Dot11PSK;
#endif

#ifndef SOAP_TYPE_onvifXsd__Dot11PSKPassphrase
#define SOAP_TYPE_onvifXsd__Dot11PSKPassphrase (1217)
typedef std::string onvifXsd__Dot11PSKPassphrase;
#endif

#ifndef SOAP_TYPE_onvifXsd__AuxiliaryData
#define SOAP_TYPE_onvifXsd__AuxiliaryData (1243)
typedef std::string onvifXsd__AuxiliaryData;
#endif

#ifndef SOAP_TYPE_onvifXsd__TopicNamespaceLocation
#define SOAP_TYPE_onvifXsd__TopicNamespaceLocation (1271)
typedef std::string onvifXsd__TopicNamespaceLocation;
#endif

#ifndef SOAP_TYPE_onvifXsd__Description
#define SOAP_TYPE_onvifXsd__Description (1283)
typedef std::string onvifXsd__Description;
#endif

#ifndef SOAP_TYPE_onvifXsd__XPathExpression
#define SOAP_TYPE_onvifXsd__XPathExpression (1285)
typedef std::string onvifXsd__XPathExpression;
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobMode
#define SOAP_TYPE_onvifXsd__RecordingJobMode (1293)
typedef std::string onvifXsd__RecordingJobMode;
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobState
#define SOAP_TYPE_onvifXsd__RecordingJobState (1295)
typedef std::string onvifXsd__RecordingJobState;
#endif

#ifndef SOAP_TYPE_onvifXsd__ReceiverReference
#define SOAP_TYPE_onvifXsd__ReceiverReference (1303)
typedef std::string onvifXsd__ReceiverReference;
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingReference
#define SOAP_TYPE_onvifXsd__RecordingReference (1305)
typedef std::string onvifXsd__RecordingReference;
#endif

#ifndef SOAP_TYPE_onvifXsd__TrackReference
#define SOAP_TYPE_onvifXsd__TrackReference (1307)
typedef std::string onvifXsd__TrackReference;
#endif

#ifndef SOAP_TYPE_onvifXsd__JobToken
#define SOAP_TYPE_onvifXsd__JobToken (1309)
typedef std::string onvifXsd__JobToken;
#endif

#ifndef SOAP_TYPE_onvifXsd__RecordingJobReference
#define SOAP_TYPE_onvifXsd__RecordingJobReference (1311)
typedef std::string onvifXsd__RecordingJobReference;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
