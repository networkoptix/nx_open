# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EST_Track', [dirname(__file__)])
        except ImportError:
            import _EST_Track
            return _EST_Track
        if fp is not None:
            try:
                _mod = imp.load_module('_EST_Track', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EST_Track = swig_import_helper()
    del swig_import_helper
else:
    import _EST_Track
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


read_ok = _EST_Track.read_ok
read_format_error = _EST_Track.read_format_error
read_not_found_error = _EST_Track.read_not_found_error
read_error = _EST_Track.read_error
write_ok = _EST_Track.write_ok
write_fail = _EST_Track.write_fail
write_error = _EST_Track.write_error
write_partial = _EST_Track.write_partial
connect_ok = _EST_Track.connect_ok
connect_not_found_error = _EST_Track.connect_not_found_error
connect_not_allowed_error = _EST_Track.connect_not_allowed_error
connect_system_error = _EST_Track.connect_system_error
connect_error = _EST_Track.connect_error
import EST_FVector
class EST_Track(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EST_Track, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EST_Track, name)
    __repr__ = _swig_repr
    __swig_getmethods__["default_frame_shift"] = _EST_Track.EST_Track_default_frame_shift_get
    if _newclass:default_frame_shift = _swig_property(_EST_Track.EST_Track_default_frame_shift_get)
    __swig_getmethods__["default_sample_rate"] = _EST_Track.EST_Track_default_sample_rate_get
    if _newclass:default_sample_rate = _swig_property(_EST_Track.EST_Track_default_sample_rate_get)
    def __init__(self, *args): 
        this = _EST_Track.new_EST_Track(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _EST_Track.delete_EST_Track
    __del__ = lambda self : None;
    def resize(self, *args): return _EST_Track.EST_Track_resize(self, *args)
    def set_num_channels(self, *args): return _EST_Track.EST_Track_set_num_channels(self, *args)
    def set_num_frames(self, *args): return _EST_Track.EST_Track_set_num_frames(self, *args)
    def set_channel_name(self, *args): return _EST_Track.EST_Track_set_channel_name(self, *args)
    def set_aux_channel_name(self, *args): return _EST_Track.EST_Track_set_aux_channel_name(self, *args)
    def copy_setup(self, *args): return _EST_Track.EST_Track_copy_setup(self, *args)
    def name(self): return _EST_Track.EST_Track_name(self)
    def set_name(self, *args): return _EST_Track.EST_Track_set_name(self, *args)
    def frame(self, *args): return _EST_Track.EST_Track_frame(self, *args)
    def channel(self, *args): return _EST_Track.EST_Track_channel(self, *args)
    def sub_track(self, *args): return _EST_Track.EST_Track_sub_track(self, *args)
    def copy_sub_track(self, *args): return _EST_Track.EST_Track_copy_sub_track(self, *args)
    def copy_sub_track_out(self, *args): return _EST_Track.EST_Track_copy_sub_track_out(self, *args)
    def copy_channel_out(self, *args): return _EST_Track.EST_Track_copy_channel_out(self, *args)
    def copy_frame_out(self, *args): return _EST_Track.EST_Track_copy_frame_out(self, *args)
    def copy_channel_in(self, *args): return _EST_Track.EST_Track_copy_channel_in(self, *args)
    def copy_frame_in(self, *args): return _EST_Track.EST_Track_copy_frame_in(self, *args)
    def channel_position(self, *args): return _EST_Track.EST_Track_channel_position(self, *args)
    def has_channel(self, *args): return _EST_Track.EST_Track_has_channel(self, *args)
    def a(self, *args): return _EST_Track.EST_Track_a(self, *args)
    def t(self, i = 0): return _EST_Track.EST_Track_t(self, i)
    def ms_t(self, *args): return _EST_Track.EST_Track_ms_t(self, *args)
    def fill_time(self, *args): return _EST_Track.EST_Track_fill_time(self, *args)
    def fill(self, *args): return _EST_Track.EST_Track_fill(self, *args)
    def sample(self, *args): return _EST_Track.EST_Track_sample(self, *args)
    def shift(self): return _EST_Track.EST_Track_shift(self)
    def start(self): return _EST_Track.EST_Track_start(self)
    def end(self): return _EST_Track.EST_Track_end(self)
    def load(self, *args): return _EST_Track.EST_Track_load(self, *args)
    def save(self, *args): return _EST_Track.EST_Track_save(self, *args)
    def set_break(self, *args): return _EST_Track.EST_Track_set_break(self, *args)
    def set_value(self, *args): return _EST_Track.EST_Track_set_value(self, *args)
    def val(self, *args): return _EST_Track.EST_Track_val(self, *args)
    def track_break(self, *args): return _EST_Track.EST_Track_track_break(self, *args)
    def prev_non_break(self, *args): return _EST_Track.EST_Track_prev_non_break(self, *args)
    def next_non_break(self, *args): return _EST_Track.EST_Track_next_non_break(self, *args)
    def empty(self): return _EST_Track.EST_Track_empty(self)
    def index(self, *args): return _EST_Track.EST_Track_index(self, *args)
    def index_below(self, *args): return _EST_Track.EST_Track_index_below(self, *args)
    def num_frames(self): return _EST_Track.EST_Track_num_frames(self)
    def length(self): return _EST_Track.EST_Track_length(self)
    def num_channels(self): return _EST_Track.EST_Track_num_channels(self)
    def num_aux_channels(self): return _EST_Track.EST_Track_num_aux_channels(self)
    def equal_space(self): return _EST_Track.EST_Track_equal_space(self)
    def single_break(self): return _EST_Track.EST_Track_single_break(self)
    def set_equal_space(self, *args): return _EST_Track.EST_Track_set_equal_space(self, *args)
    def set_single_break(self, *args): return _EST_Track.EST_Track_set_single_break(self, *args)
    def __iadd__(self, *args): return _EST_Track.EST_Track___iadd__(self, *args)
    def __ior__(self, *args): return _EST_Track.EST_Track___ior__(self, *args)
    def load_channel_names(self, *args): return _EST_Track.EST_Track_load_channel_names(self, *args)
    def save_channel_names(self, *args): return _EST_Track.EST_Track_save_channel_names(self, *args)
    def channel_name(self, *args): return _EST_Track.EST_Track_channel_name(self, *args)
    def aux_channel_name(self, *args): return _EST_Track.EST_Track_aux_channel_name(self, *args)
EST_Track_swigregister = _EST_Track.EST_Track_swigregister
EST_Track_swigregister(EST_Track)



def mean(*args):
  return _EST_Track.mean(*args)
mean = _EST_Track.mean

def meansd(*args):
  return _EST_Track.meansd(*args)
meansd = _EST_Track.meansd

def normalise(*args):
  return _EST_Track.normalise(*args)
normalise = _EST_Track.normalise

