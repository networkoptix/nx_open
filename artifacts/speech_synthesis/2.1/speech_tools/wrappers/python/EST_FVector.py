# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EST_FVector', [dirname(__file__)])
        except ImportError:
            import _EST_FVector
            return _EST_FVector
        if fp is not None:
            try:
                _mod = imp.load_module('_EST_FVector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EST_FVector = swig_import_helper()
    del swig_import_helper
else:
    import _EST_FVector
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


read_ok = _EST_FVector.read_ok
read_format_error = _EST_FVector.read_format_error
read_not_found_error = _EST_FVector.read_not_found_error
read_error = _EST_FVector.read_error
write_ok = _EST_FVector.write_ok
write_fail = _EST_FVector.write_fail
write_error = _EST_FVector.write_error
write_partial = _EST_FVector.write_partial
connect_ok = _EST_FVector.connect_ok
connect_not_found_error = _EST_FVector.connect_not_found_error
connect_not_allowed_error = _EST_FVector.connect_not_allowed_error
connect_system_error = _EST_FVector.connect_system_error
connect_error = _EST_FVector.connect_error
class floatvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatvector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _EST_FVector.new_floatvector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _EST_FVector.delete_floatvector
    __del__ = lambda self : None;
    def resize(self, *args): return _EST_FVector.floatvector_resize(self, *args)
    def num_columns(self): return _EST_FVector.floatvector_num_columns(self)
    def length(self): return _EST_FVector.floatvector_length(self)
    def n(self): return _EST_FVector.floatvector_n(self)
    def a_no_check(self, *args): return _EST_FVector.floatvector_a_no_check(self, *args)
    def a_no_check_1(self, *args): return _EST_FVector.floatvector_a_no_check_1(self, *args)
    def a_check(self, *args): return _EST_FVector.floatvector_a_check(self, *args)
    def a(self, *args): return _EST_FVector.floatvector_a(self, *args)
    def fill(self, *args): return _EST_FVector.floatvector_fill(self, *args)
    def empty(self): return _EST_FVector.floatvector_empty(self)
    def __eq__(self, *args): return _EST_FVector.floatvector___eq__(self, *args)
    def __ne__(self, *args): return _EST_FVector.floatvector___ne__(self, *args)
    def __setitem__(self, *args): return _EST_FVector.floatvector___setitem__(self, *args)
    def __getitem__(self, *args): return _EST_FVector.floatvector___getitem__(self, *args)
    def copy_section(self, *args): return _EST_FVector.floatvector_copy_section(self, *args)
    def set_section(self, *args): return _EST_FVector.floatvector_set_section(self, *args)
floatvector_swigregister = _EST_FVector.floatvector_swigregister
floatvector_swigregister(floatvector)

class floatsimplevector(floatvector):
    __swig_setmethods__ = {}
    for _s in [floatvector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatsimplevector, name, value)
    __swig_getmethods__ = {}
    for _s in [floatvector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, floatsimplevector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _EST_FVector.new_floatsimplevector(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args): return _EST_FVector.floatsimplevector_resize(self, *args)
    def copy_section(self, *args): return _EST_FVector.floatsimplevector_copy_section(self, *args)
    def set_section(self, *args): return _EST_FVector.floatsimplevector_set_section(self, *args)
    def zero(self): return _EST_FVector.floatsimplevector_zero(self)
    def empty(self): return _EST_FVector.floatsimplevector_empty(self)
    __swig_destroy__ = _EST_FVector.delete_floatsimplevector
    __del__ = lambda self : None;
floatsimplevector_swigregister = _EST_FVector.floatsimplevector_swigregister
floatsimplevector_swigregister(floatsimplevector)

class EST_FVector(floatsimplevector):
    __swig_setmethods__ = {}
    for _s in [floatsimplevector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EST_FVector, name, value)
    __swig_getmethods__ = {}
    for _s in [floatsimplevector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EST_FVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _EST_FVector.new_EST_FVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _EST_FVector.EST_FVector___iadd__(self, *args)
    def __imul__(self, *args): return _EST_FVector.EST_FVector___imul__(self, *args)
    def __idiv__(self, *args): return _EST_FVector.EST_FVector___idiv__(self, *args)
    def est_save(self, *args): return _EST_FVector.EST_FVector_est_save(self, *args)
    def save(self, *args): return _EST_FVector.EST_FVector_save(self, *args)
    def load(self, *args): return _EST_FVector.EST_FVector_load(self, *args)
    def est_load(self, *args): return _EST_FVector.EST_FVector_est_load(self, *args)
    def randomise(self, *args): return _EST_FVector.EST_FVector_randomise(self, *args)
    def sum(self): return _EST_FVector.EST_FVector_sum(self)
    __swig_destroy__ = _EST_FVector.delete_EST_FVector
    __del__ = lambda self : None;
EST_FVector_swigregister = _EST_FVector.EST_FVector_swigregister
EST_FVector_swigregister(EST_FVector)


def add(*args):
  return _EST_FVector.add(*args)
add = _EST_FVector.add

def subtract(*args):
  return _EST_FVector.subtract(*args)
subtract = _EST_FVector.subtract

def sqrt(*args):
  return _EST_FVector.sqrt(*args)
sqrt = _EST_FVector.sqrt

def topower(*args):
  return _EST_FVector.topower(*args)
topower = _EST_FVector.topower

def polynomial_value(*args):
  return _EST_FVector.polynomial_value(*args)
polynomial_value = _EST_FVector.polynomial_value


def polynomial_fit(*args):
  return _EST_FVector.polynomial_fit(*args)
polynomial_fit = _EST_FVector.polynomial_fit

