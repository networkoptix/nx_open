# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EST_Item', [dirname(__file__)])
        except ImportError:
            import _EST_Item
            return _EST_Item
        if fp is not None:
            try:
                _mod = imp.load_module('_EST_Item', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EST_Item = swig_import_helper()
    del swig_import_helper
else:
    import _EST_Item
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class EST_Item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EST_Item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EST_Item, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _EST_Item.new_EST_Item(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _EST_Item.delete_EST_Item
    __del__ = lambda self : None;
    def F(self, *args): return _EST_Item.EST_Item_F(self, *args)
    def S(self, *args): return _EST_Item.EST_Item_S(self, *args)
    def I(self, *args): return _EST_Item.EST_Item_I(self, *args)
    def A(self, *args): return _EST_Item.EST_Item_A(self, *args)
    def set(self, *args): return _EST_Item.EST_Item_set(self, *args)
    def set_function(self, *args): return _EST_Item.EST_Item_set_function(self, *args)
    def f_remove(self, *args): return _EST_Item.EST_Item_f_remove(self, *args)
    def evaluate_features(self): return _EST_Item.EST_Item_evaluate_features(self)
    def f_present(self, *args): return _EST_Item.EST_Item_f_present(self, *args)
    def length(self): return _EST_Item.EST_Item_length(self)
    def as_relation(self, *args): return _EST_Item.EST_Item_as_relation(self, *args)
    def in_relation(self, *args): return _EST_Item.EST_Item_in_relation(self, *args)
    def relation_name(self): return _EST_Item.EST_Item_relation_name(self)
    def relation(self): return _EST_Item.EST_Item_relation(self)
    def same_item(self, *args): return _EST_Item.EST_Item_same_item(self, *args)
    def unref_all(self): return _EST_Item.EST_Item_unref_all(self)
    def prepend_daughter(self, *args): return _EST_Item.EST_Item_prepend_daughter(self, *args)
    def append_daughter(self, *args): return _EST_Item.EST_Item_append_daughter(self, *args)
    def daughter1(self): return _EST_Item.EST_Item_daughter1(self)
    def daughtern(self): return _EST_Item.EST_Item_daughtern(self)
    def next_sibling(self): return _EST_Item.EST_Item_next_sibling(self)
    def prev_sibling(self): return _EST_Item.EST_Item_prev_sibling(self)
    def parent(self): return _EST_Item.EST_Item_parent(self)
    def features(self): return _EST_Item.EST_Item_features(self)
    def leafs(self): return _EST_Item.EST_Item_leafs(self)
    def daughters(self): return _EST_Item.EST_Item_daughters(self)
EST_Item_swigregister = _EST_Item.EST_Item_swigregister
EST_Item_swigregister(EST_Item)


def next_item(*args):
  return _EST_Item.next_item(*args)
next_item = _EST_Item.next_item

def first_leaf(*args):
  return _EST_Item.first_leaf(*args)
first_leaf = _EST_Item.first_leaf

def last_leaf(*args):
  return _EST_Item.last_leaf(*args)
last_leaf = _EST_Item.last_leaf

def next_leaf(*args):
  return _EST_Item.next_leaf(*args)
next_leaf = _EST_Item.next_leaf

def num_leaves(*args):
  return _EST_Item.num_leaves(*args)
num_leaves = _EST_Item.num_leaves

def remove_item(*args):
  return _EST_Item.remove_item(*args)
remove_item = _EST_Item.remove_item

def copy_node_tree(*args):
  return _EST_Item.copy_node_tree(*args)
copy_node_tree = _EST_Item.copy_node_tree

def copy_node_tree_contents(*args):
  return _EST_Item.copy_node_tree_contents(*args)
copy_node_tree_contents = _EST_Item.copy_node_tree_contents

def item_jump(*args):
  return _EST_Item.item_jump(*args)
item_jump = _EST_Item.item_jump


