# This file was automatically generated by SWIG
package EST_Item;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package EST_Itemc;
bootstrap EST_Item;
package EST_Item;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package EST_Item;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package EST_Item;

*as = *EST_Itemc::as;
*next_item = *EST_Itemc::next_item;
*first_leaf = *EST_Itemc::first_leaf;
*last_leaf = *EST_Itemc::last_leaf;
*next_leaf = *EST_Itemc::next_leaf;
*num_leaves = *EST_Itemc::num_leaves;
*remove_item = *EST_Itemc::remove_item;
*copy_node_tree = *EST_Itemc::copy_node_tree;
*copy_node_tree_contents = *EST_Itemc::copy_node_tree_contents;
*item_jump = *EST_Itemc::item_jump;

############# Class : EST_Item::EST_Item ##############

package EST_Item::EST_Item;
@ISA = qw( EST_Item );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = EST_Itemc::new_EST_Item(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        EST_Itemc::delete_EST_Item($self);
        delete $OWNER{$self};
    }
}

*F = *EST_Itemc::EST_Item_F;
*S = *EST_Itemc::EST_Item_S;
*I = *EST_Itemc::EST_Item_I;
*A = *EST_Itemc::EST_Item_A;
*set = *EST_Itemc::EST_Item_set;
*set_function = *EST_Itemc::EST_Item_set_function;
*f_remove = *EST_Itemc::EST_Item_f_remove;
*evaluate_features = *EST_Itemc::EST_Item_evaluate_features;
*f_present = *EST_Itemc::EST_Item_f_present;
*length = *EST_Itemc::EST_Item_length;
*as_relation = *EST_Itemc::EST_Item_as_relation;
*in_relation = *EST_Itemc::EST_Item_in_relation;
*relation_name = *EST_Itemc::EST_Item_relation_name;
*relation = *EST_Itemc::EST_Item_relation;
*same_item = *EST_Itemc::EST_Item_same_item;
*unref_all = *EST_Itemc::EST_Item_unref_all;
*prepend_daughter = *EST_Itemc::EST_Item_prepend_daughter;
*append_daughter = *EST_Itemc::EST_Item_append_daughter;
*daughter1 = *EST_Itemc::EST_Item_daughter1;
*daughtern = *EST_Itemc::EST_Item_daughtern;
*next_sibling = *EST_Itemc::EST_Item_next_sibling;
*prev_sibling = *EST_Itemc::EST_Item_prev_sibling;
*parent = *EST_Itemc::EST_Item_parent;
*features = *EST_Itemc::EST_Item_features;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package EST_Item;

1;
