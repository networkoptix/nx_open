#!/bin/bash
### BEGIN INIT INFO
# Provides:          ${deb.customization.company.name}-mediaserver
# Required-Start:    networking
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ${company.name} ${product.name} Media Server
### END INIT INFO

# NetworkOptix Media Server

RETVAL=0

SERVICE_NAME=mediaserver
CUSTOMIZATION=${deb.customization.company.name}
PREFIX=/opt/$CUSTOMIZATION/mediaserver/
BIN_NAME=mediaserver
BIN_PATH=$PREFIX/bin/$BIN_NAME
RUN_ARGS="-e --disable-crash-handler"

export LD_LIBRARY_PATH=$PREFIX/lib
export VMS_PLUGIN_DIR=$PREFIX/plugins
export SASL_PATH=$/opt/$CUSTOMIZATION/lib/sasl2

ulimit -n 8192
ulimit -c unlimited

process_core_dump() {
    if [ ! $(which gdb) ]; then
        return 0 # no gdb on the host
    fi
    if [ $(pidof gdb) ]; then
        return 0 # gdb is alrady engaged
    fi

    CORE_ORIG=$(dirname $BIN_PATH)/core
    TIME=$(date +"%s")
    CORE=$CORE_ORIG.$TIME
    mv $CORE_ORIG $CORE 2>/dev/null
    if [ $? -eq 0 ]; then
        REPORT=${BIN_NAME}_$($BIN_PATH --version)_$TIME.gdb-bt

        echo "Generate crash report (in background) $REPORT"
        echo "t apply all bt 25" | gdb $BIN_PATH $CORE 2>&1 >/tmp/$REPORT && \
            mv /tmp/$REPORT ~/$REPORT &

        ls $CORE_ORIG.* | grep -v $CORE | xargs rm 2>/dev/null
    fi
}

start() {
    SERVICE_PID="`/bin/pidof $BIN_NAME`"
    if [ ! -z "$SERVICE_PID" ]
    then
       echo "$SERVICE_NAME is already running with pid $SERVICE_PID"
       return 0
    fi

    process_core_dump
    hdparm -I /dev/sd? | grep Model > /tmp/hddlist

    echo -n "Starting $BIN_NAME: "

    # TODO: #boris: Implement log file rotation.
    mkdir -p $PREFIX/var/log
    #$BIN_PATH $RUN_ARGS >>$PREFIX/var/log/mediaserver-out.log 2>&1 &
    $BIN_PATH $RUN_ARGS 2>&1 &

    if [ `/bin/pidof $BIN_NAME` ]
    then
        echo "OK"
    else
        echo "FAILED"
    fi
}

startquiet() {
    start
}

SECONDS_TO_WAIT_BEFORE_KILL_9=120

stop() {
    echo -n "Stopping $BIN_NAME..... "
    killall $1 $BIN_NAME 1>/dev/null 2>&1
    local i=0
    while [ "`/bin/pidof $BIN_NAME`" ]
    do
        /bin/sleep 1
        let i++
        if [ $i -gt $SECONDS_TO_WAIT_BEFORE_KILL_9 ]; then
            echo -n "sending 9 signal...    "
            /usr/bin/killall -9 $BIN_NAME 1>/dev/null 2>&1
        fi
    done
    echo "OK"
}

start_watchdog() {
    WATCHDOG_PID="`ps -eO command | grep mediaserver| grep run_watchdog | grep -v grep | cut -b 1-5 | sort -r | head -n 1`"
    if [ "$WATCHDOG_PID" ]; then
        echo "$CUSTOMIZATION-mediaserver watchdog is already running with pid $WATCHDOG_PID"
        return 0
    fi
    bash -c "/etc/init.d/$CUSTOMIZATION-mediaserver run_watchdog" 2>/dev/null 1>&2&
    echo "$SERVICE_NAME watchdog has been started"
}

stop_watchdog() {
    WATCHDOG_PID="`ps -eO command | grep run_watchdog | grep -v grep | cut -b 1-5 | sort -r | head -n 1`"
    if [ ! "$WATCHDOG_PID" ]; then
        echo "$CUSTOMIZATION-mediaserver watchdog is not running"
        return 0
    fi

    echo -n "Stopping $CUSTOMIZATION-mediaserver watchdog... "
    kill $WATCHDOG_PID
    sleep 1
    echo "OK"
}

run_watchdog() {
    while true
    do
        start
        sleep 20
    done
}


#
#   Main script
#
case "$1" in
    start)
        start
        start_watchdog
        ;;

    startquiet)
        start
        ;;

    start_console)
        $BIN_PATH $RUN_ARGS
        ;;

    start_gdb)
        gdbserver 0.0.0.0:12345 $BIN_PATH $RUN_ARGS
        ;;

    stop)
        stop_watchdog
        stop
        ;;

    kill)
        stop_watchdog
        stop -9
        ;;

    status)
        SERVICE_PID="`/bin/pidof $BIN_NAME`"
        if [ ! -z $SERVICE_PID ]
        then
            echo "$SERVICE_NAME is running with pid $SERVICE_PID"
            exit 0
        else
            echo "$SERVICE_NAME is stopped"
            exit 1
        fi
        ;;

    server_status)
        if [ `/bin/pidof $BIN_NAME` ]
        then
            echo "1"
        fi
        ;;

    restart|reload|force-reload)
        stop_watchdog
        stop
        while [ `/bin/pidof $BIN_NAME` ]
        do
            /bin/sleep 1
        done
        start
        start_watchdog
        ;;

    start_watchdog)
        start_watchdog
        ;;

    run_watchdog)
        run_watchdog
        ;;

    stop_watchdog)
        stop_watchdog
        ;;

    *)
        echo "Usage: $0 {start|startquiet|stop|restart|status}"
        exit 1
esac

exit $RETVAL
