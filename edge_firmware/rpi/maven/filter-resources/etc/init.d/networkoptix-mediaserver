#!/bin/bash
### BEGIN INIT INFO
# Provides:          ${deb.customization.company.name}-mediaserver
# Required-Start:    networking
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ${company.name} ${product.name} Media Server
### END INIT INFO

CUSTOMIZATION=${deb.customization.company.name}

LIBS_PATH="/opt/$CUSTOMIZATION/lib"
SERVICE_NAME="mediaserver"
PREFIX="/opt/$CUSTOMIZATION/mediaserver"
BIN_NAME="mediaserver"
BIN_PATH="$PREFIX/bin/$BIN_NAME"
LOGS_PATH="/opt/$CUSTOMIZATION/mediaserver/var/log"
LOG_OUTPUT_FLAG="$LOGS_PATH/log_output.flag"
RUN_ARGS="-e"
SECONDS_TO_WAIT_BEFORE_KILL_9=120

export VMS_PLUGIN_DIR="$PREFIX/plugins"
export SASL_PATH="$LIBS_PATH/sasl2"

ulimit -n $(cat /proc/sys/fs/file-max 2>/dev/null || echo 8192)
ulimit -c unlimited

process_core_dump()
{
    if [ ! $(which gdb) ]; then
        return 0 # no gdb on the host
    fi
    if [ $(pidof gdb) ]; then
        return 0 # gdb is alrady engaged
    fi

    CORE_ORIG=$(dirname "$BIN_PATH")/core
    TIME=$(date +"%s")
    CORE="$CORE_ORIG.$TIME"
    mv "$CORE_ORIG" "$CORE" 2>/dev/null
    if [ $? -eq 0 ]; then
        REPORT="${BIN_NAME}_$("$BIN_PATH" --version)_$TIME.gdb-bt"

        echo "Generate crash report (in background) $REPORT"
        echo "t apply all bt 25" |gdb "$BIN_PATH" "$CORE" 2>&1 >"/tmp/$REPORT" && \
            mv "/tmp/$REPORT" "/root/$REPORT" &

        ls "$CORE_ORIG".* |grep -v "$CORE" |xargs rm 2>/dev/null
    fi
}

start()
{
    SERVICE_PID=$(pidof "$BIN_NAME")
    if [ ! -z "$SERVICE_PID" ]; then
       echo "$SERVICE_NAME is already running with pid $SERVICE_PID"
       return 0
    fi

    process_core_dump
    
    DISK=$(fdisk -l |grep "Disk" |grep "dev/sd" |awk '{print substr($2, 0, length($2))}')
    local HDPARM="hdparm"
    if ! which hdparm >/dev/null; then
        HDPARM="$PREFIX/bin/hdparm"
    fi
    if [ ! -z "$DISK" ]; then
        "$HDPARM" -I /dev/sd? |grep Model >/tmp/hddlist
    fi
    
    if [ -f "$LOG_OUTPUT_FLAG" ]; then
        mkdir -p "$LOGS_PATH"
        REDIRECT_OUTPUT="$LOGS_PATH/mediaserver-out.log"
    else
        REDIRECT_OUTPUT="/dev/null"
    fi

    echo "Starting Media Server, outputting to $REDIRECT_OUTPUT, with command:"
    echo "  $BIN_PATH" $RUN_ARGS
    "$BIN_PATH" $RUN_ARGS >>$REDIRECT_OUTPUT 2>&1 &

    sleep 1 #< See if server instantly crashes.
    if [ $(pidof $BIN_NAME) ]; then
        echo "OK"
    else
        echo "FAILED"
    fi
}

startquiet()
{
    start
}

stop()
{
    echo -n "Stopping $BIN_NAME... "
    killall "$1" "$BIN_NAME" 1>/dev/null 2>&1
    local i=0
    while [ "$(pidof "$BIN_NAME")" ]; do
        sleep 1
        let i++
        if [ $i -gt $SECONDS_TO_WAIT_BEFORE_KILL_9 ]; then
            echo -n "Sending signal 9... "
            killall -9 "$BIN_NAME" 1>/dev/null 2>&1
        fi
    done
    echo "OK"
}

start_watchdog()
{
    WATCHDOG_PID=$(ps -eO command |grep mediaserver |grep run_watchdog |grep -v grep |cut -b 1-5 |sort -r |head -n 1)
    if [ "$WATCHDOG_PID" ]; then
        echo "$CUSTOMIZATION-mediaserver watchdog is already running with pid $WATCHDOG_PID"
        return 0
    fi
    bash -c "/etc/init.d/$CUSTOMIZATION-mediaserver run_watchdog" 2>/dev/null 1>&2 &
    echo "$SERVICE_NAME watchdog has been started"
}

stop_watchdog()
{
    WATCHDOG_PID=$(ps -eO command |grep mediaserver |grep run_watchdog |grep -v grep |cut -b 1-5 |sort -r |head -n 1)
    if [ ! "$WATCHDOG_PID" ]; then
        echo "$CUSTOMIZATION-mediaserver watchdog is not running"
        return 0
    fi

    echo -n "Stopping $CUSTOMIZATION-mediaserver watchdog... "
    kill $WATCHDOG_PID
    sleep 1
    echo "OK"
}

run_watchdog()
{
    while true; do
        start
        sleep 20
    done
}

register_autostart_if_needed()
{
    if ! grep -- "$CUSTOMIZATION-mediaserver" /etc/init.d/.depend.stop >/dev/null 2>&1; then
        echo "Enabling mediaserver autostart via update-rc.d"
        update-rc.d -f "$CUSTOMIZATION-mediaserver" defaults
    fi
}

#--------------------------------------------------------------------------------------------------
# main

case "$1" in
    start)
        register_autostart_if_needed    
        start
        start_watchdog
        ;;

    startquiet)
        start
        ;;

    start_console)
        "$BIN_PATH" $RUN_ARGS
        ;;

    start_gdb)
        gdbserver 0.0.0.0:12345 "$BIN_PATH" $RUN_ARGS
        ;;

    stop)
        stop_watchdog
        stop
        ;;

    kill)
        stop_watchdog
        stop -9
        ;;

    status)
        SERVICE_PID=$(pidof "$BIN_NAME")
        if [ ! -z $SERVICE_PID ]; then
            echo "$SERVICE_NAME is running with pid $SERVICE_PID"
            exit 0
        else
            echo "$SERVICE_NAME is stopped"
            exit 1
        fi
        ;;

    server_status)
        if [ $(pidof "$BIN_NAME") ]; then
            echo "1"
        fi
        ;;

    restart|reload|force-reload)
        stop_watchdog
        stop
        while [ $(pidof "$BIN_NAME") ]; do
            sleep 1
        done
        start
        start_watchdog
        ;;

    start_watchdog)
        start_watchdog
        ;;

    run_watchdog)
        run_watchdog
        ;;

    stop_watchdog)
        stop_watchdog
        ;;

    *)
        echo "Usage: $0 {start|startquiet|stop|restart|status}"
        exit 1
esac
