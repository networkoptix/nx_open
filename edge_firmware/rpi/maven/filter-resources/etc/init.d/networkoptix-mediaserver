#!/bin/bash
### BEGIN INIT INFO
# Provides:          ${deb.customization.company.name}-mediaserver
# Required-Start:    networking
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ${company.name} ${product.name} Media Server
### END INIT INFO

# NetworkOptix Media Server

KILL_TIMEOUT_SEC=1
KILL_CHECK_TRIES=30
APPLICATION_NAME="${deb.customization.company.name} mediaserver"
CUSTOMIZATION=${deb.customization.company.name}
MODULE_NAME=mediaserver
INSTALL_ROOT=/opt/$CUSTOMIZATION/$MODULE_NAME/
BIN_PATH=$INSTALL_ROOT/bin/$MODULE_NAME
RUN_ARGS="-e --disable-crash-handler"
export LD_LIBRARY_PATH=$INSTALL_ROOT/lib/
export VMS_PLUGIN_DIR=$INSTALL_ROOT/bin/plugins/
export SASL_PATH=LD_LIBRARY_PATH/sasl2/

RUNNING_APP_PID="`pidof $MODULE_NAME`"

function process_core_dump {
    if [ ! $(which gdb) ]; then
        return 0 # no gdb on the host
    fi
    if [ $(pidof gdb) ]; then
        return 0 # gdb is alrady engaged
    fi

    CORE_ORIG=$(dirname $BIN_PATH)/core
    TIME=$(date +"%s")
    CORE=$CORE_ORIG.$TIME
    mv $CORE_ORIG $CORE 2>/dev/null
    if [ $? -eq 0 ]; then
        REPORT=${MODULE_NAME}_$($BIN_PATH --version)_$TIME.gdb-bt

        echo Generate crash report $REPORT...        BACKGROUND
        gdb $BIN_PATH $CORE 2&>1 >/tmp/$REPORT <<< "t apply all bt 25" && \
            mv /tmp/$REPORT ~/$REPORT &

        ls $CORE_ORIG.* | grep -v $CORE | xargs rm 2>/dev/null
    fi
}

case "$1" in
    start)
        if [ ! -z "$RUNNING_APP_PID" ]; then
            echo "$APPLICATION_NAME is already running with pid $RUNNING_APP_PID"
            exit 0
        fi

        ulimit -n 8192
        ulimit -c unlimited
        process_core_dump

        echo -n "Starting $APPLICATION_NAME ...         "
        $BIN_PATH $RUN_ARGS 1>/dev/null 2>&1 &
        sleep 1
        RUNNING_APP_PID="`pidof $MODULE_NAME`"
        if [ ! -z "$RUNNING_APP_PID" ]; then
            echo "OK"
        else
            echo "FAILURE"
        fi
        ;;

    start_console)
        if [ ! -z "$RUNNING_APP_PID" ]; then
            echo "$APPLICATION_NAME is already running with pid $RUNNING_APP_PID"
            exit 0
        fi

        ulimit -n 8192
        ulimit -c unlimited
        $BIN_PATH $RUN_ARGS
        ;;

    stop)
        if [ -z "$RUNNING_APP_PID" ]; then
            echo "$APPLICATION_NAME is not running"
            exit 0
        fi

        echo -n "Stopping $APPLICATION_NAME running with pid $RUNNING_APP_PID ...        "
        kill "$RUNNING_APP_PID"
        for i in {1..$KILL_CHECK_TRIES}
        do
            sleep $KILL_TIMEOUT_SEC
            RUNNING_APP_PID="`pidof $MODULE_NAME`"
            if [ -z "$RUNNING_APP_PID" ]; then
                echo "OK"
                exit 0
            fi
        done

        echo "OK"
        kill -9 "$RUNNING_APP_PID"
        ;;

    status)
        if [ ! -z "$RUNNING_APP_PID" ]; then
            echo "$APPLICATION_NAME is running with pid $RUNNING_APP_PID"
        else
            echo "$APPLICATION_NAME is not running"
        fi
        ;;

    restart)
        $0 stop
        sleep 1
        $0 start
        ;;
esac
