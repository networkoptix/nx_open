#!/bin/bash
### BEGIN INIT INFO
# Provides:          ${deb.customization.company.name}-lite-client
# Required-Start:    networking
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ${company.name} ${product.name} Lite Client
### END INIT INFO

CUSTOMIZATION=${deb.customization.company.name}
VTCONSOLE=$(fgconsole)
SERVICE_NAME=lite-client
PREFIX="/opt/$CUSTOMIZATION/lite_client"
BIN_NAME="mobile_client"
BIN_PATH="$PREFIX/bin/$BIN_NAME"

ulimit -n 8192
ulimit -c unlimited

start()
{
    SERVICE_PID=$(pidof "$BIN_NAME")
    if [ ! -z "$SERVICE_PID" ]; then
        echo "$SERVICE_NAME is already running with pid $SERVICE_PID"
        return 0
    fi

    PORT=$(cat "/opt/$CUSTOMIZATION/mediaserver/etc/mediaserver.conf" |grep port= |awk -F "=" '{print $2}')
    if [ -z "$PORT" ]; then
        PORT=7001
    fi
    echo "Connecting to $CUSTOMIZATION server on port $PORT..."

    # Changing active tty to 7 (should be always free).
    if [ "$VTCONSOLE" != "7" ]; then
        chvt 7
    fi

    # Disable console cursor blinking.
    echo "0" >/sys/class/graphics/fbcon/cursor_blink

    WEBADMIN_BUILD=$(curl -s "http://127.0.0.1:$PORT/static/version.txt" |grep changeset |awk '{print $2}')
    if [ -z "$WEBADMIN_BUILD" ]; then
        echo "Server is not running. Cannot run Lite Client"
        return 1
    else
        echo "Server is running. Webadmin changeset is $WEBADMIN_BUILD"
        echo -n "Starting $BIN_NAME via /api/startLiteClient: "
        curl -s "http://127.0.0.1:$PORT/api/startLiteClient"
    fi

    sleep 5

    if [ $(pidof "$BIN_NAME") ]; then
        echo "OK"
    else
        echo "FAILED"
    fi
}

startquiet()
{
    start
}

SECONDS_TO_WAIT_BEFORE_KILL_9=120

stop()
{
    echo -n "Stopping $BIN_NAME... "
    killall "$1" "$BIN_NAME" >/dev/null 2>&1
    local i=0
    while [ "$(pidof "$BIN_NAME")" ]; do
        sleep 1
        let i++
        if [ $i -gt $SECONDS_TO_WAIT_BEFORE_KILL_9 ]; then
            echo -n "Sending 9 signal... "
            killall -9 "$BIN_NAME" >/dev/null 2>&1
        fi
    done

    # Changing active tty back to 1.
    if [ "$VTCONSOLE" != "1" ]; then
        chvt 1
    fi

    echo "DONE"
}

start_watchdog()
{
    WATCHDOG_PID=$(ps -eO command | grep lite-client | grep run_watchdog | grep -v grep | cut -b 1-5 | sort -r | head -n 1)
    if [ "$WATCHDOG_PID" ]; then
        echo "$CUSTOMIZATION-lite-client watchdog is already running with pid $WATCHDOG_PID"
        return 0
    fi
    bash -c "/etc/init.d/$CUSTOMIZATION-lite-client run_watchdog" >/dev/null 2>&1 &
    echo "$SERVICE_NAME watchdog has been started"
}

stop_watchdog()
{
    WATCHDOG_PID=$(ps -eO command | grep lite-client | grep run_watchdog | grep -v grep | cut -b 1-5 | sort -r | head -n 1)
    if [ ! "$WATCHDOG_PID" ]; then
        echo "$CUSTOMIZATION-lite-client watchdog is not running"
        return 0
    fi

    echo -n "Stopping $CUSTOMIZATION-lite-client watchdog... "
    kill "$WATCHDOG_PID"
    sleep 1
    echo "OK"
}

run_watchdog()
{
    while true; do
        start
        # Sometimes our flagship product (Lite Client) behaves slightly incorrectly in certain conditions.
        # To avoid confusion, I need to put some background here.
        # First of all, it can work in 2 different modes:
        # - web (displaying browser and web-client inside)
        # - video (displaying video)
        # Second, to avoid more confusion, it is necessary to mention that "video mode" is subdivided by 2 different ones:
        # - 2x2: Lite client displays 4 videos and decodes secondary (low resolution) stream from each camera
        #   (as you know, cameras may deliver several streams simultaneously). Software decoding is used in this case.
        # - 1x1: Lite client displays 1 video and decodes primary (high resolution) stream from a camera.
        #   Hardware decoding is used in this case.
        # So, when Lite Client is working in video mode and 2x2 sub-mode, it turns the display blank
        # after a certain timeout (about 5 minutes). It can exit from blank mode by mouse or keyboard.
        # This behavior should be disabled by the consoleblank=0 parameter passed to the kernel, however in this mode it doesn't work.
        # Luckily, screen blanking can be forced off by the following command and it will reset the counter.
        # There are a lot of interesting commands related to display subsystem here:
        # http://linux-sunxi.org/Display
        # Todo: add detail explanation how to pass parameters to the kernel, provide more background information,
        # resolve further confusion that may arise, make America great again, save the whales.
        echo "0" >/sys/class/graphics/fb0/blank
        sleep 20
    done
}

#--------------------------------------------------------------------------------------------------
# main

case "$1" in
    start)
        start
        start_watchdog
        ;;

    startquiet)
        start
        ;;

    start_console)
        "$BIN_PATH" $RUN_ARGS
        ;;

    start_gdb)
        gdbserver 0.0.0.0:12345 "$BIN_PATH" $RUN_ARGS
        ;;

    stop)
        stop_watchdog
        stop
        ;;

    kill)
        stop_watchdog
        stop -9
        ;;

    status)
        SERVICE_PID=$(pidof "$BIN_NAME")
        if [ ! -z "$SERVICE_PID" ]; then
            echo "$SERVICE_NAME is running with pid $SERVICE_PID"
            exit 0
        else
            echo "$SERVICE_NAME is stopped"
            exit 1
        fi
        ;;

    server_status)
        if [ $(pidof "$BIN_NAME") ]; then
            echo "1"
        fi
        ;;

    restart|reload|force-reload)
        stop_watchdog
        stop
        while [ $(pidof "$BIN_NAME") ]; do
            sleep 1
        done
        start
        start_watchdog
        ;;

    start_watchdog)
        start_watchdog
        ;;

    run_watchdog)
        run_watchdog
        ;;

    stop_watchdog)
        stop_watchdog
        ;;

    *)
        echo "Usage: $0 {start|startquiet|stop|restart|status}"
        exit 1
esac

