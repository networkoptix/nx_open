diff --git a/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.cpp b/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.cpp
index 5d76f8bd125..5d02a202590 100644
--- a/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.cpp
+++ b/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.cpp
@@ -304,6 +304,7 @@ void QnFfmpegVideoDecoder::resetDecoder(const QnConstCompressedVideoDataPtr& dat
     //m_context->flags2 |= CODEC_FLAG2_FAST;
     m_frame->data[0] = 0;
     m_spsFound = false;
+    m_firstDecodedFrame = true;
 }
 
 void QnFfmpegVideoDecoder::setOutPictureSize( const QSize& /*outSize*/ )
@@ -373,7 +374,15 @@ int QnFfmpegVideoDecoder::decodeVideo(
     int result = avcodec_decode_video2(avctx, picture, got_picture_ptr, avpkt);
     if (result > 0 && m_metrics)
         m_metrics->decodedPixels() += picture->width * picture->height;
-
+    if (*got_picture_ptr && m_firstDecodedFrame)
+    {
+        m_firstDecodedFrame = false;
+        if (picture->pkt_dts != AV_NOPTS_VALUE && picture->pkt_pts != AV_NOPTS_VALUE)
+            m_dtsToPtsDelta = picture->pkt_pts - picture->pkt_dts;
+        else
+            m_dtsToPtsDelta = 0;
+        m_dtsToPtsDelta = 0;
+    }
     return result;
 }
 
@@ -462,6 +471,8 @@ bool QnFfmpegVideoDecoder::decode(const QnConstCompressedVideoDataPtr& data, QSh
 
         QnFfmpegAvPacket avpkt((unsigned char*) data->data(), (int) data->dataSize());
         avpkt.dts = avpkt.pts = data->timestamp;
+        //if (data->pts != AV_NOPTS_VALUE)
+        //    avpkt.pts = data->pts;
         // HACK for CorePNG to decode as normal PNG by default
         avpkt.flags = AV_PKT_FLAG_KEY;
 
@@ -605,7 +616,8 @@ bool QnFfmpegVideoDecoder::decode(const QnConstCompressedVideoDataPtr& data, QSh
         {
             outFrame->copyDataOnlyFrom(copyFromFrame);
             // pkt_dts and pkt_pts are mixed up after decoding in ffmpeg. So, we have to use dts here instead of pts
-            outFrame->pkt_dts = m_frame->pkt_dts != AV_NOPTS_VALUE ? m_frame->pkt_dts : m_frame->pkt_pts;
+            outFrame->pkt_dts = m_frame->pkt_dts != AV_NOPTS_VALUE 
+                ? m_frame->pkt_dts + m_dtsToPtsDelta : m_frame->pkt_pts;
         }
 
 #ifdef _USE_DXVA
diff --git a/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.h b/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.h
index 43611ae4ea8..6ec4d7483a9 100644
--- a/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.h
+++ b/vms/libs/common/src/decoders/video/ffmpeg_video_decoder.h
@@ -129,6 +129,8 @@ private:
     bool m_useMtDecoding;
     bool m_needRecreate;
     nx::metrics::Storage* m_metrics = nullptr;
+    bool m_firstDecodedFrame = true;
+    qint64 m_dtsToPtsDelta = 0;
 };
 
 #endif // ENABLE_DATA_PROVIDERS
