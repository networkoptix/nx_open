#!/bin/bash -e

COMPANY_NAME=${deb.customization.company.name}

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }

UPGRADING=${2:+yes}

export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

BASE_DIR="/opt/$COMPANY_NAME/mediaserver"
EC_DIR="/opt/$COMPANY_NAME/entcontroller"

ETC_DIR="$BASE_DIR/etc"
EC_CONFIG_FILE="$EC_DIR/etc/entcontroller.conf"
CONFIG_FILE="$ETC_DIR/mediaserver.conf"

OLD_DB_PATH="$EC_DIR/var/db/ecs.db"
DB_PATH="$BASE_DIR/var/ecs.sqlite"

BIN_DIR="$BASE_DIR/bin"

CFG_HELPER="$BIN_DIR/config_helper.py $CONFIG_FILE"
EC_CFG_HELPER="$BIN_DIR/config_helper.py $EC_CONFIG_FILE"

DBSYNC="$BASE_DIR/share/dbsync-2.2/bin/dbsync"
CERTGEN="$BASE_DIR/share/dbsync-2.2/bin/certgen"

# This is necessary because changed configuration options should take effect
# immediately.
if status $COMPANY_NAME-mediaserver | grep "start/running" > /dev/null; then
  stop $COMPANY_NAME-mediaserver
fi

# Default MS parameters
PORT_DEFAULT="7001"
TRANSPORT_DEAULT="auto"
PUBLIC_IP_ENABLED_DEFAULT="auto"
ALLOW_CAMERA_CHANGES_DEFAULT=true

function is_local_addr {
    local hostname=$1;
    local addr=$(gethostip -d $hostname)

    if [ $? -ne 0 ]; then
	addr=$hostname
    fi

    [[ "$addr" =~ ^127.[0-9]+.[0-9]+.[0-9]+$ ]] && return 0

    ip -4 -o addr | awk '{gsub("/", " "); print $4;}' | grep "^$addr$" > /dev/null 2>&1
}

function to_int {
    local -i num="10#${1}"
    echo "${num}"
}

function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)

    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi

    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

function ask_for_value {
    local varname="$1"
    local default="$2"
    local full_name="$COMPANY_NAME-mediaserver/$varname"
    local error_message="${full_name}_invalid"

    # Support unattened install
    db_get $full_name
    if [ "$RET" = "" ]; then
        [ -n "$default" ] && db_set $full_name $default
    fi

    db_input high $full_name || true
    db_go

    while :
    do
        db_get $full_name
        { validate_$varname $RET 2> /dev/null; STATUS=$?; } || true
        [ $STATUS -eq 0 ] && break # validation passes
        [ $STATUS -ne 1 ] && break # no validation function or invalid

        db_input high $error_message
        db_go

        { db_input high $full_name; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break
        db_go
    done

    RESULT="$RET"
    db_unregister $full_name
    echo $RESULT
}

function validate_appserverPassword {
    [ -n "$1" ]
}

function validate_port {
    port_is_ok $1
}

function validate_storage {
  [[ "$1" == /* ]]
}

function find_free_port {
    local port=$1

    while :
    do
        netstat -nl4t | awk '{print $4;}' | grep ":$port" > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo $port
            return
        else
            port=$((port+10))
        fi
    done
}

case "$1" in
    configure)
        ECS_GUID="$($EC_CFG_HELPER ecsGuid)"
        SYSTEM_NAME_SUFFIX=$(echo $ECS_GUID | sed 's/{*\([^{-]\+\)-.*/\1/')
        SYSTEM_NAME_DEFAULT=System_${SYSTEM_NAME_SUFFIX:-$RANDOM}

        ECS_HOST="$($CFG_HELPER appserverHost)"
        if [ -n "$ECS_HOST" ]; then
            if is_local_addr "$ECS_HOST"; then
                $CFG_HELPER -d appserverHost
                $CFG_HELPER -d appserverPort
                $CFG_HELPER -d appserverLogin
                $CFG_HELPER -d appserverPassword
            else
                $CFG_HELPER pendingSwitchToClusterMode "yes"
                $CFG_HELPER -d appserverPassword
            fi
        fi

        if [ -z "$UPGRADING" ]
        then
            PORT="$($CFG_HELPER port)"
            [ -z "$PORT" ] && PORT="$($EC_CFG_HELPER port)"
            [ -z "$PORT" ] && PORT=$(find_free_port $PORT_DEFAULT)
            PORT=$(ask_for_value port "$PORT")
            $CFG_HELPER port "$PORT"

            if [ ! -f $DB_PATH -a ! -f $OLD_DB_PATH ]; then
                APPSERVER_PASSWORD=$(ask_for_value appserverPassword "$APPSERVER_PASSWORD")
                $CFG_HELPER appserverPassword "$APPSERVER_PASSWORD"
            fi

            TRANSPORT="$($CFG_HELPER rtspTransport)"
            [ -z "$TRANSPORT" ] && TRANSPORT=$TRANSPORT_DEFAULT
            $CFG_HELPER rtspTransport "$TRANSPORT"

            SYSTEM_NAME="$($CFG_HELPER systemName)"
            [ -z "$SYSTEM_NAME" ] && SYSTEM_NAME=$SYSTEM_NAME_DEFAULT
            SYSTEM_NAME=$(ask_for_value systemName "$SYSTEM_NAME")
            $CFG_HELPER systemName "$SYSTEM_NAME"

            ALLOW_CAMERA_CHANGES="$($CFG_HELPER allowCameraChanges)"
            [ -z "$ALLOW_CAMERA_CHANGES" ] && ALLOW_CAMERA_CHANGES=$($EC_CFG_HELPER allowCameraChanges)
            [ -z "$ALLOW_CAMERA_CHANGES" ] && ALLOW_CAMERA_CHANGES=$ALLOW_CAMERA_CHANGES_DEFAULT
            ALLOW_CAMERA_CHANGES=$(ask_for_value allowCameraChanges "$ALLOW_CAMERA_CHANGES")
            $CFG_HELPER allowCameraChanges "$ALLOW_CAMERA_CHANGES"
        else
            PORT="$($CFG_HELPER port)"
            [ -z "$PORT" ] && PORT="$($EC_CFG_HELPER port)"
            [ -z "$PORT" ] && PORT=$(find_free_port $PORT_DEFAULT)
            $CFG_HELPER port "$PORT"

            SYSTEM_NAME="$($CFG_HELPER systemName)"
            [ -z "$SYSTEM_NAME" ] && $CFG_HELPER systemName "$SYSTEM_NAME_DEFAULT"

            ALLOW_CAMERA_CHANGES="$($CFG_HELPER allowCameraChanges)"
            [ -z "$ALLOW_CAMERA_CHANGES" ] && ALLOW_CAMERA_CHANGES=$($EC_CFG_HELPER allowCameraChanges)
            [ -z "$ALLOW_CAMERA_CHANGES" ] && ALLOW_CAMERA_CHANGES=$ALLOW_CAMERA_CHANGES_DEFAULT
            $CFG_HELPER allowCameraChanges "$ALLOW_CAMERA_CHANGES"
        fi

        "$CERTGEN" -i

        if [ -f "$OLD_DB_PATH" -a ! -f "$DB_PATH" ]; then
            [ -d $BASE_DIR/var ] || mkdir $BASE_DIR/var
            cp "$OLD_DB_PATH" "$DB_PATH"
            $DBSYNC
        fi
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

if [ -e "/etc/init/$COMPANY_NAME-mediaserver.conf" ]; then
	invoke-rc.d $COMPANY_NAME-mediaserver start || exit $?
fi
update-rc.d -f $COMPANY_NAME-mediaserver remove >/dev/null || exit $?

exit 0
