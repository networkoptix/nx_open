#!/bin/bash -e
#
# summary of how this script can be called:
#        * <new-preinst> install
#        * <new-preinst> install <old-version>
#        * <new-preinst> upgrade <old-version>
#        * <old-preinst> abort-upgrade <new-version>
#

. /usr/share/debconf/confmodule

COMPANY_NAME=${deb.customization.company.name}

BASEDIR=/opt/$COMPANY_NAME/mediaserver
VARDIR=$BASEDIR/var
ETCDIR=$BASEDIR/etc

USER=${product.name.short}
GROUP=${product.name.short}

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }

stop_server() {
    if [ ! -x /etc/init.d/$COMPANY_NAME-mediaserver ]; then return; fi

    set +e
    if [ -x /usr/sbin/invoke-rc.d ]; then
      cmd="invoke-rc.d $COMPANY_NAME-mediaserver stop"
    else
      cmd="/etc/init.d/$COMPANY_NAME-mediaserver stop"
    fi
    $cmd
    errno=$?
    set -e

    # 0=ok, 100=no init script (fresh install)
    if [ "$errno" != 0 -a "$errno" != 100 ]; then
      echo "${cmd/ */} returned $errno" 1>&2
      echo "There is a $COMPANY_NAME media server running, but we failed in our attempts to stop it." 1>&2
      echo "Stop it yourself and try again!" 1>&2
      db_stop
      exit 1
    fi
}

stop_server

# If we use NIS then errors should be tolerated. It's up to the
# user to ensure that the $USER user is correctly setup.
# Beware that there are two ypwhich one of them needs the 2>/dev/null!
if test -n "`which ypwhich 2>/dev/null`"  &&  ypwhich >/dev/null 2>&1; then
  set +e
fi

if ! getent group $GROUP >/dev/null; then
    # Adding system group: $GROUP
    addgroup --system $GROUP >/dev/null
fi

if ! getent passwd $USER >/dev/null; then
    # Adding system user: $USER
    adduser \
      --system \
      --disabled-login \
      --ingroup $GROUP \
      --no-create-home \
      --home /nonexistent \
      --gecos "$COMPANY_NAME media server" \
      --shell /bin/false \
      $USER  >/dev/null
fi

# end of NIS tolerance zone
set -e

set +e

verify_permissions()
{
    DIR="$1"

    [ -d "$DIR" ] || return

    echo Checking permissions on directory $DIR
    find "$DIR" -follow -print0 -not -group $GROUP -o -not -user $USER 2>/dev/null \
      | xargs -0 --no-run-if-empty chown $USER:$GROUP
}

verify_permissions "$VARDIR"
verify_permissions "$ETCDIR"

[ -f $ETCDIR/mediaserver.conf ] && cat $ETCDIR/mediaserver.conf 2>/dev/null | grep \\path | sed 's/^.*=//g' | while read s
do
    verify_permissions "$s"
done

set -e
