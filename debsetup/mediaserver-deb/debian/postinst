#!/bin/bash -e

COMPANY_NAME=${deb.customization.company.name}

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

BASE_DIR="/opt/$COMPANY_NAME/mediaserver"

ETC_DIR="$BASE_DIR/etc"
CONFIG_FILE="$ETC_DIR/mediaserver.conf"

BIN_DIR="$BASE_DIR/bin"
CFG_HELPER="$BIN_DIR/config_helper.py $CONFIG_FILE"

ECS_CONFIG_FILE="/opt/$COMPANY_NAME/entcontroller/etc/entcontroller.conf"
ECS_CFG_HELPER="$BIN_DIR/config_helper.py $ECS_CONFIG_FILE"

# This is necessary because changed configuration options should take effect 
# immediately.
if status $COMPANY_NAME-mediaserver | grep "start/running" > /dev/null; then
  stop $COMPANY_NAME-mediaserver
fi

# Default ECS connection parameters
ECS_HOST_DEFAULT="localhost"
if [ -f "$ECS_CONFIG_FILE" ]; then
    ECS_PORT_DEFAULT=$($ECS_CFG_HELPER port)
else
    ECS_PORT_DEFAULT="7001"
fi
ECS_LOGIN_DEFAULT="admin"

# Default MS parameters
PORT_DEFAULT="7002"
TRANSPORT_DEAULT="auto"
PUBLIC_IP_ENABLED_DEFAULT="1"

function to_int {
    local -i num="10#${1}"
    echo "${num}"
}

function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)
 
    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi
 
    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

function ask_for_value {
    local varname="$1"
    local default="$2"
    local full_name="$COMPANY_NAME-mediaserver/$varname"
    local error_message="${full_name}_invalid"

    # Support unattened install
    db_get $full_name
    if [ "$RET" = "" ]; then
        [ -n "$default" ] && db_set $full_name $default 
    fi

    db_input high $full_name || true
    db_go

    while :
    do
        db_get $full_name
        { validate_$varname $RET 2> /dev/null; STATUS=$?; } || true        
        [ $STATUS -eq 0 ] && break # validation passes
        [ $STATUS -ne 1 ] && break # no validation function or invalid

        db_input high $error_message
        db_go

        { db_input high $full_name; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break
        db_go
    done

    RESULT="$RET"
    db_unregister $full_name
    echo $RESULT
}

function validate_appserverPassword {
    [ -n "$1" ]
}

function validate_port {
    port_is_ok $1
}

function validate_storage {
  [[ "$1" == /* ]]
}

case "$1" in
  configure)
      ECS_HOST="$($CFG_HELPER appserverHost)"
      [ -z "$ECS_HOST" ] && ECS_HOST=$ECS_HOST_DEFAULT
      ECS_HOST=$(ask_for_value appserverHost "$ECS_HOST")
      $CFG_HELPER appserverHost "$ECS_HOST"

      ECS_PORT="$($CFG_HELPER appserverPort)"
      [ -z "$ECS_PORT" ] && ECS_PORT=$ECS_PORT_DEFAULT
      ECS_PORT=$(ask_for_value appserverPort "$ECS_PORT")
      $CFG_HELPER appserverPort "$ECS_PORT"

      ECS_LOGIN="$($CFG_HELPER appserverLogin)"
      [ -z "$ECS_LOGIN" ] && ECS_LOGIN=$ECS_LOGIN_DEFAULT
      ECS_LOGIN=$(ask_for_value appserverLogin "$ECS_LOGIN")
      $CFG_HELPER appserverLogin "$ECS_LOGIN"

      ECS_PASSWORD="$($CFG_HELPER appserverPassword)"
      [ -z "$ECS_PASSWORD" ] && ECS_PASSWORD=$ECS_PASSWORD_DEFAULT
      ECS_PASSWORD=$(ask_for_value appserverPassword "$ECS_PASSWORD")
      $CFG_HELPER appserverPassword "$ECS_PASSWORD"

      TRANSPORT="$($CFG_HELPER transport)"
      [ -z "$ECS_TRANSPORT" ] && TRANSPORT=$TRANSPORT_DEFAULT
      TRANSPORT=$(ask_for_value transport "$TRANSPORT")
      $CFG_HELPER transport "$TRANSPORT"

      PUBLIC_IP_ENABLED="$($CFG_HELPER publicIPEnabled)"
      case $PUBLIC_IP_ENABLED in
          1)
            PUBLIC_IP_ENABLED="auto"
            ;;
          0)
            PUBLIC_IP_ENABLED="disabled"
            ;;
          2)
            PUBLIC_IP_ENABLED="manual"
            ;;
      esac

      [ -z "$PUBLIC_IP_ENABLED" ] && PUBLIC_IP_ENABLED=$PUBLIC_IP_ENABLED_DEFAULT
      PUBLIC_IP_ENABLED=$(ask_for_value publicIPEnabled "$PUBLIC_IP_ENABLED")
      case $PUBLIC_IP_ENABLED in
          auto)
            PUBLIC_IP_ENABLED=1
            ;;
          disabled)
            PUBLIC_IP_ENABLED=0
            ;;
          manual)
            PUBLIC_IP_ENABLED=2
            ;;
      esac

      $CFG_HELPER publicIPEnabled "$PUBLIC_IP_ENABLED"

      if [ "$PUBLIC_IP_ENABLED" -eq 2 ]
      then
          STATIC_PUBLIC_IP="$($CFG_HELPER staticPublicIP)"
          [ -z "$STATIC_PUBLIC_IP" ] && STATIC_PUBLIC_IP=$STATIC_PUBLIC_IP_DEFAULT
          STATIC_PUBLIC_IP=$(ask_for_value staticPublicIP "$STATIC_PUBLIC_IP")
          $CFG_HELPER staticPublicIP "$STATIC_PUBLIC_IP"
      fi
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

[ -d $VARDIR ] || mkdir $VARDIR

if [ -e "/etc/init/$COMPANY_NAME-mediaserver.conf" ]; then
	invoke-rc.d $COMPANY_NAME-mediaserver start || exit $?
fi
update-rc.d -f $COMPANY_NAME-mediaserver remove >/dev/null || exit $?

exit 0
