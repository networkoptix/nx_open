#!/bin/bash -e

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

CONFIG_FILE="/opt/networkoptix/mediaserver/etc/mediaserver.conf"

# This is necessary because changed configuration options should take effect 
# immediately.
if status networkoptix-mediaserver | grep "start/running" > /dev/null; then
  stop networkoptix-mediaserver
fi
    
function read_config {
    [ -f $CONFIG_FILE ] || { true; return; }

    SERVER_GUID=$(cat $CONFIG_FILE | grep serverGuid | head -1 | sed 's/serverGuid=\(.*\)/\1/g')
    LOG_FILE=$(cat $CONFIG_FILE | grep logFile | head -1 | sed 's/logFile=\(.*\)/\1/g')
    ECS_HOST=$(cat $CONFIG_FILE | grep appserverHost | head -1 | sed 's/appserverHost=\(.*\)/\1/g')
    ECS_PORT=$(cat $CONFIG_FILE | grep appserverPort | head -1 | sed 's/appserverPort=\(.*\)/\1/g')
    ECS_LOGIN=$(cat $CONFIG_FILE | grep appserverLogin | head -1 | sed 's/appserverLogin=\(.*\)/\1/g')
    ECS_PASSWORD=$(cat $CONFIG_FILE | grep appserverPassword | head -1 | sed 's/appserverPassword=\(.*\)/\1/g')
    STORAGE=$(cat $CONFIG_FILE | grep mediaDir | head -1 | sed 's/mediaDir=\(.*\)/\1/g')
    PORT=$(cat $CONFIG_FILE | grep port | head -1 | sed 's/port=\(.*\)/\1/g')

    # Compatibility option
    if [ -z "$PORT" ]
    then
       PORT=$(cat $CONFIG_FILE | grep rtspPort | head -1 | sed 's/rtspPort=\(.*\)/\1/g')
    fi
}

function write_config {
    echo "[General]" > $CONFIG_FILE
    [ -z "$SERVER_GUID" ] || echo "serverGuid=$SERVER_GUID" >> $CONFIG_FILE
    [ -z "$LOG_FILE" ] || echo "logFile=$LOG_FILE" >> $CONFIG_FILE
    [ -z "$ECS_HOST" ] || echo "appserverHost=$ECS_HOST" >> $CONFIG_FILE
    [ -z "$ECS_PORT" ] || echo "appserverPort=$ECS_PORT" >> $CONFIG_FILE
    [ -z "$ECS_LOGIN" ] || echo "appserverLogin=$ECS_LOGIN" >> $CONFIG_FILE
    [ -z "$ECS_PASSWORD" ] || echo "appserverPassword=$ECS_PASSWORD" >> $CONFIG_FILE
    [ -z "$STORAGE" ] || echo "mediaDir=$STORAGE" >> $CONFIG_FILE
    [ -z "$PORT" ] || echo "port=$PORT" >> $CONFIG_FILE
}

function to_int {
    local -i num="10#${1}"
    echo "${num}"
}
 
function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)
 
    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi
 
    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

case "$1" in
  configure)
      read_config

      # Do we need to validate host?
      db_input high networkoptix-mediaserver/ecs_host || true
      db_go

      # Simple port validation
      db_input high networkoptix-mediaserver/ecs_port || true
      db_go
      db_get networkoptix-mediaserver/ecs_port
      until port_is_ok "$RET"
      do
        db_input high networkoptix-mediaserver/ecs_port_invalid || true
        db_go

        { db_input high networkoptix-mediaserver/ecs_port; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break

        db_go
        db_get networkoptix-mediaserver/ecs_port
      done

      # Login and password are up to user
      db_input high networkoptix-mediaserver/ecs_login || true
      db_go

      db_input high networkoptix-mediaserver/ecs_password || true
      db_go

      # Create storage directory if doesn't exist
      while :
      do
          { db_input high networkoptix-mediaserver/storage; STATUS=$?; } || true
          [ $STATUS -eq 30 ] && break

          db_go
          db_get networkoptix-mediaserver/storage

          if [[ "$RET" != /* ]]
          then
              db_input high networkoptix-mediaserver/storage_abspath || true
              db_go
              continue
          fi

          create_dir "$RET"
          if [ $? -ne 0 ]
          then
              db_input high networkoptix-mediaserver/storage_cant_create || true
              db_go
              continue
          fi

          break
      done

      db_input high networkoptix-mediaserver/api_port || true
      db_go

      db_input high networkoptix-mediaserver/rtsp_port || true
      db_go

      db_get networkoptix-mediaserver/ecs_host && ECS_HOST=$RET
      db_get networkoptix-mediaserver/ecs_port && ECS_PORT=$RET
      db_get networkoptix-mediaserver/ecs_login && ECS_LOGIN=$RET
      db_get networkoptix-mediaserver/ecs_password && ECS_PASSWORD=$RET
      db_get networkoptix-mediaserver/storage && STORAGE=$RET
      db_get networkoptix-mediaserver/port && PORT=$RET

      write_config
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

if [ -e "/etc/init/networkoptix-mediaserver.conf" ]; then
	invoke-rc.d networkoptix-mediaserver start || exit $?
fi
update-rc.d -f networkoptix-mediaserver remove >/dev/null || exit $?

exit 0
