#!/bin/bash -e

COMPANY_NAME=${deb.customization.company.name}

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

CONFIG_FILE="/opt/$COMPANY_NAME/mediaserver/etc/mediaserver.conf"

# This is necessary because changed configuration options should take effect 
# immediately.
if status $COMPANY_NAME-mediaserver | grep "start/running" > /dev/null; then
  stop $COMPANY_NAME-mediaserver
fi
    
function read_config {
    [ -f $CONFIG_FILE ] || { true; return; }

    SERVER_GUID=$(cat $CONFIG_FILE | grep serverGuid | head -1 | sed 's/serverGuid=\(.*\)/\1/g')
    LOG_FILE=$(cat $CONFIG_FILE | grep logFile | head -1 | sed 's/logFile=\(.*\)/\1/g')
    ECS_HOST=$(cat $CONFIG_FILE | grep appserverHost | head -1 | sed 's/appserverHost=\(.*\)/\1/g')
    ECS_PORT=$(cat $CONFIG_FILE | grep appserverPort | head -1 | sed 's/appserverPort=\(.*\)/\1/g')
    ECS_LOGIN=$(cat $CONFIG_FILE | grep appserverLogin | head -1 | sed 's/appserverLogin=\(.*\)/\1/g')
    ECS_PASSWORD=$(cat $CONFIG_FILE | grep appserverPassword | head -1 | sed 's/appserverPassword=\(.*\)/\1/g')
    STORAGE=$(cat $CONFIG_FILE | grep mediaDir | head -1 | sed 's/mediaDir=\(.*\)/\1/g')
    PORT=$(cat $CONFIG_FILE | grep port | head -1 | sed 's/port=\(.*\)/\1/g')

    # Compatibility option
    if [ -z "$PORT" ]
    then
       PORT=$(cat $CONFIG_FILE | grep rtspPort | head -1 | sed 's/rtspPort=\(.*\)/\1/g')
    fi
}

function write_config {
    echo "[General]" > $CONFIG_FILE
    [ -z "$SERVER_GUID" ] || echo "serverGuid=$SERVER_GUID" >> $CONFIG_FILE
    [ -z "$LOG_FILE" ] || echo "logFile=$LOG_FILE" >> $CONFIG_FILE
    [ -z "$ECS_HOST" ] || echo "appserverHost=$ECS_HOST" >> $CONFIG_FILE
    [ -z "$ECS_PORT" ] || echo "appserverPort=$ECS_PORT" >> $CONFIG_FILE
    [ -z "$ECS_LOGIN" ] || echo "appserverLogin=$ECS_LOGIN" >> $CONFIG_FILE
    [ -z "$ECS_PASSWORD" ] || echo "appserverPassword=$ECS_PASSWORD" >> $CONFIG_FILE
    [ -z "$STORAGE" ] || echo "mediaDir=$STORAGE" >> $CONFIG_FILE
    [ -z "$PORT" ] || echo "rtspPort=$PORT" >> $CONFIG_FILE
}

function to_int {
    local -i num="10#${1}"
    echo "${num}"
}

function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)
 
    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi
 
    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

function ask_for_value {
    local varname="$1"
    local default="$2"
    local full_name="$COMPANY_NAME-mediaserver/$varname"
    local error_message="${full_name}_invalid"

    [ -n "$default" ] && db_set $full_name $default 
    db_input high $full_name || true
    db_go

    while :
    do
        db_get $full_name
        { validate_$varname $RET 2> /dev/null; STATUS=$?; } || true        
        [ $STATUS -eq 0 ] && break # validation passes
        [ $STATUS -ne 1 ] && break # no validation function or invalid

        db_input high $error_message
        db_go

        { db_input high $full_name; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break
        db_go
    done

    RESULT="$RET"
    db_unregister $full_name
    echo $RESULT
}

function validate_ecsPassword {
    [ -n "$1" ]
}

function validate_port {
    port_is_ok $1
}

function validate_storage {
  [[ "$1" == /* ]]
}

case "$1" in
  configure)
      read_config

      ECS_HOST=$(ask_for_value ecsHost "$ECS_HOST")
      ECS_PORT=$(ask_for_value ecsPort "$ECS_PORT")
      ECS_LOGIN=$(ask_for_value ecsLogin "$ECS_LOGIN")
      ECS_PASSWORD=$(ask_for_value ecsPassword "$ECS_PASSWORD")

      STORAGE=$(ask_for_value storage "$STORAGE")
      create_dir "$STORAGE"
      while [ $? -ne 0 ]
      do
          db_input high $COMPANY_NAME-mediaserver/storage_cant_create || true
          db_go

          STORAGE=$(ask_for_value storage "$STORAGE")
          create_dir "$STORAGE"
      done

      PORT=$(ask_for_value port "$PORT")

      write_config
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

if [ -e "/etc/init/$COMPANY_NAME-mediaserver.conf" ]; then
	invoke-rc.d $COMPANY_NAME-mediaserver start || exit $?
fi
update-rc.d -f $COMPANY_NAME-mediaserver remove >/dev/null || exit $?

exit 0
