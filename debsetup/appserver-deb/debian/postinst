#!/bin/bash -e

. /usr/share/debconf/confmodule

COMPANY_NAME="${deb.customization.company.name}"

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

CONFIG_FILE="/opt/$COMPANY_NAME/entcontroller/etc/entcontroller.conf"

# This is necessary because changed configuration options should take effect 
# immediately.
if status $COMPANY_NAME-entcontroller | grep "start/running" > /dev/null; then
  stop $COMPANY_NAME-entcontroller
fi
    
function read_config {
    [ -f $CONFIG_FILE ] || { true; return; }

    ECS_GUID=$(cat $CONFIG_FILE | grep ecsGuid | head -1 | sed 's/ecsGuid=\(.*\)/\1/g')
    LOG_FILE=$(cat $CONFIG_FILE | grep logFile | head -1 | sed 's/logFile=\(.*\)/\1/g')
    ECS_PORT=$(cat $CONFIG_FILE | grep port | head -1 | sed 's/port=\(.*\)/\1/g')
    ECS_PROXY_PORT=$(cat $CONFIG_FILE | grep proxyPort | head -1 | sed 's/proxyPort=\(.*\)/\1/g')
    ECS_PASSWORD=$(cat $CONFIG_FILE | grep password | head -1 | sed 's/password=\(.*\)/\1/g')
}

function write_config {
    echo "[General]" > $CONFIG_FILE
    [ -z "$ECS_GUID" ] || echo "ecsGuid=$ECS_GUID" >> $CONFIG_FILE
    [ -z "$LOG_FILE" ] || echo "logFile=$LOG_FILE" >> $CONFIG_FILE
    [ -z "$ECS_PORT" ] || echo "port=$ECS_PORT" >> $CONFIG_FILE
    [ -z "$ECS_PROXY_PORT" ] || echo "proxyPort=$ECS_PROXY_PORT" >> $CONFIG_FILE
}

function to_int {
    local -i num="10#${1}"
    echo "${num}"
}
 
function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)
 
    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi
 
    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

function validate_password {
    [ -n "$1" ]
}

function validate_ecsPort {
    port_is_ok $1
}

function valide_ecsProxyPort {
    port_is_ok $1
}

function ask_for_value {
    local varname="$1"
    local default="$2"
    local full_name="$COMPANY_NAME-entcontroller/$varname"
    local error_message="${full_name}_invalid"

    [ -n "$default" ] && db_set $full_name $default 
    db_input high $full_name || true
    db_go

    while :
    do
        db_get $full_name
        { validate_$varname $RET 2> /dev/null; STATUS=$?; } || true        
        [ $STATUS -eq 0 ] && break # validation passes
        [ $STATUS -ne 1 ] && break # no validation function or invalid

        db_input high $error_message
        db_go

        { db_input high $full_name; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break
        db_go
    done

    RESULT="$RET"
    db_unregister $full_name
    echo $RESULT
}

case "$1" in
  configure)
      read_config

      ECS_PORT=$(ask_for_value ecsPort "$ECS_PORT")
      ECS_PROXY_PORT=$(ask_for_value ecsProxyPort "$ECS_PROXY_PORT")
      ECS_PASSWORD=$(ask_for_value ecsPassword "$ECS_PASSWORD")

      write_config

      /opt/$COMPANY_NAME/entcontroller/bin/dbsync

      if [ -n "$ECS_PASSWORD" ]
      then
        /opt/$COMPANY_NAME/entcontroller/bin/dbconfig admin "$ECS_PASSWORD"
      fi

      chmod 600 /opt/$COMPANY_NAME/entcontroller/var/db/ecs.db
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

if [ -e "/etc/init/$COMPANY_NAME-entcontroller.conf" ]; then
	invoke-rc.d $COMPANY_NAME-entcontroller start || exit $?
fi
update-rc.d -f $COMPANY_NAME-entcontroller remove >/dev/null || exit $?

if [ -e "/etc/init/$COMPANY_NAME-mediaproxy.conf" ]; then
	invoke-rc.d $COMPANY_NAME-mediaproxy start || exit $?
fi
update-rc.d -f $COMPANY_NAME-mediaproxy remove >/dev/null || exit $?

exit 0
