#!/bin/bash -e

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
COMPANY_NAME="${deb.customization.company.name}"
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

BASE_DIR="/opt/$COMPANY_NAME/entcontroller"

ETC_DIR="$BASE_DIR/etc"
CONFIG_FILE="$ETC_DIR/entcontroller.conf"

VAR_DIR="$BASE_DIR/var"
SSL_DIR="$VAR_DIR/ssl"
SSL_CERT="$SSL_DIR/cert.pem"

BIN_DIR="$BASE_DIR/bin"
CFG_HELPER="$BIN_DIR/config_helper.py $CONFIG_FILE"

ECS_PORT_DEFAULT=7001
PUBLIC_IP_MODE_DEFAULT=auto
ALLOW_CAMERA_CHANGES_DEFAULT=true

# This is necessary because changed configuration options should take effect 
# immediately.
if status $COMPANY_NAME-entcontroller | grep "start/running" > /dev/null; then
  stop $COMPANY_NAME-entcontroller
fi
    
function to_int {
    local -i num="10#${1}"
    echo "${num}"
}
 
function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)
 
    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi
 
    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

function validate_password {
    [ "$IS_ADMIN_PW_SET" = "true" -o -n "$1" ]
}

function validate_port {
    port_is_ok $1
}

function ask_for_value {
    local varname="$1"
    local default="$2"
    local full_name="$COMPANY_NAME-entcontroller/$varname"
    local error_message="${full_name}_invalid"

    # Support unattened install
    db_get $full_name
    if [ "$RET" = "" ]; then
        [ -n "$default" ] && db_set $full_name $default 
    fi

    db_input high $full_name || true
    db_go

    while :
    do
        db_get $full_name
        { validate_$varname $RET 2> /dev/null; STATUS=$?; } || true        
        [ $STATUS -eq 0 ] && break # validation passes
        [ $STATUS -ne 1 ] && break # no validation function or invalid

        db_input high $error_message
        db_go

        { db_input high $full_name; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break
        db_go
    done

    RESULT="$RET"
    db_unregister $full_name
    echo $RESULT
}

case "$1" in
  configure)
      IS_ADMIN_PW_SET="false"
      [ -f $VAR_DIR/db/ecs.db ] && $BIN_DIR/dbconfig isadminpw && IS_ADMIN_PW_SET="true"

      ECS_PORT="$($CFG_HELPER port)"
      [ -z "$ECS_PORT" ] && ECS_PORT=$ECS_PORT_DEFAULT
      ECS_PORT=$(ask_for_value port "$ECS_PORT")
      $CFG_HELPER port "$ECS_PORT"

      ECS_PASSWORD=$(ask_for_value password "")

      ECS_ALLOW_CAMERA_CHANGES="$($CFG_HELPER allowCameraChanges)"
      [ -z "$ECS_ALLOW_CAMERA_CHANGES" ] && ECS_ALLOW_CAMERA_CHANGES=$ALLOW_CAMERA_CHANGES_DEFAULT
      ECS_ALLOW_CAMERA_CHANGES=$(ask_for_value allowCameraChanges "$ECS_ALLOW_CAMERA_CHANGES")
      $CFG_HELPER allowCameraChanges "$ECS_ALLOW_CAMERA_CHANGES"

      PUBLIC_IP_MODE="$($CFG_HELPER publicIpMode)"
      [ -z "$PUBLIC_IP_MODE" ] && PUBLIC_IP_MODE=$PUBLIC_IP_MODE_DEFAULT
      PUBLIC_IP_MODE=$(ask_for_value publicIpMode "$PUBLIC_IP_MODE")
      $CFG_HELPER publicIpMode "$PUBLIC_IP_MODE"

      if [ "$PUBLIC_IP_MODE" = "manual" ]
      then
          MANUAL_PUBLIC_IP="$($CFG_HELPER manualPublicIp)"
          MANUAL_PUBLIC_IP=$(ask_for_value manualPublicIp "$MANUAL_PUBLIC_IP")
          $CFG_HELPER manualPublicIp "$MANUAL_PUBLIC_IP"
      fi

      dbversion=$("$BIN_DIR/dbconfig" swversion)
      if [ $dbversion != "0" ]
      then
          cp -p $VAR_DIR/db/ecs.db{,.$dbversion}
      fi

      "$BIN_DIR/dbsync"

      if [ -n "$ECS_PASSWORD" ]
      then
          "$BIN_DIR/dbconfig" setpw admin "$ECS_PASSWORD"
      fi

      "$BIN_DIR/certgen" -i

      chmod 600 $VAR_DIR/db/ecs.db
      chmod 600 "$SSL_CERT"
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

if [ -e "/etc/init/$COMPANY_NAME-entcontroller.conf" ]; then
    invoke-rc.d $COMPANY_NAME-entcontroller start || exit $?
fi
update-rc.d -f $COMPANY_NAME-entcontroller remove >/dev/null || exit $?

if [ -e "/etc/init/$COMPANY_NAME-mediaproxy.conf" ]; then
    invoke-rc.d $COMPANY_NAME-mediaproxy start || exit $?
fi
update-rc.d -f $COMPANY_NAME-mediaproxy remove >/dev/null || exit $?

exit 0
