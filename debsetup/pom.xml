<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<!--
    Example pom for delegating maven goals to msbuild so it builds the "solution"
 
    A solution can be a group of projects, but here we only have one.
    It should also be possible to have one maven project per solution project, 
    and have a parent pom to deletegate the build.
  -->
	<parent>
		<artifactId>hdwitness</artifactId>
		<groupId>com.networkoptix.hdwitness</groupId>
		<version>1.5.1-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>

	<groupId>com.networkoptix.hdwitness</groupId>
	<version>1.5.1-SNAPSHOT</version>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>debsetup</artifactId>
	<packaging>pom</packaging>
	<name>Common POM for debs projects</name>	

	<build>
		<directory>${arch}</directory>
		<outputDirectory>${arch}</outputDirectory>
		<sourceDirectory>${basedir}/src</sourceDirectory> 		
	</build>				

	<profiles>
		<profile>
			<id>installer</id>
			<activation>				
				<activeByDefault>true</activeByDefault>
			</activation>		
			<build>
				<plugins>	
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>properties-maven-plugin</artifactId>
						<version>1.0-alpha-2</version>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>../../build-${customization}.properties</file>
										<file>../../build_environment/${arch}/libdir.properties</file>
									</files>
								</configuration>
							</execution>
						</executions>
					</plugin>	

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<id>prepare-deb-contents</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/prepare-dist.sh</executable>
									<workingDirectory>${project.build.directory}</workingDirectory>		
								</configuration>
							</execution>
							<execution>
								<id>build-deb</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/build-dist.sh</executable>
									<workingDirectory>${project.build.directory}</workingDirectory>		
								</configuration>
							</execution>					
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>prepare-clean</id>
								<phase>validate</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<exec dir="${basedir}" executable="sudo" failifexecutionfails="false">
											<arg line="rm -Rf ${project.build.directory}"/>
										</exec>
									</target>
									<target>
										<chmod file="${basedir}/../pre-clean.sh" perm="755"/>	
										<exec dir="${basedir}/../" executable="${basedir}/../pre-clean.sh" failifexecutionfails="false" />
									</target>
								</configuration>
							</execution>	
							<execution>
								<id>chmod</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<target>							
										<chmod file="${project.build.directory}/*.sh" perm="755"/>							
									</target>
								</configuration>
							</execution>					
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>copy-artifacts</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<excludeTransitive>true</excludeTransitive>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.5</version>
						<executions>
							<execution>
								<id>prepare-deb</id>
								<phase>process-sources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<resources>          
										<resource>
											<directory>${basedir}</directory>
											<filtering>true</filtering>
											<includes>
												<include>bin/**</include>
												<include>debian/**</include>
												<include>init/**</include>
												<include>init.d/**</include>
												<include>usr/**</include>
											</includes>
											<excludes>
												<exclude>**/icons/**</exclude>
											</excludes>
										</resource>		
										<!--<resource>
											<directory>${basedir}/../cpp/shared-resources/icons/${custom.skin}/hicolor/**</directory>
											<outputDirectory>${project.build.directory}/usr/share/icons/hicolor</outputDirectory>
											<filtering>true</filtering>
											<excludes>
												<exclude>**/icons/**</exclude>
											</excludes>
										</resource>	-->											
									</resources>              
									<encoding>UTF-8</encoding>
								</configuration>            
							</execution>				
						</executions>
					</plugin>			
				</plugins>		
			</build>
		</profile>
	</profiles>
</project>
