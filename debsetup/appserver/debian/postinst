#!/bin/bash -e

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

CONFIG_FILE="/opt/networkoptix/entcontroller/etc/entcontroller.conf"

# This is necessary because changed configuration options should take effect 
# immediately.
if status networkoptix-entcontroller | grep "start/running" > /dev/null; then
  stop networkoptix-entcontroller
fi
    
function read_config {
    [ -f $CONFIG_FILE ] || { true; return; }

    ECS_GUID=$(cat $CONFIG_FILE | grep ecsGuid | head -1 | sed 's/ecsGuid=\(.*\)/\1/g')
    LOG_FILE=$(cat $CONFIG_FILE | grep logFile | head -1 | sed 's/logFile=\(.*\)/\1/g')
    ECS_PORT=$(cat $CONFIG_FILE | grep port | head -1 | sed 's/port=\(.*\)/\1/g')
    ECS_PROXY_PORT=$(cat $CONFIG_FILE | grep proxyPort | head -1 | sed 's/proxyPort=\(.*\)/\1/g')
    ECS_PASSWORD=$(cat $CONFIG_FILE | grep password | head -1 | sed 's/password=\(.*\)/\1/g')
}

function write_config {
    echo "[General]" > $CONFIG_FILE
    [ -z "$ECS_GUID" ] || echo "ecsGuid=$ECS_GUID" >> $CONFIG_FILE
    [ -z "$LOG_FILE" ] || echo "logFile=$LOG_FILE" >> $CONFIG_FILE
    [ -z "$ECS_PORT" ] || echo "port=$ECS_PORT" >> $CONFIG_FILE
    [ -z "$ECS_PROXY_PORT" ] || echo "proxyPort=$ECS_PROXY_PORT" >> $CONFIG_FILE
}

function to_int {
    local -i num="10#${1}"
    echo "${num}"
}
 
function port_is_ok {
    local port="$1"
    local -i port_num=$(to_int "${port}" 2>/dev/null)
 
    if (( $port_num < 1 || $port_num > 65535 )) ; then
        return 1
    fi
 
    return 0
}

function create_dir {
    local dir="$1";

    mkdir -p "$dir"
}

case "$1" in
  configure)
      read_config

      # Simple port validation
      db_input high networkoptix-entcontroller/ecs_port || true
      db_go
      db_get networkoptix-entcontroller/ecs_port
      until port_is_ok "$RET"
      do
        db_input high networkoptix-entcontroller/ecs_port_invalid || true
        db_go

        { db_input high networkoptix-entcontroller/ecs_port; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break

        db_go
        db_get networkoptix-entcontroller/ecs_port
      done

      # Proxy port
      db_input high networkoptix-entcontroller/ecs_proxy_port || true
      db_go
      db_get networkoptix-entcontroller/ecs_proxy_port
      until port_is_ok "$RET"
      do
        db_input high networkoptix-entcontroller/ecs_port_invalid || true
        db_go

        { db_input high networkoptix-entcontroller/ecs_proxy_port; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break

        db_go
        db_get networkoptix-entcontroller/ecs_proxy_port
      done

      # Password should not be empty
      db_reset networkoptix-entcontroller/ecs_password
      db_input high networkoptix-entcontroller/ecs_password || true
      db_go
      db_get networkoptix-entcontroller/ecs_password
      until [ ! -z "$RET" ]
      do
        db_input high networkoptix-entcontroller/ecs_pass_empty || true
        db_go

        { db_input high networkoptix-entcontroller/ecs_password; STATUS=$?; } || true
        [ $STATUS -eq 30 ] && break

        db_go
        db_get networkoptix-entcontroller/ecs_password 
      done

      db_get networkoptix-entcontroller/ecs_port && ECS_PORT=$RET
      db_get networkoptix-entcontroller/ecs_proxy_port && ECS_PROXY_PORT=$RET
      db_get networkoptix-entcontroller/ecs_password && ECS_PASSWORD=$RET

      write_config

      /opt/networkoptix/entcontroller/bin/dbsync

      if [ ! -z "$ECS_PASSWORD" ]
      then
        /opt/networkoptix/entcontroller/bin/dbconfig admin "$ECS_PASSWORD"
        db_set networkoptix-entcontroller/ecs_password ""
      fi

      chmod 600 /opt/networkoptix/entcontroller/var/db/ecs.db
  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

if [ -e "/etc/init/networkoptix-entcontroller.conf" ]; then
	invoke-rc.d networkoptix-entcontroller start || exit $?
fi
update-rc.d -f networkoptix-entcontroller remove >/dev/null || exit $?

if [ -e "/etc/init/networkoptix-mediaproxy.conf" ]; then
	invoke-rc.d networkoptix-mediaproxy start || exit $?
fi
update-rc.d -f networkoptix-mediaproxy remove >/dev/null || exit $?
exit 0
