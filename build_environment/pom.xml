        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<artifactId>hdwitness</artifactId>
		<groupId>com.networkoptix.hdwitness</groupId>
		<version>2.0.2-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>

	<groupId>com.networkoptix.hdwitness</groupId>
	<version>2.0.2-SNAPSHOT</version>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>build_environment</artifactId>
	<packaging>pom</packaging>
	<name>Build Environment for QT projects</name>

	<properties>
		<libdir>${project.build.directory}</libdir>
		<rsync.skip>false</rsync.skip>
		<buildLib/>
	</properties>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>help</artifactId>
			<version>${project.version}</version>
			<type>zip</type>
			<classifier>${customization}</classifier>
		</dependency>
		<dependency>
			<groupId>org.boost</groupId>
			<artifactId>boost</artifactId>
			<version>1.52-SNAPSHOT</version>
			<type>zip</type>
			<classifier>${platform}</classifier>
		</dependency>
		<dependency>
			<groupId>org.ffmpeg</groupId>
			<artifactId>ffmpeg</artifactId>
			<version>${ffmpeg.version}</version>
			<type>zip</type>
			<classifier>${platform}-${arch}</classifier>
		</dependency>      
		<dependency>
			<groupId>org</groupId>
			<artifactId>onvif</artifactId>
			<version>${onvif.version}</version>
			<type>zip</type>
			<classifier>${platform}-${arch}-${compiler}</classifier>
		</dependency>		
		<dependency>
			<groupId>org.hyperic</groupId>
			<artifactId>sigar</artifactId>
			<version>${sigar.version}</version>
			<type>zip</type>
			<classifier>${platform}-${arch}-${compiler}</classifier>
		</dependency>                               	
		<dependency>
			<groupId>org</groupId>
			<artifactId>festival</artifactId>
			<version>${festival.version}</version>
			<type>zip</type>
			<classifier>${platform}-${arch}</classifier>
		</dependency>                               	
		<dependency>
			<groupId>org.festival</groupId>
			<artifactId>festival-vox</artifactId>
			<version>${festival.version}</version>
			<type>zip</type>
			<classifier>all-os</classifier>
		</dependency>                         
	</dependencies>		

	<build>
		<defaultGoal>compile</defaultGoal>
		<directory>${arch}</directory>
		<outputDirectory>${arch}</outputDirectory>
		<sourceDirectory>${basedir}/src</sourceDirectory> 	
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>../rsa-key-${license.environment}.properties</file>
								<file>../build-${customization}.properties</file>								
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>		
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>auto-clean</id>
						<phase>validate</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<excludeDefaultDirectories>true</excludeDefaultDirectories>
							<filesets>
								<fileset>
									<directory>${project.build.directory}</directory>
									<followSymlinks>false</followSymlinks>
									<useDefaultExcludes>true</useDefaultExcludes>
									<excludes>
										<exclude>**/common.lib</exclude>
										<exclude>**/*.exe</exclude>
									</excludes>
								</fileset>
							</filesets>
							<skip>${clean-skip}</skip>							
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1.1</version>
				<executions>
					<execution>
						<id>update-buildenv</id>
						<phase>validate</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>hg</executable>
							<arguments>
								<argument>pull</argument>
								<argument>-u</argument>
							</arguments>
							<workingDirectory>${environment.dir}</workingDirectory>		
							<skip>${rsync.skip}</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>	
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>version.h</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>          								
								<resource>
									<targetPath>${project.build.directory}/build/include</targetPath>
									<directory>${basedir}/../cpp/shared-resources</directory>
									<includes>
										<include>version.h</include>
									</includes>
									<filtering>true</filtering>
								</resource>												
							</resources>              
							<encoding>UTF-8</encoding>
						</configuration>            
					</execution>
				</executions>
			</plugin>		

			<plugin>
				<groupId>com.goldin.plugins</groupId>
				<artifactId>maven-copy-plugin</artifactId>
				<version>0.2.3.8-beta-9</version>
				<executions>
					<execution>
						<id>copy-qt-libraries</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<runIf>{{ buildLib != "staticlib" }}</runIf>
							<failIfNotFound>false</failIfNotFound>
							<resources>
								<resource>
									<targetPath>${project.build.directory}/bin</targetPath>
									<directory>${environment.dir}/qt/bin/${arch}</directory>
									<preservePath>true</preservePath>
									<includes>
										<include>**/qt${qtlib1}4.*</include>
										<include>**/qt${qtlib2}4.*</include>
										<include>**/qt${qtlib3}4.*</include>
										<include>**/qt${qtlib4}4.*</include>
										<include>**/qt${qtlib5}4.*</include>
										<include>**/qt${qtlib6}4.*</include>
										<include>**/qt${qtlib7}4.*</include>
										<include>**/qt${qtlib8}4.*</include>
										<include>**/qt${qtlib9}4.*</include>
										<include>**/qt${qtlib1}d4.*</include>
										<include>**/qt${qtlib2}d4.*</include>
										<include>**/qt${qtlib3}d4.*</include>
										<include>**/qt${qtlib4}d4.*</include>
										<include>**/qt${qtlib5}d4.*</include>
										<include>**/qt${qtlib6}d4.*</include>
										<include>**/qt${qtlib7}d4.*</include>
										<include>**/qt${qtlib8}d4.*</include>
										<include>**/qt${qtlib9}d4.*</include>												
									</includes>
									<excludes>
										<exclude>**/*.lib</exclude>
									</excludes>
								</resource>
								
								<resource>
									<targetPath>${project.build.directory}/bin</targetPath>
									<directory>${environment.dir}/qt/plugins/${arch}</directory>
									<preservePath>true</preservePath>
									<includes>
										<include>*/${qtplugin1}/**</include>
										<include>*/${qtplugin2}/**</include>
										<include>*/${qtplugin3}/**</include>
									</includes>										
								</resource>			 														

								<resource>
									<targetPaths>
										<targetPath>${project.build.directory}/bin/debug</targetPath>
										<targetPath>${project.build.directory}/bin/release</targetPath>
									</targetPaths>
									<file>${basedir}/../quicksyncdecoder/hw_decoding_conf.xml</file>
								</resource>								                             
							</resources>						
						</configuration>
					</execution>
				</executions>
			</plugin>				
		</plugins>		
	</build>
	<profiles>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<dependencies>
				<dependency>
					<groupId>com.google</groupId>
					<artifactId>protobuf</artifactId>
					<version>2.4.1</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>                           
				<dependency>
					<groupId>org.openssl</groupId>
					<artifactId>openssl</artifactId>
					<version>${openssl.version}</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>
				<dependency>
					<groupId>com.digitalwatchdog.dvr</groupId>
					<artifactId>vmax-integration</artifactId>
					<version>1.0-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-x86</classifier>
				</dependency>				
				<dependency>
					<groupId>com.creativelabs</groupId>
					<artifactId>openal</artifactId>
					<version>1.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>
				<dependency>                 
					<groupId>com.nokia.qt.addons</groupId>
					<artifactId>qtcolorpicker</artifactId>
					<version>2.6.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>              
				<dependency>
					<groupId>com.microsoft.directx</groupId>
					<artifactId>d3d9</artifactId>
					<version>JUN2010</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>   
				<dependency>
					<groupId>com.microsoft.directx</groupId>
					<artifactId>d3dx9</artifactId>
					<version>JUN2010</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>   
				<dependency>
					<groupId>com.microsoft.directx</groupId>
					<artifactId>dxerr</artifactId>
					<version>JUN2010</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>   
				<dependency>
					<groupId>com.intel</groupId>
					<artifactId>mfx</artifactId>
					<version>2012-R2-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>                               	
				<dependency>
					<groupId>com.microsoft</groupId>
					<artifactId>redistributable</artifactId>
					<version>vs2008</version>
					<type>zip</type>
					<classifier>${platform}-${arch}</classifier>
				</dependency>		
				<dependency>
					<groupId>net.sourceforge</groupId>
					<artifactId>qjson</artifactId>
					<version>0.7.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>
				<dependency>
					<groupId>com.sourceforge.cloudcity</groupId>
					<artifactId>bespin</artifactId>
					<version>1.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>
			</dependencies>			
			<properties>
				<compiler>msvc2008</compiler>
				<arch>x86</arch>
				<platform>windows</platform>
			</properties>
			<build>
				<plugins>	
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<id>rsync-buildenv</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${environment.dir}/get_buildenv.bat</executable>
									<workingDirectory>${environment.dir}</workingDirectory>		
									<skip>${rsync.skip}</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>									
				</plugins>
			</build>
		</profile>

		<profile>
			<id>linux</id>
			<activation>
				<os>
					<family>unix</family>
					<name>linux</name>
				</os>		
			</activation>
			<properties>
				<compiler>gcc</compiler>
				<rename-skip>false</rename-skip>
			</properties>
			<dependencies>
				<dependency>
					<groupId>com.google</groupId>
					<artifactId>protobuf</artifactId>
					<version>2.4.1</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>                           
				<dependency>
					<groupId>org.openssl</groupId>
					<artifactId>openssl</artifactId>
					<version>${openssl.version}</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>
				<dependency>
					<groupId>net.sourceforge</groupId>
					<artifactId>qjson</artifactId>
					<version>0.7.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>
				<dependency>
					<groupId>com.sourceforge.cloudcity</groupId>
					<artifactId>bespin</artifactId>
					<version>1.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>                               	
			</dependencies>
			<build>	
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<id>rsync-buildenv</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${environment.dir}/get_buildenv.sh</executable>
									<workingDirectory>${environment.dir}</workingDirectory>		
									<skip>${rsync.skip}</skip>
								</configuration>
							</execution>
							<execution>
								<id>prepare-deb</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/prepare-package.sh</executable>
									<workingDirectory>${project.build.directory}</workingDirectory>		
		    							<skip>${assembly-skip}</skip>
								</configuration>
							</execution>							
						</executions>
					</plugin>				
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>copy-platform-libs</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>							
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>generate-qt-project</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<target>							
										<chmod file="${project.build.directory}/*.sh" perm="755"/>
										<exec dir="${libdir}" executable="unzip" failifexecutionfails="false">
											<arg line="-a -u *.zip -x **/include/** *.a"/>
										</exec>
										<exec dir="${libdir}" executable="unzip" failifexecutionfails="false">
											<arg line="-a -u *.zip **/include/**"/>
										</exec>
										<exec dir="${libdir}" executable="unzip" failifexecutionfails="false">
											<arg line="-a -u *.zip *.a"/>
										</exec>
										<exec dir="${libdir}" executable="rm" failifexecutionfails="false">
											<arg line="*.zip"/>
										</exec>
									</target>										
								</configuration>
							</execution>				
						</executions>
					</plugin>					
				</plugins>	
			</build>			
		</profile>		

                <profile>
                        <id>macosx</id>
                        <activation>
                                <os>
                                        <family>mac</family>
                                </os>
                        </activation>

			<dependencies>
				<dependency>
					<groupId>com.google</groupId>
					<artifactId>protobuf</artifactId>
					<version>2.5.0</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-${compiler}</classifier>
				</dependency>
	             		<dependency>
				        <groupId>net.sourceforge</groupId>
            				<artifactId>qjson</artifactId>
		 			<version>0.8.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-qt484</classifier>
				</dependency>
				<dependency>
					<groupId>com.sourceforge.cloudcity</groupId>
					<artifactId>bespin</artifactId>
					<version>1.1-SNAPSHOT</version>
					<type>zip</type>
					<classifier>${platform}-${arch}-qt484</classifier>
				</dependency>                               	
			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<id>rsync-buildenv</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${environment.dir}/get_buildenv.sh</executable>
									<workingDirectory>${environment.dir}</workingDirectory>		
									<skip>${rsync.skip}</skip>
								</configuration>
							</execution>
							<execution>
								<id>prepare-deb</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${project.build.directory}/prepare-package.sh</executable>
									<workingDirectory>${project.build.directory}</workingDirectory>		
		    							<skip>${assembly-skip}</skip>
								</configuration>
							</execution>							
						</executions>
					</plugin>				

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>copy-platform-libs</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</configuration>
							</execution>							
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>generate-qt-project</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<failOnError>false</failOnError>
									<target>							
										<chmod file="${project.build.directory}/*.sh" perm="755"/>
										<exec dir="${libdir}" executable="unzip" failifexecutionfails="false">
											<arg line="-a -u *.zip -x **/include/** *.a"/>
										</exec>
										<exec dir="${libdir}" executable="unzip" failifexecutionfails="false">
											<arg line="-a -u *.zip **/include/**"/>
										</exec>
										<exec dir="${libdir}" executable="unzip" failifexecutionfails="false">
											<arg line="-a -u *.zip *.a"/>
										</exec>
										<exec dir="${libdir}" executable="rm" failifexecutionfails="false">
											<arg line="*.zip"/>
										</exec>
									</target>										
								</configuration>
							</execution>				
						</executions>
					</plugin>					
				</plugins>
			</build>
                </profile>

	</profiles>	
</project>
