#!/usr/bin/env python2

# Setup and add one more mediaserver to an existing system.

import argparse
from contextlib import contextmanager
import itertools
import logging
import uuid

from netaddr import IPNetwork
import yaml

from framework.ca import CA
from framework.config import str_to_timedelta
from framework.context_logger import context_logger
from framework.installation.installer import InstallerSet
from framework.installation.unpacked_mediaserver_factory import UnpackedMediaserverFactory
from framework.mediaserver_sync_wait import SyncWaitTimeout
from framework.merging import merge_systems
from framework.os_access.local_path import LocalPath
from framework.utils import datetime_local_now, single
from setup_servers import system_settings, unpacked_server_config
from resource_synchronization import wait_for_servers_synced
from existing_mediaservers import address_and_count_to_server_list
from cmdline_logging import init_logging


_logger = logging.getLogger('scalability.add_one_server')
_choose_id_logger = _logger.getChild('choose_id')


def pick_new_server_id(existing_server_ids):
    _logger.debug('Existing server ids:\n%s', '\n'.join(map(str, existing_server_ids)))
    for idx in itertools.count():
        server_id = uuid.UUID('8e25e200-0001-0000-0000-{:012d}'.format(idx))
        if server_id not in existing_server_ids:
            _logger.info('Choose server id: %s', server_id)
            return server_id


@contextmanager
def _one_server_set_up(unpacked_mediaserver_factory, host_list, server_id):
    groups = unpacked_mediaserver_factory.from_host_config_list(host_list)
    added_server_config = dict(unpacked_server_config, serverGuid=str(server_id))
    with groups.one_allocated_server(
            'added-server', system_settings, added_server_config) as server:
        yield server


def _merge_server_to_system(
        added_server, system_server_list, merge_timeout, message_bus_timeout, artifacts_dir):
    merge_start_time = datetime_local_now()
    merge_systems(added_server, system_server_list[0],
                  take_remote_settings=True,
                  accessible_ip_net=IPNetwork('0.0.0.0/0'),
                  timeout_sec=merge_timeout.total_seconds())
    try:
        wait_for_servers_synced(
            match_server_list=[added_server] + system_server_list,
            watch_server_list=[added_server],
            merge_timeout=merge_timeout,
            message_bus_timeout=message_bus_timeout,
            )
    except SyncWaitTimeout as e:
        e.log_and_dump_results(artifacts_dir)
        raise
    merge_duration = datetime_local_now() - merge_start_time
    _logger.info("\n\n*****  Done. Merged in %s (sec).  *****\n", merge_duration)


def _add_one_server_main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--logging-config', default='default.yaml',
                        help=("Configuration file for logging, in yaml format."
                              " Relative to logging-config dir if relative."))
    parser.add_argument('--verbose', '-v', action='store_true', help="Verbose logging.")
    parser.add_argument('--clean', action='store_true', help="Clean everything first.")
    parser.add_argument('--lws', action='store_true',
                        help="Use lightweight servers instead of full ones.")
    parser.add_argument('--base-port', type=int, default=7001,
                        help="Base mediaserver port, default is 7001")
    parser.add_argument('--merge-timeout',
                        help="Timeout for system merge. By default is taken from config.")
    parser.add_argument('work_dir', type=LocalPath,
                        help="Almost all files generated by tests placed there.")
    parser.add_argument('mediaserver_installers_dir', type=LocalPath,
                        help="Directory with installers of same version and customization.")
    parser.add_argument('config', type=LocalPath,
                        help="Path to yaml configuration file. Same configuration as used by tests.")
    parser.add_argument('server_count', type=int, help="Mediaserver count")
    parser.add_argument('server_address', nargs='+', help="Mediaserver address")

    args = parser.parse_args()

    init_logging(args.logging_config)
    if not args.verbose:
        _logger.setLevel(logging.INFO)
        _choose_id_logger.setLevel(logging.INFO)

    system_server_list = address_and_count_to_server_list(
        args.server_address, args.server_count, args.base_port, args.lws)

    config = yaml.load(args.config.read_text())
    scalability_config = config['tests']['test_scalability']
    host_list = scalability_config['host_list']
    merge_timeout = str_to_timedelta(args.merge_timeout or scalability_config['merge_timeout'])
    message_bus_timeout = str_to_timedelta(scalability_config['message_bus_timeout'])

    mediaserver_installer_set = InstallerSet(args.mediaserver_installers_dir)
    mediaserver_installer = single(installer for installer in mediaserver_installer_set.installers
                                   if installer.platform_variant == 'ubuntu'
                                   and installer.arch == 'x64'
                                   and installer.component == 'server')
    unpacked_mediaserver_factory = UnpackedMediaserverFactory(
        args.work_dir / 'artifacts',
        CA(args.work_dir / 'ca', clean=args.clean),
        mediaserver_installer,
        lightweight_mediaserver_installer=None,  # unused in this script
        clean=args.clean,
        )

    with context_logger(_choose_id_logger, 'framework.mediaserver_api'):
        existing_server_ids = system_server_list[0].api.system_mediaserver_ids()
    server_id = pick_new_server_id(existing_server_ids)
    with _one_server_set_up(
            unpacked_mediaserver_factory, host_list, server_id) as added_server:
        _logger.info('Added server is set up: %s', added_server)
        _merge_server_to_system(
            added_server, system_server_list,
            merge_timeout, message_bus_timeout, args.work_dir / 'artifacts')


if __name__ == '__main__':
    _add_one_server_main()
