import logging
import logging.config
import mimetypes

import pytest
import yaml
from pathlib2 import Path

from defaults import defaults
from framework.artifact import ArtifactFactory, ArtifactType
from framework.ca import CA
from framework.config import SingleTestConfig, TestParameter, TestsConfig
from framework.metrics_saver import MetricsSaver
from framework.os_access.exceptions import DoesNotExist
from framework.os_access.local_path import LocalPath
from framework.os_access.path import copy_file

pytest_plugins = ['fixtures.vms', 'fixtures.mediaservers', 'fixtures.cloud', 'fixtures.layouts', 'fixtures.media']

JUNK_SHOP_PLUGIN_NAME = 'junk-shop-db-capture'

_logger = logging.getLogger(__name__)


@pytest.hookimpl(hookwrapper=True)
def pytest_pyfunc_call(pyfuncitem):
    outcome = yield
    if outcome.excinfo is not None and 'skipifnotimplemented' in pyfuncitem.keywords:
        _, e, _ = outcome.excinfo
        if isinstance(e, NotImplementedError):
            pytest.skip(e.message)


def pytest_addoption(parser):
    parser.addoption(
        '--work-dir',
        type=LocalPath,
        default=defaults.get('work_dir'),
        help="Almost all files generated by tests placed there.")
    parser.addoption(
        '--bin-dir',
        type=LocalPath,
        default=defaults.get('bin_dir'),
        help="Media samples and other files required by tests are expected there.")
    parser.addoption(
        '--customization',
        help="Dir name from nx_vms/customization. Only checked against customization of installer.")
    parser.addoption(
        '--log-level',
        type=str.upper,
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        help="Log level. [%(default)s]",
        default=defaults.get('log_level', 'DEBUG'))
    parser.addoption(
        '--logging-config',
        type=Path,
        default=defaults.get('logging_config'),
        help="Configuration file for logging, in yaml format. Relative to project dir.")
    parser.addoption(
        '--tests-config-file',
        type=TestsConfig.from_yaml_file,
        nargs='*',
        help="Configuration file(s) for tests, in yaml format.")
    parser.addoption(
        '--test-parameters',
        type=TestParameter.from_str,
        help="Configuration parameters for a test, format: --test-parameter=test.param1=value1,test.param2=value2.")
    parser.addoption(
        '--clean', '--reinstall',
        action='store_true',
        help="Destroy VMs first.")


@pytest.fixture(scope='session')
def work_dir(request):
    work_dir = request.config.getoption('--work-dir').expanduser()
    work_dir.mkdir(exist_ok=True, parents=True)
    return work_dir


@pytest.fixture()
def node_dir(request, work_dir):
    # Don't call it "test_dir" to avoid interpretation as test.
    # `node`, in pytest terms, is test with instantiated parameters.
    node_dir = work_dir / request.node.name
    try:
        node_dir.rmtree()
    except DoesNotExist:
        pass
    node_dir.mkdir(parents=True, exist_ok=True)
    return node_dir


# TODO: Find out whether they exist on all supports OSes.
mimetypes.add_type('application/vnd.tcpdump.pcap', '.cap')
mimetypes.add_type('application/vnd.tcpdump.pcap', '.pcap')
mimetypes.add_type('text/plain', '.log')
mimetypes.add_type('application/x-yaml', '.yaml')
mimetypes.add_type('application/x-yaml', '.yml')


@pytest.fixture()
def artifacts_dir(node_dir, artifact_factory):
    dir = node_dir / 'artifacts'
    dir.mkdir(exist_ok=True)
    yield dir
    for entry in dir.walk():
        # noinspection PyUnresolvedReferences
        mime_type = mimetypes.types_map.get(entry.suffix, 'application/octet-stream')
        type = ArtifactType(entry.suffix[1:] if entry.suffix else 'unknown_type', mime_type, ext=entry.suffix)
        relative = entry.relative_to(dir)
        is_error = any(word in entry.name for word in {'core', 'backtrace'})
        factory = artifact_factory(list(relative.parts), name=str(relative), artifact_type=type, is_error=is_error)
        path = factory.produce_file_path()
        copy_file(entry, path)


@pytest.fixture(scope='session')
def bin_dir(request):
    bin_dir = request.config.getoption('--bin-dir')
    assert bin_dir, 'Argument --bin-dir is required'
    return bin_dir.expanduser()


@pytest.fixture(scope='session')
def ca(work_dir):
    return CA(work_dir / 'ca')


@pytest.fixture(scope='session', autouse=True)
def init_logging(request, work_dir):
    logging_config_path = request.config.getoption('--logging-config')
    if logging_config_path:
        full_path = LocalPath(request.config.rootdir, logging_config_path)
        config_text = full_path.read_text()
        config = yaml.load(config_text)
        logging.config.dictConfig(config)
        logging.info('Logging is initialized from "%s".', full_path)

    root_logger = logging.getLogger()
    file_formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
    for level in {logging.DEBUG, logging.INFO}:
        file_name = logging.getLevelName(level).lower() + '.log'
        file_handler = logging.FileHandler(str(work_dir / file_name), mode='w')
        file_handler.setLevel(level)
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)


@pytest.fixture(scope='session')
def tests_config(request):
    return TestsConfig.merge_config_list(
        request.config.getoption('--tests-config-file'),
        request.config.getoption('--test-parameters'))


@pytest.fixture()
def test_config(request, tests_config):
    if tests_config is None:
        return SingleTestConfig()
    else:
        return tests_config.get_test_config(request.node.nodeid)


@pytest.fixture()
def junk_shop_repository(request):
    db_capture_plugin = request.config.pluginmanager.getplugin(JUNK_SHOP_PLUGIN_NAME)
    if db_capture_plugin:
        db_capture_repository = db_capture_plugin.repo
        current_test_run = db_capture_plugin.current_test_run
        assert current_test_run
    else:
        db_capture_repository = None
        current_test_run = None
    return db_capture_repository, current_test_run


@pytest.fixture()
def artifact_factory(request, work_dir, junk_shop_repository):
    db_capture_repository, current_test_run = junk_shop_repository
    test_file_path_as_str, test_function_name = request.node.nodeid.split('::', 1)
    test_file_stem = Path(test_file_path_as_str).stem  # Name without extension.
    artifact_path_prefix = work_dir / (test_file_stem + '-' + test_function_name.replace('/', '.'))
    artifact_set = set()
    artifact_factory = ArtifactFactory.from_path(db_capture_repository, current_test_run, artifact_set,
                                                 artifact_path_prefix)
    yield artifact_factory
    artifact_factory.release()


@pytest.fixture()
def metrics_saver(junk_shop_repository):
    db_capture_repository, current_test_run = junk_shop_repository
    if not db_capture_repository:
        _logger.warning('Junk shop plugin is not available; No metrics will be saved')
    return MetricsSaver(db_capture_repository, current_test_run)
