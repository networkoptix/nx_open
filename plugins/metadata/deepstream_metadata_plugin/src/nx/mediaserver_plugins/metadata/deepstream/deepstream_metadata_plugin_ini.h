#pragma once

#include <nx/kit/ini_config.h>

namespace nx {
namespace mediaserver_plugins {
namespace metadata {
namespace deepstream {

//------------------------------------------------------------------------------------------------
// Primary GIE settings.


struct DeepStreamConfig: public nx::kit::IniConfig
{
    DeepStreamConfig():
        nx::kit::IniConfig("deepstream_metadata_plugin.ini")
    {
        reload();
    }

    NX_INI_STRING("", debugDotFilesDir, "Directory for pipeline graph .dot files");
    NX_INI_INT(0, gstreamerDebugLevel, "Verbosity of GStreamer library, Range is: [0, 8]");

    NX_INI_FLAG(1, enableOutput, "Enable logging");
    NX_INI_FLAG(0, pgie_enabled, "Whether primary GIE is enabled or not");
    NX_INI_INT(0, pgie_colorFormat, "Color format. 0 = RGBA, 1 = BGRA");
    NX_INI_STRING(
        "0;0;0",
        pgie_colorOffsets,
        "Array of mean values of color components to be subtracted from each pixel");

    NX_INI_INT(3, pgie_numberOfClasses, "Number of classes the model can detect");
    NX_INI_STRING(
        "0,0.2,0.1,3,0:1,0.2,0.1,3,0:2,0.2,0.1,3,0:",
        pgie_classThresholds,
        "Thresholding Parameters for all classes. Specified per-class. "
        "Format: CLASS_ID_0(int),CONFIDENCE_THRESHOLD_0(float),EPSILON_0(float),"
        "GROUP_THRESHOLD_0(int),MIN_BOXES_0(int):CLASS_ID_0...");

    NX_INI_FLOAT(0.0039215697906911373f, pgie_netScaleFactor, "Pixel normalization factor");
    NX_INI_INT(16, pgie_netStride, "Convolutional neural network stride");

    NX_INI_STRING(
        "/home/nvidia/Model/ResNet_18/ResNet_18_threeClass_VGA_pruned.caffemodel",
        pgie_modelFile,
        "Absolute path to model file");

    NX_INI_STRING(
        "/home/nvidia/Model/ResNet_18/ResNet_18_threeClass_VGA_deploy_pruned.prototxt",
        pgie_protoFile,
        "Absolute path to proto file");

    NX_INI_STRING(
        "/home/nvidia/Model/ResNet_18/ResNet_18_threeClass_VGA_pruned.caffemodel_b2_fp16.cache",
        pgie_cacheFile,
        "Absolute path to cache file");

    NX_INI_STRING(
        "",
        pgie_meanFile,
        "Absolute path to mean file");

    NX_INI_STRING(
        "/home/nvidia/Model/ResNet_18/labels.txt",
        pgie_labelFile,
        "Absolute path to label file");

    NX_INI_STRING(
        "Layer11_bbox",
        pgie_outputBboxLayerName,
        "Name of the Neural Network layer which outputs bounding box coordinates");

    NX_INI_STRING(
        "Layer11_cov",
        pgie_outputCoverageLayerNames,
        "Array of the coverage layer names. Array should be semicolon seperated. "
        "Format: coverage_layer0;coverage_layer1;coverage_layer2");

    NX_INI_INT(
        2,
        pgie_batchSize,
        "Number of units [frames(PGIE) or objects(SGIE)] to be inferred together in a batch");

    NX_INI_INT(
        1,
        pgie_inferenceInterval,
        "Specifies number of consecutive frames to be skipped for inference. "
        "Actual frames to be skipped = batch_size * interval");

    NX_INI_STRING(
        "0,0,0:1,0,0:2,0,0:",
        pgie_minDetectedWH,
        "Minimum size in pixels of detected objects that will be outputted by the GIE. "
        "Specified per-class. Format: class-id,min-w,min-h:class-id,min-w,min-h:...");

    NX_INI_STRING(
        "0,1920,1080:1,1920,1080:2,1920,1080:",
        pgie_maxDetectedWH,
        "Maximum size in pixels of detected objects that will be outputted by the GIE. "
        "Specified per-class. Format: class-id,max-w,max-h:class-id,max-w,max-h:...");

    NX_INI_STRING(
        "0,0:1,0:2,0:",
        pgie_roiTopOffset,
        "Offset of the ROI from the top of the frame. "
        "Only objects within the ROI will be outputted. "
        "Format:  class-id,top-offset:class-id,top-offset:...");

    NX_INI_STRING(
        "0,0:1,0:2,0:",
        pgie_roiBottomOffset,
        "Offset of the ROI from the bottom of the frame. "
        "Only objects within the ROI will be outputted. "
        "Format:  class-id,bottom-offset:class-id,bottom-offset:...");

    NX_INI_FLAG(
        0,
        pgie_forceFp32,
        "When enabled forces use of fp32. When disabled uses fp16 if platform supports it");

    NX_INI_INT(
        1,
        pgie_gieMode,
        "GIE Mode (1=Primary Mode 2=Secondary Mode)");

    NX_INI_INT(
        1,
        pgie_gieUniqueId,
        "Unique ID used to identify metadata generated by this GIE");

    NX_INI_INT(
        0,
        pgie_makeInferenceOnGieWithId,
        "Infer on metadata generated by GIE with this unique ID");

    NX_INI_STRING(
        "0:1:2",
        pgie_makeInferenceOnClassId,
        "Infer on objects with specified class ids");

    NX_INI_FLAG(
        0,
        pgie_isClassifier,
        "Whether this GIE is a classifier");

    NX_INI_FLOAT(
        0.65f,
        pgie_secondaryGieClassifierThreshold,
        "Threshold for classifier. Only when this GIE is a secondary classifier");

    NX_INI_FLAG(
        0,
        pgie_enableDbScan,
        "When enabled uses dbscan. When disabled uses grouprectangles");

//------------------------------------------------------------------------------------------------
// Secondary GIE settings.

    NX_INI_FLAG(1, sgie0_enabled, "Whether secondary GIE0 is enabled or not");
    NX_INI_INT(0, sgie0_colorFormat, "Color format. 0 = RGBA, 1 = BGRA");
    NX_INI_STRING(
        "73.00;77.55;88.9",
        sgie0_colorOffsets,
        "Array of mean values of color components to be subtracted from each pixel");

    NX_INI_INT(1, sgie0_numberOfClasses, "Number of classes the model can detect");
    NX_INI_STRING(
        "",
        sgie0_classThresholds,
        "Thresholding Parameters for all classes. Specified per-class. "
        "Format: CLASS_ID_0(int),CONFIDENCE_THRESHOLD_0(float),EPSILON_0(float),"
        "GROUP_THRESHOLD_0(int),MIN_BOXES_0(int):CLASS_ID_0...");

    NX_INI_FLOAT(1.0f, sgie0_netScaleFactor, "Pixel normalization factor");
    NX_INI_INT(16, sgie0_netStride, "Convolutional neural network stride");

    NX_INI_STRING(
        "/home/nvidia/Model/ivaSecondary_VehicleTypes_V1/snapshot_iter_13740.caffemodel",
        sgie0_modelFile,
        "Absolute path to model file");

    NX_INI_STRING(
        "/home/nvidia/Model/ivaSecondary_VehicleTypes_V1/deploy.prototxt",
        sgie0_protoFile,
        "Absolute path to proto file");

    NX_INI_STRING(
        "/home/nvidia/Model/ivaSecondary_VehicleTypes_V1"
        "/snapshot_iter_13740.caffemodel_b2_fp16.cache",
        sgie0_cacheFile,
        "Absolute path to cache file");

    NX_INI_STRING("", sgie0_meanFile, "Absolute path to mean file");
    NX_INI_STRING(
        "/home/nvidia/Model/ivaSecondary_VehicleTypes_V1/labels.txt",
        sgie0_labelFile,
        "Absolute path to label file");

    NX_INI_STRING(
        "",
        sgie0_outputBboxLayerName,
        "Name of the Neural Network layer which outputs bounding box coordinates");

    NX_INI_STRING(
        "softmax",
        sgie0_outputCoverageLayerNames,
        "Array of the coverage layer names. Array should be semicolon seperated. "
        "Format: coverage_layer0;coverage_layer1;coverage_layer2");

    NX_INI_INT(
        2,
        sgie0_batchSize,
        "Number of units [frames(PGIE) or objects(SGIE)] to be inferred together in a batch");

    NX_INI_INT(
        0,
        sgie0_inferenceInterval,
        "Specifies number of consecutive frames to be skipped for inference. "
        "Actual frames to be skipped = batch_size * interval");

    NX_INI_STRING(
        "0,128,128:1,0,0:2,0,0:3,0,0:4,0,0:5,0,0:",
        sgie0_minDetectedWH,
        "Minimum size in pixels of detected objects that will be outputted by the GIE. "
        "Specified per-class. Format: class-id,min-w,min-h:class-id,min-w,min-h:...");

    NX_INI_STRING(
        "0,1920,1080:1,100,1080:2,1920,1080:3,1920,1080:4,0,0:5,0,0:",
        sgie0_maxDetectedWH,
        "Maximum size in pixels of detected objects that will be outputted by the GIE. "
        "Specified per-class. Format: class-id,max-w,max-h:class-id,max-w,max-h:...");

    NX_INI_STRING(
        "0,0:",
        sgie0_roiTopOffset,
        "Offset of the ROI from the top of the frame. "
        "Only objects within the ROI will be outputted. "
        "Format:  class-id,top-offset:class-id,top-offset:...");

    NX_INI_STRING(
        "0,0:",
        sgie0_roiBottomOffset,
        "Offset of the ROI from the bottom of the frame. "
        "Only objects within the ROI will be outputted. "
        "Format:  class-id,bottom-offset:class-id,bottom-offset:...");

    NX_INI_FLAG(
        0,
        sgie0_forceFp32,
        "When enabled forces use of fp32. When disabled uses fp16 if platform supports it");

    NX_INI_INT(
        2,
        sgie0_gieMode,
        "GIE Mode (1=Primary Mode 2=Secondary Mode)");

    NX_INI_INT(
        4,
        sgie0_gieUniqueId,
        "Unique ID used to identify metadata generated by this GIE");

    NX_INI_INT(
        1,
        sgie0_makeInferenceOnGieWithId,
        "Infer on metadata generated by GIE with this unique ID");

    NX_INI_STRING(
        "2:",
        sgie0_makeInferenceOnClassIds,
        "Infer on objects with specified class ids");

    NX_INI_FLAG(
        1,
        sgie0_isClassifier,
        "Whether this GIE is a classifier");

    NX_INI_FLOAT(
        0.80f,
        sgie0_secondaryGieClassifierThreshold,
        "Threshold for classifier. Only when this GIE is a secondary classifier");

    NX_INI_FLAG(
        0,
        sgie0_enableDbScan,
        "When enabled uses dbscan. When disabled uses grouprectangles");
};

inline DeepStreamConfig& ini()
{
    static DeepStreamConfig ini;
    return ini;
}

} // namespace deepstream
} // namespace metadata
} // namespace mediaserver_plugins
} // namespace nx
