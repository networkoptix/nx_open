diff --git a/vms/client/nx_vms_client_desktop/src/camera/cam_display.cpp b/vms/client/nx_vms_client_desktop/src/camera/cam_display.cpp
index 0334f495f1b..1183f9d4530 100644
--- a/vms/client/nx_vms_client_desktop/src/camera/cam_display.cpp
+++ b/vms/client/nx_vms_client_desktop/src/camera/cam_display.cpp
@@ -523,7 +523,7 @@ bool QnCamDisplay::display(QnCompressedVideoDataPtr vd, bool sleep, float speed)
 
         if (queueLen <= 0)
         {
-            NX_ASSERT(queueLen == 0, "Negative value must never be here. Safety check.");
+            //NX_ASSERT(queueLen == 0, "Negative value must never be here. Safety check.");
 		    // This function is used for LIVE mode and archive playback with external synchronization
             // like Hanwha NVR. Don't increase buffer for archive mode to make item synchronization more
             /// precise.
diff --git a/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.cpp b/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.cpp
index 3af87279f5e..1e62441b323 100644
--- a/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.cpp
+++ b/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.cpp
@@ -44,13 +44,23 @@ void QnAbstractMediaStreamDataProvider::onEvent(
 QnAbstractMediaStreamDataProvider::QnAbstractMediaStreamDataProvider(const QnResourcePtr& res)
     :
     QnAbstractStreamDataProvider(res),
-    m_numberOfchannels(1)
+    m_numberOfChannels(
+        [this] 
+        { 
+            return m_mediaResource ? m_mediaResource->getVideoLayout(this)->channelCount() : 1; 
+        })
 {
     memset(m_gotKeyFrame, 0, sizeof(m_gotKeyFrame));
-    m_mediaResource = res;
-    NX_ASSERT(dynamic_cast<QnMediaResource*>(m_mediaResource.data()));
+    m_mediaResource = res.dynamicCast<QnMediaResource>();
+    NX_ASSERT(m_mediaResource);
     resetTimeCheck();
     m_isCamera = dynamic_cast<const QnSecurityCamResource*>(res.data()) != nullptr;
+    connect(res.data(), &QnResource::propertyChanged, this,
+        [this](const QnResourcePtr& /*resource*/, const QString& propertyName)
+        { 
+            if (propertyName == ResourcePropertyKey::kVideoLayout)
+                m_numberOfChannels.reset();
+        });
 }
 
 QnAbstractMediaStreamDataProvider::~QnAbstractMediaStreamDataProvider()
@@ -61,28 +71,15 @@ QnAbstractMediaStreamDataProvider::~QnAbstractMediaStreamDataProvider()
 void QnAbstractMediaStreamDataProvider::setNeedKeyData(int channel)
 {
     QnMutexLocker mtx( &m_mutex );
-
-    loadNumberOfChannelsIfUndetected();
-
-    if (m_numberOfchannels < CL_MAX_CHANNEL_NUMBER && channel < m_numberOfchannels)
+    if (channel < CL_MAX_CHANNEL_NUMBER)
         m_gotKeyFrame[channel] = 0;
 }
 
-void QnAbstractMediaStreamDataProvider::loadNumberOfChannelsIfUndetected() const
-{
-    if (m_numberOfchannels != 0)
-        return;
-    if (auto mediaRes = dynamic_cast<QnMediaResource*>(m_mediaResource.data()))
-        m_numberOfchannels = mediaRes->getVideoLayout(this)->channelCount();
-}
-
 void QnAbstractMediaStreamDataProvider::setNeedKeyData()
 {
     QnMutexLocker mtx( &m_mutex );
 
-    loadNumberOfChannelsIfUndetected();
-
-    for (int i = 0; i < m_numberOfchannels; ++i)
+    for (int i = 0; i < getNumberOfChannels(); ++i)
         m_gotKeyFrame[i] = 0;
 }
 
@@ -96,9 +93,7 @@ bool QnAbstractMediaStreamDataProvider::needKeyData() const
 {
     QnMutexLocker mtx( &m_mutex );
 
-    loadNumberOfChannelsIfUndetected();
-
-    for (int i = 0; i < m_numberOfchannels; ++i)
+    for (int i = 0; i < getNumberOfChannels(); ++i)
         if (m_gotKeyFrame[i]==0)
             return true;
 
@@ -107,6 +102,7 @@ bool QnAbstractMediaStreamDataProvider::needKeyData() const
 
 void QnAbstractMediaStreamDataProvider::beforeRun()
 {
+    m_numberOfChannels.reset();
     setNeedKeyData();
     for (int i = 0; i < CL_MAX_CHANNEL_NUMBER; ++i)
         m_stat[i].reset();
@@ -124,14 +120,14 @@ const QnMediaStreamStatistics* QnAbstractMediaStreamDataProvider::getStatistics(
 
 int QnAbstractMediaStreamDataProvider::getNumberOfChannels() const
 {
-    NX_ASSERT(m_numberOfchannels, "No channels?");
-    return m_numberOfchannels ? m_numberOfchannels : 1;
+    NX_ASSERT(m_numberOfChannels.get(), "No channels?");
+    return std::min(CL_MAX_CHANNEL_NUMBER, std::max(1, m_numberOfChannels.get()));
 }
 
 qint64 QnAbstractMediaStreamDataProvider::bitrateBitsPerSecond() const
 {
-    float rez = 0;
-    for (int i = 0; i < m_numberOfchannels; ++i)
+    qint64 rez = 0;
+    for (int i = 0; i < getNumberOfChannels(); ++i)
         rez += m_stat[i].bitrateBitsPerSecond();
     return rez;
 }
@@ -139,7 +135,7 @@ qint64 QnAbstractMediaStreamDataProvider::bitrateBitsPerSecond() const
 float QnAbstractMediaStreamDataProvider::getFrameRate() const
 {
     float rez = 0;
-    for (int i = 0; i < m_numberOfchannels; ++i)
+    for (int i = 0; i < getNumberOfChannels(); ++i)
         rez += m_stat[i].getFrameRate();
 
     return rez / getNumberOfChannels();
@@ -148,7 +144,7 @@ float QnAbstractMediaStreamDataProvider::getFrameRate() const
 float QnAbstractMediaStreamDataProvider::getAverageGopSize() const
 {
     float rez = 0;
-    for (int i = 0; i < m_numberOfchannels; ++i)
+    for (int i = 0; i < getNumberOfChannels(); ++i)
         rez += m_stat[i].getAverageGopSize();
 
     return rez / getNumberOfChannels();
@@ -187,7 +183,7 @@ void QnAbstractMediaStreamDataProvider::checkAndFixTimeFromCamera(const QnAbstra
                     // Most likely, timestamps reported by the camera are not so good.
                     NX_VERBOSE(this, lit("Timestamp correction. ts diff %1, camera %2, %3 stream").
                         arg(timeDiff).
-                        arg(m_mediaResource ? m_mediaResource->getName() : QString()).
+                        arg(m_resource ? m_resource->getName() : QString()).
                         arg((media->flags & QnAbstractMediaData::MediaFlags_LowQuality) ? lit("low") : lit("high")));
 
                     media->timestamp = m_lastMediaTime[channel] + minFrameDurationUsec;
diff --git a/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.h b/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.h
index 26a2d0235f2..3d175664b40 100644
--- a/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.h
+++ b/vms/libs/common/src/nx/streaming/abstract_media_stream_data_provider.h
@@ -5,6 +5,7 @@
 #include <utils/camera/camera_diagnostics.h>
 #include <nx/streaming/media_data_packet.h>
 #include <nx/streaming/media_stream_statistics.h>
+#include <nx/utils/value_cache.h>
 
 class QnResourceVideoLayout;
 class QnResourceAudioLayout;
@@ -19,7 +20,6 @@ public:
     virtual ~QnAbstractMediaStreamDataProvider();
 
     const QnMediaStreamStatistics* getStatistics(int channel) const;
-    int getNumberOfChannels() const;
     qint64 bitrateBitsPerSecond() const;
     float getFrameRate() const;
     float getAverageGopSize() const;
@@ -53,16 +53,15 @@ protected:
     void checkAndFixTimeFromCamera(const QnAbstractMediaDataPtr& data);
     void resetTimeCheck();
     void onEvent(std::chrono::microseconds timestamp, CameraDiagnostics::Result event);
-private:
-    void loadNumberOfChannelsIfUndetected() const;
 protected:
     QnMediaStreamStatistics m_stat[CL_MAX_CHANNEL_NUMBER];
     int m_gotKeyFrame[CL_MAX_CHANNEL_NUMBER];
 
-    QnResourcePtr m_mediaResource;
-
+    QnMediaResourcePtr m_mediaResource;
+private:
+    int getNumberOfChannels() const;
 private:
-    mutable int m_numberOfchannels;
+    nx::utils::CachedValue<int> m_numberOfChannels;
     qint64 m_lastMediaTime[CL_MAX_CHANNELS + 1]; //< max video channels + audio channel
     bool m_isCamera;
     std::atomic<int> m_numberOfErrors{};
diff --git a/vms/server/nx_vms_server/src/providers/live_stream_provider.cpp b/vms/server/nx_vms_server/src/providers/live_stream_provider.cpp
index 43351e1e9a1..7d688d2a589 100644
--- a/vms/server/nx_vms_server/src/providers/live_stream_provider.cpp
+++ b/vms/server/nx_vms_server/src/providers/live_stream_provider.cpp
@@ -736,11 +736,11 @@ void QnLiveStreamProvider::saveBitrateIfNeeded(
     info.rawSuggestedBitrate = m_cameraRes->rawSuggestBitrateKbps(
         liveParams.quality, liveParams.resolution, liveParams.fps, liveParams.codec) / 1024;
     info.suggestedBitrate = m_cameraRes->suggestBitrateKbps(liveParams, getRole()) / 1024;
-    info.actualBitrate = bitrateBitsPerSecond() / 1024.0 / 1024.0 / getNumberOfChannels();
+    info.actualBitrate = bitrateBitsPerSecond() / 1024.0 / 1024.0;
 
     info.bitratePerGop = m_cameraRes->useBitratePerGop();
     info.bitrateFactor = 1; // TODO: #mux Pass actual value when available [2.6]
-    info.numberOfChannels = getNumberOfChannels();
+    info.numberOfChannels = m_cameraRes->getVideoLayout()->channelCount();
 
     info.fps = liveParams.fps;
     info.actualFps = getFrameRate();
diff --git a/vms/server/nx_vms_server/unit_tests/src/api/metrics_cameras_ut.cpp b/vms/server/nx_vms_server/unit_tests/src/api/metrics_cameras_ut.cpp
index d219d518509..bd9817634ac 100644
--- a/vms/server/nx_vms_server/unit_tests/src/api/metrics_cameras_ut.cpp
+++ b/vms/server/nx_vms_server/unit_tests/src/api/metrics_cameras_ut.cpp
@@ -37,7 +37,7 @@ public:
 
     void onData(const QnAbstractMediaDataPtr& data)
     {
-        m_stat[0].onData(data);
+        m_stat[data->channelNumber].onData(data);
     }
 };
 
@@ -67,6 +67,15 @@ public:
         m_camera->blockInitialization();
         m_camera->setMinDays(kMinDays);
         m_camera->setMaxFps(30);
+        
+        static const int kChannelCount = 4;
+
+        auto customVideoLayout = QnCustomResourceVideoLayoutPtr(
+            new QnCustomResourceVideoLayout(QSize(kChannelCount, 1)));
+        for (int i = 0; i < kChannelCount; ++i)
+            customVideoLayout->setChannel(i, 0, i); // arrange multi video layout from left to right
+        m_camera->setProperty(ResourcePropertyKey::kVideoLayout, customVideoLayout->toString());
+
 
         QnScheduleTaskList schedule;
         for (int i = 0; i < 7; ++i)
@@ -109,7 +118,7 @@ public:
         }
     }
 
-    static void TearDownTestCase()
+    virtual void TearDown() override
     {
         m_camera.reset();
         launcher.reset();
@@ -141,14 +150,17 @@ public:
         auto cameraData = systemValues["cameras"][cameraId];
         auto streamData = cameraData[streamPrefix];
         ASSERT_EQ(30, streamData["targetFps"].toInt());
-        ASSERT_EQ("1280x720", streamData["resolution"].toString());
+
+        const int channelCount = m_camera->getVideoLayout()->channelCount();
+        const QString expectedResolution = lit("%1x720").arg(1280 * channelCount);
+        ASSERT_EQ(expectedResolution, streamData["resolution"].toString());
 
         auto alarms = launcher->getFlat<SystemAlarms>("/ec2/metrics/alarms");
         if (!isPrimary)
         {
             EXPECT_EQ(alarms["cameras." + cameraId + ".secondaryStream.resolution.0"].level, AlarmLevel::warning);
 
-            liveParams.resolution = QSize(640, 480);
+            liveParams.resolution = QSize(640 / channelCount, 480);
             dataProvider->setPrimaryStreamParams(liveParams);
             alarms = launcher->getFlat<SystemAlarms>("/ec2/metrics/alarms");
             EXPECT_EQ(alarms["cameras." + cameraId + ".secondaryStream.resolution.0"].level, AlarmLevel::none);
@@ -162,13 +174,18 @@ public:
         video->width = liveParams.resolution.width();
         video->height = liveParams.resolution.height();
         const auto currentTimeMs = qnSyncTime->currentMSecsSinceEpoch();
-        video->timestamp = currentTimeMs;
+        
         video->m_data.resize(1000 * 50);
 
-        for (int i = 0; i < 5; ++i)
+        for (int channel = 0; channel < channelCount; ++channel)
         {
-            video->timestamp += 50000; //< 20 fps, 1Mb/sec
-            dataProvider->onData(video);
+            video->timestamp = currentTimeMs;
+            video->channelNumber = channel;
+            for (int i = 0; i < 5; ++i)
+            {
+                video->timestamp += 50000; //< 20 fps, 1Mb/sec for each camera channel.
+                dataProvider->onData(video);
+            }
         }
 
         nx::utils::ElapsedTimer timer;
@@ -179,7 +196,7 @@ public:
             streamData = cameraData[streamPrefix];
         } while (streamData["fpsDelta"].isNull() && !timer.hasExpired(10s));
 
-        ASSERT_EQ(1000000, streamData["actualBitrateBps"].toInt());
+        ASSERT_EQ(1000000 * channelCount, streamData["actualBitrateBps"].toInt());
         ASSERT_FLOAT_EQ(10, streamData["fpsDelta"].toDouble());
 
         dataProvider->stop();
@@ -187,9 +204,6 @@ public:
     }
 };
 
-QnSharedResourcePointer<resource::test::CameraMock> MetricsCamerasApi::m_camera;
-std::unique_ptr<ServerForTests> MetricsCamerasApi::launcher;
-
 TEST_F(MetricsCamerasApi, infoGroup)
 {
     const auto cameraId = m_camera->getId().toSimpleString();
diff --git a/vms/server/nx_vms_server/unit_tests/src/nx/mediaserver/camera_mock.h b/vms/server/nx_vms_server/unit_tests/src/nx/mediaserver/camera_mock.h
index 6af0e06195d..e4f55bf3ce8 100644
--- a/vms/server/nx_vms_server/unit_tests/src/nx/mediaserver/camera_mock.h
+++ b/vms/server/nx_vms_server/unit_tests/src/nx/mediaserver/camera_mock.h
@@ -49,7 +49,7 @@ public:
     virtual bool setProperty(
         const QString& key,
         const QString& value,
-        PropertyOptions options) override;
+        PropertyOptions options = DEFAULT_OPTIONS) override;
 
     virtual bool saveProperties() override;
     virtual bool init() override;
