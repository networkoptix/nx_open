<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="api.xsl"?>
<apidoc xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="api.xsd">
    <groups>
        <group>
            <groupName>System API</groupName>
            <urlPrefix>/ec2</urlPrefix>
            <groupDescription>This group contains functions related to whole system (all servers).</groupDescription>
            <functions>
                <function>
                    <name>getResourceTypes</name>
                    <description>Read all resource types. Resource type contain object type such as
                        'Server', 'Camera' e.t.c. Also, resource types contain additional information
                        for cameras such as maximum fps, resolution, e.t.c</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getResourceParams</name>
                    <description>Read resource (camera, user or server) additional parameters (camera firmware version, e.t.c).
                                 List of parameters depends of resource type.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>id</name>
                            <description>Resource unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getMediaServersEx</name>
                    <description>Return server list</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getCamerasEx</name>
                    <description>Read camera list</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>id</name>
                            <description>Server unique ID</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns camera list data formatted in a requested format</caption>
                        <attributes>
                            <attribute>
                                <name>addParams</name>
                                <description>List of additional parameters for camera. This list can contain such information as full ONVIF url, camera maximum fps e.t.c</description>
                            </attribute>
                            <attribute>
                                <name>audioEnabled</name>
                                <description>Server will push audio stream from a camera if parameter is true</description>
                            </attribute>
                            <attribute>
                                <name>controlEnabled</name>
                                <description>Server will manage camera (change resolution, fps, create profiles e.t.c) if parameter if true</description>
                            </attribute> 
                            <attribute>
                                <name>dewarpingParams</name>
                                <description>Json string with dewarping parameters</description>
                            </attribute> 
                            <attribute>
                                <name>groupId</name>
                                <description>Internal group identifier. It is used for grouping channels for multi-channels cameras together. </description>
                            </attribute> 
                            <attribute>
                                <name>groupName</name>
                                <description>Group name. This name can be changed by user</description>
                            </attribute> 
                            <attribute>
                                <name>id</name>
                                <description>Object ID. All ID for all objects in a system is GUIDs</description>
                            </attribute> 
                            <attribute>
                                <name>login</name>
                                <description>Login for camera authentication</description>
                            </attribute> 
                            <attribute>
                                <name>mac</name>
                                <description>camera MAC address</description>
                            </attribute> 
                            <attribute>
                                <name>manuallyAdded</name>
                                <description>True if user added camera manually</description>
                            </attribute> 
                            <attribute>
                                <name>maxArchiveDays</name>
                                <description>Maximum archive duration in days for this camera. If value less or equal to zero, it is not used</description>
                            </attribute> 
                            <attribute>
                                <name>minArchiveDays</name>
                                <description>Minimum archive duration in days for this camera. If value less or equal to zero, it is not used</description>
                            </attribute> 
                            <attribute>
                                <name>model</name>
                                <description>Camera model</description>
                            </attribute> 
                            <attribute>
                                <name>motionMask</name>
                                <description>Camera's motion mask. This string defines several rectangles via ':' delimiter. Each rectangle is described by 5 digits: sensitivity, x,y(for left top corner), width, height</description>
                            </attribute> 
                            <attribute>
                                <name>motionType</name>
                                <description>If value is 'MT_SoftwareGrid' then server determine motion, otherwise camera built-in motion will be used</description>
                            </attribute> 
                            <attribute>
                                <name>name</name>
                                <description>Camera name</description>
                            </attribute> 
                            <attribute>
                                <name>parentId</name>
                                <description>Camera's server ID</description>
                            </attribute> 
                            <attribute>
                                <name>physicalId</name>
                                <description>Camera unique identifier. This identifier is used in all requests related to a camera. For instance, in RTSP requests</description>
                            </attribute> 
                            <attribute>
                                <name>password</name>
                                <description>Password for camera authentication</description>
                            </attribute> 
                            <attribute>
                                <name>scheduleEnabled</name>
                                <description>Do record camera archive if true</description>
                            </attribute> 
                            <attribute>
                                <name>scheduleTasks</name>
                                <description>List of 'scheduleTask' objects with camera recording schedule.</description>
                            </attribute> 
                            <attribute>
                                <name>secondaryStreamQuality</name>
                                <description>Secondary stream quality. Possible values:'SSQualityLow', 'SSQualityMedium', 'SSQualityHigh', 'SSQualityDontUse' </description>
                            </attribute> 
                            <attribute>
                                <name>status</name>
                                <description>Camera status. Possible values are: 'Offline', 'Online', 'Recording'</description>
                            </attribute> 
                            <attribute>
                                <name>statusFlags</name>
                                <description>Usually this field is zero. Non zero value is used to mark that a lot of network issues was occurred with this camera</description>
                            </attribute> 
                            <attribute>
                                <name>typeId</name>
                                <description>Unique ID with camera's type. Camera's type can describe predefined information such as camera maximum resolution, fps e.t.c.
                                                                        Detailed type information can be obtained via 'getResourceTypes' request.</description>
                            </attribute> 
                            <attribute>
                                <name>url</name>
                                <description>Camera plain IP address or full http url if camera was added manually. Also, for multichannel encoders full url is used</description>
                            </attribute> 
                            <attribute>
                                <name>vendor</name>
                                <description>Camera manufacturer</description>
                            </attribute>
                        </attributes>
                    </result>
                </function>
                <function>
                    <name>getCameraHistoryItems</name>
                    <description>Read information about which server hold camera in some time
                        period. This information is used for archive play if camera was moved from
                        one server to another.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getCameraBookmarkTags</name>
                    <description>Reserved for future use</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getBusinessRules</name>
                    <description>Return business rules</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getUsers</name>
                    <description>Return users registered in the system. User's password contain MD5
                        hash data with salt</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getVideowalls</name>
                    <description>Return list of video walls</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getLayouts</name>
                    <description>Return list of user layout</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>listDirectory</name>
                    <description>Return list of folders and files in a virtual FS stored inside
                        database. This function is used to add files (such audio for notifications)
                        to database.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>Folder name in a virtual FS</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getStoredFile</name>
                    <description>Read file data from a virtual FS</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getSettings</name>
                    <description>Read general system settings such as email address
                        e.t.c</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getCurrentTime</name>
                    <description>Read current time</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getFullInfo</name>
                    <description>Read all data such as all servers, cameras, users
                        e.t.c</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getLicenses</name>
                    <description>Read license list</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical structure only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Server API</groupName>
            <urlPrefix>/api</urlPrefix>
            <groupDescription>This group contains functions related to a single server</groupDescription>
            <functions>  
                <function proprietary="true">
                    <name>getHardwareInfo</name>
                    <description>Get hardware information</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>Returns hardware information in JSON form</caption>
                    </result>
                </function>            
                <function proprietary="true">
                    <name>execAction</name>
                    <description>Execute business action. Action data should be in a internal
                        binary format. This method is going to be refactored at next
                        version.</description>
                    <method>POST</method>
                    <params/>
                    <result>
                        <caption>Return XML with 'OK' message or error code</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>events</name>
                    <description>Returns event log in proprietary binary format</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start of time period at ms since 1.1.1970 (UTC
                                format).</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>to</name>
                            <description>End of time period at ms since 1.1.1970 (UTC format).</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>event</name>
                            <description>Event type.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>action</name>
                            <description>Action type.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>brule_id</name>
                            <description>Business rule id.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return server event log in proprietary binary format</caption>
                    </result>
                </function>
                <function>
                    <name>doCameraDiagnosticsStep</name>
                    <description>Performs camera diagnostics.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>camera id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>type</name>
                            <description>Diagnostics to perform.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>mediaServerAvailability</name>
                                    <description>Checks server availability</description>
                                </value>
                                <value>
                                    <name>cameraAvailability</name>
                                    <description>Checks if camera is accessible from the server</description>
                                </value>
                                <value>
                                    <name>mediaStreamAvailability</name>
                                    <description>Checks if camera media stream can be
                                        opened</description>
                                </value>
                                <value>
                                    <name>mediaStreamIntegrity</name>
                                    <description>Checks additional media stream
                                        parameters</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return XML with parameter value</caption>
                    </result>
                </function>
                <function>
                    <name>setCameraParam</name>
                    <description>Sets values of several camera parameters. This parameters are used
                        on the Advanced tab in camera settings. For instance: brightness, contrast
                        e.t.c.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>camera unique id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>&lt;any name&gt;</name>
                            <description>Parameter for camera to set. Request can contains one or
                                more parameters to set.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns OK if all parameters have been set, otherwise returns error 500
                        (Internal server error) and result of setting for every parameter.</caption>
                    </result>
                </function>
                <function>
                    <name>getCameraParam</name>
                    <description>Read camera parameters. For instance: brightness, contrast e.t.c.
                        Parameters to read should be specified.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>camera unique id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>&lt;any name&gt;</name>
                            <description>Parameter name to read. Request can contains one or more
                                parameters.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns required parameter values in form of paramName=paramValue, each
                        parameter on new line</caption>
                    </result>
                </function>
                <function>
                    <name>image</name>
                    <description>Return image from camera</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>physicalId</name>
                            <description>camera unique id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>time</name>
                            <description>required image time. Microseconds since 1970 UTC or string
                                in format 'YYYY-MM-DDThh24:mi:ss.zzz'. Date format is auto detected.
                                Also, additional special values are allowed.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>YYYY-MM-DDThh24:mi:ss.zzz</name>
                                    <description>Human readable date format</description>
                                </value>
                                <value>
                                    <name>[0..9]*</name>
                                    <description>Microseconds since 1970 UTC</description>
                                </value>
                                <value>
                                    <name>NOW</name>
                                    <description>Live position (no frame is returned if camera is
                                        offline</description>
                                </value>
                                <value>
                                    <name>LATEST</name>
                                    <description>last frame from camera (return live position or
                                        last frame from archive if camera is offline)</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Image format. Default value 'jpeg'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>jpeg</name>
                                    <description>JPEG image format</description>
                                </value>
                                <value>
                                    <name>png</name>
                                    <description>PNG image format</description>
                                </value>
                                <value>
                                    <name>bmp</name>
                                    <description>BMP image format</description>
                                </value>
                                <value>
                                    <name>tiff</name>
                                    <description>TIFF image format</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>method</name>
                            <description>Parameter defines method to search frame inside GOP
                                structure. Default value 'before'. Parameter not used for Motion
                                jpeg video codec.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>before</name>
                                    <description>Returns nearest I-frame before specified
                                        time.</description>
                                </value>
                                <value>
                                    <name>after</name>
                                    <description>Returns nearest I-frame after specified
                                        time.</description>
                                </value>
                                <value>
                                    <name>exact</name>
                                    <description>Get image for exact time position. It required more
                                        CPU.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>height</name>
                            <description>Required image height. By default image have same size as
                                source video stream. If only height is specified width is auto detected</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>width</name>
                            <description>Required image width. By default image have same size as
                                source video stream. width cannot be specified without specifying height</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns image.</caption>
                    </result>
                </function>
                <function>
                    <name>showLog</name>
                    <description>Returns tail of the server log file</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>lines</name>
                            <description>Display last N log lines.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Tail of the server log file in text format</caption>
                    </result>
                </function>
                <function>
                    <name>businessEvents</name>
                    <description>Returns event log information at requested format.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start time of a time interval. Microseconds since 1970 UTC
                                or string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>to</name>
                            <description>End time of a time interval. Microseconds since 1970 UTC or
                                string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>physicalId</name>
                            <description>Filter events log by a single camera. Camera's 'physicalId' could be obtain via request ec2/getCamerasEx </description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>event_type</name>
                            <description>Filter events log by specified event type.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>action_type</name>
                            <description>Filter events log by specified action type.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>brule_id</name>
                            <description>Filter events log by specified business event rule (keep only records generated via that business rule). This id could be obtained via 'ec2/getBusinessRules' call.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Tail of the server log file in text format</caption>
                    </result>
                </function>
                <function>
                    <name>auditLog</name>
                    <description>Returns audit log information at requested format.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start time of a time interval. Microseconds since 1970 UTC
                                or string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>to</name>
                            <description>End time of a time interval. Microseconds since 1970 UTC or
                                string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Tail of the server log file in text format</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/search</name>
                    <description>Search cameras in manual mode</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>start_ip</name>
                            <description>First IP address in range to scan.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>end_ip</name>
                            <description>Last IP address in range to scan.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>port</name>
                            <description>Camera(s) port to check. Port is auto-detected if parameter
                                is absent.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>user</name>
                            <description>Username for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Password for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with camera names, manufacturers and urls.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/status</name>
                    <description>Get manual adding progress.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>uuid</name>
                            <description>Process unique ID.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with progress value.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/stop</name>
                    <description>Stop manual adding progress.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>uuid</name>
                            <description>Process unique ID.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/add</name>
                    <description>Manual add camera(s). If several cameras are added, parameters
                        'url' and 'manufacturer' must be defined several times.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>Camera url returned by scan request.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>manufacturer</name>
                            <description>Camera manufacturer.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>user</name>
                            <description>Username for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Password for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ping</name>
                    <description>Ping the server</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code, error string and module unique ID in case of successful ping.</caption>
                    </result>
                </function>
                <function>
                    <name>pingSystem</name>
                    <description>Ping the system.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>System URL to ping.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>System administrator password.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with error code, error string and module information in case of successful ping.
                            Error string could be
                            empty in case of successful ping,
                            "FAIL" if the specified system is unreachable or there is no any system,
                            "UNAUTHORIZED" if the authentication credentials are invalid, and
                            "INCOMPATIBLE" if the found system has incompatible version or different customization.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>ptz</name>
                    <description>Perform reading or writing PTZ operation</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>resourceId</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>command</name>
                            <description>PTZ operation</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>ContinuousMovePtzCommand</name>
                                    <description>Start PTZ continues move. Parameters xSpeed, ySpeed and zSpeed are used in range [-1.0..+1.0]. To stop moving use value 0 for all parameters.</description>
                                </value>
                                <value>
                                    <name>ContinuousFocusPtzCommand</name>
                                    <description>Start PTZ focus in or out. Parameter speed defines speed and focus direction in range [-1.0..+1.0].</description>
                                </value>
                                <value>
                                    <name>AbsoluteDeviceMovePtzCommand</name>
                                    <description>Move camera to absolute position. Parameters xPos, yPos and zPos are used in range defined by camera. Parameter speed is used in range [0..1.0].</description>
                                </value>
                                <value>
                                    <name>AbsoluteLogicalMovePtzCommand</name>
                                    <description>Move camera to absolute position. Parameters xPos, yPos range are: [-180..+180]. Parameter zPos range is: [0..180] (field of view in degree). Parameters speed range is: [0..1.0].</description>
                                </value>
                                <value>
                                    <name>GetDevicePositionPtzCommand</name>
                                    <description>Read camera current position. Return parameters xPos, yPos and zPos in range defined by camera.</description>
                                </value>
                                <value>
                                    <name>GetLogicalPositionPtzCommand</name>
                                    <description>Read camera current position. Return parameters xPos, yPos in range [-180..+180]. Return parameter zPos in range [0..180] (field of view in degree).</description>
                                </value>
                                <value>
                                    <name>CreatePresetPtzCommand</name>
                                    <description>Create PTZ preset. Parameter presetId defines internal preset name. Parameter presetName defines display preset name.</description>
                                </value>
                                <value>
                                    <name>UpdatePresetPtzCommand</name>
                                    <description>Update PTZ preset display name. Parameter presetId defines internal preset name. Parameter presetName defines display preset name.</description>
                                </value>
                                <value>
                                    <name>RemovePresetPtzCommand</name>
                                    <description>Update PTZ preset display name. Parameter presetId defines internal preset name</description>
                                </value>
                                <value>
                                    <name>ActivatePresetPtzCommand</name>
                                    <description>Go to PTZ preset. Parameter presetId defines internal preset name. Parameter speed defines move speed in range [0..1.0.]</description>
                                </value>
                                <value>
                                    <name>GetPresetsPtzCommand</name>
                                    <description>Read PTZ presets list.</description>
                                </value>
                                <value>
                                    <name>GetPresetsPtzCommand</name>
                                    <description>Read PTZ presets list.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Json message with error code and error message.</caption>
                    </result>
                </function>
                <function>
                    <name>rebuildArchive</name>
                    <description>Start or stop server archive rebuilding.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>rebuild</name>
                            <description>'start' or 'stop' value.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Rebuild progress if no input parameter specified or XML with OK message or
                        error code.</caption>
                    </result>
                </function>
                <function>
                    <name>RecordedTimePeriods</name>
                    <description>Recorded chunk info by specified cameras.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>physicalId</name>
                            <description>Camera unique ID. Parameter can be used several times to
                                define a list of cameras.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>startTime</name>
                            <description>Start time of a time interval. Microseconds since 1970 UTC
                                or string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>endTime</name>
                            <description>End time of a time interval. Microseconds since 1970 UTC or
                                string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>filter</name>
                            <description>This parameter is used for motion search (periodsType must be 1). Match motion on a video by specified rectangle. 
                                Filter format is: &lt;rect1&gt;;&lt;rect2&gt;;&lt;rectN&gt;
                                rectangle format is: &lt;x,y,width,height&gt; All values are measured in relative portions of a video frame.
                                'x' and 'width' in range [0..43], 'y' and 'height' in range [0..31].
                            </description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Allowed values: 'json', 'xml', 'txt', 'bin'.
                                Default value 'json'</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>detail</name>
                            <description>Chunk detail level, in microseconds. Time periods/chunks
                                that are shorter than the detail level are discarded. You can use
                                detail level as amount of microseconds per screen
                                pixel.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>periodsType</name>
                            <description>Chunk type.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>0</name>
                                    <description>All records</description>
                                </value>
                                <value>
                                    <name>1</name>
                                    <description>Only chunk with motion (parameter motionRegions required)</description>
                                </value>
                             </values>
                        </param>
                    </params>
                    <result>
                        <caption>Chunks data in requested format. Chunks are merged for all requested
                        cameras. Time and duration defined in UTC milliseconds. Response contains pairs [begin,duration]. Duration=-1 means last chunk is recording now.</caption>
                    </result>
                </function>
                <function>
                    <name>statistics</name>
                    <description>Returns server info: CPU usage, HDD usage e.t.c.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>XML data with statistics.</caption>
                    </result>
                </function>
                <function>
                    <name>storageSpace</name>
                    <description>Returns a list of all server storages.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>XML with server's storages.</caption>
                    </result>
                </function>
                <function>
                    <name>storageStatus</name>
                    <description>Check if specified folder can be used as a server storage.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>path</name>
                            <description>Folder to check.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON data. 'OK' if specified folder may be used for writing on
                        the server. Otherwise returns 'FAIL' </caption>
                    </result>
                </function>
                <function>
                    <name>gettime</name>
                    <description>Returns server UTC time, time zone and authentication realm (realm is added for convenience)</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON data.</caption>
                    </result>
                </function>
                <function>
                    <name>activateLicense</name>
                    <description>Activate new license and return license JSON data if success</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>key</name>
                            <description>License serial number</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON data.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>installUpdate</name>
                    <description>Updates server by the package contained in POST body</description>
                    <method>POST</method>
                    <params/>
                    <result>
                        <caption>JSON with error code
                        When all is OK errorString will be empty. In case of error errorString will contain:
                        UP_TO_DATE if the provided version is already installed;
                        INVALID_FILE if the provided file cannot be opened as a ZIP archive;
                        INCOMPATIBLE_SYSTEM if the update file is targeted for another system;
                        EXTRACTION_ERROR if some extraction problems were found (e.g. not enough space);
                        INSTALLATION_ERROR if the server couldn't execute installation script.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>installUpdate</name>
                    <description>Install update from zip package which should be in the request body.</description>
                    <method>POST</method>
                    <params/>
                    <result/>
                </function>
                <function proprietary="true">
                    <name>onEvent</name>
                    <description>Process business event from external system. Reserved for future
                        use.</description>
                    <method>POST</method>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>discoveredPeers</name>
                    <description>Returns a list of the discovered peers.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>showAddresses</name>
                            <description>Set it to true to show server addresses.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with a list of the discovered peers</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>restart</name>
                    <description>Restart the server.</description>
                    <method>GET</method>
                    <params/>
                    <result/>
                </function>

                <function>
                    <name>moduleInformation</name>
                    <description>Get information about the server.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>allModules</name>
                            <description>Set it to true to get all modules from the system.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>showAddresses</name>
                            <description>Set it to true to show server addresses.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with module information.</caption>
                    </result>
                </function>
                <function>
                    <name>moduleInformationAuthenticated</name>
                    <description>The same as moduleInformation but requires authentication. Useful to test connection.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON object with module information.</caption>
                    </result>
                </function>
                <function>
                    <name>configure</name>
                    <description>Configure server parameters.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>systemName</name>
                            <description>New system name for the server.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>wholeSystem</name>
                            <description>Flag shows if the specified system name must be set to the all servers in the system.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>port</name>
                            <description>New listening port.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>New administrator password.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>oldPassword</name>
                            <description>Old administrator password.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>
                            JSON with error code and flag "restartNeeded" that shows if the server must be restarted to apply settings.
                            Error string contains a hint to identify a problem: SYSTEM_NAME, PORT or PASSWORD.
                        </caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>mergeSystems</name>
                    <description>Merge two systems.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>URL of one server in the system to join.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Administrator password of the target system.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>currentPassword</name>
                            <description>Administrator password of the current system.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>takeRemoteSettings</name>
                            <description>Direction of the merge.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>true</name>
                                    <description>The current system will get system name and administrator password of the target system.</description>
                                </value>
                                <value>
                                    <name>false</name>
                                    <description>The target system will get system name and administrator password of the current system.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with error code and error string.
                            Error string could be
                            empty in case of successful ping,
                            "FAIL" if the specified system is unreachable or there is no any system,
                            "UNAUTHORIZED" if the authentication credentials are invalid,
                            "INCOMPATIBLE" if the found system has incompatible version or different customization, and
                            "BACKUP_ERROR" if database backup could not been created.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>backupDatabase</name>
                    <description>Backup server database.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code.</caption>
                    </result>
                </function>
                <function>
                    <name>logLevel</name>
                    <description>Get or set server log level.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>id</name>
                            <description>Log id</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>0</name>
                                    <description>Main server log</description>
                                </value>
                                <value>
                                    <name>2</name>
                                    <description>Http log</description>
                                </value>
                                <value>
                                    <name>3</name>
                                    <description>Transaction log</description>
                                </value>                                
                            </values>
                        </param>
                        <param>
                            <name>value</name>
                            <description>Target value for log level. More detailed level includes all less detailed levels.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>None</name>
                                    <description>Disable log.</description>
                                </value>
                                <value>
                                    <name>Always</name>
                                    <description>Log only the most important messages.</description>
                                </value>
                                <value>
                                    <name>Error</name>
                                    <description>Log errors.</description>
                                </value>
                                <value>
                                    <name>Warning</name>
                                    <description>Log warnings.</description>
                                </value>
                                <value>
                                    <name>Info</name>
                                    <description>Log information messages.</description>
                                </value>
                                <value>
                                    <name>Debug</name>
                                    <description>Log debug messages.</description>
                                </value>
                                <value>
                                    <name>Debug2</name>
                                    <description>Log additional debug messages.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>iflist</name>
                    <description>Returns detail information about server's network interfaces</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON data.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>execute</name>
                    <description>Execute any script from subfolder 'scripts' of media server. Script name provides directly in a URL path like '/api/execute/script1.sh'.
                                 All URL parameters are passed directly to a script as an parameters.
                    </description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>scriptList</name>
                    <description>Returns list of scripts to execute.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON object with string list.</caption>
                    </result>
                </function>
                <function>
                    <name>createEvent</name>
                    <description>Using this method it's possible to deliver a generic event to the system from 3rd party systems. 
                                 It will be processed and logged according to current event rules.
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>timestamp</name>
                            <description>Event date and time. It could be either UTC milliseconds or human readible date and time at ISO 8601 format.
							If eventTimestamp is absent, current server date and time is used.
							</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>source</name>
                            <description> External device name. It could be used as a filter at business rules to math different action with different devices.
							              Also, user could see device name in the notifications panel. For instance: 'POS terminal 5'.
							</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>caption</name>
                            <description> Short event description. It could be used as a filter at business rules to math different action with different events.
							</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>description</name>
                            <description> Long event description. It could be used as a filter at business rules to math different action with different events.
							</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>metadata</name>
                            <description>Addition information for various purpose. This field should contain valid Json object.
                                         Current version uses field 'cameraRefs', any other fields could be added for future purpose.
                                         'cameraRefs' field sould contains list if camera's 'id' field. This value could be obtained
                                         via '/ec2/getCamerasEx' call.
                             <tt>
                             <br/>Json string example:
                             <pre>
{
  &quot;cameraRefs&quot;: [&quot;3A4AD4EA-9269-4B1F-A7AA-2CEC537D0248&quot;, &quot;3A4AD4EA-9269-4B1F-A7AA-2CEC537D0240&quot;]
}
                             </pre>
                             </tt>
                           </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>state</name>
                            <description> Generic events can be used either with long actions like 'do recording' or instant actions like 'send email'. If you are going to use long actions with Generic events, this parameter should be filled.
							</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>Active</name>
                                    <description>Generic event consider as a 'long' event. It goes to the 'active' state. Long actions will continue untill Generic event goes to the inactive state.</description>
                                </value>
                                <value>
                                    <name>Inactive</name>
                                    <description>Long action, associated with Generic event in busiless rules, will stop.</description>
                                </value>
                            </values>
                        </param>
                      </params>
                    <result>
                        <caption>Json result with error code.</caption>
                    </result>
                </function>

            </functions>

        </group>

        <group>
            <groupName>Video API</groupName>
            <urlPrefix/>
            <groupDescription>
                This group contains information about accessing cameras' live video and footage.
            </groupDescription>
            <functions>

                <function>
                    <name>&lt;physicalId&gt;</name>
                    <caption>RTSP Streaming</caption>
                    <description>
                                        Open RTSP video from a camera. It is not an exact method name. It means that RTSP url may contain any camera unique ID. For instance:
                                        rtsp://&lt;server_ip&gt;:&lt;port&gt;/12AB42FD5912?pos=1235631&amp;resolution=240p
                    </description>
                    <method>PLAY</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>By default server opens camera from live position. This parameter defines position in an archive in 
                                                        milliseconds since epoch, microseconds since epoch or text date in ISO fomat (e.g., 2015-07-30T12:00:00).
                                                        Position can be passed via standard RTSP attribute as well as via URL parameter</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>resolution</name>
                            <description>Turn on video transcoding to the specified resolution. Resolution string either may contain width and height (for instance 320x240) or 
                                                        height only (for instance 240p)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotation</name>
                            <description>Rotate item. Can be 0, 90, 180 or 270 degree. If parameter is absent, video will be rotated to default value defined in a camera settings dialog.
                                         Parameter take place if video transcoding is activated (parameter codec and/or parameter resolution are presents.)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>codec</name>
                            <description>Defines video codec used for transcoding. Default value H263.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>H263</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>H263p</name>
                                    <description>H263 plus format</description>
                                </value>
                                <value>
                                    <name>mpeg2video</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>mjpeg</name>
                                    <description>Motion JPEG</description>
                                </value>
                                <value>
                                    <name>mpeg4</name>
                                    <description>MPEG-4 part 2</description>
                                </value>
                                <value>
                                    <name>libvpx</name>
                                    <description>VP8 video codec</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>stream</name>
                            <description>Open high quality stream if parameter is 0 or low quality stream if parameter is 1. 
                                         By default server auto detect preferred stream index based on destination resolution.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>speed</name>
                            <description>Playback speed. Only values in range [1..32] are supported. Default value is 1.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Return RTSP video stream</caption>
                    </result>
                </function>

                <function>
                    <name>media/&lt;physicalId&gt;.&lt;format&gt;</name>
                    <caption>HTTP Streaming</caption>
                    <description>
                        Url format for opening camera stream using HTTP protocol. Codec and stream format can be specified in url parameters.
                        Live stream and archive can be downloaded. If required and possible, media stream transcoding is performed on-the-fly.
                        Stream format can be one of following: webm, mpegts, mpjpeg (motion jpeg)                        
                        Example: http://&lt;server_ip&gt;:&lt;port&gt;/media/12AB42FD5912.webm
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>resolution</name>
                            <description>Video stream resolution. Example: 720x576, 1920x1080, 720p, 1080p. By default, 640x480 is used</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>pos</name>
                            <description>If present and not equal to &lt;now&gt;, specifies archive stream start positions 
                                         milliseconds since epoch (1970-01-01 00:00, UTC), microseconds since epoch or text date in ISO fomat (e.g., 2015-07-30T12:00:00).
                                         Otherwise, LIVE stream is provided</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>endPos</name>
                            <description>If present then specifies archive stream end positions. It used only if 'pos' parameter is present.
                                         Milliseconds since epoch (1970-01-01 00:00, UTC), microseconds since epoch or text date in ISO fomat (e.g., 2015-07-30T12:00:00).
                                         </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotation</name>
                            <description>Rotate item. Can be 0, 90, 180 or 270 degree. If parameter is absent, video will be rotated to default value defined in a camera settings dialog</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>sfd</name>
                            <description>Stand Frame Duration. If parameter is present, video speed is limited by real time.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rt</name>
                            <description>Turn on realtime optimization. It will drop some frames if not enough CPU for realtime transcoding.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>hls/&lt;physicalId&gt;.m3u</name>
                    <caption>HLS Streaming</caption>
                    <description>
                            Url format for opening camera stream with Http Live Streaming (HLS).
                            This protocol is supported by iOS-based devices (iPhone, iPad).
                            Example: http://&lt;server_ip&gt;:&lt;port&gt;/hls/12AB42FD5912.m3u
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>Camera archive position to open. Can be: date/time in ISO format, server time zone (example: 2015-02-20T19:00), milliseconds since epoch (1970-01-01 00:00, UTC) or microseconds since epoch</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>hi</name>
                            <description>If specified, only hi quality is available on streaming session. If neither &lt;hi&gt; nor &lt;lo&gt; is specified than HLS client is allowed to perform dynamic stream switching (to fit in available bandwidth and compensate for traffic congestion)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>lo</name>
                            <description>If specified, only low quality is available on streaming session. If neither &lt;hi&gt; nor &lt;lo&gt; is specified than HLS client is allowed to perform dynamic stream switching (to fit in available bandwidth and compensate for traffic congestion)</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in mpeg-2/ts format</caption>
                    </result>
                </function>
                <function>
                    <name>hls/&lt;physicalId&gt;.&lt;format&gt;</name>
                    <caption>Direct download</caption>
                    <description>
                        Url format for downloading fragment of archive by specifying fragment start time and duration.
                        Fragment can be downloaded in mpeg-2/ts (.ts) format or matroska (.mkv).
                        No transcoding is done.
                        Stream format can be one of following: ts, mkv
                        Example: http://&lt;server_ip&gt;:&lt;port&gt;/hls/12AB42FD5912.mkv?startDatetime=2015-02-05T19:00&amp;duration=10
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>Fragment start time. Can be: date/time in ISO format, server time zone (example: 2015-02-20T19:00), milliseconds since epoch (1970-01-01 00:00, UTC) or microseconds since epoch</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>duration</name>
                            <description>Fragment length in seconds</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>hi</name>
                            <description>Return high quality stream</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>lo</name>
                            <description>Return low quality stream</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in requested format</caption>
                    </result>
                </function>
            </functions>
        </group>
         <group>
            <groupName>Proxy API</groupName>
            <urlPrefix>/proxy</urlPrefix>
            <groupDescription>
                This group contains information requests proxy from one server to another
            </groupDescription>
            <functions>

                <function>
                    <name>&lt;protocol&gt;/&lt;serverGuid&gt;/&lt;apiRequest&gt;</name>
                    <description>
                        Proxy methods allows to send any request to any server using the existing public connection. Can also be used to get video streams.
                        Example: rtsp://10.0.2.1/proxy/rtsp/{72934575-ceb7-54bb-23a0-84b81cf1d3f1}/12AB42FD5912?pos=1235631&amp;resolution=240p
                        Example: http://10.0.2.1/proxy/http/{72934575-ceb7-54bb-23a0-84b81cf1d3f1}/showLog
                    </description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>Return result of the target api request.</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Authentication</groupName>
            <urlPrefix></urlPrefix>
            <groupDescription>
                Request authentication methods supported by server
            </groupDescription>
            <functions>
                <function>
                    <name>HTTP Basic / Digest Authentication</name>
                    <description>
                        Server is fully conformant with authentication defined in rfc2617 (https://tools.ietf.org/html/rfc2617)
                    </description>
                    <method/>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>Cookie-based Authentication</name>
                    <description>
                        Cookie authorisation scheme allows to avoid standard login/password dialog in web-applications.<br/>
                        It provides you a way to replace it with your own. <br/>
                        It works mostly like sessions, but a bit more secure because it doesn't send user's password over HTTP.<br/>

                        <ul>
                            <li>In the first request to server you must send cookie <i>Authorization=Digest (path: '/')</i>
                                You can request any anonymous request like '/api/moduleInformation'</li>
                            <li>In response you'll get cookies <i>realm</i> and <i>nonce</i> (nonce is a session key for this user)</li>
                            <li>Calculate authentification hash <i>auth_digest</i>, using realm and nonce (see algorithm below)</li>
                            <li>Set authentification hash to cookie: <i>auth=auth_digest (path: '/')</i>
                                Every following request to server must contain cookies: <i>Authorization</i> and <i>auth</i></li>
                        </ul>
                    </description>

                </function>
                <function>
                    <name>URL-based Authentication</name>
                    <description>
                        You can add "auth" field to url query section. E.g., http://127.0.0.1:7001/ec2/getMediaServersEx?auth=auth_digest

                        <ul>
                            <li>Call <i>/gettime</i> request to get <i>realm</i> and <i>nonce</i> from server (current server time MUST be used as a nonce value, nonce is valid for about 5 minutes)</li>
                            <li>Calculate authentification hash <i>auth_digest</i>, using realm and nonce (see algorithm below)</li>
                            <li>Set authentification hash to url-parameter: http://127.0.0.1:7001/ec2/method?...&amp;auth=<i>auth_digest</i></li>
                        </ul>
                    </description>

                </function>


                <function>
                    <name>Calculating authentification hash</name>
                    <description>
                            For url-based authentification and cookie-based authentification you need to calculate hash manually, using the following algorythm:
                            <ul>
                                <li>Get <i>nonce</i> and <i>realm</i> from server</li>
                                <li>Translate user's <i>username</i> to lower case</li>
                                <li>Check required <i>method</i> ('GET' for http-requests, 'PLAY' for rtsp)</li>
                                <li><i>ha1 = MD5(usename:realm:password)</i></li>
                                <li><i>simplified_ha2 = MD5(ha1:nonce:MD5(method:))</i></li>
                                <li><i>auth = base64(username:nonce:simplified_ha2)</i></li>
                                <li><i>auth</i> is required authentification hash</li>
                            </ul>
                    </description>

                </function>
            </functions>
        </group>
    </groups>
</apidoc>
