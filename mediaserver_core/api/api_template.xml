<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="api.xsl"?>
<apidoc xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="api.xsd">
    <groups>
        <group>
            <groupName>System API</groupName>
            <urlPrefix>/ec2</urlPrefix>
            <groupDescription>This group contains functions related to whole system (all servers).</groupDescription>
            <functions>
                <function>
                    <name>bookmarks</name>
                    <description>Read bookmarks using the specified parameters.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>startTime</name>
                            <description>
                                Start time of the interval with bookmarks (in milliseconds since epoch).
                                Default value is 0. Should be less than endTime.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>endTime</name>
                            <description>
                                End time of the interval with bookmarks (in milliseconds since epoch).
                                Default value is the current time. Should be greater than startTime.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>sortBy</name>
                            <description>
                                Field to sort the results by. Default value is "startTime".
                            </description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>name</name>
                                    <description>Sort bookmarks by name.</description>
                                </value>
                                <value>
                                    <name>startTime</name>
                                    <description>Sort bookmarks by start time.</description>
                                </value>
                                <value>
                                    <name>duration</name>
                                    <description>Sort bookmarks by duration.</description>
                                </value>
                                <value>
                                    <name>cameraName</name>
                                    <description>Sort bookmarks by camera name.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>sortOrder</name>
                            <description>
                                Sort order. Default order is ascending.
                            </description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>asc</name>
                                    <description>Ascending sort order.</description>
                                </value>
                                <value>
                                    <name>desc</name>
                                    <description>Descending sort order.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>limit</name>
                            <description>Maximum number of bookmarks to return.
                                Unlimited by default.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>filter</name>
                            <description>Text-search filter string.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>bookmarks/add</name>
                    <description>Add a bookmark to the target server.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>guid</name>
                            <description>Identifier of the bookmark.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>name</name>
                            <description>Caption of the bookmark.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>description</name>
                            <description>Details of the bookmark.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>timeout</name>
                            <description>Time during which the recorded period should be preserved (in milliseconds).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>startTime</name>
                            <description>Start time of the bookmark (in milliseconds since epoch).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>duration</name>
                            <description>Length of the bookmark (in milliseconds).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>tag</name>
                            <description>Applied tag. Several tag parameters could be used to specify multiple tags.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>bookmarks/delete</name>
                    <description>Remove a bookmark with the specified identifier.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>guid</name>
                            <description>Identifier of the bookmark.</description>
                            <optional>false</optional>
                        </param>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>bookmarks/tags</name>
                    <description>Return currently used tags.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>limit</name>
                            <description>Maximum number of tags to return.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>bookmarks/update</name>
                    <description>Update information for a bookmark.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>guid</name>
                            <description>Identifier of the bookmark.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>name</name>
                            <description>Caption of the bookmark.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>description</name>
                            <description>Details of the bookmark.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>timeout</name>
                            <description>Time during which the recorded period should be preserved (in milliseconds).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>startTime</name>
                            <description>Start time of the bookmark (in milliseconds since epoch).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>duration</name>
                            <description>Length of the bookmark (in milliseconds).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>tag</name>
                            <description>Applied tag. Serveral tag parameters could be used to specify multiple tags.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>cameraThumbnail</name>
                    <description>Get the static image from the camera.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>time</name>
                            <description>
                                Timestamp of the requested image (in milliseconds since epoch).
                                The special value "latest", which is the default value, requires to
                                retrieve the latest thumbnail. The special value "now" requires to
                                retrieve the thumbnail corresponding to the current time.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotate</name>
                            <description>
                                Image orientation. Can be 0, 90, 180 or 270 degrees. If the
                                parameter is absent or equals -1, the image will be rotated as
                                defined in the camera settings.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>height</name>
                            <description>
                                Desired image height. Should be not less than 128, or equal to -1
                                (the default value) which implies the original frame size, and in
                                this case the width should also be omitted or set to -1.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>width</name>
                            <description>
                                Desired image width. Should be not less than 128, or equal to -1
                                (the default value) which implies autosizing: if the height is
                                specified, the width will be calculated based on the aspect ratio,
                                otherwise, the original frame size will be used.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>imageFormat</name>
                            <description>
                                Format of the requested image. Default value is "JpgFormat".
                            </description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>PngFormat</name>
                                    <description>PNG</description>
                                </value>
                                <value>
                                    <name>JpgFormat</name>
                                    <description>JPEG</description>
                                </value>
                                <value>
                                    <name>TiffFormat</name>
                                    <description>TIFF</description>
                                </value>
                                <value>
                                    <name>RawFormat</name>
                                    <description>Raw video frame. Makes the request much more lightweight for Edge servers.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>method</name>
                            <description>
                                Getting a thumbnail at the exact timestamp is costly, so, it can be
                                rounded to the nearest keyframe, thus, the default value is
                                "KeyFrameAfterMethod".
                            </description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>KeyFrameBeforeMethod</name>
                                    <description>Get the thumbnail from the nearest keyframe before the given time.</description>
                                </value>
                                <value>
                                    <name>PreciseMethod</name>
                                    <description>Get the thumbnail as near to given time as possible.</description>
                                </value>
                                <value>
                                    <name>KeyFrameAfterMethod</name>
                                    <description>Get the thumbnail from the nearest keyframe after the given time.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>aspectRatio</name>
                            <description>
                                Allows to avoid scaling the image to the aspect ratio from camera settings.
                            </description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>auto</name>
                                    <description>Default value. Honor aspect ratio from camera settings.</description>
                                </value>
                                <value>
                                    <name>source</name>
                                    <description>Use the source frame aspect ratio, despite the value in camera settings.</description>
                                </value>
                            </values>
                        </param>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function proprietary="true">
                    <name>updateInformation/freeSpaceForUpdateFiles</name>
                    <description>Get free space available for downloading and extracting update files.</description>
                    <method>GET</method>
                    <params>
                        <param proprietary="true">
                            <name>local</name>
                            <description>If present, the request should not be redirected to another server.</description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>extraFormatting</name>
                            <description>If present and the requested result format is non-binary,
                                indentation and spacing will be used to improve readability.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>XML data format.</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>
                                        CSV data format. In case of a hierarchical structure,
                                        only the top level data is provided.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>The amount of free space available for update files in bytes
                            for each online server in the system, in the specified format.</caption>
                    </result>
                </function>
                <function>
                    <name>recordedTimePeriods</name>
                    <description>Return the recorded chunks info for the specified cameras.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                 MAC address (not supported for certain cameras).
                                 This parameter can be used several times to define a list of cameras.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>startTime</name>
                            <description>Start time of the interval (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>endTime</name>
                            <description>End time of the interval (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>filter</name>
                            <description>This parameter is used for motion search ("periodsType" must be 1).
                                Match motion on a video by specified rectangle.
                                <br/>Format: string with a JSON list of <i>sensors</i>,
                                each <i>sensor</i> is a JSON list of <i>rects</i>, each <i>rect</i> is:
                                <br/><code>{"x": <i>x</i>, "y": <i>y</i>, "width": <i>width</i>, "height": <i>height</i>}</code>
                                <br/>All values are measured in relative portions of a video frame,
                                <i>x</i> and <i>width</i> in range [0..43], <i>y</i> and <i>height</i> in range [0..31],
                                zero is the left-top corner.
                                <br/>Example of a full-frame rectangle for a single-sensor camera:
                                <code>[[{"x":0,"y":0,"width":43,"height":31}]]</code>
                                <br/>Example of two rectangles for a single-sensor camera:
                                <code>[[{"x":0,"y":0,"width":5,"height":7},{"x":12,"y":10,"width":8,"height":6}]]</code>
                            </description>
                            <optional>true</optional>
                        </param>
                        <param proprietary="true">
                            <name>format</name>
                            <description>Data format. Default value is "json".</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>Universal Binary JSON data format.</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>JSON data format.</description>
                                </value>
                                <value>
                                    <name>periods</name>
                                    <description>Internal comperssed binary format.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>detail</name>
                            <description>Chunk detail level, in microseconds. Time periods
                                that are shorter than the detail level are discarded. You can treat
                                the detail level as the amount of microseconds per screen pixel.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>periodsType</name>
                            <description>Chunk type.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>0</name>
                                    <description>All records.</description>
                                </value>
                                <value>
                                    <name>1</name>
                                    <description>Only chunks with motion (parameter "filter" is required).</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>keepSmallChunks</name>
                            <optional>true</optional>
                            <description>If specified, standalone chunks smaller than the detail
                            level are not removed from the result.</description>
                        </param>
                        <param>
                            <name>limit</name>
                            <optional>true</optional>
                            <description>Maximum number of chunks to return.</description>
                        </param>
                        <param>
                            <name>flat</name>
                            <optional>true</optional>
                            <description>If specified, do not group chunk lists by server.</description>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with an error code, error message and the list of JSON objects in "reply" field:
                          if no "flat" parameter is specified,
                          "reply" field is the list which contains for each server its GUID (as "guid"
                          field) and the list of chunks (as "periods" field); if "flat" parameter
                          is specified, "reply" field is just the list of chunks.
                          <br/>Each chunk is a pair of <code>(durationMs, startTimeMs)</code>.
                          Chunks are merged for all requested cameras.
                          Start time and duration are in milliseconds since epoch.
                          Duration of -1 means the last chunk is being recorded now.</caption>
                    </result>
                </function>
                <function>
                    <name>changeCameraPassword</name>
                    <description>
                    Change password for already existing user on a camera.</description>
                    <permissions>Administrator.</permissions>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>user</name>
                            <description>
                              User name.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>password</name>
                            <description>
                              New password to set.</description>
                            <optional>false</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON result with error code</caption>
                    </result>
                </function>
                <function>
                    <name>getHardwareIdsOfServers</name>
                    <description>Return the list of Hardware Ids for each server in the system
                        which is online at the moment of executing this function.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with an error code, error message and a list of JSON objects
                            in "reply" field:</caption>
                        <params>
                            <param>
                                <name>serverId</name>
                                <description>Id of a server.</description>
                            </param>
                            <param>
                                <name>hardwareIds</name>
                                <description>All Hardware Ids of the server, as a list of strings.</description>
                            </param>
                        </params>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Server API</groupName>
            <urlPrefix>/api</urlPrefix>
            <groupDescription>This group contains functions related to a single server</groupDescription>
            <functions>
                <function proprietary="true">
                    <name>getHardwareInfo</name>
                    <description>Get hardware information</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with hardware information.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>execAction</name>
                    <description>Execute an action. Action data should be in the internal
                        binary format. This method is going to be refactored in the next
                        version.</description>
                    <method>POST</method>
                    <params/>
                    <result>
                        <caption>XML with the "OK" message or an error code.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>events</name>
                    <description>Return event log in the proprietary binary format.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start of time period (in milliseconds since epoch).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>to</name>
                            <description>End of time period (in milliseconds since epoch).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>event</name>
                            <description>Event type.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>action</name>
                            <description>Action type.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>brule_id</name>
                            <description>Event rule id.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Server event log in the proprietary binary format.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>restoreState</name>
                    <description>Restore server state to default. Cleans database and system name.</description>
                    <permissions>Administrator.</permissions>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>oldPassword</name>
                            <description>Current admin password</description>
                            <optional>false</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON result with an error code and an error string.</caption>
                    </result>
                </function>
              <function>
                    <name>detachFromCloud</name>
                    <description>
                        Detach media server from cloud. Local admin user is enabled, admin password is changed to new value (if specified), all cloud users are disabled. Cloud link is removed.
                        Function can be called either via GET or POST method. POST data should be a json object.
                    </description>
                    <permissions>Administrator.</permissions>
                    <method>GET, POST</method>
                    <params>
                        <param>
                            <name>password</name>
                            <description>Set new admin password after detach.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON result with error code</caption>
                    </result>
              </function>
              <function>
                <name>setupLocalSystem</name>
                <description>
                    Configure server system name and password. This function can be called for server with default system name. Otherwise function returns error.
                    This method requires owner permissions.
                </description>
                <permissions>Administrator.</permissions>
                <method>POST</method>
                <params>
                  <param>
                    <name>password</name>
                    <description> New password for admin user </description>
                    <optional>false</optional>
                  </param>
                  <param>
                    <name>systemName</name>
                    <description> New system name </description>
                    <optional>false</optional>
                  </param>
                </params>
                <result>
                  <caption>JSON result with error code</caption>
                </result>
              </function>
              <function>
                <name>setupCloudSystem</name>
                <description>
                    Configure server system name and attach it to cloud. This function can be called for server with default system name. Otherwise function returns error.
                    This method requires owner permissions.
                </description>
                <permissions>Administrator.</permissions>
                <method>POST</method>
                <params>
                  <param>
                    <name>systemName</name>
                    <description> New system name </description>
                    <optional>false</optional>
                  </param>
                  <param>
                    <name>cloudAuthKey</name>
                    <description> could authentication key </description>
                    <optional>false</optional>
                  </param>
                  <param>
                    <name>cloudSystemID</name>
                    <description> could system id </description>
                    <optional>false</optional>
                  </param>
                </params>
                <result>
                  <caption>JSON result with error code</caption>
                </result>
                </function>
                <function>
                    <name>doCameraDiagnosticsStep</name>
                    <description>Performs camera diagnostics.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>type</name>
                            <description>Diagnostics to perform.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>mediaServerAvailability</name>
                                    <description>Checks server availability</description>
                                </value>
                                <value>
                                    <name>cameraAvailability</name>
                                    <description>Checks if camera is accessible from the server</description>
                                </value>
                                <value>
                                    <name>mediaStreamAvailability</name>
                                    <description>Checks if camera media stream can be
                                        opened</description>
                                </value>
                                <value>
                                    <name>mediaStreamIntegrity</name>
                                    <description>Checks additional media stream
                                        parameters</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with an error code, error message and diagnostics result.</caption>
                    </result>
                </function>
                <function>
                    <name>setCameraParam</name>
                    <description>Sets values of several camera parameters. This parameters are used
                        on the Advanced tab in camera settings. For instance: brightness, contrast
                        e.t.c.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>&lt;any name&gt;</name>
                            <description>Parameter for camera to set. Request can contain one or
                                more parameters to set.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>"OK" if all parameters have been set, otherwise return error 500
                        (Internal server error) and the result of setting for every parameter.</caption>
                    </result>
                </function>
                <function>
                    <name>getCameraParam</name>
                    <description>Read camera parameters. For instance: brightness, contrast e.t.c.
                        Parameters to read should be specified.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>&lt;any name&gt;</name>
                            <description>Parameter name to read. Request can contain one or more
                                parameters.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Required parameter values in form of paramName=paramValue, each
                        parameter on a new line.</caption>
                    </result>
                </function>
                <function>
                    <name>image</name>
                    <description>
                        <b>Deprecated, support expires by 3.1.</b> Use /ec2/cameraThumbnail instead.
                        The new method can get thumbnails from cameras located on other servers (the old one can't).
                        <br />
                        Return image from the camera.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <optional>false</optional>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                        </param>
                        <param>
                            <name>time</name>
                            <description>Required image time (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).
                                Also, additional special values are allowed.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name><i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i></name>
                                    <description>Human-readable date format/</description>
                                </value>
                                <value>
                                    <name>number (in a string)</name>
                                    <description>Milliseconds since epoch.</description>
                                </value>
                                <value>
                                    <name>NOW</name>
                                    <description>Live position (no frame is returned if camera is offline</description>
                                </value>
                                <value>
                                    <name>LATEST</name>
                                    <description>last frame from camera (return live position or
                                        last frame from archive if camera is offline)</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Image format. Default value "jpeg"</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>jpeg</name>
                                    <description>JPEG image format</description>
                                </value>
                                <value>
                                    <name>png</name>
                                    <description>PNG image format</description>
                                </value>
                                <value>
                                    <name>bmp</name>
                                    <description>BMP image format</description>
                                </value>
                                <value>
                                    <name>tiff</name>
                                    <description>TIFF image format</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>method</name>
                            <description>Parameter defines method to search frame inside GOP
                                structure. Default value "before". Parameter not used for Motion
                                jpeg video codec.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>before</name>
                                    <description>Return nearest I-frame before the specified
                                        time.</description>
                                </value>
                                <value>
                                    <name>after</name>
                                    <description>Return nearest I-frame after the specified
                                        time.</description>
                                </value>
                                <value>
                                    <name>exact</name>
                                    <description>Get image for exact time position. It required more
                                        CPU.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>height</name>
                            <description>Required image height. By default image have same size as
                                source video stream. If only height is specified width is auto detected</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>width</name>
                            <description>Required image width. By default image have same size as
                                source video stream. width cannot be specified without specifying height</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>The image.</caption>
                    </result>
                </function>
                <function>
                    <name>showLog</name>
                    <description>Return tail of the server log file</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>lines</name>
                            <description>Display last N log lines.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>id</name>
                            <description>Id of log file. By default main log is returned</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>0</name>
                                    <description>Main server log</description>
                                </value>
                                <value>
                                    <name>2</name>
                                    <description>Http log</description>
                                </value>
                                <value>
                                    <name>3</name>
                                    <description>Transaction log</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Tail of the server log file in text format</caption>
                    </result>
                </function>
                <function>
                    <name>getEvents</name>
                    <description>Get server event log information.</description>
                    <permissions>At least Advanced Viewer.</permissions>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start time of a time interval (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>to</name>
                            <description>
                                End time of a time interval (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).
                                Used to filter events log by a single camera.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>event_type</name>
                            <description>Filter events log by specified event type.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>action_type</name>
                            <description>Filter events log by specified action type.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>brule_id</name>
                            <description>Filter events log by specified event rule (keep only records generated via that event rule). This id could be obtained via /ec2/getEventRules.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with an error code, error message and a list of JSON objects in "reply" field:</caption>
                        <params>
                            <param>
                                <name>actionType</name>
                                <description>Type of the action.</description>
                                <values>
                                    <value>
                                        <name>UndefinedAction</name>
                                        <description></description>
                                    </value>
                                    <value>
                                        <name>CameraOutputAction</name>
                                        <description>Change camera output state.</description>
                                    </value>
                                    <value>
                                        <name>BookmarkAction</name>
                                        <description></description>
                                    </value>
                                    <value>
                                        <name>CameraRecordingAction</name>
                                        <description>Start camera recording.</description>
                                    </value>
                                    <value>
                                        <name>PanicRecordingAction</name>
                                        <description>Activate panic recording mode.</description>
                                    </value>
                                    <value>
                                        <name>SendMailAction</name>
                                        <description>Send an email.</description>
                                    </value>
                                    <value>
                                        <name>DiagnosticsAction</name>
                                        <description>Write a record to the server's log.</description>
                                    </value>
                                    <value>
                                        <name>ShowPopupAction</name>
                                        <description></description>
                                    </value>
                                    <value>
                                        <name>PlaySoundAction</name>
                                        <description></description>
                                    </value>
                                    <value>
                                        <name>PlaySoundOnceAction</name>
                                        <description></description>
                                    </value>
                                    <value>
                                        <name>SayTextAction</name>
                                        <description></description>
                                    </value>
                                    <value>
                                        <name>ExecutePtzPresetAction</name>
                                        <description>Execute given PTZ preset.</description>
                                    </value>
                                    <value>
                                        <name>ShowTextOverlayAction</name>
                                        <description>Show text overlay over the given camera(s).</description>
                                    </value>
                                    <value>
                                        <name>ShowOnAlarmLayoutAction</name>
                                        <description>Put the given camera(s) to the Alarm Layout.</description>
                                    </value>
                                    <value>
                                        <name>ExecHttpRequestAction</name>
                                        <description>Send HTTP request as an action.</description>
                                    </value>
                                </values>
                            </param>
                            <param>
                                <name>actionParams</name>
                                <description>JSON object with action parameters.
                                    Only fields that are applicable to the particular action are used.</description>
                            </param>
                            <param>
                                <name>actionParams.actionResourceId</name>
                                <description>Additional parameter for event log convenience.</description>
                            </param>
                            <param>
                                <name>actionParams.url</name>
                                <description>Play Sound / exec HTTP action.</description>
                            </param>
                            <param>
                                <name>actionParams.emailAddress</name>
                                <description>Email.</description>
                            </param>
                            <param>
                                <name>actionParams.userGroup</name>
                                <description>Popups and System Health.</description>
                                <values>
                                    <value><name>EveryOne></name></value>
                                    <value><name>AdminOnly</name></value>
                                </values>
                            </param>
                            <param>
                                <name>actionParams.fps</name>
                                <description>Frames per second for recording.</description>
                            </param>
                            <param>
                                <name>actionParams.streamQuality</name>
                                <description>Stream quality for recording.</description>
                                <values>
                                    <value><name>QualityLowest</name></value>
                                    <value><name>QualityLow</name></value>
                                    <value><name>QualityNormal</name></value>
                                    <value><name>QualityHigh</name></value>
                                    <value><name>QualityHighest</name></value>
                                    <value><name>QualityPreSet</name></value>
                                    <value><name>QualityNotDefined</name></value>
                                </values>
                            </param>
                            <param>
                                <name>actionParams.recordingDuration</name>
                                <description>Duration of the recording, in seconds.</description>
                            </param>
                            <param>
                                <name>actionParams.recordAfter</name>
                                <description>For Bookmark, extension to the recording time, in seconds.</description>
                            </param>
                            <param>
                                <name>actionParams.relayOutputId</name>
                                <description>Camera Output.</description>
                            </param>
                            <param>
                                <name>actionParams.sayText</name>
                                <description></description>
                            </param>
                            <param>
                                <name>actionParams.tags</name>
                                <description>Bookmark.</description>
                            </param>
                            <param>
                                <name>actionParams.text</name>
                                <description>Text for Show Text Overlay, or message body for Exec HTTP Action.</description>
                            </param>
                            <param>
                                <name>actionParams.durationMs</name>
                                <description>Duration in milliseconds for Bookmark and Show Text Overlay.</description>
                            </param>
                            <param>
                                <name>actionParams.additionalResources</name>
                                <description>JSON list of ids of additional resources; user ids for Show On Alarm Layout.</description>
                            </param>
                            <param>
                                <name>actionParams.forced</name>
                                <description>Alarm Layout - if it must be opened immediately.</description>
                                <values>
                                    <value><name>true</name></value>
                                    <value><name>false</name></value>
                                </values>
                            </param>
                            <param>
                                <name>actionParams.presetId</name>
                                <description>Execute PTZ preset action.</description>
                            </param>
                            <param>
                                <name>actionParams.useSource</name>
                                <description>Alarm Layout - if the source resource should also be used.</description>
                            </param>
                            <param>
                                <name>actionParams.recordBeforeMs</name>
                                <description>Bookmark start time is adjusted to the left by this value in milliseconds.</description>
                            </param>
                            <param>
                                <name>actionParams.playToClient</name>
                                <description>Text to be pronounced.</description>
                            </param>
                            <param>
                                <name>actionParams.contentType</name>
                                <description>HTTP action.</description>
                            </param>
                            <param>
                                <name>eventParams</name>
                                <description>JSON object with event parameters.</description>
                            </param>
                            <param>
                                <name>eventParams.eventType</name>
                                <description>Type of the event.</description>
                                <values>
                                    <value>
                                        <name>UndefinedEvent</name>
                                        <description>Event type is not defined. Used in rules.</description>
                                    </value>
                                    <value>
                                        <name>CameraMotionEvent</name>
                                        <description>Motion has occurred on a camera.</description>
                                    </value>
                                    <value>
                                        <name>CameraInputEvent</name>
                                        <description>Camera input signal is received.</description>
                                    </value>
                                    <value>
                                        <name>CameraDisconnectEvent</name>
                                        <description>Camera was disconnected.</description>
                                    </value>
                                    <value>
                                        <name>StorageFailureEvent</name>
                                        <description>Storage read error has occurred.</description>
                                    </value>
                                    <value>
                                        <name>NetworkIssueEvent</name>
                                        <description>Network issue: packet lost, RTP timeout, etc.</description>
                                    </value>
                                    <value>
                                        <name>CameraIpConflictEvent</name>
                                        <description>Found some cameras with same IP address.</description>
                                    </value>
                                    <value>
                                        <name>ServerFailureEvent</name>
                                        <description>Connection to server lost.</description>
                                    </value>
                                    <value>
                                        <name>ServerConflictEvent</name>
                                        <description>Two or more servers are running.</description>
                                    </value>
                                    <value>
                                        <name>ServerStartEvent</name>
                                        <description>Server started.</description>
                                    </value>
                                    <value>
                                        <name>LicenseIssueEvent</name>
                                        <description>Not enough licenses.</description>
                                    </value>
                                    <value>
                                        <name>BackupFinishedEvent</name>
                                        <description>Archive backup done.</description>
                                    </value>
                                    <value>
                                        <name>SystemHealthEvent</name>
                                        <description>System health message.</description>
                                    </value>
                                    <value>
                                        <name>MaxSystemHealthEvent</name>
                                        <description>System health message.</description>
                                    </value>
                                    <value>
                                        <name>AnyCameraEvent</name>
                                        <description>Event group.</description>
                                    </value>
                                    <value>
                                        <name>AnyServerEvent</name>
                                        <description>Event group.</description>
                                    </value>
                                    <value>
                                        <name>AnyBusinessEvent</name>
                                        <description>Event group.</description>
                                    </value>
                                    <value>
                                        <name>UserDefinedEvent</name>
                                        <description>Base index for the user-defined events.</description>
                                    </value>
                                </values>
                            </param>
                            <param>
                                <name>eventParams.eventTimestampUsec</name>
                                <description> When did the event occur, in microseconds.</description>
                            </param>
                            <param>
                                <name>eventParams.eventResourceId</name>
                                <description>Event source - camera or server id.</description>
                            </param>
                            <param>
                                <name>eventParams.resourceName</name>
                                <description>Name of the resource which caused the event. Used if no resource is actually registered in
the system. Generic event can provide some resource name which doesn't match any
resourceId in the system. In this case resourceName is filled and resourceId remains empty.
                                </description>
                            </param>
                            <param>
                                <name>eventParams.sourceServerId</name>
                                <description>Id of a server that generated the event.</description>
                            </param>
                            <param>
                                <name>eventParams.reasonCode</name>
                                <description>Used in Reasoned Events as a reason code.</description>
                                <values>
                                    <value><name>NoReason</name></value>
                                    <value><name>NetworkNoFrameReason</name></value>
                                    <value><name>NetworkConnectionClosedReason</name></value>
                                    <value><name>NetworkRtpPacketLossReason</name></value>
                                    <value><name>ServerTerminatedReason</name></value>
                                    <value><name>ServerStartedReason</name></value>
                                    <value><name>StorageIoErrorReason</name></value>
                                    <value><name>StorageTooSlowReason</name></value>
                                    <value><name>StorageFullReason</name></value>
                                    <value><name>LicenseRemoved</name></value>
                                    <value><name>BackupFailedNoBackupStorageError</name></value>
                                    <value><name>BackupFailedSourceStorageError</name></value>
                                    <value><name>BackupFailedSourceFileError</name></value>
                                    <value><name>BackupFailedTargetFileError</name></value>
                                    <value><name>BackupFailedChunkError</name></value>
                                    <value><name>BackupEndOfPeriod</name></value>
                                    <value><name>BackupDone</name></value>
                                    <value><name>BackupCancelled</name></value>
                                    <value><name>NetworkNoResponseFromDevice</name></value>
                                </values>
                            </param>
                            <param>
                                <name>eventParams.inputPortId</name>
                                <description>Used for Input events only.</description>
                            </param>
                            <param>
                                <name>eventParams.caption</name>
                                <description>Short event description. Used for camera/server
                                    conflict as resource name which cause error. Used in generic
                                    events as a short description.</description>
                            </param>
                            <param>
                                <name>eventParams.description</name>
                                <description>Long event description. Used for camera/server
                                    conflict as a long description (conflict list). Used in
                                    Reasoned Events as reason description. Used in generic events as
                                    a long description.</description>
                            </param>
                            <param>
                                <name>eventParams.metadata</name>
                                <description>Camera list which is associated with the event.
                                    EventResourceId may be a POS terminal, but this is a camera
                                    list which should be shown with this event.</description>
                            </param>
                            <param>
                                <name>businessRuleId</name>
                                <description>Id of the event rule.</description>
                            </param>
                            <param>
                                <name>aggregationCount</name>
                                <description>Number of identical events groupped into one.</description>
                            </param>
                            <param proprietary="true">
                                <name>flags</name>
                                <description>Combination (via "|") or the following flags:</description>
                                <values>
                                    <value>
                                        <name>VideoLinkExists</name>
                                        <description></description>
                                    </value>
                                </values>
                            </param>
                        </params>
                    </result>
                </function>
                <function>
                    <name>auditLog</name>
                    <description>Return audit log information in the requested format.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start time of a time interval (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>to</name>
                            <description>End time of a time interval(as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Tail of the server log file in text format</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/search</name>
                    <description>Start searching for the cameras in manual mode.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>start_ip</name>
                            <description>First IP address in the range to scan.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>end_ip</name>
                            <description>Last IP address in the range to scan.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>port</name>
                            <description>Camera(s) IP port to check. Port is auto-detected if this
                                parameter is omitted.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>user</name>
                            <description>Camera(s) username.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Camera(s) password.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with the initial status of camera search process,
                            including processUuid used for other /api/manualCamera calls, and the
                            list of objects describing cameras found to the moment.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/status</name>
                    <description>Get the current status of the process of searching for the cameras.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>uuid</name>
                            <description>Process unique id, can be obtained from "processUuid"
                                field in the result of /api/manualCamera/search.</description>
                            <optional>false</optional>
                        </param>
                    </params>
                    <result>
                      <caption>
                        JSON object with the initial status of camera search process,
                        including processUuid used for other /api/manualCamera calls, and the
                        list of objects describing cameras found to the moment.
                      </caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/stop</name>
                    <description>Stop manual adding progress.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>uuid</name>
                            <description>
                              Process unique id, can be obtained from "processUuid"
                              field in the result of /api/manualCamera/search.
                            </description>
                            <optional>false</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with error message and error code (0 means OK).</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>manualCamera/add</name>
                    <description>Manually add camera(s). If several cameras are added, parameters
                        "url" and "manufacturer" must be defined several times with incrementing
                        suffix "0", "1", etc.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url0</name>
                            <description>
                              Camera url, can be obtained from
                              "reply.cameras[].url" field in the result of
                              /api/manualCamera/status.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>uniqueId0</name>
                            <description>Camera physical id, can be obtained from
                                "reply.cameras[].uniqueId" field in the result of
                                /api/manualCamera/status.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>manufacturer0</name>
                            <description>
                              Camera manufacturer, can be obtained from
                              "reply.cameras[].manufacturer" field in the result of
                              /api/manualCamera/status.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>user</name>
                            <description>Username for the cameras.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Password for the cameras.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with error message and error code (0 means OK).</caption>
                    </result>
                </function>
              <function>
                <name>manualCamera/add</name>
                <description>
                  Manually add camera(s).
<p>
Parameters should be passed as a JSON object in POST message body with
content type "application/json". Example of such object:
<pre><code>
{
    "user": "some_user",
    "password": "some_password",
    "cameras":
    [
        {
            "uniqueId": "00-1A-07-00-FF-FF",
            "url": "192.168.0.100",
            "manufacturer": "3100"
        }
    ]
}
</code></pre>
</p>
              </description>
                <method>POST</method>
                <params>
                  <param>
                    <name>user</name>
                    <description>Username for the cameras.</description>
                    <optional>true</optional>
                  </param>
                  <param>
                    <name>password</name>
                    <description>Password for the cameras.</description>
                    <optional>true</optional>
                  </param>
                  <param>
                    <name>cameras</name>
                    <description>
                      List of objects with fields defined below.
                    </description>
                    <optional>false</optional>
                  </param>
                  <param>
                    <name>cameras[].url</name>
                    <description>
                      Camera url, can be obtained from
                      "reply.cameras[].url" field in the result of
                      /api/manualCamera/status.
                    </description>
                    <optional>false</optional>
                  </param>
                  <param>
                    <name>cameras[].uniqueId</name>
                    <description>
                      Camera physical id, can be obtained from
                      "reply.cameras[].uniqueId" field in the result of
                      /api/manualCamera/status.
                    </description>
                    <optional>false</optional>
                  </param>
                  <param>
                    <name>cameras[].manufacturer</name>
                    <description>
                      Camera manufacturer, can be obtained from
                      "reply.cameras[].manufacturer" field in the result of
                      /api/manualCamera/status.
                    </description>
                    <optional>false</optional>
                  </param>
                </params>
                <result>
                  <caption>JSON object with error message and error code (0 means OK).</caption>
                </result>
              </function>
                <function>
                    <name>ping</name>
                    <description>Ping the server</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code, error string and module unique id in case of successful ping.</caption>
                    </result>
                </function>
                <function>
                    <name>pingSystem</name>
                    <description>Ping the system.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>System URL to ping.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>password</name>
                            <description>System administrator password.</description>
                            <optional>false</optional>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with error code, error string and module information in case of successful ping.
                            Error string could be
                            empty in case of successful ping,
                            "FAIL" if the specified system is unreachable or there is no any system,
                            "UNAUTHORIZED" if the authentication credentials are invalid, and
                            "INCOMPATIBLE" if the found system has incompatible version or different customization.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>ptz</name>
                    <description>Perform reading or writing PTZ operation</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>cameraId</name>
                            <description>
                                Camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or
                                MAC address (not supported for certain cameras).</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>command</name>
                            <description>PTZ operation</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>ContinuousMovePtzCommand</name>
                                    <description>Start PTZ continues move. Parameters xSpeed, ySpeed and zSpeed are used in range [-1.0..+1.0]. To stop moving use value 0 for all parameters.</description>
                                </value>
                                <value>
                                    <name>ContinuousFocusPtzCommand</name>
                                    <description>Start PTZ focus in or out. Parameter speed defines speed and focus direction in range [-1.0..+1.0].</description>
                                </value>
                                <value>
                                    <name>AbsoluteDeviceMovePtzCommand</name>
                                    <description>Move camera to absolute position. Parameters xPos, yPos and zPos are used in range defined by camera. Parameter speed is used in range [0..1.0].</description>
                                </value>
                                <value>
                                    <name>AbsoluteLogicalMovePtzCommand</name>
                                    <description>Move camera to absolute position. Parameters xPos, yPos range are: [-180..+180]. Parameter zPos range is: [0..180] (field of view in degree). Parameters speed range is: [0..1.0].</description>
                                </value>
                                <value>
                                    <name>GetDevicePositionPtzCommand</name>
                                    <description>Read camera current position. Return parameters xPos, yPos and zPos in range defined by camera.</description>
                                </value>
                                <value>
                                    <name>GetLogicalPositionPtzCommand</name>
                                    <description>Read camera current position. Return parameters xPos, yPos in range [-180..+180]. Return parameter zPos in range [0..180] (field of view in degree).</description>
                                </value>
                                <value>
                                    <name>CreatePresetPtzCommand</name>
                                    <description>Create PTZ preset. Parameter presetId defines internal preset name. Parameter presetName defines display preset name.</description>
                                </value>
                                <value>
                                    <name>UpdatePresetPtzCommand</name>
                                    <description>Update PTZ preset display name. Parameter presetId defines internal preset name. Parameter presetName defines display preset name.</description>
                                </value>
                                <value>
                                    <name>RemovePresetPtzCommand</name>
                                    <description>Update PTZ preset display name. Parameter presetId defines internal preset name</description>
                                </value>
                                <value>
                                    <name>ActivatePresetPtzCommand</name>
                                    <description>Go to PTZ preset. Parameter presetId defines internal preset name. Parameter speed defines move speed in range [0..1.0.]</description>
                                </value>
                                <value>
                                    <name>GetPresetsPtzCommand</name>
                                    <description>Read PTZ presets list.</description>
                                </value>
                                <value>
                                    <name>GetPresetsPtzCommand</name>
                                    <description>Read PTZ presets list.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with an error code (0 means OK) and error message.</caption>
                    </result>
                </function>
                <function>
                    <name>rebuildArchive</name>
                    <description>Start or stop the server archive rebuilding, also can report this process status.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>action</name>
                            <description>What to do and what to report about the server archive rebuild.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>start</name>
                                    <description>Start server archive rebuild.</description>
                                </value>
                                <value>
                                    <name>stop</name>
                                    <description>Stop rebuild.</description>
                                </value>
                                <value>
                                    <name>any other value or no parameter</name>
                                    <description>Report server archive rebuild status</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>mainPool</name>
                            <description>1 (for the main storage) or 0 (for the backup storage)</description>
                            <optional>false</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Rebuild progress status or an error code.</caption>
                    </result>
                </function>
                <function>
                    <name>backupControl</name>
                    <description>Start or stop the recorded data backup process, also can report this process status.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>action</name>
                            <description>What to do and what to report about the backup process.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>start</name>
                                    <description>Start backup just now.</description>
                                </value>
                                <value>
                                    <name>stop</name>
                                    <description>Stop backup.</description>
                                </value>
                                <value>
                                    <name>any other value or no parameter</name>
                                    <description>Report the backup process status.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Bakcup process progress status or an error code.</caption>
                    </result>
                </function>
                <function>
                    <name>restart</name>
                    <description>Restarts the server.</description>
                    <permissions>Administrator.</permissions>
                    <method>GET</method>
                    <params/>
                    <result>
                      <caption>JSON with error code.</caption>
                    </result>
                  </function>
                  <function>
                    <name>statistics</name>
                    <description>Return server info: CPU usage, HDD usage e.t.c.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                      <caption>JSON data with statistics.</caption>
                    </result>
                  </function>
                  <function>
                    <name>storageSpace</name>
                    <description>Return a list of all server storages.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                      <caption>JSON data with server storages.</caption>
                    </result>
                  </function>
                  <function>
                    <name>storageStatus</name>
                    <description>Check if specified folder can be used as a server storage.</description>
                    <method>GET</method>
                    <params>
                      <param>
                        <name>path</name>
                        <description>Folder to check.</description>
                        <optional>false</optional>
                      </param>
                    </params>
                    <result>
                      <caption>
                        JSON data. "OK" if specified folder may be used for writing on
                        the server. Otherwise returns "FAIL"
                      </caption>
                    </result>
                  </function>
                  <function>
                    <name>gettime</name>
                    <description>Return server time (in milliseconds since epoch), time zone and authentication realm (realm is added for convenience)</description>
                    <method>GET</method>
                    <params/>
                    <result>
                      <caption>JSON data.</caption>
                    </result>
                  </function>
                  <function>
                    <name>saveCloudSystemCredentials</name>
                    <description>Sets or resets cloud credentials (systemId and authorization key) to be used by system</description>
                    <method>POST</method>
                    <params>
                      <param>
                        <name>cloudSystemId</name>
                        <optional>true</optional>
                        <values/>
                      </param>
                      <param>
                        <name>cloudAuthenticationKey</name>
                        <optional>true</optional>
                        <values/>
                      </param>
                      <param>
                        <name>reset</name>
                        <optional>true</optional>
                        <values>
                          <value>
                            <name>true</name>
                            <description>If specified, removes cloud credentials from DB. System will not connect to cloud anymore</description>
                          </value>
                        </values>
                      </param>
                    </params>
                  </function>
                  <function>
                    <name>activateLicense</name>
                    <description>Activate new license and return license JSON data if success</description>
                    <method>GET</method>
                    <params>
                      <param>
                        <name>key</name>
                        <description>License serial number</description>
                        <optional>false</optional>
                      </param>
                    </params>
                    <result>
                      <caption>JSON data.</caption>
                    </result>
                  </function>
                  <function proprietary="true">
                    <name>installUpdate</name>
                    <description>Updates server by the package contained in POST body</description>
                    <method>POST</method>
                    <params/>
                    <result>
                      <caption>
                        JSON with error code.
                        When all is OK errorString will be empty. In case of error errorString will contain:
                        UP_TO_DATE if the provided version is already installed;
                        INVALID_FILE if the provided file cannot be opened as a ZIP archive;
                        INCOMPATIBLE_SYSTEM if the update file is targeted for another system;
                        EXTRACTION_ERROR if some extraction problems were found (e.g. not enough space);
                        INSTALLATION_ERROR if the server could not execute installation script.
                      </caption>
                    </result>
                  </function>
                  <function proprietary="true">
                    <name>installUpdate</name>
                    <description>Install update from zip package which should be in the request body.</description>
                    <method>POST</method>
                    <params/>
                    <result/>
                  </function>
                  <function proprietary="true">
                    <name>onEvent</name>
                    <description>
                      Process an event from an external system. Reserved for future
                      use.
                    </description>
                    <method>POST</method>
                    <params/>
                    <result/>
                  </function>
                  <function>
                    <name>discoveredPeers</name>
                    <description>Return a list of the discovered peers.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                      <caption>JSON with a list of the discovered peers.</caption>
                    </result>
                  </function>
                  <function proprietary="true">
                    <name>restart</name>
                    <description>Restart the server.</description>
                    <method>GET</method>
                    <params/>
                    <result/>
                  </function>
                  <function>
                    <name>moduleInformation</name>
                    <description>Get information about the server.</description>
                    <method>GET</method>
                    <params>
                      <param>
                        <name>allModules</name>
                        <description>Set it to true to get all modules from the system.</description>
                        <optional>true</optional>
                      </param>
                      <param>
                        <name>showAddresses</name>
                        <description>Set it to true to show server addresses.</description>
                        <optional>true</optional>
                      </param>
                    </params>
                    <result>
                      <caption>JSON object with module information.</caption>
                    </result>
                  </function>
                  <function>
                    <name>moduleInformationAuthenticated</name>
                    <description>The same as moduleInformation but requires authentication. Useful to test connection.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                      <caption>JSON object with module information.</caption>
                    </result>
                  </function>
                  <function>
                    <name>configure</name>
                    <description>Configure various server parameters.</description>
                    <permissions>Administrator.</permissions>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>systemName</name>
                            <description>System display name. It affects all servers in the system.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>port</name>
                            <description>Server API port. It affects the current server only.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>
                            JSON with error code, error string, and flag "restartNeeded" that shows
                            whether the server must be restarted to apply settings. Error string
                            contains a hint to identify the problem: "SYSTEM_NAME" or "PORT".
                        </caption>
                    </result>
                </function>
                <function>
                    <name>mergeSystems</name>
                    <description>Merge two systems.</description>
                    <permissions>Administrator.</permissions>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>URL of one server in the system to join.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Administrator password of the target system.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>currentPassword</name>
                            <description>Administrator password of the current system.</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>takeRemoteSettings</name>
                            <description>Direction of the merge.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>true</name>
                                    <description>The current system will get system name and administrator password of the target system.</description>
                                </value>
                                <value>
                                    <name>false</name>
                                    <description>The target system will get system name and administrator password of the current system.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with error code and error string.
                            Error string could be
                            empty in case of successful ping,
                            "FAIL" if the specified system is unreachable or there is no any system,
                            "UNAUTHORIZED" if the authentication credentials are invalid,
                            "INCOMPATIBLE" if the found system has incompatible version or different customization, and
                            "BACKUP_ERROR" if database backup could not been created.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>backupDatabase</name>
                    <description>Back up server database.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code.</caption>
                    </result>
                </function>
                <function>
                    <name>logLevel</name>
                    <description>Get or set server log level.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>id</name>
                            <description>Log id</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>0</name>
                                    <description>Main server log</description>
                                </value>
                                <value>
                                    <name>2</name>
                                    <description>Http log</description>
                                </value>
                                <value>
                                    <name>3</name>
                                    <description>Transaction log</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>value</name>
                            <description>Target value for log level. More detailed level includes all less detailed levels.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>None</name>
                                    <description>Disable log.</description>
                                </value>
                                <value>
                                    <name>Always</name>
                                    <description>Log only the most important messages.</description>
                                </value>
                                <value>
                                    <name>Error</name>
                                    <description>Log errors.</description>
                                </value>
                                <value>
                                    <name>Warning</name>
                                    <description>Log warnings.</description>
                                </value>
                                <value>
                                    <name>Info</name>
                                    <description>Log information messages.</description>
                                </value>
                                <value>
                                    <name>Debug</name>
                                    <description>Log debug messages.</description>
                                </value>
                                <value>
                                    <name>Debug2</name>
                                    <description>Log additional debug messages.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result/>
                </function>
                <function>
                    <name>aggregator</name>
                    <description>This function allows to execute several requests with json content type and returns result as a single JSON object</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>exec_cmd</name>
                            <description>
                              HTTP url path to execute. This parameter could be repeated several times to execute several nested methods.
                              All additions parameters after current "exec_cmd" and before next "exec_cmd" are passed as parameters
                              to the nested method.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Merged JSON data from nested methods.</caption>
                    </result>
                </function>
                <function>
                    <name>systemSettings</name>
                    <description>Get or set global system settings. If called with no arguments, just returns list of all system settings with their values</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>{param name}</name>
                            <description>name of system parameter. E.g., ec2AliveUpdateIntervalSec</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>{param value}</name>
                            <description>New value for the specified parameter</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result/>
                </function>
                <function proprietary="true">
                    <name>execute</name>
                    <description>Execute any script from subfolder "scripts" of media server. Script name provides directly in a URL path like "/api/execute/script1.sh".
                                 All URL parameters are passed directly to a script as an parameters.
                    </description>
                    <permissions>Administrator.</permissions>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code.</caption>
                    </result>
                </function>
                <function proprietary="true">
                    <name>scriptList</name>
                    <description>Return list of scripts to execute.</description>
                    <permissions>Administrator.</permissions>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON object with string list.</caption>
                    </result>
                </function>
                <function>
                    <name>createEvent</name>
                    <description>
                        Using this method it is possible to trigger a generic event in the system
                        from a 3rd party system. Such event will be handled and logged according
                        to current event rules. Parameters of the generated event, such as
                        "source", "caption" and "description", are intended to be analyzed by these
                        rules.
                        <tt>
                          <br/>Example:
                          <pre><![CDATA[
http://127.0.0.1:7001/api/createEvent?timestamp=2016-09-16T16:02:41Z&caption=CreditCardUsed&metadata={"cameraRefs":["3A4AD4EA-9269-4B1F-A7AA-2CEC537D0248","3A4AD4EA-9269-4B1F-A7AA-2CEC537D0240"]}
                          ]]></pre>
                          This example triggers a generic event informing the system that a
                          credit card has been used on September 16, 2016 at 16:03:41 UTC in a POS
                          terminal being watched by the two specified cameras.
                        </tt>
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>timestamp</name>
                            <description>
                              Event date and time (as a string containing time in milliseconds since epoch,
                              or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).
                              If "timestamp" is absent, the current server date and time is used.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>source</name>
                            <description>
                                Name of the device which has triggered the event. It can be used
                                in a filter in event rules to assign different actions to different
                                devices. Also, the user could see this name in the notifications
                                panel. Example: "POS terminal 5".
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>caption</name>
                            <description>Short event description. It can be used in a filter in
                                event rules to assign actions depending on this text.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>description</name>
                            <description>Long event description. It can be used as a filter in
                                event rules to assign actions depending on this text.
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>metadata</name>
                            <description>
                                Additional information associated with the event, in the
                                form of a JSON object. Currently this object can specify the only
                                field "cameraRefs", but other fields could be added in the future.
                                <ul>
                                    <li>"cameraRefs" specifies a number of cameras which are linked
                                        to the event (e.g. the event will appear on their
                                        timelines), in the form of a list of camera ids (can be
                                        obtained from "id" field via /ec2/getCamerasEx or
                                        /ec2/getCameras?extraFormatting).
                                    </li>
                                </ul>
                            </description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>state</name>
                            <description>Generic events can be used either with "long" actions like
                                "do recording", or instant actions like "send email". This
                                parameter should be specified in case "long" actions are going to
                                be used with generic events.
                            </description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>Active</name>
                                    <description>Generic event is considered a "long" event. It
                                        transits to the "active" state. "Long" actions will
                                        continue executing until the generic event transits to the
                                        "inactive" state.
                                    </description>
                                </value>
                                <value>
                                    <name>Inactive</name>
                                    <description>A "long" action associated with this generic event
                                        in event rules will stop.
                                    </description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>JSON result with error code.</caption>
                    </result>
                </function>
                <function>
                    <name>iflist</name>
                    <description>Get network settings (list of interfaces) for the server.
                        Can be called only if server flags include "SF_IfListCtrl"
                        (server flags can be obtained via /ec2/getMediaServersEx in "flags" field).
                    </description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>List of objects with interface parameters.</caption>
                        <params>
                          <param>
                            <name>name</name>
                            <description>Interface name.</description>
                          </param>
                          <param>
                            <name>ipAddr</name>
                            <description>IP address with dot-separated decimal components.</description>
                          </param>
                          <param>
                            <name>netMask</name>
                            <description>Network mask with dot-separated decimal components.</description>
                          </param>
                          <param>
                            <name>mac</name>
                            <description>MAC address with colon-separated upper-case hex components.</description>
                          </param>
                          <param>
                            <name>gateway</name>
                            <description>IP address of the gateway with dot-separated decimal components. Can be empty.</description>
                          </param>
                          <param>
                            <name>dhcp</name>
                            <description></description>
                            <values>
                                <value>
                                    <name>false</name>
                                    <description>DHCP is not used, IP address and other parameters
should be specified in the respective JSON fields.</description>
                                </value>
                                <value>
                                    <name>true</name>
                                    <description>IP address and other parameters assigned via DHCP,
the respective JSON fields can be empty.</description>
                                </value>
                            </values>
                          </param>
                          <param>
                            <name>extraParams</name>
                            <description>JSON object with data in the internal format.</description>
                          </param>
                          <param>
                            <name>dns_servers</name>
                            <description>Space-separated list of IP addresses with dot-separated decimal components.</description>
                          </param>
                        </params>
                    </result>
                </function>
                <function>
                    <name>ifconfig</name>
                    <description>Set new network settings (list of interfaces) for the server.
                        Can be called only if server flags include "SF_IfListCtrl"
                        (server flags can be obtained via /ec2/getMediaServersEx in "flags" field).
<p>
Parameters should be passed as a JSON array of objects in POST message body with
content type "application/json". Example of such object can be seen in
the result of GET /api/iflist function.
</p>
                    </description>
                    <permissions>Administrator.</permissions>
                    <method>POST</method>
                    <params>
                      <param>
                        <name>name</name>
                        <description>Interface name.</description>
                        <optional>false</optional>
                      </param>
                      <param>
                        <name>ipAddr</name>
                        <description>IP address with dot-separated decimal components.</description>
                        <optional>false</optional>
                      </param>
                      <param>
                        <name>netMask</name>
                        <description>Network mask with dot-separated decimal components.</description>
                        <optional>false</optional>
                      </param>
                      <param>
                        <name>mac</name>
                        <description>MAC address with colon-separated upper-case hex components.</description>
                        <optional>false</optional>
                      </param>
                      <param>
                        <name>gateway</name>
                        <description>IP address of the gateway with dot-separated decimal components. Can be empty.</description>
                        <optional>false</optional>
                      </param>
                      <param>
                        <name>dhcp</name>
                        <description></description>
                        <optional>false</optional>
                        <values>
                            <value>
                                <name>false</name>
                                <description>DHCP is not used, IP address and other parameters
should be specified in the respective JSON fields.</description>
                            </value>
                            <value>
                                <name>true</name>
                                <description>IP address and other parameters assigned via DHCP,
the respective JSON fields can be empty.</description>
                            </value>
                        </values>
                      </param>
                      <param>
                        <name>extraParams</name>
                        <description>JSON object with data in the internal format.</description>
                        <optional>false</optional>
                      </param>
                      <param>
                        <name>dns_servers</name>
                        <description>Space-separated list of IP addresses with dot-separated decimal components.</description>
                        <optional>false</optional>
                      </param>
                    </params>
                </function>
                <function proprietary="true">
                    <name>settime</name>
                    <description>
                      Set current time on the server machine.
                      Can be called only if server flags include "SF_timeCtrl"
                      (server flags can be obtained via /ec2/getMediaServersEx in "flags" field).
                    </description>
                    <permissions>Administrator.</permissions>
                    <method>GET</method>
                    <params>
                      <param>
                        <name>timezone</name>
                        <description>Time zone identifier, can be obtained via /api/getTimeZones.</description>
                        <optional>true</optional>
                      </param>
                      <param>
                        <name>datetime</name>
                        <description>System date and time (as a string containing time in milliseconds since epoch,
                            or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                        <optional>false</optional>
                      </param>
                    </params>
                </function>
              <function>
                <name>setTime</name>
                <description>
                  Set current time on the server machine.
                  Can be called only if server flags include "SF_timeCtrl"
                  (server flags can be obtained via /ec2/getMediaServersEx in "flags" field).
<p>
                  Parameters should be passed as a JSON object in POST message body with
                  content type "application/json". Example of such object:
<pre><code>
{
    "dateTime": "2015-02-28T16:37:00",
    "timeZoneId": "Europe/Moscow"
}
</code></pre>
</p>
              </description>
                <permissions>Administrator.</permissions>
                <method>POST</method>
                <params>
                  <param>
                    <name>timeZoneId</name>
                    <description>Time zone identifier, can be obtained via /api/getTimeZones.</description>
                    <optional>true</optional>
                  </param>
                  <param>
                    <name>dateTime</name>
                    <description>Date and time (as string containing time in milliseconds since epoch,
                         or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                    <optional>false</optional>
                  </param>
                </params>
              </function>
              <function>
                <name>getTimeZones</name>
                <description>
                  Return the complete list of time zones supported by the server machine.
                </description>
                <method>GET</method>
                <params />
                <result>
                  <caption>JSON object with an error code, error message, and the list of JSON objects in "reply" field:</caption>
                  <params>
                    <param>
                      <name>comment</name>
                      <description>Time zone description in English.</description>
                    </param>
                    <param>
                      <name>displayName</name>
                      <description>Time zone verbose name in English.</description>
                    </param>
                    <param>
                      <name>hasDaylightTime</name>
                      <description>Whether the time zone has the DST feature.</description>
                      <values>
                        <value>
                          <name>false</name>
                          <description />
                        </value>
                        <value>
                          <name>true</name>
                          <description />
                        </value>
                      </values>
                    </param>
                    <param>
                      <name>id</name>
                      <description>Time zone identifier, to be used for e.g. /api/setTime.</description>
                    </param>
                    <param>
                      <name>isDaylightTime</name>
                      <description>Whether the time zone is on DST right now. To be reported properly,
                          the server machine should have the correct current time set.</description>
                      <values>
                        <value>
                          <name>false</name>
                          <description />
                        </value>
                        <value>
                          <name>true</name>
                          <description />
                        </value>
                      </values>
                    </param>
                    <param>
                      <name>offsetFromUtc</name>
                      <description>Time zone offset from UTC (in seconds).</description>
                    </param>
                  </params>
                </result>
              </function>
              <function>
                  <name>getNonce</name>
                  <description>
                      Return authentication parameters: "nonce" and "realm".
                  </description>
                  <method>GET</method>
                  <params />
                  <result>
                      <caption>A JSON object with an error code, error message, and the list of JSON objects in "reply" field:</caption>
                      <params>
                          <param>
                              <name>realm</name>
                              <description>A string token used in authentication methods as "realm".</description>
                          </param>
                          <param>
                              <name>nonce</name>
                              <description>A session key for the current user. The current server time is used as a nonce value, and the nonce is valid for about 5 minutes.</description>
                          </param>
                      </params>
                  </result>
              </function>
                <function>
                    <name>getHardwareIds</name>
                    <description>Return the list of Hardware Ids of the server.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with an error code, error message and a list of strings in "reply" field.</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Video API</groupName>
            <urlPrefix/>
            <groupDescription>
                This group contains information about accessing cameras" live video and footage.
            </groupDescription>
            <functions>
                <function>
                    <name>&lt;cameraId&gt;</name>
                    <caption>RTSP Streaming</caption>
                    <description>
                        Open RTSP video stream from a camera.
                        It is not exactly an API method but rather a URL format which may contain
                        any camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or MAC address (not
                        supported for certain cameras).
                        Example:
                        rtsp://&lt;server_ip&gt;:&lt;port&gt;/12AB42FD5912?pos=1235631&amp;resolution=240p
                    </description>
                    <method>PLAY</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>By default, the server opens a camera at the live position.
                                This parameter defines position in an archive
                                (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).
                                Position can be passed via standard RTSP attribute as well as via URL parameter</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>resolution</name>
                            <description>Turn on video transcoding to the specified resolution. Resolution string either may contain width and height (for instance 320x240) or
                                                        height only (for instance 240p)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotation</name>
                            <description>Rotate item. Can be 0, 90, 180 or 270 degrees. If the parameter is absent, video will be rotated to default value defined in a camera settings dialog.
                                         Parameter take place if video transcoding is activated (parameter codec and/or parameter resolution are presents.)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>codec</name>
                            <description>Defines video codec used for transcoding. Default value is H263.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>H263</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>H263p</name>
                                    <description>H263 plus format</description>
                                </value>
                                <value>
                                    <name>mpeg2video</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>mjpeg</name>
                                    <description>Motion JPEG</description>
                                </value>
                                <value>
                                    <name>mpeg4</name>
                                    <description>MPEG-4 part 2</description>
                                </value>
                                <value>
                                    <name>libvpx</name>
                                    <description>VP8 video codec</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>stream</name>
                            <description>Open high quality stream if parameter is 0 or low quality stream if parameter is 1.
                                         By default server auto detect preferred stream index based on destination resolution.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>speed</name>
                            <description>Playback speed. Only values in range [1..32] are supported. Default value is 1.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>RTSP video stream.</caption>
                    </result>
                </function>
                <function>
                    <name>media/&lt;cameraId&gt;.&lt;format&gt;</name>
                    <caption>HTTP Streaming</caption>
                    <description>
                        Open HTTP video stream from a camera.
                        It is not exactly an API method but rather a URL format which may contain
                        any camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or MAC address (not
                        supported for certain cameras).
                        Codec and stream format can be specified in URL parameters. Live stream and
                        archive can be downloaded. If required and possible, media stream
                        transcoding is performed on-the-fly. Stream format can be one of the
                        following: webm, mpegts, mpjpeg (motion jpeg).
                        Example:
                        http://&lt;server_ip&gt;:&lt;port&gt;/media/12AB42FD5912.webm
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>resolution</name>
                            <description>Video stream resolution. Example: 720x576, 1920x1080, 720p, 1080p. By default, 640x480 is used</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>pos</name>
                            <description>If present and not equal to &lt;now&gt;, specifies archive stream start position
                                (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).
                                Otherwise, LIVE stream is provided</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>endPos</name>
                            <description>If present, specifies archive stream end position
                                (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).
                                It is used only if "pos" parameter is present.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotation</name>
                            <description>Rotate item. Can be 0, 90, 180 or 270 degrees. If the parameter is absent, video will be rotated to default value defined in a camera settings dialog.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>sfd</name>
                            <description>Stand Frame Duration. If the parameter is present, video speed is limited by real time.</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rt</name>
                            <description>Turn on realtime optimization. It will drop some frames if not enough CPU for realtime transcoding.</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in the requested format</caption>
                    </result>
                </function>
                <function>
                    <name>hls/&lt;cameraId&gt;.m3u</name>
                    <caption>HLS Streaming</caption>
                    <description>
                        Open HTTP Live Streaming (HLS) video stream from a camera.
                        It is not exactly an API method but rather a URL format which may contain
                        any camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or MAC address (not
                        supported for certain cameras).
                        This protocol is supported by iOS-based devices (iPhone, iPad).
                        Example:
                        http://&lt;server_ip&gt;:&lt;port&gt;/hls/12AB42FD5912.m3u
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>Camera archive position to open
                                (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>hi</name>
                            <description>If specified, only hi quality is available on streaming session. If neither &lt;hi&gt; nor &lt;lo&gt; is specified than HLS client is allowed to perform dynamic stream switching (to fit in available bandwidth and compensate for traffic congestion)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>lo</name>
                            <description>If specified, only low quality is available on streaming session. If neither &lt;hi&gt; nor &lt;lo&gt; is specified than HLS client is allowed to perform dynamic stream switching (to fit in available bandwidth and compensate for traffic congestion)</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in mpeg-2/ts format</caption>
                    </result>
                </function>
                <function>
                    <name>hls/&lt;cameraId&gt;.&lt;format&gt;</name>
                    <caption>Direct download</caption>
                    <description>
                        Download fragment of a camera archive, identified by its start time and
                        duration.
                        It is not exactly an API method but rather a URL format which may contain
                        any camera id (can be obtained from "id" field via /ec2/getCamerasEx or /ec2/getCameras?extraFormatting) or MAC address (not
                        supported for certain cameras).
                        Fragment can be downloaded in mpeg-2/ts (.ts) or Matroska (.mkv) format.
                        No transcoding is performed. Stream format can be one of following: ts, mkv.
                        Example:
                        http://&lt;server_ip&gt;:&lt;port&gt;/hls/12AB42FD5912.mkv?startDatetime=2015-02-05T19:00&amp;duration=10
                    </description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>Fragment start time
                                (as a string containing time in milliseconds since epoch,
                                or a local time formatted like <code>"<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>mm</i>:<i>ss</i>.<i>zzz</i>"</code> - the format is auto-detected).</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>duration</name>
                            <description>Fragment length in seconds</description>
                            <optional>false</optional>
                        </param>
                        <param>
                            <name>hi</name>
                            <description>Return high quality stream</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>lo</name>
                            <description>Return low quality stream</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in the requested format</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Proxy API</groupName>
            <urlPrefix>/proxy</urlPrefix>
            <groupDescription>
                This group contains information requests proxy from one server to another.
            </groupDescription>
            <functions>
                <function>
                    <name>&lt;protocol&gt;/&lt;serverGuid&gt;/&lt;apiRequest&gt;</name>
                    <description>
                        Proxy methods allows to send any request to any server using the existing public connection. Can also be used to get video streams.
                        Example: rtsp://10.0.2.1/proxy/rtsp/{72934575-ceb7-54bb-23a0-84b81cf1d3f1}/12AB42FD5912?pos=1235631&amp;resolution=240p
                        Example: http://10.0.2.1/proxy/http/{72934575-ceb7-54bb-23a0-84b81cf1d3f1}/showLog
                    </description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>Result of the target API request.</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Authentication</groupName>
            <urlPrefix/>
            <groupDescription>
                Request authentication methods supported by server.
            </groupDescription>
            <functions>
                <function>
                    <name>HTTP Basic/Digest authentication</name>
                    <description>
                        Server is fully conformant with the authentication defined in rfc2617 (https://tools.ietf.org/html/rfc2617).
                    </description>
                    <method/>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>Cookie-based authentication</name>
                    <description>
                        Cookie authorization scheme allows to avoid standard login/password dialog in web-applications.<br/>
                        It provides you a way to replace it with your own dialog.<br/>
                        It works mostly like sessions, but is a bit more secure because it doesn't send user's password over HTTP.<br/>
                        <ul>
                        <li>To check authentication:
                            <ol>
                                <li>Call <code>GET /api/getCurrentUser</code></li>
                                <li>You will get 401 (Unauthorised) in case you need authorization</li>
                                <li>You will get 200 (OK) and the user object otherwise</li>
                            </ol>
                        </li>
                        <li>To log in:
                            <ol>
                                <li>Call <code>GET /api/getNonce</code></li>
                                <li>In response you'll get a JSON object with <i>realm</i> and <i>nonce</i> (nonce is a session key for this user)</li>
                                <li>Calculate authentication hash <i>auth_digest</i>, using realm and nonce (see algorithm below)</li>
                                <li>Call <code>POST /api/cookieLogin</code> and pass the "auth" parameter in the request</li>
                                <li>Server will check authentication and set session cookies</li>
                            </ol>
                        </li>
                        <li>To log out:
                            <ol>
                                <li>Call <code>POST /api/cookieLogout</code></li>
                                <li>Server will clear the session cookies</li>
                            </ol>
                        </li>
                        </ul>
                    </description>
                    <method/>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>URL-based authentication</name>
                    <description>
                        You can add the "auth" parameter to the URL query section.
                        <ul>
                            <li>Call <code>/api/getNonce</code> to get <i>realm</i> and <i>nonce</i> from the server (the current server time is used as a nonce value, and the nonce is valid for about 5 minutes)</li>
                            <li>Calculate the authentication hash <i>auth_digest</i>, using realm and nonce (see algorithm below)</li>
                            <li>Specify the authentication hash in the URL parameter: http://127.0.0.1:7001/ec2/method?...&amp;auth=<i>auth_digest</i> </li>
                        </ul>
                    </description>
                    <method/>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>Calculating authentication hash</name>
                    <description>
                        For URL-based authentication and cookie-based authentication you need to calculate the hash manually, using the following algorithm:
                        <ul>
                            <li>Call <code>GET /api/getNonce</code></li>
                            <li>In response you'll get a JSON object with <i>realm</i> and <i>nonce</i></li>
                            <li>Translate user's <i>username</i> to the lower case</li>
                            <li>Check the required <i>method</i> ("GET" for HTTP requests, "PLAY" for RTSP)</li>
                            <li><code>digest = md5_hex(user_name + ":" + realm + ":" + password)</code></li>
                            <li><code>partial_ha2 = md5_hex(method + ":")</code></li>
                            <li><code>simplified_ha2 = md5_hex(digest + ":" + nonce + ":" + partial_ha2)</code></li>
                            <li><code>auth_digest = base64(user_name + ":" + nonce + ":" + simplified_ha2)</code></li>
                            <li>Here <i>auth_digest</i> is the required authentication hash</li>
                        </ul>
                    </description>
                    <method/>
                    <params/>
                    <result/>
                </function>
            </functions>
        </group>
    </groups>
</apidoc>
