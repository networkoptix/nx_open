<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="api.xsl"?>
<apidoc xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="api.xsd">
    <groups>
        <group>
            <groupName>Media server API</groupName>
            <urlPrefix>/api</urlPrefix>
            <groupDescription>This group contains functions related to single media
                server</groupDescription>
            <functions>
                <function>
                    <name>execAction</name>
                    <description>Execute business action. Action data should bin in a internal
                        binary format. This method is going to be refactor at next
                        version.</description>
                    <method>POST</method>
                    <params/>
                    <result>
                        <caption>Return XML with 'OK' message or error code</caption>
                    </result>
                </function>
                <function>
                    <name>events</name>
                    <description>Returns event log</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>from</name>
                            <description>Start of time period at ms since 1.1.1970 (UTC
                                format).</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>to</name>
                            <description>End of time period at ms since 1.1.1970 (UTC format).</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>event</name>
                            <description>Event type.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>action</name>
                            <description>Action type.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>brule_id</name>
                            <description>Business rule id.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return media server event log in proprietary binary format</caption>
                    </result>
                </function>
                <function>
                    <name>doCameraDiagnosticsStep</name>
                    <description>Performs camera diagnostics.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>camera id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>type</name>
                            <description>Diagnostics to perform.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>mediaServerAvailability</name>
                                    <description>Checks media server availability</description>
                                </value>
                                <value>
                                    <name>cameraAvailability</name>
                                    <description>Checks if camera is accessible from media
                                        server</description>
                                </value>
                                <value>
                                    <name>mediaStreamAvailability</name>
                                    <description>Checks if camera media stream can be
                                        opened</description>
                                </value>
                                <value>
                                    <name>mediaStreamIntegrity</name>
                                    <description>Checks additional media stream
                                        parameters</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return XML with parameter value</caption>
                    </result>
                </function>
                <function>
                    <name>setCameraParam</name>
                    <description>Sets values of several camera parameters. This parameters are used
                        on a advanced Tab in camera settings. For instance: brightness, contrast
                        e.t.c.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>camera unique id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>&lt;any name&gt;</name>
                            <description>Parameter for camera to set. Request can contains one or
                                more parameters to set.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns OK if all parameters have been set, otherwise returns error 500
                        (Internal server error) and result of setting for every param.</caption>
                    </result>
                </function>
                <function>
                    <name>getCameraParam</name>
                    <description>Read camera parameters. For instance: brightness, contrast e.t.c.
                        Parameters to read should be specified.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>camera unique id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>&lt;any name&gt;</name>
                            <description>Parameter name to read. Request can contains one or more
                                parameters.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns required parameter values in form of paramName=paramValue, each
                        param on new line</caption>
                    </result>
                </function>
                <function>
                    <name>image</name>
                    <description>Return image from camera</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>physicalId</name>
                            <description>camera unique id</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>time</name>
                            <description>required image time. Microseconds since 1970 UTC or string
                                in format 'YYYY-MM-DDThh24:mi:ss.zzz'. Date format is auto detected.
                                Also, addition special values are allowed.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>YYYY-MM-DDThh24:mi:ss.zzz</name>
                                    <description>Human readable date format</description>
                                </value>
                                <value>
                                    <name>[0..9]*</name>
                                    <description>Microseconds since 1970 UTC</description>
                                </value>
                                <value>
                                    <name>NOW</name>
                                    <description>Live position (no frame is returned if camera is
                                        offline</description>
                                </value>
                                <value>
                                    <name>LATEST</name>
                                    <description>last frame from camera (return live position or
                                        last frame from archive if camera is offline)</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Image format. Default value 'jpeg'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>jpeg</name>
                                    <description>JPEG image format</description>
                                </value>
                                <value>
                                    <name>png</name>
                                    <description>PNG image format</description>
                                </value>
                                <value>
                                    <name>bmp</name>
                                    <description>BMP image format</description>
                                </value>
                                <value>
                                    <name>tiff</name>
                                    <description>TIFF image format</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>method</name>
                            <description>Parameter defines method to search frame inside GOP
                                structure. Default value 'before'. Parameter not used for Motion
                                jpeg video codec.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>before</name>
                                    <description>Returns nearest I-frame before specified
                                        time.</description>
                                </value>
                                <value>
                                    <name>after</name>
                                    <description>Returns nearest I-frame after specified
                                        time.</description>
                                </value>
                                <value>
                                    <name>exact</name>
                                    <description>Get image for exact time position. It required more
                                        CPU.</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>height</name>
                            <description>Required image height. By default image have same size as
                                source video stream.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>width</name>
                            <description>Required image width. By default image have same size as
                                source video stream. If only width or height is specified other
                                parameter is auto detected. Video aspect ratio is not
                                changed.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns image.</caption>
                    </result>
                </function>
                <function>
                    <name>showLog</name>
                    <description>Returns tail of the server log file</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>lines</name>
                            <description>Display last N log lines.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Tail of the server log file in text format</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/search</name>
                    <description>Search cameras in manual mode</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>start_ip</name>
                            <description>First ip address in range to scan.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>end_ip</name>
                            <description>Last ip address in range to scan.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>port</name>
                            <description>Camera(s) port to check. Port is autodetected if parameter
                                is absent.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>user</name>
                            <description>Username for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Password for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with camera names, manufacturers and urls.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/status</name>
                    <description>Get manual addition progress.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>uuid</name>
                            <description>Process unique ID.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with progress value.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/stop</name>
                    <description>Stop manual addition progress.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>uuid</name>
                            <description>Process unique ID.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>manualCamera/add</name>
                    <description>Manual add camera(s). If several cameras are added, parameters
                        'url' and 'manufacturer' must be defined several times.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>Camera url returned by scan request.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>manufacturer</name>
                            <description>Camera manufacturer.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>user</name>
                            <description>Username for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Password for the cameras</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ping</name>
                    <description>Ping the server</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code, error string and module unique ID in case of successful ping.</caption>
                    </result>
                </function>
                <function>
                    <name>pingSystem</name>
                    <description>Ping the system.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>System URL to ping.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>System admin password.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with error code, error string and module information in case of successful ping.
                            Error string could be
                            empty in case of successful ping,
                            "FAIL" if the specified system is unreachable or there is no any system,
                            "UNAUTHORIZED" if the authentication credentials are invalid, and
                            "INCOMPATIBLE" if the found system has incompatible version or different customization.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>ptz/move</name>
                    <description>Start camera moving.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>xSpeed</name>
                            <description>rotation X velocity in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>ySpeed</name>
                            <description>rotation Y velocity in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>zoomSpeed</name>
                            <description>zoom velocity in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ptz/stop</name>
                    <description>Stop camera moving.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ptz/moveTo</name>
                    <description>Go to absolute position</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>xPos</name>
                            <description>Go to absolute X position in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>yPos</name>
                            <description>Go to absolute Y position in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>zoomPos</name>
                            <description>Go to absolute zoom position in range
                                [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ptz/getPosition</name>
                    <description>Return current camera position.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with camera position or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ptz/calibrate</name>
                    <description>calibrate moving speed (addition speed coefficient)</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>xSpeed</name>
                            <description>rotation X velocity in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>ySpeed</name>
                            <description>rotation Y velocity in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>zoomSpeed</name>
                            <description>zoom velocity in range [-1..+1]</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with OK message or error code.</caption>
                    </result>
                </function>
                <function>
                    <name>ptz/getCalibrate</name>
                    <description>Read current calibration settings</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>XML with calibration coefficients.</caption>
                    </result>
                </function>
                <function>
                    <name>ptz/getSpaceMapper</name>
                    <description>return JSON-serialized PTZ space mapper. This information contains
                        curves for camera FOV and zoom position and camera moving ranges. This
                        information used in advanced PTZ mode.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>res_id</name>
                            <description>Camera unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>return JSON-serialized PTZ space mapper.</caption>
                    </result>
                </function>
                <function>
                    <name>rebuildArchive</name>
                    <description>Start or stop rebuilding of media server archive.</description>
                    <method>POST</method>
                    <params>
                        <param>
                            <name>rebuild</name>
                            <description>'start' or 'stop' value.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Rebuild progress if no input param specified or XML with OK message or
                        error code.</caption>
                    </result>
                </function>
                <function>
                    <name>RecordedTimePeriods</name>
                    <description>Recorded chunk info by specified cameras.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>physicalId</name>
                            <description>Camera unique ID. Parameter can be used several times to
                                define a list of cameras.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>startTime</name>
                            <description>Start time of a time interval. Microseconds since 1970 UTC
                                or string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>endTime</name>
                            <description>End time of a time interval. Microseconds since 1970 UTC or
                                string in format 'YYYY-MM-DDThh24:mi:ss.zzz'. format is auto
                                detected.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>motionRegions</name>
                            <description>Match motion on a video by specified rect. Parameter can be
                                used several times.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>format</name>
                            <description>Data format. Allowed values: 'json', 'xml', 'txt', 'bin'.
                                Default value 'json'</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>detail</name>
                            <description>Chunk detail level, in microseconds. Time periods/chunks
                                that are shorter than the detail level are discarded. You can use
                                detail level as amount of microseconds per screen
                                pixel.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>periodsType</name>
                            <description>Chunk type.</description>
                            <optional>false</optional>
                            <values>
                                <value>
                                    <name>0</name>
                                    <description>All records</description>
                                </value>
                                <value>
                                    <name>1</name>
                                    <description>Only chunk with motion (parameter motionRegions required)</description>
                                </value>
                                <value>
                                    <name>2</name>
                                    <description>Bookmarks (reserverd for future use)</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Chunks data in requested format. Chunks are merged for all requested
                        cameras. Time and duration defined in UTC milliseconds. Response contains pairs [begin,duration]. Duration=-1 means last chunk is recording now.</caption>
                    </result>
                </function>
                <function>
                    <name>statistics</name>
                    <description>Returns server info: CPU usage, HDD usage e.t.c.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>XML data with statistics.</caption>
                    </result>
                </function>
                <function>
                    <name>storageSpace</name>
                    <description>Returns a list of all server storages.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>XML with server's storages.</caption>
                    </result>
                </function>
                <function>
                    <name>storageStatus</name>
                    <description>Check if specified folder can be used as media server
                        storage.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>path</name>
                            <description>Folder to check.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON data. 'OK' if specified folder may be used for writing on
                        mediaServer. Otherwise returns 'FAIL' </caption>
                    </result>
                </function>
                <function>
                    <name>gettime</name>
                    <description>Returns server UTC time and time zone</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON data.</caption>
                    </result>
                </function>
                <function>
                    <name>activateLicense</name>
                    <description>Activate new license and return license JSON data if success</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>key</name>
                            <description>License serial number</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON data.</caption>
                    </result>
                </function>
                <function>
                    <name>installUpdate</name>
                    <description>Updates server by the package contained in POST body</description>
                    <method>POST</method>
                    <params/>
                    <result>
                        <caption>JSON with error code
                        When all is OK errorString will be empty. In case of error errorString will contain:
                        UP_TO_DATE if the provided version is already installed;
                        INVALID_FILE if the provided file cannot be opened as a ZIP archive;
                        INCOMPATIBLE_SYSTEM if the update file is targeted for another system;
                        EXTRACTION_ERROR if some extraction problems were found (e.g. not enough space);
                        INSTALLATION_ERROR if the server couldn't execute installation script.</caption>
                    </result>
                </function>
                <function>
                    <name>onEvent</name>
                    <description>Process business event from external system. Reserved for future
                        use.</description>
                    <method>POST</method>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>discoveredPeers</name>
                    <description>Returns a list of the discovered peers.</description>
                    <method>GET</method>
                    <params/>
                    <result><caption>JSON with a list of the discovered peers</caption></result>
                </function>
                <function>
                    <name>restart</name>
                    <description>Restart the server.</description>
                    <method>GET</method>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>installUpdate</name>
                    <description>Install update from zip package which should be in the request body.</description>
                    <method>POST</method>
                    <params/>
                    <result/>
                </function>
                <function>
                    <name>moduleInformation</name>
                    <description>Get information about the server.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>allModules</name>
                            <description>Set it to true to get all modules from the system.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>JSON object with module information.</caption>
                    </result>
                </function>
                <function>
                    <name>moduleInformationAuthenticated</name>
                    <description>The same as moduleInformation but requires authentication. Useful to test connection.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON object with module information.</caption>
                    </result>
                </function>
                <function>
                    <name>routingInformation/connections</name>
                    <description>Get all connections established in the current system.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>HTML with connection list.</caption>
                    </result>
                </function>
                <function>
                    <name>routingInformation/cachedRoutes</name>
                    <description>Get a list of cached routes.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>HTML with route list.</caption>
                    </result>
                </function>
                <function>
                    <name>routingInformation/routeTo</name>
                    <description>Get the shortest route to the specified peer.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>target</name>
                            <description>GUID or host:port of the target.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>HTML with route.</caption>
                    </result>
                </function>
                <function>
                    <name>configure</name>
                    <description>Configure server parameters.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>systemName</name>
                            <description>New system name for the server.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>wholeSystem</name>
                            <description>Flag shows if the specified system name must be set to the all servers in the system.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>port</name>
                            <description>New listening port.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>New admin password.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                        <param>
                            <name>oldPassword</name>
                            <description>Old admin password.</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>
                            JSON with error code and flag "restartNeeded" that shows if the server must be restarted to apply settings.
                            Error string contains a hint to identify a problem: SYSTEM_NAME, PORT or PASSWORD.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>mergeSystems</name>
                    <description>Merge two systems.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>url</name>
                            <description>URL of one server in the system to join.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>password</name>
                            <description>Admin password of the target system.</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                        <param>
                            <name>takeRemoteSettings</name>
                            <description>Direction of the merge.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>true</name>
                                    <description>The current system will get system name and admin password of the target system.</description>
                                </value>
                                <value>
                                    <name>false</name>
                                    <description>The target system will get system name and admin password of the current system.</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>JSON with error code and error string.
                            Error string could be
                            empty in case of successful ping,
                            "FAIL" if the specified system is unreachable or there is no any system,
                            "UNAUTHORIZED" if the authentication credentials are invalid,
                            "INCOMPATIBLE" if the found system has incompatible version or different customization, and
                            "BACKUP_ERROR" if database backup could not been created.
                        </caption>
                    </result>
                </function>
                <function>
                    <name>backupDatabase</name>
                    <description>Backup server database.</description>
                    <method>GET</method>
                    <params/>
                    <result>
                        <caption>JSON with error code.</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>General API</groupName>
            <urlPrefix>/ec2</urlPrefix>
            <groupDescription>This group contains functions related to whole system (all media
                servers).</groupDescription>
            <functions>
                <function>
                    <name>getResourceTypes</name>
                    <description>Read all resource types. Resource type contain object type such as
                        'Server', 'Camera' e.t.c. Also, resource types contain addition information
                        for cameras such as maximum fps, resolution e.t.c</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getResourceParams</name>
                    <description>Read resource (camera, user or server) addition parameters (camera
                        firmware version e.t.c). List of parameters depends of resource
                        type.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>id</name>
                            <description>Resource unique ID</description>
                            <optional>false</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getMediaServersEx</name>
                    <description>Return media server list</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getCamerasEx</name>
                    <description>Read camera list</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>id</name>
                            <description>Media server unique ID</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Returns camera list data formatted in a requested format</caption>
						    <attributes>
							    <attribute> <name>addParams</name> <description>List of addition parameters for camera. This list can contain such information as full ONVIF url, camera maximum fps e.t.c</description>  </attribute>
							    <attribute> <name>audioEnabled</name> <description>Media server will push audio stream from a camera if parameter is true</description></attribute>
							    <attribute> <name>controlEnabled</name> <description>Media server will manage camera (change resolution, fps, create profiles e.t.c) if parameter if true</description></attribute> 
								<attribute><name>dewarpingParams</name> <description>Json string with dewarping parameters</description></attribute> 
								<attribute><name>groupId</name> <description>Internal group identifier. It is used for grouping channels for multi-channels cameras together. </description></attribute> 
								<attribute><name>groupName</name> <description>Group name. This name can be changed by user</description></attribute> 
								<attribute><name>id</name> <description>Object ID. All ID for all objects in a system is GUIDs</description></attribute> 
								<attribute><name>login</name> <description>Login for camera authentication</description></attribute> 
								<attribute><name>mac</name> <description>camera MAC address</description></attribute> 
								<attribute><name>manuallyAdded</name> <description>True if user added camera manually</description></attribute> 
								<attribute><name>maxArchiveDays</name> <description>Maximum archive duration in days for this camera. If value less or equal to zero, it is not used</description></attribute> 
								<attribute><name>minArchiveDays</name> <description>Minimum archive duration in days for this camera. If value less or equal to zero, it is not used</description></attribute> 
								<attribute><name>model</name> <description>Camera model</description></attribute> 
								<attribute><name>motionMask</name> <description>Camera's motion mask. This string defines several rects via ':' delimiter. Each rect is described by 5 digits: sensitivity, x,y(for left top corner), width, height</description></attribute> 
								<attribute><name>motionType</name> <description>If value is 'MT_SoftwareGrid' then media server determine motion, otherwise camera built-in motion will be used</description></attribute> 
								<attribute><name>name</name> <description>Camera name</description></attribute> 
								<attribute><name>parentId</name> <description>Camera's server ID</description></attribute> 
								<attribute><name>physicalId</name> <description>Camera unique identifier. This identifier is used in all requests related to a camera. For instance, in RTSP requests</description></attribute> 
								<attribute><name>password</name> <description>Password for camera authentication</description></attribute> 
								<attribute><name>scheduleEnabled</name> <description>Do record camera archive if true</description></attribute> 
								<attribute><name>scheduleTasks</name> <description>List of 'scheduleTask' objects with camera recording schedule.</description></attribute> 
								<attribute><name>secondaryStreamQuality</name> <description>Secondary stream quality. Possible values:'SSQualityLow', 'SSQualityMedium', 'SSQualityHigh', 'SSQualityDontUse' </description></attribute> 
								<attribute><name>status</name> <description>Camera status. Possible values are: 'Offline', 'Online', 'Recording'</description></attribute> 
								<attribute><name>statusFlags</name> <description>Usually this field is zero. Non zero value is used to mark that a lot of network issues was occurred with this camera</description></attribute> 
								<attribute><name>typeId</name> <description>Unique ID with camera's type. Camera's type can describe predefined information such as camera maximum resolution, fps e.t.c.
																	    Detailed type information can be obtained via 'getResourceTypes' request.</description></attribute> 
								<attribute><name>url</name> <description>Camera plain ip address or full http url if camera was added manually. Also, for multichannel encoders full url is used</description></attribute> 
								<attribute><name>vendor</name> <description>Camera manufacturer</description></attribute>
						    </attributes>
                    </result>
                </function>
                <function>
                    <name>getCameraHistoryItems</name>
                    <description>Read information about which server hold camera in some time
                        period. This information is used for archive play if camera was moved from
                        one media server to another.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getCameraBookmarkTags</name>
                    <description>Reserved for future use</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getBusinessRules</name>
                    <description>Return business rules</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getUsers</name>
                    <description>Return users registered in the system. User's password contain MD5
                        hash data with salt</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getVideowalls</name>
                    <description>Return list of video walls</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getLayouts</name>
                    <description>Return list of user layout</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>listDirectory</name>
                    <description>Return list of folders and files in a virtual FS stored inside
                        database. This function is used to add files (such audio for notifications)
                        to database.</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>Folder name in a virtual FS</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getStoredFile</name>
                    <description>Read file data from a virtual FS</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getSettings</name>
                    <description>Read general system settings such as email address
                        e.t.c</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getCurrentTime</name>
                    <description>Read current time</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getFullInfo</name>
                    <description>Read all data such as all media servers, cameras, users
                        e.t.c</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
                <function>
                    <name>getLicenses</name>
                    <description>Read license list</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>format</name>
                            <description>Data format. Default value: 'json'</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>ubjson</name>
                                    <description>universal binary json data format</description>
                                </value>
                                <value>
                                    <name>json</name>
                                    <description>json data format</description>
                                </value>
                                <value>
                                    <name>xml</name>
                                    <description>xml data format</description>
                                </value>
                                <value>
                                    <name>csv</name>
                                    <description>CSV data format. In case of hierarchical data only
                                        top level data will be provided</description>
                                </value>
                            </values>
                        </param>
                        <param>
                            <name>folder</name>
                            <description>File name</description>
                            <optional>true</optional>
                            <values/>
                        </param>
                    </params>
                    <result>
                        <caption>Return object in requested format</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>RTSP API</groupName>
            <urlPrefix/>
            <groupDescription>
							This group contains information about media server RTSP api.
							RTSP api is accessible on the same port as HTTP requests. To request video for camera use:
						</groupDescription>
            <functions>
                <function>
                    <name>&lt;physicalId&gt;</name>
                    <description>
										Open RTSP video from a camera. It is not an exact method name. It means that RTSP url may contain any camera unique ID. For instance:
										rtsp://&lt;server_ip&gt;:&lt;port&gt;/12AB42FD5912?pos=1235631&amp;resolution=240p
										</description>
                    <method>PLAY</method>
                    <params>
                        <param>
                            <name>pos</name>
                            <description>By default media server opens camera from live position. This parameter defines position in an archive in microseconds in a UTC format.
														Position can be passed via standard RTSP attribute as well as via URL parameter</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>resolution</name>
                            <description>Turn on video transcoding to the specified resolution. Resolution string either may contain width and height (for instance 320x240) or 
														height only (for instance 240p)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotation</name>
                            <description>Rotate item. Can be 0, 90, 180 or 270 degree. If parameter is absent, video will be rotated to default value defined in a camera settings dialog.
                                         Parameter take place if video transcoding is activated (parameter codec and/or parameter resolution are presents.)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>codec</name>
                            <description>Defines video codec used for transcoding. Default value H263.</description>
                            <optional>true</optional>
                            <values>
                                <value>
                                    <name>H263</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>H263p</name>
                                    <description>H263 plus format</description>
                                </value>
                                <value>
                                    <name>mpeg2video</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>mpjeg</name>
                                    <description/>
                                </value>
                                <value>
                                    <name>mpeg4</name>
                                    <description>MPEG-4 part 2</description>
                                </value>
                                <value>
                                    <name>libvpx</name>
                                    <description>VP8 video codec</description>
                                </value>
                            </values>
                        </param>
                    </params>
                    <result>
                        <caption>Return RTSP video stream</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Http Live Streaming (HLS)</groupName>
            <urlPrefix/>
            <groupDescription>
							This group contains information about accessing server's media streams with HLS protocol.
                            This protocol is supported by iOS-based devices (iPhone, iPad).
							HLS is available on the same port as HTTP and RTSP. To request video use:
			</groupDescription>
            <functions>
                <function>
                    <name>&lt;physicalId&gt;</name>
                    <description>
					    Url format for opening camera stream with HLS:
					    http://&lt;server_ip&gt;:&lt;port&gt;/hls/&lt;physicalId&gt;.m3u
					</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>startDatetime</name>
                            <description>Date format: YYYY-MM-DDTHH:MM:SSTZD (e.g., 1997-07-16T19:20:30+01:00). If present, camera archive is opened on specified position</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>startTimestamp</name>
                            <description>Same as &lt;startDatetime&gt;, but contains number of micro seconds from epoch (1970-01-01 00:00 UTC)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>hi</name>
                            <description>If specified, only hi quality is available on streaming session. If neither &lt;hi&gt; nor &lt;lo&gt; is specified than HLS client is allowed to perform dynamic stream switching (to fit in available bandwidth and compensate for traffic congestion)</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>lo</name>
                            <description>If specified, only low quality is available on streaming session. If neither &lt;hi&gt; nor &lt;lo&gt; is specified than HLS client is allowed to perform dynamic stream switching (to fit in available bandwidth and compensate for traffic congestion)</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in mpeg-2/ts format</caption>
                    </result>
                </function>
            </functions>
        </group>
        <group>
            <groupName>Progressive downloading</groupName>
            <urlPrefix>media</urlPrefix>
            <groupDescription>
                Progressive downloading is method of receiving media stream using HTTP protocol. Codec and stream format can be specified in url parameters.
                Live stream and archive can be downloaded. If required, media stream transcoding is performed on-the-fly
            </groupDescription>
            <functions>
                <function>
                    <name>&lt;physicalId&gt;</name>
                    <description>
					    Url format:
					    http://&lt;server_ip&gt;:&lt;port&gt;/media/&lt;physicalId&gt;.&lt;format&gt;
                        Stream format can be one of following: webm, mpegts, mp4, 3gp, mpjpeg (motion jpeg)
					</description>
                    <method>GET</method>
                    <params>
                        <param>
                            <name>resolution</name>
                            <description>Video stream resolution. Example: 720x576, 1920x1080, 720p, 1080p. By default, 640x480 is used</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>pos</name>
                            <description>If present and not equal to &lt;now&gt;, specifies archive stream start positions in milliseconds from epoch (1970-01-01 00:00, UTC). Otherwise, LIVE stream is provided</description>
                            <optional>true</optional>
                        </param>
                        <param>
                            <name>rotation</name>
                            <description>Rotate item. Can be 0, 90, 180 or 270 degree. If parameter is absent, video will be rotated to default value defined in a camera settings dialog</description>
                            <optional>true</optional>
                        </param>
                    </params>
                    <result>
                        <caption>Video stream in requested format</caption>
                    </result>
                </function>
            </functions>
        </group>
    </groups>
</apidoc>
