#include "lite_client_layout_helper.h"

#include <core/resource_management/resource_pool.h>
#include <core/resource_management/resource_properties.h>
#include <core/resource_management/resources_changes_manager.h>
#include <core/resource/media_server_resource.h>
#include <core/resource/layout_resource.h>
#include <core/resource/camera_resource.h>

class QnLiteClientLayoutHelperPrivate: public QObject
{
    QnLiteClientLayoutHelper* q_ptr;
    Q_DECLARE_PUBLIC(QnLiteClientLayoutHelper)

public:
    QnLiteClientLayoutHelperPrivate(QnLiteClientLayoutHelper* parent);

public:
    QnLayoutResourcePtr layout;
};

QnLiteClientLayoutHelper::QnLiteClientLayoutHelper(QObject* parent):
    base_type(parent),
    d_ptr(new QnLiteClientLayoutHelperPrivate(this))
{
}

QnLiteClientLayoutHelper::~QnLiteClientLayoutHelper()
{
}

QString QnLiteClientLayoutHelper::layoutId() const
{
    Q_D(const QnLiteClientLayoutHelper);
    return d->layout ? d->layout->getId().toString() : QString();
}

void QnLiteClientLayoutHelper::setLayoutId(const QString& layoutId)
{
    Q_D(QnLiteClientLayoutHelper);
    setLayout(qnResPool->getResourceById<QnLayoutResource>(QnUuid::fromStringSafe(layoutId)));
}

QnLayoutResourcePtr QnLiteClientLayoutHelper::layout() const
{
    Q_D(const QnLiteClientLayoutHelper);
    return d->layout;
}

void QnLiteClientLayoutHelper::setLayout(const QnLayoutResourcePtr& layout)
{
    Q_D(QnLiteClientLayoutHelper);
    if (d->layout == layout)
        return;

    d->layout = layout;
    emit layoutChanged();
}

QnLayoutProperties::DisplayMode QnLiteClientLayoutHelper::displayMode() const
{
    Q_D(const QnLiteClientLayoutHelper);

    if (!d->layout)
        return QnLayoutProperties::DisplayMode::SingleCamera;

    return static_cast<QnLayoutProperties::DisplayMode>(
        d->layout->getProperty(QnLayoutProperties::kDisplayMode).toInt());
}

void QnLiteClientLayoutHelper::setDisplayMode(QnLayoutProperties::DisplayMode displayMode)
{
    Q_D(QnLiteClientLayoutHelper);

    if (!d->layout)
        return;

    d->layout->setProperty(
        QnLayoutProperties::kDisplayMode, QString::number(static_cast<int>(displayMode)));

    propertyDictionary->saveParams(d->layout->getId());
}

QString QnLiteClientLayoutHelper::singleCameraId() const
{
    Q_D(const QnLiteClientLayoutHelper);

    if (!d->layout)
        return QString();

    return d->layout->getProperty(QnLayoutProperties::kSingleCamera);
}

void QnLiteClientLayoutHelper::setSingleCameraId(const QString& cameraId)
{
    Q_D(QnLiteClientLayoutHelper);

    if (!d->layout)
        return;

    d->layout->setProperty(QnLayoutProperties::kSingleCamera, cameraId);

    propertyDictionary->saveParams(d->layout->getId());
}

QString QnLiteClientLayoutHelper::cameraIdOnCell(int x, int y) const
{
    Q_D(const QnLiteClientLayoutHelper);

    if (!d->layout)
        return QString();

    const auto items = d->layout->getItems();
    const auto it = std::find_if(items.begin(), items.end(),
        [x, y](const QnLayoutItemData& item)
        {
            return item.combinedGeometry.x() == x && item.combinedGeometry.y() == y;
        });

    if (it == items.end())
        return QString();

    return it->resource.id.toString();
}

void QnLiteClientLayoutHelper::setCameraIdOnCell(const QString& cameraId, int x, int y)
{
    Q_D(QnLiteClientLayoutHelper);

    if (!d->layout)
        return;

    const auto id = QnUuid::fromStringSafe(cameraId);
    const auto camera = qnResPool->getResourceById<QnVirtualCameraResource>(id);

    auto items = d->layout->getItems();
    auto it = std::find_if(items.begin(), items.end(),
        [x, y](const QnLayoutItemData& item)
        {
            return item.combinedGeometry.x() == x && item.combinedGeometry.y() == y;
        });

    if (it == items.end())
    {
        if (id.isNull() || camera.isNull())
            return;

        QnLayoutItemData item;
        item.uuid = QnUuid::createUuid();
        item.resource.id = id;
        item.resource.uniqueId = camera->getUniqueId();
        item.combinedGeometry = QRectF(x, y, 1, 1);
        d->layout->addItem(item);
    }
    else
    {
        if (id.isNull() || camera.isNull())
        {
            d->layout->removeItem(*it);
        }
        else
        {
            it->resource.id = id;
            it->resource.uniqueId = camera->getUniqueId();
            d->layout->updateItem(it->uuid, *it);
        }
    }

    qnResourcesChangesManager->saveLayout(d->layout, [](const QnLayoutResourcePtr&){});
}

QnLayoutResourcePtr QnLiteClientLayoutHelper::createLayoutForServer(const QnUuid& serverId)
{
    const auto server = qnResPool->getResourceById<QnMediaServerResource>(serverId);
    if (!server)
        return QnLayoutResourcePtr();

    auto layout = QnLayoutResourcePtr(new QnLayoutResource());
    layout->setId(QnUuid::createUuid());
    layout->setParentId(serverId);
    layout->setName(server->getName());

    qnResPool->markLayoutAutoGenerated(layout);
    qnResPool->addResource(layout);
    qnResourcesChangesManager->saveLayout(layout, [](const QnLayoutResourcePtr&){});

    return layout;
}

QnLayoutResourcePtr QnLiteClientLayoutHelper::findLayoutForServer(const QnUuid& serverId)
{
    if (serverId.isNull())
        return QnLayoutResourcePtr();

    const auto resources = qnResPool->getResourcesByParentId(serverId);
    const auto it = std::find_if(resources.begin(), resources.end(),
        [](const QnResourcePtr& resource)
        {
            const auto layout = resource.dynamicCast<QnLayoutResource>();
            return !layout.isNull();
        });

    if (it == resources.end())
        return QnLayoutResourcePtr();

    return it->staticCast<QnLayoutResource>();
}

QnLiteClientLayoutHelperPrivate::QnLiteClientLayoutHelperPrivate(QnLiteClientLayoutHelper* parent):
    QObject(parent),
    q_ptr(parent)
{
}
