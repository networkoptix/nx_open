// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CameraServerItem.pb.h"

@implementation CameraServerItemRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CameraServerItemRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CameraServerItem ()
@property (strong) NSString* physicalId;
@property (strong) NSString* serverGuid;
@property int64_t timestamp;
@end

@implementation CameraServerItem

- (BOOL) hasPhysicalId {
  return !!hasPhysicalId_;
}
- (void) setHasPhysicalId:(BOOL) value {
  hasPhysicalId_ = !!value;
}
@synthesize physicalId;
- (BOOL) hasServerGuid {
  return !!hasServerGuid_;
}
- (void) setHasServerGuid:(BOOL) value {
  hasServerGuid_ = !!value;
}
@synthesize serverGuid;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (id) init {
  if ((self = [super init])) {
    self.physicalId = @"";
    self.serverGuid = @"";
    self.timestamp = 0L;
  }
  return self;
}
static CameraServerItem* defaultCameraServerItemInstance = nil;
+ (void) initialize {
  if (self == [CameraServerItem class]) {
    defaultCameraServerItemInstance = [[CameraServerItem alloc] init];
  }
}
+ (CameraServerItem*) defaultInstance {
  return defaultCameraServerItemInstance;
}
- (CameraServerItem*) defaultInstance {
  return defaultCameraServerItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPhysicalId) {
    return NO;
  }
  if (!self.hasServerGuid) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhysicalId) {
    [output writeString:1 value:self.physicalId];
  }
  if (self.hasServerGuid) {
    [output writeString:2 value:self.serverGuid];
  }
  if (self.hasTimestamp) {
    [output writeInt64:3 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPhysicalId) {
    size += computeStringSize(1, self.physicalId);
  }
  if (self.hasServerGuid) {
    size += computeStringSize(2, self.serverGuid);
  }
  if (self.hasTimestamp) {
    size += computeInt64Size(3, self.timestamp);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CameraServerItem*) parseFromData:(NSData*) data {
  return (CameraServerItem*)[[[CameraServerItem builder] mergeFromData:data] build];
}
+ (CameraServerItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CameraServerItem*)[[[CameraServerItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CameraServerItem*) parseFromInputStream:(NSInputStream*) input {
  return (CameraServerItem*)[[[CameraServerItem builder] mergeFromInputStream:input] build];
}
+ (CameraServerItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CameraServerItem*)[[[CameraServerItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CameraServerItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CameraServerItem*)[[[CameraServerItem builder] mergeFromCodedInputStream:input] build];
}
+ (CameraServerItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CameraServerItem*)[[[CameraServerItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CameraServerItem_Builder*) builder {
  return [[CameraServerItem_Builder alloc] init];
}
+ (CameraServerItem_Builder*) builderWithPrototype:(CameraServerItem*) prototype {
  return [[CameraServerItem builder] mergeFrom:prototype];
}
- (CameraServerItem_Builder*) builder {
  return [CameraServerItem builder];
}
- (CameraServerItem_Builder*) toBuilder {
  return [CameraServerItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasPhysicalId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"physicalId", self.physicalId];
  }
  if (self.hasServerGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverGuid", self.serverGuid];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CameraServerItem class]]) {
    return NO;
  }
  CameraServerItem *otherMessage = other;
  return
      self.hasPhysicalId == otherMessage.hasPhysicalId &&
      (!self.hasPhysicalId || [self.physicalId isEqual:otherMessage.physicalId]) &&
      self.hasServerGuid == otherMessage.hasServerGuid &&
      (!self.hasServerGuid || [self.serverGuid isEqual:otherMessage.serverGuid]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasPhysicalId) {
    hashCode = hashCode * 31 + [self.physicalId hash];
  }
  if (self.hasServerGuid) {
    hashCode = hashCode * 31 + [self.serverGuid hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CameraServerItem_Builder()
@property (strong) CameraServerItem* result;
@end

@implementation CameraServerItem_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CameraServerItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CameraServerItem_Builder*) clear {
  self.result = [[CameraServerItem alloc] init];
  return self;
}
- (CameraServerItem_Builder*) clone {
  return [CameraServerItem builderWithPrototype:result];
}
- (CameraServerItem*) defaultInstance {
  return [CameraServerItem defaultInstance];
}
- (CameraServerItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CameraServerItem*) buildPartial {
  CameraServerItem* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CameraServerItem_Builder*) mergeFrom:(CameraServerItem*) other {
  if (other == [CameraServerItem defaultInstance]) {
    return self;
  }
  if (other.hasPhysicalId) {
    [self setPhysicalId:other.physicalId];
  }
  if (other.hasServerGuid) {
    [self setServerGuid:other.serverGuid];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CameraServerItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CameraServerItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhysicalId:[input readString]];
        break;
      }
      case 18: {
        [self setServerGuid:[input readString]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPhysicalId {
  return result.hasPhysicalId;
}
- (NSString*) physicalId {
  return result.physicalId;
}
- (CameraServerItem_Builder*) setPhysicalId:(NSString*) value {
  result.hasPhysicalId = YES;
  result.physicalId = value;
  return self;
}
- (CameraServerItem_Builder*) clearPhysicalId {
  result.hasPhysicalId = NO;
  result.physicalId = @"";
  return self;
}
- (BOOL) hasServerGuid {
  return result.hasServerGuid;
}
- (NSString*) serverGuid {
  return result.serverGuid;
}
- (CameraServerItem_Builder*) setServerGuid:(NSString*) value {
  result.hasServerGuid = YES;
  result.serverGuid = value;
  return self;
}
- (CameraServerItem_Builder*) clearServerGuid {
  result.hasServerGuid = NO;
  result.serverGuid = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (CameraServerItem_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (CameraServerItem_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
@end

@interface CameraServerItems ()
@property (strong) NSMutableArray * cameraServerItemArray;
@end

@implementation CameraServerItems

@synthesize cameraServerItemArray;
@dynamic cameraServerItem;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CameraServerItems* defaultCameraServerItemsInstance = nil;
+ (void) initialize {
  if (self == [CameraServerItems class]) {
    defaultCameraServerItemsInstance = [[CameraServerItems alloc] init];
  }
}
+ (CameraServerItems*) defaultInstance {
  return defaultCameraServerItemsInstance;
}
- (CameraServerItems*) defaultInstance {
  return defaultCameraServerItemsInstance;
}
- (NSArray *)cameraServerItem {
  return cameraServerItemArray;
}
- (CameraServerItem*)cameraServerItemAtIndex:(NSUInteger)index {
  return [cameraServerItemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (CameraServerItem* element in self.cameraServerItem) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CameraServerItem *element in self.cameraServerItemArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (CameraServerItem *element in self.cameraServerItemArray) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CameraServerItems*) parseFromData:(NSData*) data {
  return (CameraServerItems*)[[[CameraServerItems builder] mergeFromData:data] build];
}
+ (CameraServerItems*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CameraServerItems*)[[[CameraServerItems builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CameraServerItems*) parseFromInputStream:(NSInputStream*) input {
  return (CameraServerItems*)[[[CameraServerItems builder] mergeFromInputStream:input] build];
}
+ (CameraServerItems*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CameraServerItems*)[[[CameraServerItems builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CameraServerItems*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CameraServerItems*)[[[CameraServerItems builder] mergeFromCodedInputStream:input] build];
}
+ (CameraServerItems*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CameraServerItems*)[[[CameraServerItems builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CameraServerItems_Builder*) builder {
  return [[CameraServerItems_Builder alloc] init];
}
+ (CameraServerItems_Builder*) builderWithPrototype:(CameraServerItems*) prototype {
  return [[CameraServerItems builder] mergeFrom:prototype];
}
- (CameraServerItems_Builder*) builder {
  return [CameraServerItems builder];
}
- (CameraServerItems_Builder*) toBuilder {
  return [CameraServerItems builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  for (CameraServerItem* element in self.cameraServerItemArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"cameraServerItem"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CameraServerItems class]]) {
    return NO;
  }
  CameraServerItems *otherMessage = other;
  return
      [self.cameraServerItemArray isEqualToArray:otherMessage.cameraServerItemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  for (CameraServerItem* element in self.cameraServerItemArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CameraServerItems_Builder()
@property (strong) CameraServerItems* result;
@end

@implementation CameraServerItems_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CameraServerItems alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CameraServerItems_Builder*) clear {
  self.result = [[CameraServerItems alloc] init];
  return self;
}
- (CameraServerItems_Builder*) clone {
  return [CameraServerItems builderWithPrototype:result];
}
- (CameraServerItems*) defaultInstance {
  return [CameraServerItems defaultInstance];
}
- (CameraServerItems*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CameraServerItems*) buildPartial {
  CameraServerItems* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CameraServerItems_Builder*) mergeFrom:(CameraServerItems*) other {
  if (other == [CameraServerItems defaultInstance]) {
    return self;
  }
  if (other.cameraServerItemArray.count > 0) {
    if (result.cameraServerItemArray == nil) {
      result.cameraServerItemArray = [[NSMutableArray alloc] initWithArray:other.cameraServerItemArray];
    } else {
      [result.cameraServerItemArray addObjectsFromArray:other.cameraServerItemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CameraServerItems_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CameraServerItems_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CameraServerItem_Builder* subBuilder = [CameraServerItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCameraServerItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)cameraServerItem {
  return result.cameraServerItemArray;
}
- (CameraServerItem*)cameraServerItemAtIndex:(NSUInteger)index {
  return [result cameraServerItemAtIndex:index];
}
- (CameraServerItems_Builder *)addCameraServerItem:(CameraServerItem*)value {
  if (result.cameraServerItemArray == nil) {
    result.cameraServerItemArray = [[NSMutableArray alloc]init];
  }
  [result.cameraServerItemArray addObject:value];
  return self;
}
- (CameraServerItems_Builder *)setCameraServerItemArray:(NSArray *)array {
  result.cameraServerItemArray = [[NSMutableArray alloc]init];
  return self;
}
- (CameraServerItems_Builder *)clearCameraServerItem {
  result.cameraServerItemArray = nil;
  return self;
}
@end

