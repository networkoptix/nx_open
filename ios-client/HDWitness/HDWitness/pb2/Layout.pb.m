// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Layout.pb.h"

@implementation LayoutRoot
static id<PBExtensionField> Layout_resource = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [LayoutRoot class]) {
    Layout_resource =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[Resource class]
                                       fieldNumber:103
                                      defaultValue:[Layout defaultInstance]
                               messageOrGroupClass:[Layout class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ResourceRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:Layout_resource];
}
@end

@interface Layout ()
@property Float64 cellAspectRatio;
@property Float64 cellSpacingWidth;
@property Float64 cellSpacingHeight;
@property (strong) NSMutableArray * itemArray;
@property BOOL userCanEdit;
@property BOOL locked;
@property (strong) NSString* backgroundImageFilename;
@property int32_t backgroundWidth;
@property int32_t backgroundHeight;
@property Float64 backgroundOpacity;
@end

@implementation Layout

- (BOOL) hasCellAspectRatio {
  return !!hasCellAspectRatio_;
}
- (void) setHasCellAspectRatio:(BOOL) value {
  hasCellAspectRatio_ = !!value;
}
@synthesize cellAspectRatio;
- (BOOL) hasCellSpacingWidth {
  return !!hasCellSpacingWidth_;
}
- (void) setHasCellSpacingWidth:(BOOL) value {
  hasCellSpacingWidth_ = !!value;
}
@synthesize cellSpacingWidth;
- (BOOL) hasCellSpacingHeight {
  return !!hasCellSpacingHeight_;
}
- (void) setHasCellSpacingHeight:(BOOL) value {
  hasCellSpacingHeight_ = !!value;
}
@synthesize cellSpacingHeight;
@synthesize itemArray;
@dynamic item;
- (BOOL) hasUserCanEdit {
  return !!hasUserCanEdit_;
}
- (void) setHasUserCanEdit:(BOOL) value {
  hasUserCanEdit_ = !!value;
}
- (BOOL) userCanEdit {
  return !!userCanEdit_;
}
- (void) setUserCanEdit:(BOOL) value {
  userCanEdit_ = !!value;
}
- (BOOL) hasLocked {
  return !!hasLocked_;
}
- (void) setHasLocked:(BOOL) value {
  hasLocked_ = !!value;
}
- (BOOL) locked {
  return !!locked_;
}
- (void) setLocked:(BOOL) value {
  locked_ = !!value;
}
- (BOOL) hasBackgroundImageFilename {
  return !!hasBackgroundImageFilename_;
}
- (void) setHasBackgroundImageFilename:(BOOL) value {
  hasBackgroundImageFilename_ = !!value;
}
@synthesize backgroundImageFilename;
- (BOOL) hasBackgroundWidth {
  return !!hasBackgroundWidth_;
}
- (void) setHasBackgroundWidth:(BOOL) value {
  hasBackgroundWidth_ = !!value;
}
@synthesize backgroundWidth;
- (BOOL) hasBackgroundHeight {
  return !!hasBackgroundHeight_;
}
- (void) setHasBackgroundHeight:(BOOL) value {
  hasBackgroundHeight_ = !!value;
}
@synthesize backgroundHeight;
- (BOOL) hasBackgroundOpacity {
  return !!hasBackgroundOpacity_;
}
- (void) setHasBackgroundOpacity:(BOOL) value {
  hasBackgroundOpacity_ = !!value;
}
@synthesize backgroundOpacity;
- (id) init {
  if ((self = [super init])) {
    self.cellAspectRatio = 0;
    self.cellSpacingWidth = 0;
    self.cellSpacingHeight = 0;
    self.userCanEdit = NO;
    self.locked = NO;
    self.backgroundImageFilename = @"";
    self.backgroundWidth = 0;
    self.backgroundHeight = 0;
    self.backgroundOpacity = 0;
  }
  return self;
}
+ (id<PBExtensionField>) resource {
  return Layout_resource;
}
static Layout* defaultLayoutInstance = nil;
+ (void) initialize {
  if (self == [Layout class]) {
    defaultLayoutInstance = [[Layout alloc] init];
  }
}
+ (Layout*) defaultInstance {
  return defaultLayoutInstance;
}
- (Layout*) defaultInstance {
  return defaultLayoutInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (Layout_Item*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasCellAspectRatio) {
    return NO;
  }
  if (!self.hasCellSpacingWidth) {
    return NO;
  }
  if (!self.hasCellSpacingHeight) {
    return NO;
  }
  for (Layout_Item* element in self.item) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCellAspectRatio) {
    [output writeDouble:1 value:self.cellAspectRatio];
  }
  if (self.hasCellSpacingWidth) {
    [output writeDouble:2 value:self.cellSpacingWidth];
  }
  if (self.hasCellSpacingHeight) {
    [output writeDouble:3 value:self.cellSpacingHeight];
  }
  for (Layout_Item *element in self.itemArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasUserCanEdit) {
    [output writeBool:5 value:self.userCanEdit];
  }
  if (self.hasLocked) {
    [output writeBool:6 value:self.locked];
  }
  if (self.hasBackgroundImageFilename) {
    [output writeString:7 value:self.backgroundImageFilename];
  }
  if (self.hasBackgroundWidth) {
    [output writeInt32:8 value:self.backgroundWidth];
  }
  if (self.hasBackgroundHeight) {
    [output writeInt32:9 value:self.backgroundHeight];
  }
  if (self.hasBackgroundOpacity) {
    [output writeDouble:10 value:self.backgroundOpacity];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCellAspectRatio) {
    size += computeDoubleSize(1, self.cellAspectRatio);
  }
  if (self.hasCellSpacingWidth) {
    size += computeDoubleSize(2, self.cellSpacingWidth);
  }
  if (self.hasCellSpacingHeight) {
    size += computeDoubleSize(3, self.cellSpacingHeight);
  }
  for (Layout_Item *element in self.itemArray) {
    size += computeMessageSize(4, element);
  }
  if (self.hasUserCanEdit) {
    size += computeBoolSize(5, self.userCanEdit);
  }
  if (self.hasLocked) {
    size += computeBoolSize(6, self.locked);
  }
  if (self.hasBackgroundImageFilename) {
    size += computeStringSize(7, self.backgroundImageFilename);
  }
  if (self.hasBackgroundWidth) {
    size += computeInt32Size(8, self.backgroundWidth);
  }
  if (self.hasBackgroundHeight) {
    size += computeInt32Size(9, self.backgroundHeight);
  }
  if (self.hasBackgroundOpacity) {
    size += computeDoubleSize(10, self.backgroundOpacity);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Layout*) parseFromData:(NSData*) data {
  return (Layout*)[[[Layout builder] mergeFromData:data] build];
}
+ (Layout*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout*)[[[Layout builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Layout*) parseFromInputStream:(NSInputStream*) input {
  return (Layout*)[[[Layout builder] mergeFromInputStream:input] build];
}
+ (Layout*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout*)[[[Layout builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Layout*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Layout*)[[[Layout builder] mergeFromCodedInputStream:input] build];
}
+ (Layout*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout*)[[[Layout builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Layout_Builder*) builder {
  return [[Layout_Builder alloc] init];
}
+ (Layout_Builder*) builderWithPrototype:(Layout*) prototype {
  return [[Layout builder] mergeFrom:prototype];
}
- (Layout_Builder*) builder {
  return [Layout builder];
}
- (Layout_Builder*) toBuilder {
  return [Layout builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasCellAspectRatio) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cellAspectRatio", [NSNumber numberWithDouble:self.cellAspectRatio]];
  }
  if (self.hasCellSpacingWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cellSpacingWidth", [NSNumber numberWithDouble:self.cellSpacingWidth]];
  }
  if (self.hasCellSpacingHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cellSpacingHeight", [NSNumber numberWithDouble:self.cellSpacingHeight]];
  }
  for (Layout_Item* element in self.itemArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserCanEdit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userCanEdit", [NSNumber numberWithBool:self.userCanEdit]];
  }
  if (self.hasLocked) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locked", [NSNumber numberWithBool:self.locked]];
  }
  if (self.hasBackgroundImageFilename) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundImageFilename", self.backgroundImageFilename];
  }
  if (self.hasBackgroundWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundWidth", [NSNumber numberWithInt:self.backgroundWidth]];
  }
  if (self.hasBackgroundHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundHeight", [NSNumber numberWithInt:self.backgroundHeight]];
  }
  if (self.hasBackgroundOpacity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundOpacity", [NSNumber numberWithDouble:self.backgroundOpacity]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Layout class]]) {
    return NO;
  }
  Layout *otherMessage = other;
  return
      self.hasCellAspectRatio == otherMessage.hasCellAspectRatio &&
      (!self.hasCellAspectRatio || self.cellAspectRatio == otherMessage.cellAspectRatio) &&
      self.hasCellSpacingWidth == otherMessage.hasCellSpacingWidth &&
      (!self.hasCellSpacingWidth || self.cellSpacingWidth == otherMessage.cellSpacingWidth) &&
      self.hasCellSpacingHeight == otherMessage.hasCellSpacingHeight &&
      (!self.hasCellSpacingHeight || self.cellSpacingHeight == otherMessage.cellSpacingHeight) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      self.hasUserCanEdit == otherMessage.hasUserCanEdit &&
      (!self.hasUserCanEdit || self.userCanEdit == otherMessage.userCanEdit) &&
      self.hasLocked == otherMessage.hasLocked &&
      (!self.hasLocked || self.locked == otherMessage.locked) &&
      self.hasBackgroundImageFilename == otherMessage.hasBackgroundImageFilename &&
      (!self.hasBackgroundImageFilename || [self.backgroundImageFilename isEqual:otherMessage.backgroundImageFilename]) &&
      self.hasBackgroundWidth == otherMessage.hasBackgroundWidth &&
      (!self.hasBackgroundWidth || self.backgroundWidth == otherMessage.backgroundWidth) &&
      self.hasBackgroundHeight == otherMessage.hasBackgroundHeight &&
      (!self.hasBackgroundHeight || self.backgroundHeight == otherMessage.backgroundHeight) &&
      self.hasBackgroundOpacity == otherMessage.hasBackgroundOpacity &&
      (!self.hasBackgroundOpacity || self.backgroundOpacity == otherMessage.backgroundOpacity) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasCellAspectRatio) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.cellAspectRatio] hash];
  }
  if (self.hasCellSpacingWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.cellSpacingWidth] hash];
  }
  if (self.hasCellSpacingHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.cellSpacingHeight] hash];
  }
  for (Layout_Item* element in self.itemArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasUserCanEdit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.userCanEdit] hash];
  }
  if (self.hasLocked) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.locked] hash];
  }
  if (self.hasBackgroundImageFilename) {
    hashCode = hashCode * 31 + [self.backgroundImageFilename hash];
  }
  if (self.hasBackgroundWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.backgroundWidth] hash];
  }
  if (self.hasBackgroundHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.backgroundHeight] hash];
  }
  if (self.hasBackgroundOpacity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.backgroundOpacity] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Layout_Item ()
@property (strong) NSString* uuid;
@property int32_t flags;
@property Float64 left;
@property Float64 top;
@property Float64 right;
@property Float64 bottom;
@property Float64 rotation;
@property (strong) Layout_Item_Resource* resource;
@property Float64 zoomLeft;
@property Float64 zoomTop;
@property Float64 zoomRight;
@property Float64 zoomBottom;
@property (strong) NSString* zoomTargetUuid;
@property (strong) NSString* contrastParams;
@property (strong) NSString* dewarpingParams;
@end

@implementation Layout_Item

- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) value {
  hasUuid_ = !!value;
}
@synthesize uuid;
- (BOOL) hasFlags {
  return !!hasFlags_;
}
- (void) setHasFlags:(BOOL) value {
  hasFlags_ = !!value;
}
@synthesize flags;
- (BOOL) hasLeft {
  return !!hasLeft_;
}
- (void) setHasLeft:(BOOL) value {
  hasLeft_ = !!value;
}
@synthesize left;
- (BOOL) hasTop {
  return !!hasTop_;
}
- (void) setHasTop:(BOOL) value {
  hasTop_ = !!value;
}
@synthesize top;
- (BOOL) hasRight {
  return !!hasRight_;
}
- (void) setHasRight:(BOOL) value {
  hasRight_ = !!value;
}
@synthesize right;
- (BOOL) hasBottom {
  return !!hasBottom_;
}
- (void) setHasBottom:(BOOL) value {
  hasBottom_ = !!value;
}
@synthesize bottom;
- (BOOL) hasRotation {
  return !!hasRotation_;
}
- (void) setHasRotation:(BOOL) value {
  hasRotation_ = !!value;
}
@synthesize rotation;
- (BOOL) hasResource {
  return !!hasResource_;
}
- (void) setHasResource:(BOOL) value {
  hasResource_ = !!value;
}
@synthesize resource;
- (BOOL) hasZoomLeft {
  return !!hasZoomLeft_;
}
- (void) setHasZoomLeft:(BOOL) value {
  hasZoomLeft_ = !!value;
}
@synthesize zoomLeft;
- (BOOL) hasZoomTop {
  return !!hasZoomTop_;
}
- (void) setHasZoomTop:(BOOL) value {
  hasZoomTop_ = !!value;
}
@synthesize zoomTop;
- (BOOL) hasZoomRight {
  return !!hasZoomRight_;
}
- (void) setHasZoomRight:(BOOL) value {
  hasZoomRight_ = !!value;
}
@synthesize zoomRight;
- (BOOL) hasZoomBottom {
  return !!hasZoomBottom_;
}
- (void) setHasZoomBottom:(BOOL) value {
  hasZoomBottom_ = !!value;
}
@synthesize zoomBottom;
- (BOOL) hasZoomTargetUuid {
  return !!hasZoomTargetUuid_;
}
- (void) setHasZoomTargetUuid:(BOOL) value {
  hasZoomTargetUuid_ = !!value;
}
@synthesize zoomTargetUuid;
- (BOOL) hasContrastParams {
  return !!hasContrastParams_;
}
- (void) setHasContrastParams:(BOOL) value {
  hasContrastParams_ = !!value;
}
@synthesize contrastParams;
- (BOOL) hasDewarpingParams {
  return !!hasDewarpingParams_;
}
- (void) setHasDewarpingParams:(BOOL) value {
  hasDewarpingParams_ = !!value;
}
@synthesize dewarpingParams;
- (id) init {
  if ((self = [super init])) {
    self.uuid = @"";
    self.flags = 0;
    self.left = 0;
    self.top = 0;
    self.right = 0;
    self.bottom = 0;
    self.rotation = 0;
    self.resource = [Layout_Item_Resource defaultInstance];
    self.zoomLeft = 0;
    self.zoomTop = 0;
    self.zoomRight = 0;
    self.zoomBottom = 0;
    self.zoomTargetUuid = @"";
    self.contrastParams = @"";
    self.dewarpingParams = @"";
  }
  return self;
}
static Layout_Item* defaultLayout_ItemInstance = nil;
+ (void) initialize {
  if (self == [Layout_Item class]) {
    defaultLayout_ItemInstance = [[Layout_Item alloc] init];
  }
}
+ (Layout_Item*) defaultInstance {
  return defaultLayout_ItemInstance;
}
- (Layout_Item*) defaultInstance {
  return defaultLayout_ItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUuid) {
    return NO;
  }
  if (!self.hasFlags) {
    return NO;
  }
  if (!self.hasLeft) {
    return NO;
  }
  if (!self.hasTop) {
    return NO;
  }
  if (!self.hasRight) {
    return NO;
  }
  if (!self.hasBottom) {
    return NO;
  }
  if (!self.hasRotation) {
    return NO;
  }
  if (!self.hasResource) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUuid) {
    [output writeString:1 value:self.uuid];
  }
  if (self.hasFlags) {
    [output writeInt32:2 value:self.flags];
  }
  if (self.hasLeft) {
    [output writeDouble:3 value:self.left];
  }
  if (self.hasTop) {
    [output writeDouble:4 value:self.top];
  }
  if (self.hasRight) {
    [output writeDouble:5 value:self.right];
  }
  if (self.hasBottom) {
    [output writeDouble:6 value:self.bottom];
  }
  if (self.hasRotation) {
    [output writeDouble:7 value:self.rotation];
  }
  if (self.hasResource) {
    [output writeMessage:8 value:self.resource];
  }
  if (self.hasZoomLeft) {
    [output writeDouble:9 value:self.zoomLeft];
  }
  if (self.hasZoomTop) {
    [output writeDouble:10 value:self.zoomTop];
  }
  if (self.hasZoomRight) {
    [output writeDouble:11 value:self.zoomRight];
  }
  if (self.hasZoomBottom) {
    [output writeDouble:12 value:self.zoomBottom];
  }
  if (self.hasZoomTargetUuid) {
    [output writeString:13 value:self.zoomTargetUuid];
  }
  if (self.hasContrastParams) {
    [output writeString:14 value:self.contrastParams];
  }
  if (self.hasDewarpingParams) {
    [output writeString:15 value:self.dewarpingParams];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUuid) {
    size += computeStringSize(1, self.uuid);
  }
  if (self.hasFlags) {
    size += computeInt32Size(2, self.flags);
  }
  if (self.hasLeft) {
    size += computeDoubleSize(3, self.left);
  }
  if (self.hasTop) {
    size += computeDoubleSize(4, self.top);
  }
  if (self.hasRight) {
    size += computeDoubleSize(5, self.right);
  }
  if (self.hasBottom) {
    size += computeDoubleSize(6, self.bottom);
  }
  if (self.hasRotation) {
    size += computeDoubleSize(7, self.rotation);
  }
  if (self.hasResource) {
    size += computeMessageSize(8, self.resource);
  }
  if (self.hasZoomLeft) {
    size += computeDoubleSize(9, self.zoomLeft);
  }
  if (self.hasZoomTop) {
    size += computeDoubleSize(10, self.zoomTop);
  }
  if (self.hasZoomRight) {
    size += computeDoubleSize(11, self.zoomRight);
  }
  if (self.hasZoomBottom) {
    size += computeDoubleSize(12, self.zoomBottom);
  }
  if (self.hasZoomTargetUuid) {
    size += computeStringSize(13, self.zoomTargetUuid);
  }
  if (self.hasContrastParams) {
    size += computeStringSize(14, self.contrastParams);
  }
  if (self.hasDewarpingParams) {
    size += computeStringSize(15, self.dewarpingParams);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Layout_Item*) parseFromData:(NSData*) data {
  return (Layout_Item*)[[[Layout_Item builder] mergeFromData:data] build];
}
+ (Layout_Item*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout_Item*)[[[Layout_Item builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Layout_Item*) parseFromInputStream:(NSInputStream*) input {
  return (Layout_Item*)[[[Layout_Item builder] mergeFromInputStream:input] build];
}
+ (Layout_Item*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout_Item*)[[[Layout_Item builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Layout_Item*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Layout_Item*)[[[Layout_Item builder] mergeFromCodedInputStream:input] build];
}
+ (Layout_Item*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout_Item*)[[[Layout_Item builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Layout_Item_Builder*) builder {
  return [[Layout_Item_Builder alloc] init];
}
+ (Layout_Item_Builder*) builderWithPrototype:(Layout_Item*) prototype {
  return [[Layout_Item builder] mergeFrom:prototype];
}
- (Layout_Item_Builder*) builder {
  return [Layout_Item builder];
}
- (Layout_Item_Builder*) toBuilder {
  return [Layout_Item builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flags", [NSNumber numberWithInt:self.flags]];
  }
  if (self.hasLeft) {
    [output appendFormat:@"%@%@: %@\n", indent, @"left", [NSNumber numberWithDouble:self.left]];
  }
  if (self.hasTop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"top", [NSNumber numberWithDouble:self.top]];
  }
  if (self.hasRight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"right", [NSNumber numberWithDouble:self.right]];
  }
  if (self.hasBottom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bottom", [NSNumber numberWithDouble:self.bottom]];
  }
  if (self.hasRotation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rotation", [NSNumber numberWithDouble:self.rotation]];
  }
  if (self.hasResource) {
    [output appendFormat:@"%@%@ {\n", indent, @"resource"];
    [self.resource writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasZoomLeft) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zoomLeft", [NSNumber numberWithDouble:self.zoomLeft]];
  }
  if (self.hasZoomTop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zoomTop", [NSNumber numberWithDouble:self.zoomTop]];
  }
  if (self.hasZoomRight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zoomRight", [NSNumber numberWithDouble:self.zoomRight]];
  }
  if (self.hasZoomBottom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zoomBottom", [NSNumber numberWithDouble:self.zoomBottom]];
  }
  if (self.hasZoomTargetUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zoomTargetUuid", self.zoomTargetUuid];
  }
  if (self.hasContrastParams) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contrastParams", self.contrastParams];
  }
  if (self.hasDewarpingParams) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dewarpingParams", self.dewarpingParams];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Layout_Item class]]) {
    return NO;
  }
  Layout_Item *otherMessage = other;
  return
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasFlags == otherMessage.hasFlags &&
      (!self.hasFlags || self.flags == otherMessage.flags) &&
      self.hasLeft == otherMessage.hasLeft &&
      (!self.hasLeft || self.left == otherMessage.left) &&
      self.hasTop == otherMessage.hasTop &&
      (!self.hasTop || self.top == otherMessage.top) &&
      self.hasRight == otherMessage.hasRight &&
      (!self.hasRight || self.right == otherMessage.right) &&
      self.hasBottom == otherMessage.hasBottom &&
      (!self.hasBottom || self.bottom == otherMessage.bottom) &&
      self.hasRotation == otherMessage.hasRotation &&
      (!self.hasRotation || self.rotation == otherMessage.rotation) &&
      self.hasResource == otherMessage.hasResource &&
      (!self.hasResource || [self.resource isEqual:otherMessage.resource]) &&
      self.hasZoomLeft == otherMessage.hasZoomLeft &&
      (!self.hasZoomLeft || self.zoomLeft == otherMessage.zoomLeft) &&
      self.hasZoomTop == otherMessage.hasZoomTop &&
      (!self.hasZoomTop || self.zoomTop == otherMessage.zoomTop) &&
      self.hasZoomRight == otherMessage.hasZoomRight &&
      (!self.hasZoomRight || self.zoomRight == otherMessage.zoomRight) &&
      self.hasZoomBottom == otherMessage.hasZoomBottom &&
      (!self.hasZoomBottom || self.zoomBottom == otherMessage.zoomBottom) &&
      self.hasZoomTargetUuid == otherMessage.hasZoomTargetUuid &&
      (!self.hasZoomTargetUuid || [self.zoomTargetUuid isEqual:otherMessage.zoomTargetUuid]) &&
      self.hasContrastParams == otherMessage.hasContrastParams &&
      (!self.hasContrastParams || [self.contrastParams isEqual:otherMessage.contrastParams]) &&
      self.hasDewarpingParams == otherMessage.hasDewarpingParams &&
      (!self.hasDewarpingParams || [self.dewarpingParams isEqual:otherMessage.dewarpingParams]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.flags] hash];
  }
  if (self.hasLeft) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.left] hash];
  }
  if (self.hasTop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.top] hash];
  }
  if (self.hasRight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.right] hash];
  }
  if (self.hasBottom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.bottom] hash];
  }
  if (self.hasRotation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.rotation] hash];
  }
  if (self.hasResource) {
    hashCode = hashCode * 31 + [self.resource hash];
  }
  if (self.hasZoomLeft) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zoomLeft] hash];
  }
  if (self.hasZoomTop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zoomTop] hash];
  }
  if (self.hasZoomRight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zoomRight] hash];
  }
  if (self.hasZoomBottom) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zoomBottom] hash];
  }
  if (self.hasZoomTargetUuid) {
    hashCode = hashCode * 31 + [self.zoomTargetUuid hash];
  }
  if (self.hasContrastParams) {
    hashCode = hashCode * 31 + [self.contrastParams hash];
  }
  if (self.hasDewarpingParams) {
    hashCode = hashCode * 31 + [self.dewarpingParams hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Layout_Item_Resource ()
@property int32_t id;
@property (strong) NSString* path;
@end

@implementation Layout_Item_Resource

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasPath {
  return !!hasPath_;
}
- (void) setHasPath:(BOOL) value {
  hasPath_ = !!value;
}
@synthesize path;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.path = @"";
  }
  return self;
}
static Layout_Item_Resource* defaultLayout_Item_ResourceInstance = nil;
+ (void) initialize {
  if (self == [Layout_Item_Resource class]) {
    defaultLayout_Item_ResourceInstance = [[Layout_Item_Resource alloc] init];
  }
}
+ (Layout_Item_Resource*) defaultInstance {
  return defaultLayout_Item_ResourceInstance;
}
- (Layout_Item_Resource*) defaultInstance {
  return defaultLayout_Item_ResourceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasPath) {
    [output writeString:2 value:self.path];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasPath) {
    size += computeStringSize(2, self.path);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Layout_Item_Resource*) parseFromData:(NSData*) data {
  return (Layout_Item_Resource*)[[[Layout_Item_Resource builder] mergeFromData:data] build];
}
+ (Layout_Item_Resource*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout_Item_Resource*)[[[Layout_Item_Resource builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Layout_Item_Resource*) parseFromInputStream:(NSInputStream*) input {
  return (Layout_Item_Resource*)[[[Layout_Item_Resource builder] mergeFromInputStream:input] build];
}
+ (Layout_Item_Resource*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout_Item_Resource*)[[[Layout_Item_Resource builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Layout_Item_Resource*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Layout_Item_Resource*)[[[Layout_Item_Resource builder] mergeFromCodedInputStream:input] build];
}
+ (Layout_Item_Resource*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Layout_Item_Resource*)[[[Layout_Item_Resource builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Layout_Item_Resource_Builder*) builder {
  return [[Layout_Item_Resource_Builder alloc] init];
}
+ (Layout_Item_Resource_Builder*) builderWithPrototype:(Layout_Item_Resource*) prototype {
  return [[Layout_Item_Resource builder] mergeFrom:prototype];
}
- (Layout_Item_Resource_Builder*) builder {
  return [Layout_Item_Resource builder];
}
- (Layout_Item_Resource_Builder*) toBuilder {
  return [Layout_Item_Resource builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"path", self.path];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Layout_Item_Resource class]]) {
    return NO;
  }
  Layout_Item_Resource *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPath == otherMessage.hasPath &&
      (!self.hasPath || [self.path isEqual:otherMessage.path]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasPath) {
    hashCode = hashCode * 31 + [self.path hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Layout_Item_Resource_Builder()
@property (strong) Layout_Item_Resource* result;
@end

@implementation Layout_Item_Resource_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Layout_Item_Resource alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Layout_Item_Resource_Builder*) clear {
  self.result = [[Layout_Item_Resource alloc] init];
  return self;
}
- (Layout_Item_Resource_Builder*) clone {
  return [Layout_Item_Resource builderWithPrototype:result];
}
- (Layout_Item_Resource*) defaultInstance {
  return [Layout_Item_Resource defaultInstance];
}
- (Layout_Item_Resource*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Layout_Item_Resource*) buildPartial {
  Layout_Item_Resource* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Layout_Item_Resource_Builder*) mergeFrom:(Layout_Item_Resource*) other {
  if (other == [Layout_Item_Resource defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPath) {
    [self setPath:other.path];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Layout_Item_Resource_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Layout_Item_Resource_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Layout_Item_Resource_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Layout_Item_Resource_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasPath {
  return result.hasPath;
}
- (NSString*) path {
  return result.path;
}
- (Layout_Item_Resource_Builder*) setPath:(NSString*) value {
  result.hasPath = YES;
  result.path = value;
  return self;
}
- (Layout_Item_Resource_Builder*) clearPath {
  result.hasPath = NO;
  result.path = @"";
  return self;
}
@end

@interface Layout_Item_Builder()
@property (strong) Layout_Item* result;
@end

@implementation Layout_Item_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Layout_Item alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Layout_Item_Builder*) clear {
  self.result = [[Layout_Item alloc] init];
  return self;
}
- (Layout_Item_Builder*) clone {
  return [Layout_Item builderWithPrototype:result];
}
- (Layout_Item*) defaultInstance {
  return [Layout_Item defaultInstance];
}
- (Layout_Item*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Layout_Item*) buildPartial {
  Layout_Item* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Layout_Item_Builder*) mergeFrom:(Layout_Item*) other {
  if (other == [Layout_Item defaultInstance]) {
    return self;
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasFlags) {
    [self setFlags:other.flags];
  }
  if (other.hasLeft) {
    [self setLeft:other.left];
  }
  if (other.hasTop) {
    [self setTop:other.top];
  }
  if (other.hasRight) {
    [self setRight:other.right];
  }
  if (other.hasBottom) {
    [self setBottom:other.bottom];
  }
  if (other.hasRotation) {
    [self setRotation:other.rotation];
  }
  if (other.hasResource) {
    [self mergeResource:other.resource];
  }
  if (other.hasZoomLeft) {
    [self setZoomLeft:other.zoomLeft];
  }
  if (other.hasZoomTop) {
    [self setZoomTop:other.zoomTop];
  }
  if (other.hasZoomRight) {
    [self setZoomRight:other.zoomRight];
  }
  if (other.hasZoomBottom) {
    [self setZoomBottom:other.zoomBottom];
  }
  if (other.hasZoomTargetUuid) {
    [self setZoomTargetUuid:other.zoomTargetUuid];
  }
  if (other.hasContrastParams) {
    [self setContrastParams:other.contrastParams];
  }
  if (other.hasDewarpingParams) {
    [self setDewarpingParams:other.dewarpingParams];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Layout_Item_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Layout_Item_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUuid:[input readString]];
        break;
      }
      case 16: {
        [self setFlags:[input readInt32]];
        break;
      }
      case 25: {
        [self setLeft:[input readDouble]];
        break;
      }
      case 33: {
        [self setTop:[input readDouble]];
        break;
      }
      case 41: {
        [self setRight:[input readDouble]];
        break;
      }
      case 49: {
        [self setBottom:[input readDouble]];
        break;
      }
      case 57: {
        [self setRotation:[input readDouble]];
        break;
      }
      case 66: {
        Layout_Item_Resource_Builder* subBuilder = [Layout_Item_Resource builder];
        if (self.hasResource) {
          [subBuilder mergeFrom:self.resource];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResource:[subBuilder buildPartial]];
        break;
      }
      case 73: {
        [self setZoomLeft:[input readDouble]];
        break;
      }
      case 81: {
        [self setZoomTop:[input readDouble]];
        break;
      }
      case 89: {
        [self setZoomRight:[input readDouble]];
        break;
      }
      case 97: {
        [self setZoomBottom:[input readDouble]];
        break;
      }
      case 106: {
        [self setZoomTargetUuid:[input readString]];
        break;
      }
      case 114: {
        [self setContrastParams:[input readString]];
        break;
      }
      case 122: {
        [self setDewarpingParams:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUuid {
  return result.hasUuid;
}
- (NSString*) uuid {
  return result.uuid;
}
- (Layout_Item_Builder*) setUuid:(NSString*) value {
  result.hasUuid = YES;
  result.uuid = value;
  return self;
}
- (Layout_Item_Builder*) clearUuid {
  result.hasUuid = NO;
  result.uuid = @"";
  return self;
}
- (BOOL) hasFlags {
  return result.hasFlags;
}
- (int32_t) flags {
  return result.flags;
}
- (Layout_Item_Builder*) setFlags:(int32_t) value {
  result.hasFlags = YES;
  result.flags = value;
  return self;
}
- (Layout_Item_Builder*) clearFlags {
  result.hasFlags = NO;
  result.flags = 0;
  return self;
}
- (BOOL) hasLeft {
  return result.hasLeft;
}
- (Float64) left {
  return result.left;
}
- (Layout_Item_Builder*) setLeft:(Float64) value {
  result.hasLeft = YES;
  result.left = value;
  return self;
}
- (Layout_Item_Builder*) clearLeft {
  result.hasLeft = NO;
  result.left = 0;
  return self;
}
- (BOOL) hasTop {
  return result.hasTop;
}
- (Float64) top {
  return result.top;
}
- (Layout_Item_Builder*) setTop:(Float64) value {
  result.hasTop = YES;
  result.top = value;
  return self;
}
- (Layout_Item_Builder*) clearTop {
  result.hasTop = NO;
  result.top = 0;
  return self;
}
- (BOOL) hasRight {
  return result.hasRight;
}
- (Float64) right {
  return result.right;
}
- (Layout_Item_Builder*) setRight:(Float64) value {
  result.hasRight = YES;
  result.right = value;
  return self;
}
- (Layout_Item_Builder*) clearRight {
  result.hasRight = NO;
  result.right = 0;
  return self;
}
- (BOOL) hasBottom {
  return result.hasBottom;
}
- (Float64) bottom {
  return result.bottom;
}
- (Layout_Item_Builder*) setBottom:(Float64) value {
  result.hasBottom = YES;
  result.bottom = value;
  return self;
}
- (Layout_Item_Builder*) clearBottom {
  result.hasBottom = NO;
  result.bottom = 0;
  return self;
}
- (BOOL) hasRotation {
  return result.hasRotation;
}
- (Float64) rotation {
  return result.rotation;
}
- (Layout_Item_Builder*) setRotation:(Float64) value {
  result.hasRotation = YES;
  result.rotation = value;
  return self;
}
- (Layout_Item_Builder*) clearRotation {
  result.hasRotation = NO;
  result.rotation = 0;
  return self;
}
- (BOOL) hasResource {
  return result.hasResource;
}
- (Layout_Item_Resource*) resource {
  return result.resource;
}
- (Layout_Item_Builder*) setResource:(Layout_Item_Resource*) value {
  result.hasResource = YES;
  result.resource = value;
  return self;
}
- (Layout_Item_Builder*) setResourceBuilder:(Layout_Item_Resource_Builder*) builderForValue {
  return [self setResource:[builderForValue build]];
}
- (Layout_Item_Builder*) mergeResource:(Layout_Item_Resource*) value {
  if (result.hasResource &&
      result.resource != [Layout_Item_Resource defaultInstance]) {
    result.resource =
      [[[Layout_Item_Resource builderWithPrototype:result.resource] mergeFrom:value] buildPartial];
  } else {
    result.resource = value;
  }
  result.hasResource = YES;
  return self;
}
- (Layout_Item_Builder*) clearResource {
  result.hasResource = NO;
  result.resource = [Layout_Item_Resource defaultInstance];
  return self;
}
- (BOOL) hasZoomLeft {
  return result.hasZoomLeft;
}
- (Float64) zoomLeft {
  return result.zoomLeft;
}
- (Layout_Item_Builder*) setZoomLeft:(Float64) value {
  result.hasZoomLeft = YES;
  result.zoomLeft = value;
  return self;
}
- (Layout_Item_Builder*) clearZoomLeft {
  result.hasZoomLeft = NO;
  result.zoomLeft = 0;
  return self;
}
- (BOOL) hasZoomTop {
  return result.hasZoomTop;
}
- (Float64) zoomTop {
  return result.zoomTop;
}
- (Layout_Item_Builder*) setZoomTop:(Float64) value {
  result.hasZoomTop = YES;
  result.zoomTop = value;
  return self;
}
- (Layout_Item_Builder*) clearZoomTop {
  result.hasZoomTop = NO;
  result.zoomTop = 0;
  return self;
}
- (BOOL) hasZoomRight {
  return result.hasZoomRight;
}
- (Float64) zoomRight {
  return result.zoomRight;
}
- (Layout_Item_Builder*) setZoomRight:(Float64) value {
  result.hasZoomRight = YES;
  result.zoomRight = value;
  return self;
}
- (Layout_Item_Builder*) clearZoomRight {
  result.hasZoomRight = NO;
  result.zoomRight = 0;
  return self;
}
- (BOOL) hasZoomBottom {
  return result.hasZoomBottom;
}
- (Float64) zoomBottom {
  return result.zoomBottom;
}
- (Layout_Item_Builder*) setZoomBottom:(Float64) value {
  result.hasZoomBottom = YES;
  result.zoomBottom = value;
  return self;
}
- (Layout_Item_Builder*) clearZoomBottom {
  result.hasZoomBottom = NO;
  result.zoomBottom = 0;
  return self;
}
- (BOOL) hasZoomTargetUuid {
  return result.hasZoomTargetUuid;
}
- (NSString*) zoomTargetUuid {
  return result.zoomTargetUuid;
}
- (Layout_Item_Builder*) setZoomTargetUuid:(NSString*) value {
  result.hasZoomTargetUuid = YES;
  result.zoomTargetUuid = value;
  return self;
}
- (Layout_Item_Builder*) clearZoomTargetUuid {
  result.hasZoomTargetUuid = NO;
  result.zoomTargetUuid = @"";
  return self;
}
- (BOOL) hasContrastParams {
  return result.hasContrastParams;
}
- (NSString*) contrastParams {
  return result.contrastParams;
}
- (Layout_Item_Builder*) setContrastParams:(NSString*) value {
  result.hasContrastParams = YES;
  result.contrastParams = value;
  return self;
}
- (Layout_Item_Builder*) clearContrastParams {
  result.hasContrastParams = NO;
  result.contrastParams = @"";
  return self;
}
- (BOOL) hasDewarpingParams {
  return result.hasDewarpingParams;
}
- (NSString*) dewarpingParams {
  return result.dewarpingParams;
}
- (Layout_Item_Builder*) setDewarpingParams:(NSString*) value {
  result.hasDewarpingParams = YES;
  result.dewarpingParams = value;
  return self;
}
- (Layout_Item_Builder*) clearDewarpingParams {
  result.hasDewarpingParams = NO;
  result.dewarpingParams = @"";
  return self;
}
@end

@interface Layout_Builder()
@property (strong) Layout* result;
@end

@implementation Layout_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Layout alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Layout_Builder*) clear {
  self.result = [[Layout alloc] init];
  return self;
}
- (Layout_Builder*) clone {
  return [Layout builderWithPrototype:result];
}
- (Layout*) defaultInstance {
  return [Layout defaultInstance];
}
- (Layout*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Layout*) buildPartial {
  Layout* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Layout_Builder*) mergeFrom:(Layout*) other {
  if (other == [Layout defaultInstance]) {
    return self;
  }
  if (other.hasCellAspectRatio) {
    [self setCellAspectRatio:other.cellAspectRatio];
  }
  if (other.hasCellSpacingWidth) {
    [self setCellSpacingWidth:other.cellSpacingWidth];
  }
  if (other.hasCellSpacingHeight) {
    [self setCellSpacingHeight:other.cellSpacingHeight];
  }
  if (other.itemArray.count > 0) {
    if (result.itemArray == nil) {
      result.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [result.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  if (other.hasUserCanEdit) {
    [self setUserCanEdit:other.userCanEdit];
  }
  if (other.hasLocked) {
    [self setLocked:other.locked];
  }
  if (other.hasBackgroundImageFilename) {
    [self setBackgroundImageFilename:other.backgroundImageFilename];
  }
  if (other.hasBackgroundWidth) {
    [self setBackgroundWidth:other.backgroundWidth];
  }
  if (other.hasBackgroundHeight) {
    [self setBackgroundHeight:other.backgroundHeight];
  }
  if (other.hasBackgroundOpacity) {
    [self setBackgroundOpacity:other.backgroundOpacity];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Layout_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Layout_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setCellAspectRatio:[input readDouble]];
        break;
      }
      case 17: {
        [self setCellSpacingWidth:[input readDouble]];
        break;
      }
      case 25: {
        [self setCellSpacingHeight:[input readDouble]];
        break;
      }
      case 34: {
        Layout_Item_Builder* subBuilder = [Layout_Item builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setUserCanEdit:[input readBool]];
        break;
      }
      case 48: {
        [self setLocked:[input readBool]];
        break;
      }
      case 58: {
        [self setBackgroundImageFilename:[input readString]];
        break;
      }
      case 64: {
        [self setBackgroundWidth:[input readInt32]];
        break;
      }
      case 72: {
        [self setBackgroundHeight:[input readInt32]];
        break;
      }
      case 81: {
        [self setBackgroundOpacity:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasCellAspectRatio {
  return result.hasCellAspectRatio;
}
- (Float64) cellAspectRatio {
  return result.cellAspectRatio;
}
- (Layout_Builder*) setCellAspectRatio:(Float64) value {
  result.hasCellAspectRatio = YES;
  result.cellAspectRatio = value;
  return self;
}
- (Layout_Builder*) clearCellAspectRatio {
  result.hasCellAspectRatio = NO;
  result.cellAspectRatio = 0;
  return self;
}
- (BOOL) hasCellSpacingWidth {
  return result.hasCellSpacingWidth;
}
- (Float64) cellSpacingWidth {
  return result.cellSpacingWidth;
}
- (Layout_Builder*) setCellSpacingWidth:(Float64) value {
  result.hasCellSpacingWidth = YES;
  result.cellSpacingWidth = value;
  return self;
}
- (Layout_Builder*) clearCellSpacingWidth {
  result.hasCellSpacingWidth = NO;
  result.cellSpacingWidth = 0;
  return self;
}
- (BOOL) hasCellSpacingHeight {
  return result.hasCellSpacingHeight;
}
- (Float64) cellSpacingHeight {
  return result.cellSpacingHeight;
}
- (Layout_Builder*) setCellSpacingHeight:(Float64) value {
  result.hasCellSpacingHeight = YES;
  result.cellSpacingHeight = value;
  return self;
}
- (Layout_Builder*) clearCellSpacingHeight {
  result.hasCellSpacingHeight = NO;
  result.cellSpacingHeight = 0;
  return self;
}
- (NSMutableArray *)item {
  return result.itemArray;
}
- (Layout_Item*)itemAtIndex:(NSUInteger)index {
  return [result itemAtIndex:index];
}
- (Layout_Builder *)addItem:(Layout_Item*)value {
  if (result.itemArray == nil) {
    result.itemArray = [[NSMutableArray alloc]init];
  }
  [result.itemArray addObject:value];
  return self;
}
- (Layout_Builder *)setItemArray:(NSArray *)array {
  result.itemArray = [[NSMutableArray alloc]init];
  return self;
}
- (Layout_Builder *)clearItem {
  result.itemArray = nil;
  return self;
}
- (BOOL) hasUserCanEdit {
  return result.hasUserCanEdit;
}
- (BOOL) userCanEdit {
  return result.userCanEdit;
}
- (Layout_Builder*) setUserCanEdit:(BOOL) value {
  result.hasUserCanEdit = YES;
  result.userCanEdit = value;
  return self;
}
- (Layout_Builder*) clearUserCanEdit {
  result.hasUserCanEdit = NO;
  result.userCanEdit = NO;
  return self;
}
- (BOOL) hasLocked {
  return result.hasLocked;
}
- (BOOL) locked {
  return result.locked;
}
- (Layout_Builder*) setLocked:(BOOL) value {
  result.hasLocked = YES;
  result.locked = value;
  return self;
}
- (Layout_Builder*) clearLocked {
  result.hasLocked = NO;
  result.locked = NO;
  return self;
}
- (BOOL) hasBackgroundImageFilename {
  return result.hasBackgroundImageFilename;
}
- (NSString*) backgroundImageFilename {
  return result.backgroundImageFilename;
}
- (Layout_Builder*) setBackgroundImageFilename:(NSString*) value {
  result.hasBackgroundImageFilename = YES;
  result.backgroundImageFilename = value;
  return self;
}
- (Layout_Builder*) clearBackgroundImageFilename {
  result.hasBackgroundImageFilename = NO;
  result.backgroundImageFilename = @"";
  return self;
}
- (BOOL) hasBackgroundWidth {
  return result.hasBackgroundWidth;
}
- (int32_t) backgroundWidth {
  return result.backgroundWidth;
}
- (Layout_Builder*) setBackgroundWidth:(int32_t) value {
  result.hasBackgroundWidth = YES;
  result.backgroundWidth = value;
  return self;
}
- (Layout_Builder*) clearBackgroundWidth {
  result.hasBackgroundWidth = NO;
  result.backgroundWidth = 0;
  return self;
}
- (BOOL) hasBackgroundHeight {
  return result.hasBackgroundHeight;
}
- (int32_t) backgroundHeight {
  return result.backgroundHeight;
}
- (Layout_Builder*) setBackgroundHeight:(int32_t) value {
  result.hasBackgroundHeight = YES;
  result.backgroundHeight = value;
  return self;
}
- (Layout_Builder*) clearBackgroundHeight {
  result.hasBackgroundHeight = NO;
  result.backgroundHeight = 0;
  return self;
}
- (BOOL) hasBackgroundOpacity {
  return result.hasBackgroundOpacity;
}
- (Float64) backgroundOpacity {
  return result.backgroundOpacity;
}
- (Layout_Builder*) setBackgroundOpacity:(Float64) value {
  result.hasBackgroundOpacity = YES;
  result.backgroundOpacity = value;
  return self;
}
- (Layout_Builder*) clearBackgroundOpacity {
  result.hasBackgroundOpacity = NO;
  result.backgroundOpacity = 0;
  return self;
}
@end

