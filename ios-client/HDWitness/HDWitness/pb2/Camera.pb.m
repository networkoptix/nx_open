// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Camera.pb.h"

@implementation CameraRoot
static id<PBExtensionField> Camera_resource = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CameraRoot class]) {
    Camera_resource =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[Resource class]
                                       fieldNumber:100
                                      defaultValue:[Camera defaultInstance]
                               messageOrGroupClass:[Camera class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ResourceRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:Camera_resource];
}
@end

@interface Camera ()
@property BOOL scheduleDisabled;
@property Camera_MotionType motionType;
@property (strong) NSString* region;
@property (strong) NSString* mac;
@property (strong) NSString* login;
@property (strong) NSString* password;
@property (strong) NSMutableArray * scheduleTaskArray;
@property BOOL audioEnabled;
@property (strong) NSString* physicalId;
@property BOOL manuallyAdded;
@property (strong) NSString* model;
@property (strong) NSString* firmware;
@property (strong) NSString* groupId;
@property (strong) NSString* groupName;
@property Camera_SecondaryQuality secondaryQuality;
@property BOOL controlDisabled;
@property int32_t statusFlags;
@property (strong) NSString* dewarpingParams;
@property (strong) NSString* vendor;
@end

@implementation Camera

- (BOOL) hasScheduleDisabled {
  return !!hasScheduleDisabled_;
}
- (void) setHasScheduleDisabled:(BOOL) value {
  hasScheduleDisabled_ = !!value;
}
- (BOOL) scheduleDisabled {
  return !!scheduleDisabled_;
}
- (void) setScheduleDisabled:(BOOL) value {
  scheduleDisabled_ = !!value;
}
- (BOOL) hasMotionType {
  return !!hasMotionType_;
}
- (void) setHasMotionType:(BOOL) value {
  hasMotionType_ = !!value;
}
@synthesize motionType;
- (BOOL) hasRegion {
  return !!hasRegion_;
}
- (void) setHasRegion:(BOOL) value {
  hasRegion_ = !!value;
}
@synthesize region;
- (BOOL) hasMac {
  return !!hasMac_;
}
- (void) setHasMac:(BOOL) value {
  hasMac_ = !!value;
}
@synthesize mac;
- (BOOL) hasLogin {
  return !!hasLogin_;
}
- (void) setHasLogin:(BOOL) value {
  hasLogin_ = !!value;
}
@synthesize login;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
@synthesize scheduleTaskArray;
@dynamic scheduleTask;
- (BOOL) hasAudioEnabled {
  return !!hasAudioEnabled_;
}
- (void) setHasAudioEnabled:(BOOL) value {
  hasAudioEnabled_ = !!value;
}
- (BOOL) audioEnabled {
  return !!audioEnabled_;
}
- (void) setAudioEnabled:(BOOL) value {
  audioEnabled_ = !!value;
}
- (BOOL) hasPhysicalId {
  return !!hasPhysicalId_;
}
- (void) setHasPhysicalId:(BOOL) value {
  hasPhysicalId_ = !!value;
}
@synthesize physicalId;
- (BOOL) hasManuallyAdded {
  return !!hasManuallyAdded_;
}
- (void) setHasManuallyAdded:(BOOL) value {
  hasManuallyAdded_ = !!value;
}
- (BOOL) manuallyAdded {
  return !!manuallyAdded_;
}
- (void) setManuallyAdded:(BOOL) value {
  manuallyAdded_ = !!value;
}
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) value {
  hasModel_ = !!value;
}
@synthesize model;
- (BOOL) hasFirmware {
  return !!hasFirmware_;
}
- (void) setHasFirmware:(BOOL) value {
  hasFirmware_ = !!value;
}
@synthesize firmware;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value {
  hasGroupId_ = !!value;
}
@synthesize groupId;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) value {
  hasGroupName_ = !!value;
}
@synthesize groupName;
- (BOOL) hasSecondaryQuality {
  return !!hasSecondaryQuality_;
}
- (void) setHasSecondaryQuality:(BOOL) value {
  hasSecondaryQuality_ = !!value;
}
@synthesize secondaryQuality;
- (BOOL) hasControlDisabled {
  return !!hasControlDisabled_;
}
- (void) setHasControlDisabled:(BOOL) value {
  hasControlDisabled_ = !!value;
}
- (BOOL) controlDisabled {
  return !!controlDisabled_;
}
- (void) setControlDisabled:(BOOL) value {
  controlDisabled_ = !!value;
}
- (BOOL) hasStatusFlags {
  return !!hasStatusFlags_;
}
- (void) setHasStatusFlags:(BOOL) value {
  hasStatusFlags_ = !!value;
}
@synthesize statusFlags;
- (BOOL) hasDewarpingParams {
  return !!hasDewarpingParams_;
}
- (void) setHasDewarpingParams:(BOOL) value {
  hasDewarpingParams_ = !!value;
}
@synthesize dewarpingParams;
- (BOOL) hasVendor {
  return !!hasVendor_;
}
- (void) setHasVendor:(BOOL) value {
  hasVendor_ = !!value;
}
@synthesize vendor;
- (id) init {
  if ((self = [super init])) {
    self.scheduleDisabled = NO;
    self.motionType = Camera_MotionTypeDefault;
    self.region = @"";
    self.mac = @"";
    self.login = @"";
    self.password = @"";
    self.audioEnabled = NO;
    self.physicalId = @"";
    self.manuallyAdded = NO;
    self.model = @"";
    self.firmware = @"";
    self.groupId = @"";
    self.groupName = @"";
    self.secondaryQuality = Camera_SecondaryQualitySecondaryLow;
    self.controlDisabled = NO;
    self.statusFlags = 0;
    self.dewarpingParams = @"";
    self.vendor = @"";
  }
  return self;
}
+ (id<PBExtensionField>) resource {
  return Camera_resource;
}
static Camera* defaultCameraInstance = nil;
+ (void) initialize {
  if (self == [Camera class]) {
    defaultCameraInstance = [[Camera alloc] init];
  }
}
+ (Camera*) defaultInstance {
  return defaultCameraInstance;
}
- (Camera*) defaultInstance {
  return defaultCameraInstance;
}
- (NSArray *)scheduleTask {
  return scheduleTaskArray;
}
- (Camera_ScheduleTask*)scheduleTaskAtIndex:(NSUInteger)index {
  return [scheduleTaskArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (Camera_ScheduleTask* element in self.scheduleTask) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasScheduleDisabled) {
    [output writeBool:1 value:self.scheduleDisabled];
  }
  if (self.hasMotionType) {
    [output writeEnum:2 value:self.motionType];
  }
  if (self.hasRegion) {
    [output writeString:3 value:self.region];
  }
  if (self.hasMac) {
    [output writeString:4 value:self.mac];
  }
  if (self.hasLogin) {
    [output writeString:5 value:self.login];
  }
  if (self.hasPassword) {
    [output writeString:6 value:self.password];
  }
  for (Camera_ScheduleTask *element in self.scheduleTaskArray) {
    [output writeMessage:7 value:element];
  }
  if (self.hasAudioEnabled) {
    [output writeBool:8 value:self.audioEnabled];
  }
  if (self.hasPhysicalId) {
    [output writeString:9 value:self.physicalId];
  }
  if (self.hasManuallyAdded) {
    [output writeBool:10 value:self.manuallyAdded];
  }
  if (self.hasModel) {
    [output writeString:11 value:self.model];
  }
  if (self.hasFirmware) {
    [output writeString:12 value:self.firmware];
  }
  if (self.hasGroupId) {
    [output writeString:13 value:self.groupId];
  }
  if (self.hasGroupName) {
    [output writeString:14 value:self.groupName];
  }
  if (self.hasSecondaryQuality) {
    [output writeEnum:15 value:self.secondaryQuality];
  }
  if (self.hasControlDisabled) {
    [output writeBool:16 value:self.controlDisabled];
  }
  if (self.hasStatusFlags) {
    [output writeInt32:17 value:self.statusFlags];
  }
  if (self.hasDewarpingParams) {
    [output writeString:18 value:self.dewarpingParams];
  }
  if (self.hasVendor) {
    [output writeString:19 value:self.vendor];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasScheduleDisabled) {
    size += computeBoolSize(1, self.scheduleDisabled);
  }
  if (self.hasMotionType) {
    size += computeEnumSize(2, self.motionType);
  }
  if (self.hasRegion) {
    size += computeStringSize(3, self.region);
  }
  if (self.hasMac) {
    size += computeStringSize(4, self.mac);
  }
  if (self.hasLogin) {
    size += computeStringSize(5, self.login);
  }
  if (self.hasPassword) {
    size += computeStringSize(6, self.password);
  }
  for (Camera_ScheduleTask *element in self.scheduleTaskArray) {
    size += computeMessageSize(7, element);
  }
  if (self.hasAudioEnabled) {
    size += computeBoolSize(8, self.audioEnabled);
  }
  if (self.hasPhysicalId) {
    size += computeStringSize(9, self.physicalId);
  }
  if (self.hasManuallyAdded) {
    size += computeBoolSize(10, self.manuallyAdded);
  }
  if (self.hasModel) {
    size += computeStringSize(11, self.model);
  }
  if (self.hasFirmware) {
    size += computeStringSize(12, self.firmware);
  }
  if (self.hasGroupId) {
    size += computeStringSize(13, self.groupId);
  }
  if (self.hasGroupName) {
    size += computeStringSize(14, self.groupName);
  }
  if (self.hasSecondaryQuality) {
    size += computeEnumSize(15, self.secondaryQuality);
  }
  if (self.hasControlDisabled) {
    size += computeBoolSize(16, self.controlDisabled);
  }
  if (self.hasStatusFlags) {
    size += computeInt32Size(17, self.statusFlags);
  }
  if (self.hasDewarpingParams) {
    size += computeStringSize(18, self.dewarpingParams);
  }
  if (self.hasVendor) {
    size += computeStringSize(19, self.vendor);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Camera*) parseFromData:(NSData*) data {
  return (Camera*)[[[Camera builder] mergeFromData:data] build];
}
+ (Camera*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Camera*)[[[Camera builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Camera*) parseFromInputStream:(NSInputStream*) input {
  return (Camera*)[[[Camera builder] mergeFromInputStream:input] build];
}
+ (Camera*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Camera*)[[[Camera builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Camera*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Camera*)[[[Camera builder] mergeFromCodedInputStream:input] build];
}
+ (Camera*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Camera*)[[[Camera builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Camera_Builder*) builder {
  return [[Camera_Builder alloc] init];
}
+ (Camera_Builder*) builderWithPrototype:(Camera*) prototype {
  return [[Camera builder] mergeFrom:prototype];
}
- (Camera_Builder*) builder {
  return [Camera builder];
}
- (Camera_Builder*) toBuilder {
  return [Camera builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasScheduleDisabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scheduleDisabled", [NSNumber numberWithBool:self.scheduleDisabled]];
  }
  if (self.hasMotionType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"motionType", self.motionType];
  }
  if (self.hasRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"region", self.region];
  }
  if (self.hasMac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mac", self.mac];
  }
  if (self.hasLogin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"login", self.login];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  for (Camera_ScheduleTask* element in self.scheduleTaskArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"scheduleTask"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAudioEnabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"audioEnabled", [NSNumber numberWithBool:self.audioEnabled]];
  }
  if (self.hasPhysicalId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"physicalId", self.physicalId];
  }
  if (self.hasManuallyAdded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"manuallyAdded", [NSNumber numberWithBool:self.manuallyAdded]];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasFirmware) {
    [output appendFormat:@"%@%@: %@\n", indent, @"firmware", self.firmware];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasSecondaryQuality) {
    [output appendFormat:@"%@%@: %d\n", indent, @"secondaryQuality", self.secondaryQuality];
  }
  if (self.hasControlDisabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"controlDisabled", [NSNumber numberWithBool:self.controlDisabled]];
  }
  if (self.hasStatusFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusFlags", [NSNumber numberWithInt:self.statusFlags]];
  }
  if (self.hasDewarpingParams) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dewarpingParams", self.dewarpingParams];
  }
  if (self.hasVendor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vendor", self.vendor];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Camera class]]) {
    return NO;
  }
  Camera *otherMessage = other;
  return
      self.hasScheduleDisabled == otherMessage.hasScheduleDisabled &&
      (!self.hasScheduleDisabled || self.scheduleDisabled == otherMessage.scheduleDisabled) &&
      self.hasMotionType == otherMessage.hasMotionType &&
      (!self.hasMotionType || self.motionType != otherMessage.motionType) &&
      self.hasRegion == otherMessage.hasRegion &&
      (!self.hasRegion || [self.region isEqual:otherMessage.region]) &&
      self.hasMac == otherMessage.hasMac &&
      (!self.hasMac || [self.mac isEqual:otherMessage.mac]) &&
      self.hasLogin == otherMessage.hasLogin &&
      (!self.hasLogin || [self.login isEqual:otherMessage.login]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      [self.scheduleTaskArray isEqualToArray:otherMessage.scheduleTaskArray] &&
      self.hasAudioEnabled == otherMessage.hasAudioEnabled &&
      (!self.hasAudioEnabled || self.audioEnabled == otherMessage.audioEnabled) &&
      self.hasPhysicalId == otherMessage.hasPhysicalId &&
      (!self.hasPhysicalId || [self.physicalId isEqual:otherMessage.physicalId]) &&
      self.hasManuallyAdded == otherMessage.hasManuallyAdded &&
      (!self.hasManuallyAdded || self.manuallyAdded == otherMessage.manuallyAdded) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasFirmware == otherMessage.hasFirmware &&
      (!self.hasFirmware || [self.firmware isEqual:otherMessage.firmware]) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasSecondaryQuality == otherMessage.hasSecondaryQuality &&
      (!self.hasSecondaryQuality || self.secondaryQuality != otherMessage.secondaryQuality) &&
      self.hasControlDisabled == otherMessage.hasControlDisabled &&
      (!self.hasControlDisabled || self.controlDisabled == otherMessage.controlDisabled) &&
      self.hasStatusFlags == otherMessage.hasStatusFlags &&
      (!self.hasStatusFlags || self.statusFlags == otherMessage.statusFlags) &&
      self.hasDewarpingParams == otherMessage.hasDewarpingParams &&
      (!self.hasDewarpingParams || [self.dewarpingParams isEqual:otherMessage.dewarpingParams]) &&
      self.hasVendor == otherMessage.hasVendor &&
      (!self.hasVendor || [self.vendor isEqual:otherMessage.vendor]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasScheduleDisabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.scheduleDisabled] hash];
  }
  if (self.hasMotionType) {
    hashCode = hashCode * 31 + self.motionType;
  }
  if (self.hasRegion) {
    hashCode = hashCode * 31 + [self.region hash];
  }
  if (self.hasMac) {
    hashCode = hashCode * 31 + [self.mac hash];
  }
  if (self.hasLogin) {
    hashCode = hashCode * 31 + [self.login hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  for (Camera_ScheduleTask* element in self.scheduleTaskArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasAudioEnabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.audioEnabled] hash];
  }
  if (self.hasPhysicalId) {
    hashCode = hashCode * 31 + [self.physicalId hash];
  }
  if (self.hasManuallyAdded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.manuallyAdded] hash];
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasFirmware) {
    hashCode = hashCode * 31 + [self.firmware hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasSecondaryQuality) {
    hashCode = hashCode * 31 + self.secondaryQuality;
  }
  if (self.hasControlDisabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.controlDisabled] hash];
  }
  if (self.hasStatusFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.statusFlags] hash];
  }
  if (self.hasDewarpingParams) {
    hashCode = hashCode * 31 + [self.dewarpingParams hash];
  }
  if (self.hasVendor) {
    hashCode = hashCode * 31 + [self.vendor hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL Camera_MotionTypeIsValidValue(Camera_MotionType value) {
  switch (value) {
    case Camera_MotionTypeDefault:
    case Camera_MotionTypeHardwareGrid:
    case Camera_MotionTypeSoftwareGrid:
    case Camera_MotionTypeMotionWindow:
    case Camera_MotionTypeNoMotion:
      return YES;
    default:
      return NO;
  }
}
BOOL Camera_QualityIsValidValue(Camera_Quality value) {
  switch (value) {
    case Camera_QualityLowest:
    case Camera_QualityLow:
    case Camera_QualityNormal:
    case Camera_QualityHigh:
    case Camera_QualityHighest:
    case Camera_QualityPreset:
      return YES;
    default:
      return NO;
  }
}
BOOL Camera_SecondaryQualityIsValidValue(Camera_SecondaryQuality value) {
  switch (value) {
    case Camera_SecondaryQualitySecondaryLow:
    case Camera_SecondaryQualitySecondaryMedium:
    case Camera_SecondaryQualitySecondaryHigh:
    case Camera_SecondaryQualitySecondaryNotDefined:
    case Camera_SecondaryQualitySecondaryDontUse:
      return YES;
    default:
      return NO;
  }
}
@interface Camera_ScheduleTask ()
@property int32_t id;
@property int32_t sourceId;
@property int32_t startTime;
@property int32_t endTime;
@property BOOL doRecordAudio;
@property int32_t recordType;
@property int32_t dayOfWeek;
@property int32_t beforeThreshold;
@property int32_t afterThreshold;
@property Camera_Quality streamQuality;
@property int32_t fps;
@end

@implementation Camera_ScheduleTask

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasSourceId {
  return !!hasSourceId_;
}
- (void) setHasSourceId:(BOOL) value {
  hasSourceId_ = !!value;
}
@synthesize sourceId;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value {
  hasStartTime_ = !!value;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) value {
  hasEndTime_ = !!value;
}
@synthesize endTime;
- (BOOL) hasDoRecordAudio {
  return !!hasDoRecordAudio_;
}
- (void) setHasDoRecordAudio:(BOOL) value {
  hasDoRecordAudio_ = !!value;
}
- (BOOL) doRecordAudio {
  return !!doRecordAudio_;
}
- (void) setDoRecordAudio:(BOOL) value {
  doRecordAudio_ = !!value;
}
- (BOOL) hasRecordType {
  return !!hasRecordType_;
}
- (void) setHasRecordType:(BOOL) value {
  hasRecordType_ = !!value;
}
@synthesize recordType;
- (BOOL) hasDayOfWeek {
  return !!hasDayOfWeek_;
}
- (void) setHasDayOfWeek:(BOOL) value {
  hasDayOfWeek_ = !!value;
}
@synthesize dayOfWeek;
- (BOOL) hasBeforeThreshold {
  return !!hasBeforeThreshold_;
}
- (void) setHasBeforeThreshold:(BOOL) value {
  hasBeforeThreshold_ = !!value;
}
@synthesize beforeThreshold;
- (BOOL) hasAfterThreshold {
  return !!hasAfterThreshold_;
}
- (void) setHasAfterThreshold:(BOOL) value {
  hasAfterThreshold_ = !!value;
}
@synthesize afterThreshold;
- (BOOL) hasStreamQuality {
  return !!hasStreamQuality_;
}
- (void) setHasStreamQuality:(BOOL) value {
  hasStreamQuality_ = !!value;
}
@synthesize streamQuality;
- (BOOL) hasFps {
  return !!hasFps_;
}
- (void) setHasFps:(BOOL) value {
  hasFps_ = !!value;
}
@synthesize fps;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.sourceId = 0;
    self.startTime = 0;
    self.endTime = 0;
    self.doRecordAudio = NO;
    self.recordType = 0;
    self.dayOfWeek = 0;
    self.beforeThreshold = 0;
    self.afterThreshold = 0;
    self.streamQuality = Camera_QualityLowest;
    self.fps = 0;
  }
  return self;
}
static Camera_ScheduleTask* defaultCamera_ScheduleTaskInstance = nil;
+ (void) initialize {
  if (self == [Camera_ScheduleTask class]) {
    defaultCamera_ScheduleTaskInstance = [[Camera_ScheduleTask alloc] init];
  }
}
+ (Camera_ScheduleTask*) defaultInstance {
  return defaultCamera_ScheduleTaskInstance;
}
- (Camera_ScheduleTask*) defaultInstance {
  return defaultCamera_ScheduleTaskInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasSourceId) {
    return NO;
  }
  if (!self.hasStartTime) {
    return NO;
  }
  if (!self.hasEndTime) {
    return NO;
  }
  if (!self.hasDoRecordAudio) {
    return NO;
  }
  if (!self.hasRecordType) {
    return NO;
  }
  if (!self.hasDayOfWeek) {
    return NO;
  }
  if (!self.hasBeforeThreshold) {
    return NO;
  }
  if (!self.hasAfterThreshold) {
    return NO;
  }
  if (!self.hasStreamQuality) {
    return NO;
  }
  if (!self.hasFps) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasSourceId) {
    [output writeInt32:2 value:self.sourceId];
  }
  if (self.hasStartTime) {
    [output writeInt32:3 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeInt32:4 value:self.endTime];
  }
  if (self.hasDoRecordAudio) {
    [output writeBool:5 value:self.doRecordAudio];
  }
  if (self.hasRecordType) {
    [output writeInt32:6 value:self.recordType];
  }
  if (self.hasDayOfWeek) {
    [output writeInt32:7 value:self.dayOfWeek];
  }
  if (self.hasBeforeThreshold) {
    [output writeInt32:8 value:self.beforeThreshold];
  }
  if (self.hasAfterThreshold) {
    [output writeInt32:9 value:self.afterThreshold];
  }
  if (self.hasStreamQuality) {
    [output writeEnum:10 value:self.streamQuality];
  }
  if (self.hasFps) {
    [output writeInt32:11 value:self.fps];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasSourceId) {
    size += computeInt32Size(2, self.sourceId);
  }
  if (self.hasStartTime) {
    size += computeInt32Size(3, self.startTime);
  }
  if (self.hasEndTime) {
    size += computeInt32Size(4, self.endTime);
  }
  if (self.hasDoRecordAudio) {
    size += computeBoolSize(5, self.doRecordAudio);
  }
  if (self.hasRecordType) {
    size += computeInt32Size(6, self.recordType);
  }
  if (self.hasDayOfWeek) {
    size += computeInt32Size(7, self.dayOfWeek);
  }
  if (self.hasBeforeThreshold) {
    size += computeInt32Size(8, self.beforeThreshold);
  }
  if (self.hasAfterThreshold) {
    size += computeInt32Size(9, self.afterThreshold);
  }
  if (self.hasStreamQuality) {
    size += computeEnumSize(10, self.streamQuality);
  }
  if (self.hasFps) {
    size += computeInt32Size(11, self.fps);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Camera_ScheduleTask*) parseFromData:(NSData*) data {
  return (Camera_ScheduleTask*)[[[Camera_ScheduleTask builder] mergeFromData:data] build];
}
+ (Camera_ScheduleTask*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Camera_ScheduleTask*)[[[Camera_ScheduleTask builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Camera_ScheduleTask*) parseFromInputStream:(NSInputStream*) input {
  return (Camera_ScheduleTask*)[[[Camera_ScheduleTask builder] mergeFromInputStream:input] build];
}
+ (Camera_ScheduleTask*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Camera_ScheduleTask*)[[[Camera_ScheduleTask builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Camera_ScheduleTask*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Camera_ScheduleTask*)[[[Camera_ScheduleTask builder] mergeFromCodedInputStream:input] build];
}
+ (Camera_ScheduleTask*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Camera_ScheduleTask*)[[[Camera_ScheduleTask builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Camera_ScheduleTask_Builder*) builder {
  return [[Camera_ScheduleTask_Builder alloc] init];
}
+ (Camera_ScheduleTask_Builder*) builderWithPrototype:(Camera_ScheduleTask*) prototype {
  return [[Camera_ScheduleTask builder] mergeFrom:prototype];
}
- (Camera_ScheduleTask_Builder*) builder {
  return [Camera_ScheduleTask builder];
}
- (Camera_ScheduleTask_Builder*) toBuilder {
  return [Camera_ScheduleTask builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasSourceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceId", [NSNumber numberWithInt:self.sourceId]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithInt:self.startTime]];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", [NSNumber numberWithInt:self.endTime]];
  }
  if (self.hasDoRecordAudio) {
    [output appendFormat:@"%@%@: %@\n", indent, @"doRecordAudio", [NSNumber numberWithBool:self.doRecordAudio]];
  }
  if (self.hasRecordType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recordType", [NSNumber numberWithInt:self.recordType]];
  }
  if (self.hasDayOfWeek) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dayOfWeek", [NSNumber numberWithInt:self.dayOfWeek]];
  }
  if (self.hasBeforeThreshold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beforeThreshold", [NSNumber numberWithInt:self.beforeThreshold]];
  }
  if (self.hasAfterThreshold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"afterThreshold", [NSNumber numberWithInt:self.afterThreshold]];
  }
  if (self.hasStreamQuality) {
    [output appendFormat:@"%@%@: %d\n", indent, @"streamQuality", self.streamQuality];
  }
  if (self.hasFps) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fps", [NSNumber numberWithInt:self.fps]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Camera_ScheduleTask class]]) {
    return NO;
  }
  Camera_ScheduleTask *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSourceId == otherMessage.hasSourceId &&
      (!self.hasSourceId || self.sourceId == otherMessage.sourceId) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || self.endTime == otherMessage.endTime) &&
      self.hasDoRecordAudio == otherMessage.hasDoRecordAudio &&
      (!self.hasDoRecordAudio || self.doRecordAudio == otherMessage.doRecordAudio) &&
      self.hasRecordType == otherMessage.hasRecordType &&
      (!self.hasRecordType || self.recordType == otherMessage.recordType) &&
      self.hasDayOfWeek == otherMessage.hasDayOfWeek &&
      (!self.hasDayOfWeek || self.dayOfWeek == otherMessage.dayOfWeek) &&
      self.hasBeforeThreshold == otherMessage.hasBeforeThreshold &&
      (!self.hasBeforeThreshold || self.beforeThreshold == otherMessage.beforeThreshold) &&
      self.hasAfterThreshold == otherMessage.hasAfterThreshold &&
      (!self.hasAfterThreshold || self.afterThreshold == otherMessage.afterThreshold) &&
      self.hasStreamQuality == otherMessage.hasStreamQuality &&
      (!self.hasStreamQuality || self.streamQuality != otherMessage.streamQuality) &&
      self.hasFps == otherMessage.hasFps &&
      (!self.hasFps || self.fps == otherMessage.fps) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasSourceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceId] hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.startTime] hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.endTime] hash];
  }
  if (self.hasDoRecordAudio) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.doRecordAudio] hash];
  }
  if (self.hasRecordType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.recordType] hash];
  }
  if (self.hasDayOfWeek) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.dayOfWeek] hash];
  }
  if (self.hasBeforeThreshold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.beforeThreshold] hash];
  }
  if (self.hasAfterThreshold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.afterThreshold] hash];
  }
  if (self.hasStreamQuality) {
    hashCode = hashCode * 31 + self.streamQuality;
  }
  if (self.hasFps) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.fps] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Camera_ScheduleTask_Builder()
@property (strong) Camera_ScheduleTask* result;
@end

@implementation Camera_ScheduleTask_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Camera_ScheduleTask alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Camera_ScheduleTask_Builder*) clear {
  self.result = [[Camera_ScheduleTask alloc] init];
  return self;
}
- (Camera_ScheduleTask_Builder*) clone {
  return [Camera_ScheduleTask builderWithPrototype:result];
}
- (Camera_ScheduleTask*) defaultInstance {
  return [Camera_ScheduleTask defaultInstance];
}
- (Camera_ScheduleTask*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Camera_ScheduleTask*) buildPartial {
  Camera_ScheduleTask* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Camera_ScheduleTask_Builder*) mergeFrom:(Camera_ScheduleTask*) other {
  if (other == [Camera_ScheduleTask defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSourceId) {
    [self setSourceId:other.sourceId];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  if (other.hasDoRecordAudio) {
    [self setDoRecordAudio:other.doRecordAudio];
  }
  if (other.hasRecordType) {
    [self setRecordType:other.recordType];
  }
  if (other.hasDayOfWeek) {
    [self setDayOfWeek:other.dayOfWeek];
  }
  if (other.hasBeforeThreshold) {
    [self setBeforeThreshold:other.beforeThreshold];
  }
  if (other.hasAfterThreshold) {
    [self setAfterThreshold:other.afterThreshold];
  }
  if (other.hasStreamQuality) {
    [self setStreamQuality:other.streamQuality];
  }
  if (other.hasFps) {
    [self setFps:other.fps];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Camera_ScheduleTask_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Camera_ScheduleTask_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setSourceId:[input readInt32]];
        break;
      }
      case 24: {
        [self setStartTime:[input readInt32]];
        break;
      }
      case 32: {
        [self setEndTime:[input readInt32]];
        break;
      }
      case 40: {
        [self setDoRecordAudio:[input readBool]];
        break;
      }
      case 48: {
        [self setRecordType:[input readInt32]];
        break;
      }
      case 56: {
        [self setDayOfWeek:[input readInt32]];
        break;
      }
      case 64: {
        [self setBeforeThreshold:[input readInt32]];
        break;
      }
      case 72: {
        [self setAfterThreshold:[input readInt32]];
        break;
      }
      case 80: {
        int32_t value = [input readEnum];
        if (Camera_QualityIsValidValue(value)) {
          [self setStreamQuality:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        [self setFps:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Camera_ScheduleTask_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasSourceId {
  return result.hasSourceId;
}
- (int32_t) sourceId {
  return result.sourceId;
}
- (Camera_ScheduleTask_Builder*) setSourceId:(int32_t) value {
  result.hasSourceId = YES;
  result.sourceId = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearSourceId {
  result.hasSourceId = NO;
  result.sourceId = 0;
  return self;
}
- (BOOL) hasStartTime {
  return result.hasStartTime;
}
- (int32_t) startTime {
  return result.startTime;
}
- (Camera_ScheduleTask_Builder*) setStartTime:(int32_t) value {
  result.hasStartTime = YES;
  result.startTime = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearStartTime {
  result.hasStartTime = NO;
  result.startTime = 0;
  return self;
}
- (BOOL) hasEndTime {
  return result.hasEndTime;
}
- (int32_t) endTime {
  return result.endTime;
}
- (Camera_ScheduleTask_Builder*) setEndTime:(int32_t) value {
  result.hasEndTime = YES;
  result.endTime = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearEndTime {
  result.hasEndTime = NO;
  result.endTime = 0;
  return self;
}
- (BOOL) hasDoRecordAudio {
  return result.hasDoRecordAudio;
}
- (BOOL) doRecordAudio {
  return result.doRecordAudio;
}
- (Camera_ScheduleTask_Builder*) setDoRecordAudio:(BOOL) value {
  result.hasDoRecordAudio = YES;
  result.doRecordAudio = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearDoRecordAudio {
  result.hasDoRecordAudio = NO;
  result.doRecordAudio = NO;
  return self;
}
- (BOOL) hasRecordType {
  return result.hasRecordType;
}
- (int32_t) recordType {
  return result.recordType;
}
- (Camera_ScheduleTask_Builder*) setRecordType:(int32_t) value {
  result.hasRecordType = YES;
  result.recordType = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearRecordType {
  result.hasRecordType = NO;
  result.recordType = 0;
  return self;
}
- (BOOL) hasDayOfWeek {
  return result.hasDayOfWeek;
}
- (int32_t) dayOfWeek {
  return result.dayOfWeek;
}
- (Camera_ScheduleTask_Builder*) setDayOfWeek:(int32_t) value {
  result.hasDayOfWeek = YES;
  result.dayOfWeek = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearDayOfWeek {
  result.hasDayOfWeek = NO;
  result.dayOfWeek = 0;
  return self;
}
- (BOOL) hasBeforeThreshold {
  return result.hasBeforeThreshold;
}
- (int32_t) beforeThreshold {
  return result.beforeThreshold;
}
- (Camera_ScheduleTask_Builder*) setBeforeThreshold:(int32_t) value {
  result.hasBeforeThreshold = YES;
  result.beforeThreshold = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearBeforeThreshold {
  result.hasBeforeThreshold = NO;
  result.beforeThreshold = 0;
  return self;
}
- (BOOL) hasAfterThreshold {
  return result.hasAfterThreshold;
}
- (int32_t) afterThreshold {
  return result.afterThreshold;
}
- (Camera_ScheduleTask_Builder*) setAfterThreshold:(int32_t) value {
  result.hasAfterThreshold = YES;
  result.afterThreshold = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearAfterThreshold {
  result.hasAfterThreshold = NO;
  result.afterThreshold = 0;
  return self;
}
- (BOOL) hasStreamQuality {
  return result.hasStreamQuality;
}
- (Camera_Quality) streamQuality {
  return result.streamQuality;
}
- (Camera_ScheduleTask_Builder*) setStreamQuality:(Camera_Quality) value {
  result.hasStreamQuality = YES;
  result.streamQuality = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearStreamQuality {
  result.hasStreamQuality = NO;
  result.streamQuality = Camera_QualityLowest;
  return self;
}
- (BOOL) hasFps {
  return result.hasFps;
}
- (int32_t) fps {
  return result.fps;
}
- (Camera_ScheduleTask_Builder*) setFps:(int32_t) value {
  result.hasFps = YES;
  result.fps = value;
  return self;
}
- (Camera_ScheduleTask_Builder*) clearFps {
  result.hasFps = NO;
  result.fps = 0;
  return self;
}
@end

@interface Camera_Builder()
@property (strong) Camera* result;
@end

@implementation Camera_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Camera alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Camera_Builder*) clear {
  self.result = [[Camera alloc] init];
  return self;
}
- (Camera_Builder*) clone {
  return [Camera builderWithPrototype:result];
}
- (Camera*) defaultInstance {
  return [Camera defaultInstance];
}
- (Camera*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Camera*) buildPartial {
  Camera* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Camera_Builder*) mergeFrom:(Camera*) other {
  if (other == [Camera defaultInstance]) {
    return self;
  }
  if (other.hasScheduleDisabled) {
    [self setScheduleDisabled:other.scheduleDisabled];
  }
  if (other.hasMotionType) {
    [self setMotionType:other.motionType];
  }
  if (other.hasRegion) {
    [self setRegion:other.region];
  }
  if (other.hasMac) {
    [self setMac:other.mac];
  }
  if (other.hasLogin) {
    [self setLogin:other.login];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.scheduleTaskArray.count > 0) {
    if (result.scheduleTaskArray == nil) {
      result.scheduleTaskArray = [[NSMutableArray alloc] initWithArray:other.scheduleTaskArray];
    } else {
      [result.scheduleTaskArray addObjectsFromArray:other.scheduleTaskArray];
    }
  }
  if (other.hasAudioEnabled) {
    [self setAudioEnabled:other.audioEnabled];
  }
  if (other.hasPhysicalId) {
    [self setPhysicalId:other.physicalId];
  }
  if (other.hasManuallyAdded) {
    [self setManuallyAdded:other.manuallyAdded];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasFirmware) {
    [self setFirmware:other.firmware];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasSecondaryQuality) {
    [self setSecondaryQuality:other.secondaryQuality];
  }
  if (other.hasControlDisabled) {
    [self setControlDisabled:other.controlDisabled];
  }
  if (other.hasStatusFlags) {
    [self setStatusFlags:other.statusFlags];
  }
  if (other.hasDewarpingParams) {
    [self setDewarpingParams:other.dewarpingParams];
  }
  if (other.hasVendor) {
    [self setVendor:other.vendor];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Camera_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Camera_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setScheduleDisabled:[input readBool]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (Camera_MotionTypeIsValidValue(value)) {
          [self setMotionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setRegion:[input readString]];
        break;
      }
      case 34: {
        [self setMac:[input readString]];
        break;
      }
      case 42: {
        [self setLogin:[input readString]];
        break;
      }
      case 50: {
        [self setPassword:[input readString]];
        break;
      }
      case 58: {
        Camera_ScheduleTask_Builder* subBuilder = [Camera_ScheduleTask builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addScheduleTask:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setAudioEnabled:[input readBool]];
        break;
      }
      case 74: {
        [self setPhysicalId:[input readString]];
        break;
      }
      case 80: {
        [self setManuallyAdded:[input readBool]];
        break;
      }
      case 90: {
        [self setModel:[input readString]];
        break;
      }
      case 98: {
        [self setFirmware:[input readString]];
        break;
      }
      case 106: {
        [self setGroupId:[input readString]];
        break;
      }
      case 114: {
        [self setGroupName:[input readString]];
        break;
      }
      case 120: {
        int32_t value = [input readEnum];
        if (Camera_SecondaryQualityIsValidValue(value)) {
          [self setSecondaryQuality:value];
        } else {
          [unknownFields mergeVarintField:15 value:value];
        }
        break;
      }
      case 128: {
        [self setControlDisabled:[input readBool]];
        break;
      }
      case 136: {
        [self setStatusFlags:[input readInt32]];
        break;
      }
      case 146: {
        [self setDewarpingParams:[input readString]];
        break;
      }
      case 154: {
        [self setVendor:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasScheduleDisabled {
  return result.hasScheduleDisabled;
}
- (BOOL) scheduleDisabled {
  return result.scheduleDisabled;
}
- (Camera_Builder*) setScheduleDisabled:(BOOL) value {
  result.hasScheduleDisabled = YES;
  result.scheduleDisabled = value;
  return self;
}
- (Camera_Builder*) clearScheduleDisabled {
  result.hasScheduleDisabled = NO;
  result.scheduleDisabled = NO;
  return self;
}
- (BOOL) hasMotionType {
  return result.hasMotionType;
}
- (Camera_MotionType) motionType {
  return result.motionType;
}
- (Camera_Builder*) setMotionType:(Camera_MotionType) value {
  result.hasMotionType = YES;
  result.motionType = value;
  return self;
}
- (Camera_Builder*) clearMotionType {
  result.hasMotionType = NO;
  result.motionType = Camera_MotionTypeDefault;
  return self;
}
- (BOOL) hasRegion {
  return result.hasRegion;
}
- (NSString*) region {
  return result.region;
}
- (Camera_Builder*) setRegion:(NSString*) value {
  result.hasRegion = YES;
  result.region = value;
  return self;
}
- (Camera_Builder*) clearRegion {
  result.hasRegion = NO;
  result.region = @"";
  return self;
}
- (BOOL) hasMac {
  return result.hasMac;
}
- (NSString*) mac {
  return result.mac;
}
- (Camera_Builder*) setMac:(NSString*) value {
  result.hasMac = YES;
  result.mac = value;
  return self;
}
- (Camera_Builder*) clearMac {
  result.hasMac = NO;
  result.mac = @"";
  return self;
}
- (BOOL) hasLogin {
  return result.hasLogin;
}
- (NSString*) login {
  return result.login;
}
- (Camera_Builder*) setLogin:(NSString*) value {
  result.hasLogin = YES;
  result.login = value;
  return self;
}
- (Camera_Builder*) clearLogin {
  result.hasLogin = NO;
  result.login = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (Camera_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (Camera_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (NSMutableArray *)scheduleTask {
  return result.scheduleTaskArray;
}
- (Camera_ScheduleTask*)scheduleTaskAtIndex:(NSUInteger)index {
  return [result scheduleTaskAtIndex:index];
}
- (Camera_Builder *)addScheduleTask:(Camera_ScheduleTask*)value {
  if (result.scheduleTaskArray == nil) {
    result.scheduleTaskArray = [[NSMutableArray alloc]init];
  }
  [result.scheduleTaskArray addObject:value];
  return self;
}
- (Camera_Builder *)setScheduleTaskArray:(NSArray *)array {
  result.scheduleTaskArray = [[NSMutableArray alloc]init];
  return self;
}
- (Camera_Builder *)clearScheduleTask {
  result.scheduleTaskArray = nil;
  return self;
}
- (BOOL) hasAudioEnabled {
  return result.hasAudioEnabled;
}
- (BOOL) audioEnabled {
  return result.audioEnabled;
}
- (Camera_Builder*) setAudioEnabled:(BOOL) value {
  result.hasAudioEnabled = YES;
  result.audioEnabled = value;
  return self;
}
- (Camera_Builder*) clearAudioEnabled {
  result.hasAudioEnabled = NO;
  result.audioEnabled = NO;
  return self;
}
- (BOOL) hasPhysicalId {
  return result.hasPhysicalId;
}
- (NSString*) physicalId {
  return result.physicalId;
}
- (Camera_Builder*) setPhysicalId:(NSString*) value {
  result.hasPhysicalId = YES;
  result.physicalId = value;
  return self;
}
- (Camera_Builder*) clearPhysicalId {
  result.hasPhysicalId = NO;
  result.physicalId = @"";
  return self;
}
- (BOOL) hasManuallyAdded {
  return result.hasManuallyAdded;
}
- (BOOL) manuallyAdded {
  return result.manuallyAdded;
}
- (Camera_Builder*) setManuallyAdded:(BOOL) value {
  result.hasManuallyAdded = YES;
  result.manuallyAdded = value;
  return self;
}
- (Camera_Builder*) clearManuallyAdded {
  result.hasManuallyAdded = NO;
  result.manuallyAdded = NO;
  return self;
}
- (BOOL) hasModel {
  return result.hasModel;
}
- (NSString*) model {
  return result.model;
}
- (Camera_Builder*) setModel:(NSString*) value {
  result.hasModel = YES;
  result.model = value;
  return self;
}
- (Camera_Builder*) clearModel {
  result.hasModel = NO;
  result.model = @"";
  return self;
}
- (BOOL) hasFirmware {
  return result.hasFirmware;
}
- (NSString*) firmware {
  return result.firmware;
}
- (Camera_Builder*) setFirmware:(NSString*) value {
  result.hasFirmware = YES;
  result.firmware = value;
  return self;
}
- (Camera_Builder*) clearFirmware {
  result.hasFirmware = NO;
  result.firmware = @"";
  return self;
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (NSString*) groupId {
  return result.groupId;
}
- (Camera_Builder*) setGroupId:(NSString*) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (Camera_Builder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = @"";
  return self;
}
- (BOOL) hasGroupName {
  return result.hasGroupName;
}
- (NSString*) groupName {
  return result.groupName;
}
- (Camera_Builder*) setGroupName:(NSString*) value {
  result.hasGroupName = YES;
  result.groupName = value;
  return self;
}
- (Camera_Builder*) clearGroupName {
  result.hasGroupName = NO;
  result.groupName = @"";
  return self;
}
- (BOOL) hasSecondaryQuality {
  return result.hasSecondaryQuality;
}
- (Camera_SecondaryQuality) secondaryQuality {
  return result.secondaryQuality;
}
- (Camera_Builder*) setSecondaryQuality:(Camera_SecondaryQuality) value {
  result.hasSecondaryQuality = YES;
  result.secondaryQuality = value;
  return self;
}
- (Camera_Builder*) clearSecondaryQuality {
  result.hasSecondaryQuality = NO;
  result.secondaryQuality = Camera_SecondaryQualitySecondaryLow;
  return self;
}
- (BOOL) hasControlDisabled {
  return result.hasControlDisabled;
}
- (BOOL) controlDisabled {
  return result.controlDisabled;
}
- (Camera_Builder*) setControlDisabled:(BOOL) value {
  result.hasControlDisabled = YES;
  result.controlDisabled = value;
  return self;
}
- (Camera_Builder*) clearControlDisabled {
  result.hasControlDisabled = NO;
  result.controlDisabled = NO;
  return self;
}
- (BOOL) hasStatusFlags {
  return result.hasStatusFlags;
}
- (int32_t) statusFlags {
  return result.statusFlags;
}
- (Camera_Builder*) setStatusFlags:(int32_t) value {
  result.hasStatusFlags = YES;
  result.statusFlags = value;
  return self;
}
- (Camera_Builder*) clearStatusFlags {
  result.hasStatusFlags = NO;
  result.statusFlags = 0;
  return self;
}
- (BOOL) hasDewarpingParams {
  return result.hasDewarpingParams;
}
- (NSString*) dewarpingParams {
  return result.dewarpingParams;
}
- (Camera_Builder*) setDewarpingParams:(NSString*) value {
  result.hasDewarpingParams = YES;
  result.dewarpingParams = value;
  return self;
}
- (Camera_Builder*) clearDewarpingParams {
  result.hasDewarpingParams = NO;
  result.dewarpingParams = @"";
  return self;
}
- (BOOL) hasVendor {
  return result.hasVendor;
}
- (NSString*) vendor {
  return result.vendor;
}
- (Camera_Builder*) setVendor:(NSString*) value {
  result.hasVendor = YES;
  result.vendor = value;
  return self;
}
- (Camera_Builder*) clearVendor {
  result.hasVendor = NO;
  result.vendor = @"";
  return self;
}
@end

