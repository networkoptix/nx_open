// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "User.pb.h"

@implementation UserRoot
static id<PBExtensionField> User_resource = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserRoot class]) {
    User_resource =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[Resource class]
                                       fieldNumber:102
                                      defaultValue:[User defaultInstance]
                               messageOrGroupClass:[User class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ResourceRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:User_resource];
}
@end

@interface User ()
@property (strong) NSString* password;
@property BOOL isAdmin;
@property uint64_t rights;
@property (strong) NSString* email;
@property (strong) NSString* digest;
@property (strong) NSString* hash;
@end

@implementation User

- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasIsAdmin {
  return !!hasIsAdmin_;
}
- (void) setHasIsAdmin:(BOOL) value {
  hasIsAdmin_ = !!value;
}
- (BOOL) isAdmin {
  return !!isAdmin_;
}
- (void) setIsAdmin:(BOOL) value {
  isAdmin_ = !!value;
}
- (BOOL) hasRights {
  return !!hasRights_;
}
- (void) setHasRights:(BOOL) value {
  hasRights_ = !!value;
}
@synthesize rights;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (BOOL) hasDigest {
  return !!hasDigest_;
}
- (void) setHasDigest:(BOOL) value {
  hasDigest_ = !!value;
}
@synthesize digest;
- (BOOL) hasHash {
  return !!hasHash_;
}
- (void) setHasHash:(BOOL) value {
  hasHash_ = !!value;
}
@synthesize hash;
- (id) init {
  if ((self = [super init])) {
    self.password = @"";
    self.isAdmin = NO;
    self.rights = 0L;
    self.email = @"";
    self.digest = @"";
    self.hash = @"";
  }
  return self;
}
+ (id<PBExtensionField>) resource {
  return User_resource;
}
static User* defaultUserInstance = nil;
+ (void) initialize {
  if (self == [User class]) {
    defaultUserInstance = [[User alloc] init];
  }
}
+ (User*) defaultInstance {
  return defaultUserInstance;
}
- (User*) defaultInstance {
  return defaultUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIsAdmin) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPassword) {
    [output writeString:1 value:self.password];
  }
  if (self.hasIsAdmin) {
    [output writeBool:2 value:self.isAdmin];
  }
  if (self.hasRights) {
    [output writeUInt64:3 value:self.rights];
  }
  if (self.hasEmail) {
    [output writeString:4 value:self.email];
  }
  if (self.hasDigest) {
    [output writeString:5 value:self.digest];
  }
  if (self.hasHash) {
    [output writeString:6 value:self.hash];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPassword) {
    size += computeStringSize(1, self.password);
  }
  if (self.hasIsAdmin) {
    size += computeBoolSize(2, self.isAdmin);
  }
  if (self.hasRights) {
    size += computeUInt64Size(3, self.rights);
  }
  if (self.hasEmail) {
    size += computeStringSize(4, self.email);
  }
  if (self.hasDigest) {
    size += computeStringSize(5, self.digest);
  }
  if (self.hasHash) {
    size += computeStringSize(6, self.hash);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (User*) parseFromData:(NSData*) data {
  return (User*)[[[User builder] mergeFromData:data] build];
}
+ (User*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input {
  return (User*)[[[User builder] mergeFromInputStream:input] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (User*)[[[User builder] mergeFromCodedInputStream:input] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User_Builder*) builder {
  return [[User_Builder alloc] init];
}
+ (User_Builder*) builderWithPrototype:(User*) prototype {
  return [[User builder] mergeFrom:prototype];
}
- (User_Builder*) builder {
  return [User builder];
}
- (User_Builder*) toBuilder {
  return [User builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasIsAdmin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAdmin", [NSNumber numberWithBool:self.isAdmin]];
  }
  if (self.hasRights) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rights", [NSNumber numberWithLongLong:self.rights]];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasDigest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"digest", self.digest];
  }
  if (self.hasHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hash", self.hash];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[User class]]) {
    return NO;
  }
  User *otherMessage = other;
  return
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasIsAdmin == otherMessage.hasIsAdmin &&
      (!self.hasIsAdmin || self.isAdmin == otherMessage.isAdmin) &&
      self.hasRights == otherMessage.hasRights &&
      (!self.hasRights || self.rights == otherMessage.rights) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasDigest == otherMessage.hasDigest &&
      (!self.hasDigest || [self.digest isEqual:otherMessage.digest]) &&
      self.hasHash == otherMessage.hasHash &&
      (!self.hasHash || [self.hash isEqual:otherMessage.hash]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasIsAdmin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAdmin] hash];
  }
  if (self.hasRights) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.rights] hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasDigest) {
    hashCode = hashCode * 31 + [self.digest hash];
  }
  if (self.hasHash) {
    hashCode = hashCode * 31 + [self.hash hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface User_Builder()
@property (strong) User* result;
@end

@implementation User_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[User alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (User_Builder*) clear {
  self.result = [[User alloc] init];
  return self;
}
- (User_Builder*) clone {
  return [User builderWithPrototype:result];
}
- (User*) defaultInstance {
  return [User defaultInstance];
}
- (User*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (User*) buildPartial {
  User* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (User_Builder*) mergeFrom:(User*) other {
  if (other == [User defaultInstance]) {
    return self;
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasIsAdmin) {
    [self setIsAdmin:other.isAdmin];
  }
  if (other.hasRights) {
    [self setRights:other.rights];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasDigest) {
    [self setDigest:other.digest];
  }
  if (other.hasHash) {
    [self setHash:other.hash];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPassword:[input readString]];
        break;
      }
      case 16: {
        [self setIsAdmin:[input readBool]];
        break;
      }
      case 24: {
        [self setRights:[input readUInt64]];
        break;
      }
      case 34: {
        [self setEmail:[input readString]];
        break;
      }
      case 42: {
        [self setDigest:[input readString]];
        break;
      }
      case 50: {
        [self setHash:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (User_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (User_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasIsAdmin {
  return result.hasIsAdmin;
}
- (BOOL) isAdmin {
  return result.isAdmin;
}
- (User_Builder*) setIsAdmin:(BOOL) value {
  result.hasIsAdmin = YES;
  result.isAdmin = value;
  return self;
}
- (User_Builder*) clearIsAdmin {
  result.hasIsAdmin = NO;
  result.isAdmin = NO;
  return self;
}
- (BOOL) hasRights {
  return result.hasRights;
}
- (uint64_t) rights {
  return result.rights;
}
- (User_Builder*) setRights:(uint64_t) value {
  result.hasRights = YES;
  result.rights = value;
  return self;
}
- (User_Builder*) clearRights {
  result.hasRights = NO;
  result.rights = 0L;
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (User_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (User_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasDigest {
  return result.hasDigest;
}
- (NSString*) digest {
  return result.digest;
}
- (User_Builder*) setDigest:(NSString*) value {
  result.hasDigest = YES;
  result.digest = value;
  return self;
}
- (User_Builder*) clearDigest {
  result.hasDigest = NO;
  result.digest = @"";
  return self;
}
- (BOOL) hasHash {
  return result.hasHash;
}
- (NSString*) hash {
  return result.hash;
}
- (User_Builder*) setHash:(NSString*) value {
  result.hasHash = YES;
  result.hash = value;
  return self;
}
- (User_Builder*) clearHash {
  result.hasHash = NO;
  result.hash = @"";
  return self;
}
@end

