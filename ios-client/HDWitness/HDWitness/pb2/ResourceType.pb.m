// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ResourceType.pb.h"

@implementation ResourceTypeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ResourceTypeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ParamTypeIsValidValue(ParamType value) {
  switch (value) {
    case ParamTypeNope:
    case ParamTypeValue:
    case ParamTypeOnOff:
    case ParamTypeBoolean:
    case ParamTypeMinMaxStep:
    case ParamTypeEnumeration:
    case ParamTypeButton:
      return YES;
    default:
      return NO;
  }
}
@interface PropertyType ()
@property (strong) NSString* name;
@property ParamType type;
@property int32_t min;
@property int32_t max;
@property int32_t step;
@property (strong) NSString* values;
@property (strong) NSString* uiValues;
@property (strong) NSString* defaultValue;
@property (strong) NSString* group;
@property (strong) NSString* subGroup;
@property (strong) NSString* description;
@property BOOL ui;
@property BOOL readonly;
@property (strong) NSString* netHelper;
@property int32_t id;
@end

@implementation PropertyType

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasMin {
  return !!hasMin_;
}
- (void) setHasMin:(BOOL) value {
  hasMin_ = !!value;
}
@synthesize min;
- (BOOL) hasMax {
  return !!hasMax_;
}
- (void) setHasMax:(BOOL) value {
  hasMax_ = !!value;
}
@synthesize max;
- (BOOL) hasStep {
  return !!hasStep_;
}
- (void) setHasStep:(BOOL) value {
  hasStep_ = !!value;
}
@synthesize step;
- (BOOL) hasValues {
  return !!hasValues_;
}
- (void) setHasValues:(BOOL) value {
  hasValues_ = !!value;
}
@synthesize values;
- (BOOL) hasUiValues {
  return !!hasUiValues_;
}
- (void) setHasUiValues:(BOOL) value {
  hasUiValues_ = !!value;
}
@synthesize uiValues;
- (BOOL) hasDefaultValue {
  return !!hasDefaultValue_;
}
- (void) setHasDefaultValue:(BOOL) value {
  hasDefaultValue_ = !!value;
}
@synthesize defaultValue;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) value {
  hasGroup_ = !!value;
}
@synthesize group;
- (BOOL) hasSubGroup {
  return !!hasSubGroup_;
}
- (void) setHasSubGroup:(BOOL) value {
  hasSubGroup_ = !!value;
}
@synthesize subGroup;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasUi {
  return !!hasUi_;
}
- (void) setHasUi:(BOOL) value {
  hasUi_ = !!value;
}
- (BOOL) ui {
  return !!ui_;
}
- (void) setUi:(BOOL) value {
  ui_ = !!value;
}
- (BOOL) hasReadonly {
  return !!hasReadonly_;
}
- (void) setHasReadonly:(BOOL) value {
  hasReadonly_ = !!value;
}
- (BOOL) readonly {
  return !!readonly_;
}
- (void) setReadonly:(BOOL) value {
  readonly_ = !!value;
}
- (BOOL) hasNetHelper {
  return !!hasNetHelper_;
}
- (void) setHasNetHelper:(BOOL) value {
  hasNetHelper_ = !!value;
}
@synthesize netHelper;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.type = ParamTypeNope;
    self.min = 0;
    self.max = 0;
    self.step = 0;
    self.values = @"";
    self.uiValues = @"";
    self.defaultValue = @"";
    self.group = @"";
    self.subGroup = @"";
    self.description = @"";
    self.ui = NO;
    self.readonly = NO;
    self.netHelper = @"";
    self.id = 0;
  }
  return self;
}
static PropertyType* defaultPropertyTypeInstance = nil;
+ (void) initialize {
  if (self == [PropertyType class]) {
    defaultPropertyTypeInstance = [[PropertyType alloc] init];
  }
}
+ (PropertyType*) defaultInstance {
  return defaultPropertyTypeInstance;
}
- (PropertyType*) defaultInstance {
  return defaultPropertyTypeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasMin) {
    [output writeInt32:3 value:self.min];
  }
  if (self.hasMax) {
    [output writeInt32:4 value:self.max];
  }
  if (self.hasStep) {
    [output writeInt32:5 value:self.step];
  }
  if (self.hasValues) {
    [output writeString:6 value:self.values];
  }
  if (self.hasUiValues) {
    [output writeString:7 value:self.uiValues];
  }
  if (self.hasDefaultValue) {
    [output writeString:8 value:self.defaultValue];
  }
  if (self.hasGroup) {
    [output writeString:9 value:self.group];
  }
  if (self.hasSubGroup) {
    [output writeString:10 value:self.subGroup];
  }
  if (self.hasDescription) {
    [output writeString:11 value:self.description];
  }
  if (self.hasUi) {
    [output writeBool:12 value:self.ui];
  }
  if (self.hasReadonly) {
    [output writeBool:13 value:self.readonly];
  }
  if (self.hasNetHelper) {
    [output writeString:14 value:self.netHelper];
  }
  if (self.hasId) {
    [output writeInt32:15 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasType) {
    size += computeEnumSize(2, self.type);
  }
  if (self.hasMin) {
    size += computeInt32Size(3, self.min);
  }
  if (self.hasMax) {
    size += computeInt32Size(4, self.max);
  }
  if (self.hasStep) {
    size += computeInt32Size(5, self.step);
  }
  if (self.hasValues) {
    size += computeStringSize(6, self.values);
  }
  if (self.hasUiValues) {
    size += computeStringSize(7, self.uiValues);
  }
  if (self.hasDefaultValue) {
    size += computeStringSize(8, self.defaultValue);
  }
  if (self.hasGroup) {
    size += computeStringSize(9, self.group);
  }
  if (self.hasSubGroup) {
    size += computeStringSize(10, self.subGroup);
  }
  if (self.hasDescription) {
    size += computeStringSize(11, self.description);
  }
  if (self.hasUi) {
    size += computeBoolSize(12, self.ui);
  }
  if (self.hasReadonly) {
    size += computeBoolSize(13, self.readonly);
  }
  if (self.hasNetHelper) {
    size += computeStringSize(14, self.netHelper);
  }
  if (self.hasId) {
    size += computeInt32Size(15, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PropertyType*) parseFromData:(NSData*) data {
  return (PropertyType*)[[[PropertyType builder] mergeFromData:data] build];
}
+ (PropertyType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PropertyType*)[[[PropertyType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PropertyType*) parseFromInputStream:(NSInputStream*) input {
  return (PropertyType*)[[[PropertyType builder] mergeFromInputStream:input] build];
}
+ (PropertyType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PropertyType*)[[[PropertyType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PropertyType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PropertyType*)[[[PropertyType builder] mergeFromCodedInputStream:input] build];
}
+ (PropertyType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PropertyType*)[[[PropertyType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PropertyType_Builder*) builder {
  return [[PropertyType_Builder alloc] init];
}
+ (PropertyType_Builder*) builderWithPrototype:(PropertyType*) prototype {
  return [[PropertyType builder] mergeFrom:prototype];
}
- (PropertyType_Builder*) builder {
  return [PropertyType builder];
}
- (PropertyType_Builder*) toBuilder {
  return [PropertyType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"min", [NSNumber numberWithInt:self.min]];
  }
  if (self.hasMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"max", [NSNumber numberWithInt:self.max]];
  }
  if (self.hasStep) {
    [output appendFormat:@"%@%@: %@\n", indent, @"step", [NSNumber numberWithInt:self.step]];
  }
  if (self.hasValues) {
    [output appendFormat:@"%@%@: %@\n", indent, @"values", self.values];
  }
  if (self.hasUiValues) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uiValues", self.uiValues];
  }
  if (self.hasDefaultValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultValue", self.defaultValue];
  }
  if (self.hasGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"group", self.group];
  }
  if (self.hasSubGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subGroup", self.subGroup];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasUi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ui", [NSNumber numberWithBool:self.ui]];
  }
  if (self.hasReadonly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"readonly", [NSNumber numberWithBool:self.readonly]];
  }
  if (self.hasNetHelper) {
    [output appendFormat:@"%@%@: %@\n", indent, @"netHelper", self.netHelper];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PropertyType class]]) {
    return NO;
  }
  PropertyType *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type != otherMessage.type) &&
      self.hasMin == otherMessage.hasMin &&
      (!self.hasMin || self.min == otherMessage.min) &&
      self.hasMax == otherMessage.hasMax &&
      (!self.hasMax || self.max == otherMessage.max) &&
      self.hasStep == otherMessage.hasStep &&
      (!self.hasStep || self.step == otherMessage.step) &&
      self.hasValues == otherMessage.hasValues &&
      (!self.hasValues || [self.values isEqual:otherMessage.values]) &&
      self.hasUiValues == otherMessage.hasUiValues &&
      (!self.hasUiValues || [self.uiValues isEqual:otherMessage.uiValues]) &&
      self.hasDefaultValue == otherMessage.hasDefaultValue &&
      (!self.hasDefaultValue || [self.defaultValue isEqual:otherMessage.defaultValue]) &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasSubGroup == otherMessage.hasSubGroup &&
      (!self.hasSubGroup || [self.subGroup isEqual:otherMessage.subGroup]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasUi == otherMessage.hasUi &&
      (!self.hasUi || self.ui == otherMessage.ui) &&
      self.hasReadonly == otherMessage.hasReadonly &&
      (!self.hasReadonly || self.readonly == otherMessage.readonly) &&
      self.hasNetHelper == otherMessage.hasNetHelper &&
      (!self.hasNetHelper || [self.netHelper isEqual:otherMessage.netHelper]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.min] hash];
  }
  if (self.hasMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.max] hash];
  }
  if (self.hasStep) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.step] hash];
  }
  if (self.hasValues) {
    hashCode = hashCode * 31 + [self.values hash];
  }
  if (self.hasUiValues) {
    hashCode = hashCode * 31 + [self.uiValues hash];
  }
  if (self.hasDefaultValue) {
    hashCode = hashCode * 31 + [self.defaultValue hash];
  }
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasSubGroup) {
    hashCode = hashCode * 31 + [self.subGroup hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasUi) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.ui] hash];
  }
  if (self.hasReadonly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.readonly] hash];
  }
  if (self.hasNetHelper) {
    hashCode = hashCode * 31 + [self.netHelper hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PropertyType_Builder()
@property (strong) PropertyType* result;
@end

@implementation PropertyType_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PropertyType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PropertyType_Builder*) clear {
  self.result = [[PropertyType alloc] init];
  return self;
}
- (PropertyType_Builder*) clone {
  return [PropertyType builderWithPrototype:result];
}
- (PropertyType*) defaultInstance {
  return [PropertyType defaultInstance];
}
- (PropertyType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PropertyType*) buildPartial {
  PropertyType* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PropertyType_Builder*) mergeFrom:(PropertyType*) other {
  if (other == [PropertyType defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMin) {
    [self setMin:other.min];
  }
  if (other.hasMax) {
    [self setMax:other.max];
  }
  if (other.hasStep) {
    [self setStep:other.step];
  }
  if (other.hasValues) {
    [self setValues:other.values];
  }
  if (other.hasUiValues) {
    [self setUiValues:other.uiValues];
  }
  if (other.hasDefaultValue) {
    [self setDefaultValue:other.defaultValue];
  }
  if (other.hasGroup) {
    [self setGroup:other.group];
  }
  if (other.hasSubGroup) {
    [self setSubGroup:other.subGroup];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasUi) {
    [self setUi:other.ui];
  }
  if (other.hasReadonly) {
    [self setReadonly:other.readonly];
  }
  if (other.hasNetHelper) {
    [self setNetHelper:other.netHelper];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PropertyType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PropertyType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (ParamTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setMin:[input readInt32]];
        break;
      }
      case 32: {
        [self setMax:[input readInt32]];
        break;
      }
      case 40: {
        [self setStep:[input readInt32]];
        break;
      }
      case 50: {
        [self setValues:[input readString]];
        break;
      }
      case 58: {
        [self setUiValues:[input readString]];
        break;
      }
      case 66: {
        [self setDefaultValue:[input readString]];
        break;
      }
      case 74: {
        [self setGroup:[input readString]];
        break;
      }
      case 82: {
        [self setSubGroup:[input readString]];
        break;
      }
      case 90: {
        [self setDescription:[input readString]];
        break;
      }
      case 96: {
        [self setUi:[input readBool]];
        break;
      }
      case 104: {
        [self setReadonly:[input readBool]];
        break;
      }
      case 114: {
        [self setNetHelper:[input readString]];
        break;
      }
      case 120: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PropertyType_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PropertyType_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (ParamType) type {
  return result.type;
}
- (PropertyType_Builder*) setType:(ParamType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PropertyType_Builder*) clearType {
  result.hasType = NO;
  result.type = ParamTypeNope;
  return self;
}
- (BOOL) hasMin {
  return result.hasMin;
}
- (int32_t) min {
  return result.min;
}
- (PropertyType_Builder*) setMin:(int32_t) value {
  result.hasMin = YES;
  result.min = value;
  return self;
}
- (PropertyType_Builder*) clearMin {
  result.hasMin = NO;
  result.min = 0;
  return self;
}
- (BOOL) hasMax {
  return result.hasMax;
}
- (int32_t) max {
  return result.max;
}
- (PropertyType_Builder*) setMax:(int32_t) value {
  result.hasMax = YES;
  result.max = value;
  return self;
}
- (PropertyType_Builder*) clearMax {
  result.hasMax = NO;
  result.max = 0;
  return self;
}
- (BOOL) hasStep {
  return result.hasStep;
}
- (int32_t) step {
  return result.step;
}
- (PropertyType_Builder*) setStep:(int32_t) value {
  result.hasStep = YES;
  result.step = value;
  return self;
}
- (PropertyType_Builder*) clearStep {
  result.hasStep = NO;
  result.step = 0;
  return self;
}
- (BOOL) hasValues {
  return result.hasValues;
}
- (NSString*) values {
  return result.values;
}
- (PropertyType_Builder*) setValues:(NSString*) value {
  result.hasValues = YES;
  result.values = value;
  return self;
}
- (PropertyType_Builder*) clearValues {
  result.hasValues = NO;
  result.values = @"";
  return self;
}
- (BOOL) hasUiValues {
  return result.hasUiValues;
}
- (NSString*) uiValues {
  return result.uiValues;
}
- (PropertyType_Builder*) setUiValues:(NSString*) value {
  result.hasUiValues = YES;
  result.uiValues = value;
  return self;
}
- (PropertyType_Builder*) clearUiValues {
  result.hasUiValues = NO;
  result.uiValues = @"";
  return self;
}
- (BOOL) hasDefaultValue {
  return result.hasDefaultValue;
}
- (NSString*) defaultValue {
  return result.defaultValue;
}
- (PropertyType_Builder*) setDefaultValue:(NSString*) value {
  result.hasDefaultValue = YES;
  result.defaultValue = value;
  return self;
}
- (PropertyType_Builder*) clearDefaultValue {
  result.hasDefaultValue = NO;
  result.defaultValue = @"";
  return self;
}
- (BOOL) hasGroup {
  return result.hasGroup;
}
- (NSString*) group {
  return result.group;
}
- (PropertyType_Builder*) setGroup:(NSString*) value {
  result.hasGroup = YES;
  result.group = value;
  return self;
}
- (PropertyType_Builder*) clearGroup {
  result.hasGroup = NO;
  result.group = @"";
  return self;
}
- (BOOL) hasSubGroup {
  return result.hasSubGroup;
}
- (NSString*) subGroup {
  return result.subGroup;
}
- (PropertyType_Builder*) setSubGroup:(NSString*) value {
  result.hasSubGroup = YES;
  result.subGroup = value;
  return self;
}
- (PropertyType_Builder*) clearSubGroup {
  result.hasSubGroup = NO;
  result.subGroup = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (PropertyType_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (PropertyType_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasUi {
  return result.hasUi;
}
- (BOOL) ui {
  return result.ui;
}
- (PropertyType_Builder*) setUi:(BOOL) value {
  result.hasUi = YES;
  result.ui = value;
  return self;
}
- (PropertyType_Builder*) clearUi {
  result.hasUi = NO;
  result.ui = NO;
  return self;
}
- (BOOL) hasReadonly {
  return result.hasReadonly;
}
- (BOOL) readonly {
  return result.readonly;
}
- (PropertyType_Builder*) setReadonly:(BOOL) value {
  result.hasReadonly = YES;
  result.readonly = value;
  return self;
}
- (PropertyType_Builder*) clearReadonly {
  result.hasReadonly = NO;
  result.readonly = NO;
  return self;
}
- (BOOL) hasNetHelper {
  return result.hasNetHelper;
}
- (NSString*) netHelper {
  return result.netHelper;
}
- (PropertyType_Builder*) setNetHelper:(NSString*) value {
  result.hasNetHelper = YES;
  result.netHelper = value;
  return self;
}
- (PropertyType_Builder*) clearNetHelper {
  result.hasNetHelper = NO;
  result.netHelper = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PropertyType_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PropertyType_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

@interface ResourceType ()
@property int32_t id;
@property (strong) NSString* name;
@property (strong) NSString* manufacture;
@property (strong) PBAppendableArray * parentIdArray;
@property (strong) NSMutableArray * propertyTypeArray;
@end

@implementation ResourceType

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasManufacture {
  return !!hasManufacture_;
}
- (void) setHasManufacture:(BOOL) value {
  hasManufacture_ = !!value;
}
@synthesize manufacture;
@synthesize parentIdArray;
@dynamic parentId;
@synthesize propertyTypeArray;
@dynamic propertyType;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.manufacture = @"";
  }
  return self;
}
static ResourceType* defaultResourceTypeInstance = nil;
+ (void) initialize {
  if (self == [ResourceType class]) {
    defaultResourceTypeInstance = [[ResourceType alloc] init];
  }
}
+ (ResourceType*) defaultInstance {
  return defaultResourceTypeInstance;
}
- (ResourceType*) defaultInstance {
  return defaultResourceTypeInstance;
}
- (PBArray *)parentId {
  return parentIdArray;
}
- (int32_t)parentIdAtIndex:(NSUInteger)index {
  return [parentIdArray int32AtIndex:index];
}
- (NSArray *)propertyType {
  return propertyTypeArray;
}
- (PropertyType*)propertyTypeAtIndex:(NSUInteger)index {
  return [propertyTypeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  for (PropertyType* element in self.propertyType) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasManufacture) {
    [output writeString:3 value:self.manufacture];
  }
  const NSUInteger parentIdArrayCount = self.parentIdArray.count;
  if (parentIdArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.parentIdArray.data;
    for (NSUInteger i = 0; i < parentIdArrayCount; ++i) {
      [output writeInt32:4 value:values[i]];
    }
  }
  for (PropertyType *element in self.propertyTypeArray) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasManufacture) {
    size += computeStringSize(3, self.manufacture);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.parentIdArray.count;
    const int32_t *values = (const int32_t *)self.parentIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  for (PropertyType *element in self.propertyTypeArray) {
    size += computeMessageSize(5, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ResourceType*) parseFromData:(NSData*) data {
  return (ResourceType*)[[[ResourceType builder] mergeFromData:data] build];
}
+ (ResourceType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceType*)[[[ResourceType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResourceType*) parseFromInputStream:(NSInputStream*) input {
  return (ResourceType*)[[[ResourceType builder] mergeFromInputStream:input] build];
}
+ (ResourceType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceType*)[[[ResourceType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResourceType*)[[[ResourceType builder] mergeFromCodedInputStream:input] build];
}
+ (ResourceType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceType*)[[[ResourceType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceType_Builder*) builder {
  return [[ResourceType_Builder alloc] init];
}
+ (ResourceType_Builder*) builderWithPrototype:(ResourceType*) prototype {
  return [[ResourceType builder] mergeFrom:prototype];
}
- (ResourceType_Builder*) builder {
  return [ResourceType builder];
}
- (ResourceType_Builder*) toBuilder {
  return [ResourceType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasManufacture) {
    [output appendFormat:@"%@%@: %@\n", indent, @"manufacture", self.manufacture];
  }
  listCount=self.parentIdArray.count;
  for(int i=0;i<listCount;i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [self.parentIdArray int32AtIndex:i]];
  }
  for (PropertyType* element in self.propertyTypeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"propertyType"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResourceType class]]) {
    return NO;
  }
  ResourceType *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasManufacture == otherMessage.hasManufacture &&
      (!self.hasManufacture || [self.manufacture isEqual:otherMessage.manufacture]) &&
      [self.parentIdArray isEqualToArray:otherMessage.parentIdArray] &&
      [self.propertyTypeArray isEqualToArray:otherMessage.propertyTypeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasManufacture) {
    hashCode = hashCode * 31 + [self.manufacture hash];
  }
  listCount=self.parentIdArray.count;
  for(int i=0;i<listCount;i++){
  hashCode = hashCode * 31 + [self.parentIdArray int32AtIndex:i];
  }
  for (PropertyType* element in self.propertyTypeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResourceType_Builder()
@property (strong) ResourceType* result;
@end

@implementation ResourceType_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ResourceType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ResourceType_Builder*) clear {
  self.result = [[ResourceType alloc] init];
  return self;
}
- (ResourceType_Builder*) clone {
  return [ResourceType builderWithPrototype:result];
}
- (ResourceType*) defaultInstance {
  return [ResourceType defaultInstance];
}
- (ResourceType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResourceType*) buildPartial {
  ResourceType* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ResourceType_Builder*) mergeFrom:(ResourceType*) other {
  if (other == [ResourceType defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasManufacture) {
    [self setManufacture:other.manufacture];
  }
  if (other.parentIdArray.count > 0) {
    if (result.parentIdArray == nil) {
      result.parentIdArray = [other.parentIdArray copy];
    } else {
      [result.parentIdArray appendArray:other.parentIdArray];
    }
  }
  if (other.propertyTypeArray.count > 0) {
    if (result.propertyTypeArray == nil) {
      result.propertyTypeArray = [[NSMutableArray alloc] initWithArray:other.propertyTypeArray];
    } else {
      [result.propertyTypeArray addObjectsFromArray:other.propertyTypeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResourceType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResourceType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setManufacture:[input readString]];
        break;
      }
      case 32: {
        [self addParentId:[input readInt32]];
        break;
      }
      case 42: {
        PropertyType_Builder* subBuilder = [PropertyType builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPropertyType:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (ResourceType_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (ResourceType_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (ResourceType_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (ResourceType_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasManufacture {
  return result.hasManufacture;
}
- (NSString*) manufacture {
  return result.manufacture;
}
- (ResourceType_Builder*) setManufacture:(NSString*) value {
  result.hasManufacture = YES;
  result.manufacture = value;
  return self;
}
- (ResourceType_Builder*) clearManufacture {
  result.hasManufacture = NO;
  result.manufacture = @"";
  return self;
}
- (PBAppendableArray *)parentId {
  return result.parentIdArray;
}
- (int32_t)parentIdAtIndex:(NSUInteger)index {
  return [result parentIdAtIndex:index];
}
- (ResourceType_Builder *)addParentId:(int32_t)value {
  if (result.parentIdArray == nil) {
    result.parentIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.parentIdArray addInt32:value];
  return self;
}
- (ResourceType_Builder *)setParentIdArray:(NSArray *)array {
  result.parentIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (ResourceType_Builder *)setParentIdValues:(const int32_t *)values count:(NSUInteger)count {
  result.parentIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (ResourceType_Builder *)clearParentId {
  result.parentIdArray = nil;
  return self;
}
- (NSMutableArray *)propertyType {
  return result.propertyTypeArray;
}
- (PropertyType*)propertyTypeAtIndex:(NSUInteger)index {
  return [result propertyTypeAtIndex:index];
}
- (ResourceType_Builder *)addPropertyType:(PropertyType*)value {
  if (result.propertyTypeArray == nil) {
    result.propertyTypeArray = [[NSMutableArray alloc]init];
  }
  [result.propertyTypeArray addObject:value];
  return self;
}
- (ResourceType_Builder *)setPropertyTypeArray:(NSArray *)array {
  result.propertyTypeArray = [[NSMutableArray alloc]init];
  return self;
}
- (ResourceType_Builder *)clearPropertyType {
  result.propertyTypeArray = nil;
  return self;
}
@end

@interface ResourceTypes ()
@property (strong) NSMutableArray * resourceTypeArray;
@end

@implementation ResourceTypes

@synthesize resourceTypeArray;
@dynamic resourceType;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static ResourceTypes* defaultResourceTypesInstance = nil;
+ (void) initialize {
  if (self == [ResourceTypes class]) {
    defaultResourceTypesInstance = [[ResourceTypes alloc] init];
  }
}
+ (ResourceTypes*) defaultInstance {
  return defaultResourceTypesInstance;
}
- (ResourceTypes*) defaultInstance {
  return defaultResourceTypesInstance;
}
- (NSArray *)resourceType {
  return resourceTypeArray;
}
- (ResourceType*)resourceTypeAtIndex:(NSUInteger)index {
  return [resourceTypeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (ResourceType* element in self.resourceType) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (ResourceType *element in self.resourceTypeArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (ResourceType *element in self.resourceTypeArray) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ResourceTypes*) parseFromData:(NSData*) data {
  return (ResourceTypes*)[[[ResourceTypes builder] mergeFromData:data] build];
}
+ (ResourceTypes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceTypes*)[[[ResourceTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResourceTypes*) parseFromInputStream:(NSInputStream*) input {
  return (ResourceTypes*)[[[ResourceTypes builder] mergeFromInputStream:input] build];
}
+ (ResourceTypes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceTypes*)[[[ResourceTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResourceTypes*)[[[ResourceTypes builder] mergeFromCodedInputStream:input] build];
}
+ (ResourceTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceTypes*)[[[ResourceTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceTypes_Builder*) builder {
  return [[ResourceTypes_Builder alloc] init];
}
+ (ResourceTypes_Builder*) builderWithPrototype:(ResourceTypes*) prototype {
  return [[ResourceTypes builder] mergeFrom:prototype];
}
- (ResourceTypes_Builder*) builder {
  return [ResourceTypes builder];
}
- (ResourceTypes_Builder*) toBuilder {
  return [ResourceTypes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  for (ResourceType* element in self.resourceTypeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"resourceType"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResourceTypes class]]) {
    return NO;
  }
  ResourceTypes *otherMessage = other;
  return
      [self.resourceTypeArray isEqualToArray:otherMessage.resourceTypeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  for (ResourceType* element in self.resourceTypeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResourceTypes_Builder()
@property (strong) ResourceTypes* result;
@end

@implementation ResourceTypes_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ResourceTypes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ResourceTypes_Builder*) clear {
  self.result = [[ResourceTypes alloc] init];
  return self;
}
- (ResourceTypes_Builder*) clone {
  return [ResourceTypes builderWithPrototype:result];
}
- (ResourceTypes*) defaultInstance {
  return [ResourceTypes defaultInstance];
}
- (ResourceTypes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResourceTypes*) buildPartial {
  ResourceTypes* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ResourceTypes_Builder*) mergeFrom:(ResourceTypes*) other {
  if (other == [ResourceTypes defaultInstance]) {
    return self;
  }
  if (other.resourceTypeArray.count > 0) {
    if (result.resourceTypeArray == nil) {
      result.resourceTypeArray = [[NSMutableArray alloc] initWithArray:other.resourceTypeArray];
    } else {
      [result.resourceTypeArray addObjectsFromArray:other.resourceTypeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResourceTypes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResourceTypes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ResourceType_Builder* subBuilder = [ResourceType builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addResourceType:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)resourceType {
  return result.resourceTypeArray;
}
- (ResourceType*)resourceTypeAtIndex:(NSUInteger)index {
  return [result resourceTypeAtIndex:index];
}
- (ResourceTypes_Builder *)addResourceType:(ResourceType*)value {
  if (result.resourceTypeArray == nil) {
    result.resourceTypeArray = [[NSMutableArray alloc]init];
  }
  [result.resourceTypeArray addObject:value];
  return self;
}
- (ResourceTypes_Builder *)setResourceTypeArray:(NSArray *)array {
  result.resourceTypeArray = [[NSMutableArray alloc]init];
  return self;
}
- (ResourceTypes_Builder *)clearResourceType {
  result.resourceTypeArray = nil;
  return self;
}
@end

