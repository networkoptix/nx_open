// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Setting.pb.h"

@implementation SettingRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SettingRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Setting ()
@property (strong) NSString* name;
@property (strong) NSString* value;
@end

@implementation Setting

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value {
  hasValue_ = !!value;
}
@synthesize value;
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = @"";
  }
  return self;
}
static Setting* defaultSettingInstance = nil;
+ (void) initialize {
  if (self == [Setting class]) {
    defaultSettingInstance = [[Setting alloc] init];
  }
}
+ (Setting*) defaultInstance {
  return defaultSettingInstance;
}
- (Setting*) defaultInstance {
  return defaultSettingInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size += computeStringSize(2, self.value);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Setting*) parseFromData:(NSData*) data {
  return (Setting*)[[[Setting builder] mergeFromData:data] build];
}
+ (Setting*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Setting*)[[[Setting builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Setting*) parseFromInputStream:(NSInputStream*) input {
  return (Setting*)[[[Setting builder] mergeFromInputStream:input] build];
}
+ (Setting*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Setting*)[[[Setting builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Setting*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Setting*)[[[Setting builder] mergeFromCodedInputStream:input] build];
}
+ (Setting*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Setting*)[[[Setting builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Setting_Builder*) builder {
  return [[Setting_Builder alloc] init];
}
+ (Setting_Builder*) builderWithPrototype:(Setting*) prototype {
  return [[Setting builder] mergeFrom:prototype];
}
- (Setting_Builder*) builder {
  return [Setting builder];
}
- (Setting_Builder*) toBuilder {
  return [Setting builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Setting class]]) {
    return NO;
  }
  Setting *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Setting_Builder()
@property (strong) Setting* result;
@end

@implementation Setting_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Setting alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Setting_Builder*) clear {
  self.result = [[Setting alloc] init];
  return self;
}
- (Setting_Builder*) clone {
  return [Setting builderWithPrototype:result];
}
- (Setting*) defaultInstance {
  return [Setting defaultInstance];
}
- (Setting*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Setting*) buildPartial {
  Setting* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Setting_Builder*) mergeFrom:(Setting*) other {
  if (other == [Setting defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Setting_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Setting_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Setting_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Setting_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (Setting_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (Setting_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface Settings ()
@property (strong) NSMutableArray * settingArray;
@end

@implementation Settings

@synthesize settingArray;
@dynamic setting;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static Settings* defaultSettingsInstance = nil;
+ (void) initialize {
  if (self == [Settings class]) {
    defaultSettingsInstance = [[Settings alloc] init];
  }
}
+ (Settings*) defaultInstance {
  return defaultSettingsInstance;
}
- (Settings*) defaultInstance {
  return defaultSettingsInstance;
}
- (NSArray *)setting {
  return settingArray;
}
- (Setting*)settingAtIndex:(NSUInteger)index {
  return [settingArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (Setting* element in self.setting) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Setting *element in self.settingArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Setting *element in self.settingArray) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Settings*) parseFromData:(NSData*) data {
  return (Settings*)[[[Settings builder] mergeFromData:data] build];
}
+ (Settings*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Settings*)[[[Settings builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Settings*) parseFromInputStream:(NSInputStream*) input {
  return (Settings*)[[[Settings builder] mergeFromInputStream:input] build];
}
+ (Settings*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Settings*)[[[Settings builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Settings*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Settings*)[[[Settings builder] mergeFromCodedInputStream:input] build];
}
+ (Settings*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Settings*)[[[Settings builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Settings_Builder*) builder {
  return [[Settings_Builder alloc] init];
}
+ (Settings_Builder*) builderWithPrototype:(Settings*) prototype {
  return [[Settings builder] mergeFrom:prototype];
}
- (Settings_Builder*) builder {
  return [Settings builder];
}
- (Settings_Builder*) toBuilder {
  return [Settings builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  for (Setting* element in self.settingArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"setting"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Settings class]]) {
    return NO;
  }
  Settings *otherMessage = other;
  return
      [self.settingArray isEqualToArray:otherMessage.settingArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  for (Setting* element in self.settingArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Settings_Builder()
@property (strong) Settings* result;
@end

@implementation Settings_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Settings alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Settings_Builder*) clear {
  self.result = [[Settings alloc] init];
  return self;
}
- (Settings_Builder*) clone {
  return [Settings builderWithPrototype:result];
}
- (Settings*) defaultInstance {
  return [Settings defaultInstance];
}
- (Settings*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Settings*) buildPartial {
  Settings* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Settings_Builder*) mergeFrom:(Settings*) other {
  if (other == [Settings defaultInstance]) {
    return self;
  }
  if (other.settingArray.count > 0) {
    if (result.settingArray == nil) {
      result.settingArray = [[NSMutableArray alloc] initWithArray:other.settingArray];
    } else {
      [result.settingArray addObjectsFromArray:other.settingArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Settings_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Settings_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Setting_Builder* subBuilder = [Setting builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSetting:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)setting {
  return result.settingArray;
}
- (Setting*)settingAtIndex:(NSUInteger)index {
  return [result settingAtIndex:index];
}
- (Settings_Builder *)addSetting:(Setting*)value {
  if (result.settingArray == nil) {
    result.settingArray = [[NSMutableArray alloc]init];
  }
  [result.settingArray addObject:value];
  return self;
}
- (Settings_Builder *)setSettingArray:(NSArray *)array {
  result.settingArray = [[NSMutableArray alloc]init];
  return self;
}
- (Settings_Builder *)clearSetting {
  result.settingArray = nil;
  return self;
}
@end

