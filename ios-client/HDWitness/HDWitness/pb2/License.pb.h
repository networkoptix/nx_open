// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import <ProtocolBuffers/ProtocolBuffers.h>

@class License;
@class License_Builder;
@class Licenses;
@class Licenses_Builder;
#ifndef __has_feature
  #define __has_feature(x) 0 // Compatibility with non-clang compilers.
#endif // __has_feature

#ifndef NS_RETURNS_NOT_RETAINED
  #if __has_feature(attribute_ns_returns_not_retained)
    #define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
  #else
    #define NS_RETURNS_NOT_RETAINED
  #endif
#endif


@interface LicenseRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface License : PBGeneratedMessage {
@private
  BOOL hasCameraCount_:1;
  BOOL hasName_:1;
  BOOL hasKey_:1;
  BOOL hasHwid_:1;
  BOOL hasSignature_:1;
  BOOL hasRawLicense_:1;
  int32_t cameraCount;
  NSString* name;
  NSString* key;
  NSString* hwid;
  NSString* signature;
  NSString* rawLicense;
}
- (BOOL) hasName;
- (BOOL) hasKey;
- (BOOL) hasCameraCount;
- (BOOL) hasHwid;
- (BOOL) hasSignature;
- (BOOL) hasRawLicense;
@property (readonly, strong) NSString* name;
@property (readonly, strong) NSString* key;
@property (readonly) int32_t cameraCount;
@property (readonly, strong) NSString* hwid;
@property (readonly, strong) NSString* signature;
@property (readonly, strong) NSString* rawLicense;

+ (License*) defaultInstance;
- (License*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (License_Builder*) builder;
+ (License_Builder*) builder;
+ (License_Builder*) builderWithPrototype:(License*) prototype;
- (License_Builder*) toBuilder;

+ (License*) parseFromData:(NSData*) data;
+ (License*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (License*) parseFromInputStream:(NSInputStream*) input;
+ (License*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (License*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (License*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface License_Builder : PBGeneratedMessage_Builder {
@private
  License* result;
}

- (License*) defaultInstance;

- (License_Builder*) clear;
- (License_Builder*) clone;

- (License*) build;
- (License*) buildPartial;

- (License_Builder*) mergeFrom:(License*) other;
- (License_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (License_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasName;
- (NSString*) name;
- (License_Builder*) setName:(NSString*) value;
- (License_Builder*) clearName;

- (BOOL) hasKey;
- (NSString*) key;
- (License_Builder*) setKey:(NSString*) value;
- (License_Builder*) clearKey;

- (BOOL) hasCameraCount;
- (int32_t) cameraCount;
- (License_Builder*) setCameraCount:(int32_t) value;
- (License_Builder*) clearCameraCount;

- (BOOL) hasHwid;
- (NSString*) hwid;
- (License_Builder*) setHwid:(NSString*) value;
- (License_Builder*) clearHwid;

- (BOOL) hasSignature;
- (NSString*) signature;
- (License_Builder*) setSignature:(NSString*) value;
- (License_Builder*) clearSignature;

- (BOOL) hasRawLicense;
- (NSString*) rawLicense;
- (License_Builder*) setRawLicense:(NSString*) value;
- (License_Builder*) clearRawLicense;
@end

@interface Licenses : PBGeneratedMessage {
@private
  BOOL hasUnusedHwid1_:1;
  BOOL hasUnusedOldHardwareId_:1;
  BOOL hasUnusedHwid2_:1;
  NSString* unusedHwid1;
  NSString* unusedOldHardwareId;
  NSString* unusedHwid2;
  NSMutableArray * licenseArray;
}
- (BOOL) hasUnusedHwid1;
- (BOOL) hasUnusedOldHardwareId;
- (BOOL) hasUnusedHwid2;
@property (readonly, strong) NSArray * license;
@property (readonly, strong) NSString* unusedHwid1;
@property (readonly, strong) NSString* unusedOldHardwareId;
@property (readonly, strong) NSString* unusedHwid2;
- (License*)licenseAtIndex:(NSUInteger)index;

+ (Licenses*) defaultInstance;
- (Licenses*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (Licenses_Builder*) builder;
+ (Licenses_Builder*) builder;
+ (Licenses_Builder*) builderWithPrototype:(Licenses*) prototype;
- (Licenses_Builder*) toBuilder;

+ (Licenses*) parseFromData:(NSData*) data;
+ (Licenses*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Licenses*) parseFromInputStream:(NSInputStream*) input;
+ (Licenses*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Licenses*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (Licenses*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface Licenses_Builder : PBGeneratedMessage_Builder {
@private
  Licenses* result;
}

- (Licenses*) defaultInstance;

- (Licenses_Builder*) clear;
- (Licenses_Builder*) clone;

- (Licenses*) build;
- (Licenses*) buildPartial;

- (Licenses_Builder*) mergeFrom:(Licenses*) other;
- (Licenses_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (Licenses_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (NSMutableArray *)license;
- (License*)licenseAtIndex:(NSUInteger)index;
- (Licenses_Builder *)addLicense:(License*)value;
- (Licenses_Builder *)setLicenseArray:(NSArray *)array;
- (Licenses_Builder *)clearLicense;

- (BOOL) hasUnusedHwid1;
- (NSString*) unusedHwid1;
- (Licenses_Builder*) setUnusedHwid1:(NSString*) value;
- (Licenses_Builder*) clearUnusedHwid1;

- (BOOL) hasUnusedOldHardwareId;
- (NSString*) unusedOldHardwareId;
- (Licenses_Builder*) setUnusedOldHardwareId:(NSString*) value;
- (Licenses_Builder*) clearUnusedOldHardwareId;

- (BOOL) hasUnusedHwid2;
- (NSString*) unusedHwid2;
- (Licenses_Builder*) setUnusedHwid2:(NSString*) value;
- (Licenses_Builder*) clearUnusedHwid2;
@end

