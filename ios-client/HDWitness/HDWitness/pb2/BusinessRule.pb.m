// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "BusinessRule.pb.h"

@implementation BusinessRuleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BusinessRuleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [BusinessCommonRoot registerAllExtensions:registry];
    [BusinessActionRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BusinessEventTypeIsValidValue(BusinessEventType value) {
  switch (value) {
    case BusinessEventTypeNotDefinedEvent:
    case BusinessEventTypeCameraMotion:
    case BusinessEventTypeCameraInput:
    case BusinessEventTypeCameraDisconnect:
    case BusinessEventTypeStorageFailure:
    case BusinessEventTypeNetworkIssue:
    case BusinessEventTypeCameraIpConflict:
    case BusinessEventTypeMediaServerFailure:
    case BusinessEventTypeMediaServerConflict:
    case BusinessEventTypeMediaServerStarted:
    case BusinessEventTypeSystemHealthMessage:
    case BusinessEventTypeUserDefinedEvent:
      return YES;
    default:
      return NO;
  }
}
@interface BusinessRule ()
@property int32_t id;
@property BusinessEventType eventType;
@property (strong) PBAppendableArray * eventResourceArray;
@property (strong) NSString* eventCondition;
@property ToggleStateType eventState;
@property BusinessActionType actionType;
@property (strong) PBAppendableArray * actionResourceArray;
@property (strong) NSString* actionParams;
@property int32_t aggregationPeriod;
@property BOOL disabled;
@property (strong) NSString* comments;
@property (strong) NSString* schedule;
@property BOOL system;
@end

@implementation BusinessRule

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasEventType {
  return !!hasEventType_;
}
- (void) setHasEventType:(BOOL) value {
  hasEventType_ = !!value;
}
@synthesize eventType;
@synthesize eventResourceArray;
@dynamic eventResource;
- (BOOL) hasEventCondition {
  return !!hasEventCondition_;
}
- (void) setHasEventCondition:(BOOL) value {
  hasEventCondition_ = !!value;
}
@synthesize eventCondition;
- (BOOL) hasEventState {
  return !!hasEventState_;
}
- (void) setHasEventState:(BOOL) value {
  hasEventState_ = !!value;
}
@synthesize eventState;
- (BOOL) hasActionType {
  return !!hasActionType_;
}
- (void) setHasActionType:(BOOL) value {
  hasActionType_ = !!value;
}
@synthesize actionType;
@synthesize actionResourceArray;
@dynamic actionResource;
- (BOOL) hasActionParams {
  return !!hasActionParams_;
}
- (void) setHasActionParams:(BOOL) value {
  hasActionParams_ = !!value;
}
@synthesize actionParams;
- (BOOL) hasAggregationPeriod {
  return !!hasAggregationPeriod_;
}
- (void) setHasAggregationPeriod:(BOOL) value {
  hasAggregationPeriod_ = !!value;
}
@synthesize aggregationPeriod;
- (BOOL) hasDisabled {
  return !!hasDisabled_;
}
- (void) setHasDisabled:(BOOL) value {
  hasDisabled_ = !!value;
}
- (BOOL) disabled {
  return !!disabled_;
}
- (void) setDisabled:(BOOL) value {
  disabled_ = !!value;
}
- (BOOL) hasComments {
  return !!hasComments_;
}
- (void) setHasComments:(BOOL) value {
  hasComments_ = !!value;
}
@synthesize comments;
- (BOOL) hasSchedule {
  return !!hasSchedule_;
}
- (void) setHasSchedule:(BOOL) value {
  hasSchedule_ = !!value;
}
@synthesize schedule;
- (BOOL) hasSystem {
  return !!hasSystem_;
}
- (void) setHasSystem:(BOOL) value {
  hasSystem_ = !!value;
}
- (BOOL) system {
  return !!system_;
}
- (void) setSystem:(BOOL) value {
  system_ = !!value;
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.eventType = BusinessEventTypeNotDefinedEvent;
    self.eventCondition = @"";
    self.eventState = ToggleStateTypeStateOff;
    self.actionType = BusinessActionTypeNotDefinedAction;
    self.actionParams = @"";
    self.aggregationPeriod = 0;
    self.disabled = NO;
    self.comments = @"";
    self.schedule = @"";
    self.system = NO;
  }
  return self;
}
static BusinessRule* defaultBusinessRuleInstance = nil;
+ (void) initialize {
  if (self == [BusinessRule class]) {
    defaultBusinessRuleInstance = [[BusinessRule alloc] init];
  }
}
+ (BusinessRule*) defaultInstance {
  return defaultBusinessRuleInstance;
}
- (BusinessRule*) defaultInstance {
  return defaultBusinessRuleInstance;
}
- (PBArray *)eventResource {
  return eventResourceArray;
}
- (int32_t)eventResourceAtIndex:(NSUInteger)index {
  return [eventResourceArray int32AtIndex:index];
}
- (PBArray *)actionResource {
  return actionResourceArray;
}
- (int32_t)actionResourceAtIndex:(NSUInteger)index {
  return [actionResourceArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasEventType) {
    [output writeEnum:2 value:self.eventType];
  }
  const NSUInteger eventResourceArrayCount = self.eventResourceArray.count;
  if (eventResourceArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.eventResourceArray.data;
    for (NSUInteger i = 0; i < eventResourceArrayCount; ++i) {
      [output writeInt32:3 value:values[i]];
    }
  }
  if (self.hasEventCondition) {
    [output writeString:4 value:self.eventCondition];
  }
  if (self.hasEventState) {
    [output writeEnum:5 value:self.eventState];
  }
  if (self.hasActionType) {
    [output writeEnum:6 value:self.actionType];
  }
  const NSUInteger actionResourceArrayCount = self.actionResourceArray.count;
  if (actionResourceArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.actionResourceArray.data;
    for (NSUInteger i = 0; i < actionResourceArrayCount; ++i) {
      [output writeInt32:7 value:values[i]];
    }
  }
  if (self.hasActionParams) {
    [output writeString:8 value:self.actionParams];
  }
  if (self.hasAggregationPeriod) {
    [output writeInt32:9 value:self.aggregationPeriod];
  }
  if (self.hasDisabled) {
    [output writeBool:10 value:self.disabled];
  }
  if (self.hasComments) {
    [output writeString:11 value:self.comments];
  }
  if (self.hasSchedule) {
    [output writeString:12 value:self.schedule];
  }
  if (self.hasSystem) {
    [output writeBool:13 value:self.system];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeInt32Size(1, self.id);
  }
  if (self.hasEventType) {
    size += computeEnumSize(2, self.eventType);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.eventResourceArray.count;
    const int32_t *values = (const int32_t *)self.eventResourceArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasEventCondition) {
    size += computeStringSize(4, self.eventCondition);
  }
  if (self.hasEventState) {
    size += computeEnumSize(5, self.eventState);
  }
  if (self.hasActionType) {
    size += computeEnumSize(6, self.actionType);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.actionResourceArray.count;
    const int32_t *values = (const int32_t *)self.actionResourceArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasActionParams) {
    size += computeStringSize(8, self.actionParams);
  }
  if (self.hasAggregationPeriod) {
    size += computeInt32Size(9, self.aggregationPeriod);
  }
  if (self.hasDisabled) {
    size += computeBoolSize(10, self.disabled);
  }
  if (self.hasComments) {
    size += computeStringSize(11, self.comments);
  }
  if (self.hasSchedule) {
    size += computeStringSize(12, self.schedule);
  }
  if (self.hasSystem) {
    size += computeBoolSize(13, self.system);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BusinessRule*) parseFromData:(NSData*) data {
  return (BusinessRule*)[[[BusinessRule builder] mergeFromData:data] build];
}
+ (BusinessRule*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessRule*)[[[BusinessRule builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BusinessRule*) parseFromInputStream:(NSInputStream*) input {
  return (BusinessRule*)[[[BusinessRule builder] mergeFromInputStream:input] build];
}
+ (BusinessRule*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessRule*)[[[BusinessRule builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessRule*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BusinessRule*)[[[BusinessRule builder] mergeFromCodedInputStream:input] build];
}
+ (BusinessRule*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessRule*)[[[BusinessRule builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessRule_Builder*) builder {
  return [[BusinessRule_Builder alloc] init];
}
+ (BusinessRule_Builder*) builderWithPrototype:(BusinessRule*) prototype {
  return [[BusinessRule builder] mergeFrom:prototype];
}
- (BusinessRule_Builder*) builder {
  return [BusinessRule builder];
}
- (BusinessRule_Builder*) toBuilder {
  return [BusinessRule builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasEventType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"eventType", self.eventType];
  }
  listCount=self.eventResourceArray.count;
  for(int i=0;i<listCount;i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"eventResource", [self.eventResourceArray int32AtIndex:i]];
  }
  if (self.hasEventCondition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventCondition", self.eventCondition];
  }
  if (self.hasEventState) {
    [output appendFormat:@"%@%@: %d\n", indent, @"eventState", self.eventState];
  }
  if (self.hasActionType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"actionType", self.actionType];
  }
  listCount=self.actionResourceArray.count;
  for(int i=0;i<listCount;i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"actionResource", [self.actionResourceArray int32AtIndex:i]];
  }
  if (self.hasActionParams) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionParams", self.actionParams];
  }
  if (self.hasAggregationPeriod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aggregationPeriod", [NSNumber numberWithInt:self.aggregationPeriod]];
  }
  if (self.hasDisabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disabled", [NSNumber numberWithBool:self.disabled]];
  }
  if (self.hasComments) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comments", self.comments];
  }
  if (self.hasSchedule) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schedule", self.schedule];
  }
  if (self.hasSystem) {
    [output appendFormat:@"%@%@: %@\n", indent, @"system", [NSNumber numberWithBool:self.system]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BusinessRule class]]) {
    return NO;
  }
  BusinessRule *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasEventType == otherMessage.hasEventType &&
      (!self.hasEventType || self.eventType != otherMessage.eventType) &&
      [self.eventResourceArray isEqualToArray:otherMessage.eventResourceArray] &&
      self.hasEventCondition == otherMessage.hasEventCondition &&
      (!self.hasEventCondition || [self.eventCondition isEqual:otherMessage.eventCondition]) &&
      self.hasEventState == otherMessage.hasEventState &&
      (!self.hasEventState || self.eventState != otherMessage.eventState) &&
      self.hasActionType == otherMessage.hasActionType &&
      (!self.hasActionType || self.actionType != otherMessage.actionType) &&
      [self.actionResourceArray isEqualToArray:otherMessage.actionResourceArray] &&
      self.hasActionParams == otherMessage.hasActionParams &&
      (!self.hasActionParams || [self.actionParams isEqual:otherMessage.actionParams]) &&
      self.hasAggregationPeriod == otherMessage.hasAggregationPeriod &&
      (!self.hasAggregationPeriod || self.aggregationPeriod == otherMessage.aggregationPeriod) &&
      self.hasDisabled == otherMessage.hasDisabled &&
      (!self.hasDisabled || self.disabled == otherMessage.disabled) &&
      self.hasComments == otherMessage.hasComments &&
      (!self.hasComments || [self.comments isEqual:otherMessage.comments]) &&
      self.hasSchedule == otherMessage.hasSchedule &&
      (!self.hasSchedule || [self.schedule isEqual:otherMessage.schedule]) &&
      self.hasSystem == otherMessage.hasSystem &&
      (!self.hasSystem || self.system == otherMessage.system) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasEventType) {
    hashCode = hashCode * 31 + self.eventType;
  }
  listCount=self.eventResourceArray.count;
  for(int i=0;i<listCount;i++){
  hashCode = hashCode * 31 + [self.eventResourceArray int32AtIndex:i];
  }
  if (self.hasEventCondition) {
    hashCode = hashCode * 31 + [self.eventCondition hash];
  }
  if (self.hasEventState) {
    hashCode = hashCode * 31 + self.eventState;
  }
  if (self.hasActionType) {
    hashCode = hashCode * 31 + self.actionType;
  }
  listCount=self.actionResourceArray.count;
  for(int i=0;i<listCount;i++){
  hashCode = hashCode * 31 + [self.actionResourceArray int32AtIndex:i];
  }
  if (self.hasActionParams) {
    hashCode = hashCode * 31 + [self.actionParams hash];
  }
  if (self.hasAggregationPeriod) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.aggregationPeriod] hash];
  }
  if (self.hasDisabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.disabled] hash];
  }
  if (self.hasComments) {
    hashCode = hashCode * 31 + [self.comments hash];
  }
  if (self.hasSchedule) {
    hashCode = hashCode * 31 + [self.schedule hash];
  }
  if (self.hasSystem) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.system] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BusinessRule_Builder()
@property (strong) BusinessRule* result;
@end

@implementation BusinessRule_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BusinessRule alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BusinessRule_Builder*) clear {
  self.result = [[BusinessRule alloc] init];
  return self;
}
- (BusinessRule_Builder*) clone {
  return [BusinessRule builderWithPrototype:result];
}
- (BusinessRule*) defaultInstance {
  return [BusinessRule defaultInstance];
}
- (BusinessRule*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BusinessRule*) buildPartial {
  BusinessRule* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BusinessRule_Builder*) mergeFrom:(BusinessRule*) other {
  if (other == [BusinessRule defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasEventType) {
    [self setEventType:other.eventType];
  }
  if (other.eventResourceArray.count > 0) {
    if (result.eventResourceArray == nil) {
      result.eventResourceArray = [other.eventResourceArray copy];
    } else {
      [result.eventResourceArray appendArray:other.eventResourceArray];
    }
  }
  if (other.hasEventCondition) {
    [self setEventCondition:other.eventCondition];
  }
  if (other.hasEventState) {
    [self setEventState:other.eventState];
  }
  if (other.hasActionType) {
    [self setActionType:other.actionType];
  }
  if (other.actionResourceArray.count > 0) {
    if (result.actionResourceArray == nil) {
      result.actionResourceArray = [other.actionResourceArray copy];
    } else {
      [result.actionResourceArray appendArray:other.actionResourceArray];
    }
  }
  if (other.hasActionParams) {
    [self setActionParams:other.actionParams];
  }
  if (other.hasAggregationPeriod) {
    [self setAggregationPeriod:other.aggregationPeriod];
  }
  if (other.hasDisabled) {
    [self setDisabled:other.disabled];
  }
  if (other.hasComments) {
    [self setComments:other.comments];
  }
  if (other.hasSchedule) {
    [self setSchedule:other.schedule];
  }
  if (other.hasSystem) {
    [self setSystem:other.system];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BusinessRule_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BusinessRule_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (BusinessEventTypeIsValidValue(value)) {
          [self setEventType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self addEventResource:[input readInt32]];
        break;
      }
      case 34: {
        [self setEventCondition:[input readString]];
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (ToggleStateTypeIsValidValue(value)) {
          [self setEventState:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (BusinessActionTypeIsValidValue(value)) {
          [self setActionType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self addActionResource:[input readInt32]];
        break;
      }
      case 66: {
        [self setActionParams:[input readString]];
        break;
      }
      case 72: {
        [self setAggregationPeriod:[input readInt32]];
        break;
      }
      case 80: {
        [self setDisabled:[input readBool]];
        break;
      }
      case 90: {
        [self setComments:[input readString]];
        break;
      }
      case 98: {
        [self setSchedule:[input readString]];
        break;
      }
      case 104: {
        [self setSystem:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (BusinessRule_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (BusinessRule_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasEventType {
  return result.hasEventType;
}
- (BusinessEventType) eventType {
  return result.eventType;
}
- (BusinessRule_Builder*) setEventType:(BusinessEventType) value {
  result.hasEventType = YES;
  result.eventType = value;
  return self;
}
- (BusinessRule_Builder*) clearEventType {
  result.hasEventType = NO;
  result.eventType = BusinessEventTypeNotDefinedEvent;
  return self;
}
- (PBAppendableArray *)eventResource {
  return result.eventResourceArray;
}
- (int32_t)eventResourceAtIndex:(NSUInteger)index {
  return [result eventResourceAtIndex:index];
}
- (BusinessRule_Builder *)addEventResource:(int32_t)value {
  if (result.eventResourceArray == nil) {
    result.eventResourceArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.eventResourceArray addInt32:value];
  return self;
}
- (BusinessRule_Builder *)setEventResourceArray:(NSArray *)array {
  result.eventResourceArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (BusinessRule_Builder *)setEventResourceValues:(const int32_t *)values count:(NSUInteger)count {
  result.eventResourceArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (BusinessRule_Builder *)clearEventResource {
  result.eventResourceArray = nil;
  return self;
}
- (BOOL) hasEventCondition {
  return result.hasEventCondition;
}
- (NSString*) eventCondition {
  return result.eventCondition;
}
- (BusinessRule_Builder*) setEventCondition:(NSString*) value {
  result.hasEventCondition = YES;
  result.eventCondition = value;
  return self;
}
- (BusinessRule_Builder*) clearEventCondition {
  result.hasEventCondition = NO;
  result.eventCondition = @"";
  return self;
}
- (BOOL) hasEventState {
  return result.hasEventState;
}
- (ToggleStateType) eventState {
  return result.eventState;
}
- (BusinessRule_Builder*) setEventState:(ToggleStateType) value {
  result.hasEventState = YES;
  result.eventState = value;
  return self;
}
- (BusinessRule_Builder*) clearEventState {
  result.hasEventState = NO;
  result.eventState = ToggleStateTypeStateOff;
  return self;
}
- (BOOL) hasActionType {
  return result.hasActionType;
}
- (BusinessActionType) actionType {
  return result.actionType;
}
- (BusinessRule_Builder*) setActionType:(BusinessActionType) value {
  result.hasActionType = YES;
  result.actionType = value;
  return self;
}
- (BusinessRule_Builder*) clearActionType {
  result.hasActionType = NO;
  result.actionType = BusinessActionTypeNotDefinedAction;
  return self;
}
- (PBAppendableArray *)actionResource {
  return result.actionResourceArray;
}
- (int32_t)actionResourceAtIndex:(NSUInteger)index {
  return [result actionResourceAtIndex:index];
}
- (BusinessRule_Builder *)addActionResource:(int32_t)value {
  if (result.actionResourceArray == nil) {
    result.actionResourceArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.actionResourceArray addInt32:value];
  return self;
}
- (BusinessRule_Builder *)setActionResourceArray:(NSArray *)array {
  result.actionResourceArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (BusinessRule_Builder *)setActionResourceValues:(const int32_t *)values count:(NSUInteger)count {
  result.actionResourceArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (BusinessRule_Builder *)clearActionResource {
  result.actionResourceArray = nil;
  return self;
}
- (BOOL) hasActionParams {
  return result.hasActionParams;
}
- (NSString*) actionParams {
  return result.actionParams;
}
- (BusinessRule_Builder*) setActionParams:(NSString*) value {
  result.hasActionParams = YES;
  result.actionParams = value;
  return self;
}
- (BusinessRule_Builder*) clearActionParams {
  result.hasActionParams = NO;
  result.actionParams = @"";
  return self;
}
- (BOOL) hasAggregationPeriod {
  return result.hasAggregationPeriod;
}
- (int32_t) aggregationPeriod {
  return result.aggregationPeriod;
}
- (BusinessRule_Builder*) setAggregationPeriod:(int32_t) value {
  result.hasAggregationPeriod = YES;
  result.aggregationPeriod = value;
  return self;
}
- (BusinessRule_Builder*) clearAggregationPeriod {
  result.hasAggregationPeriod = NO;
  result.aggregationPeriod = 0;
  return self;
}
- (BOOL) hasDisabled {
  return result.hasDisabled;
}
- (BOOL) disabled {
  return result.disabled;
}
- (BusinessRule_Builder*) setDisabled:(BOOL) value {
  result.hasDisabled = YES;
  result.disabled = value;
  return self;
}
- (BusinessRule_Builder*) clearDisabled {
  result.hasDisabled = NO;
  result.disabled = NO;
  return self;
}
- (BOOL) hasComments {
  return result.hasComments;
}
- (NSString*) comments {
  return result.comments;
}
- (BusinessRule_Builder*) setComments:(NSString*) value {
  result.hasComments = YES;
  result.comments = value;
  return self;
}
- (BusinessRule_Builder*) clearComments {
  result.hasComments = NO;
  result.comments = @"";
  return self;
}
- (BOOL) hasSchedule {
  return result.hasSchedule;
}
- (NSString*) schedule {
  return result.schedule;
}
- (BusinessRule_Builder*) setSchedule:(NSString*) value {
  result.hasSchedule = YES;
  result.schedule = value;
  return self;
}
- (BusinessRule_Builder*) clearSchedule {
  result.hasSchedule = NO;
  result.schedule = @"";
  return self;
}
- (BOOL) hasSystem {
  return result.hasSystem;
}
- (BOOL) system {
  return result.system;
}
- (BusinessRule_Builder*) setSystem:(BOOL) value {
  result.hasSystem = YES;
  result.system = value;
  return self;
}
- (BusinessRule_Builder*) clearSystem {
  result.hasSystem = NO;
  result.system = NO;
  return self;
}
@end

@interface BusinessRules ()
@property (strong) NSMutableArray * businessRuleArray;
@end

@implementation BusinessRules

@synthesize businessRuleArray;
@dynamic businessRule;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static BusinessRules* defaultBusinessRulesInstance = nil;
+ (void) initialize {
  if (self == [BusinessRules class]) {
    defaultBusinessRulesInstance = [[BusinessRules alloc] init];
  }
}
+ (BusinessRules*) defaultInstance {
  return defaultBusinessRulesInstance;
}
- (BusinessRules*) defaultInstance {
  return defaultBusinessRulesInstance;
}
- (NSArray *)businessRule {
  return businessRuleArray;
}
- (BusinessRule*)businessRuleAtIndex:(NSUInteger)index {
  return [businessRuleArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (BusinessRule *element in self.businessRuleArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (BusinessRule *element in self.businessRuleArray) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BusinessRules*) parseFromData:(NSData*) data {
  return (BusinessRules*)[[[BusinessRules builder] mergeFromData:data] build];
}
+ (BusinessRules*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessRules*)[[[BusinessRules builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BusinessRules*) parseFromInputStream:(NSInputStream*) input {
  return (BusinessRules*)[[[BusinessRules builder] mergeFromInputStream:input] build];
}
+ (BusinessRules*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessRules*)[[[BusinessRules builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessRules*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BusinessRules*)[[[BusinessRules builder] mergeFromCodedInputStream:input] build];
}
+ (BusinessRules*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessRules*)[[[BusinessRules builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessRules_Builder*) builder {
  return [[BusinessRules_Builder alloc] init];
}
+ (BusinessRules_Builder*) builderWithPrototype:(BusinessRules*) prototype {
  return [[BusinessRules builder] mergeFrom:prototype];
}
- (BusinessRules_Builder*) builder {
  return [BusinessRules builder];
}
- (BusinessRules_Builder*) toBuilder {
  return [BusinessRules builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  for (BusinessRule* element in self.businessRuleArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"businessRule"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BusinessRules class]]) {
    return NO;
  }
  BusinessRules *otherMessage = other;
  return
      [self.businessRuleArray isEqualToArray:otherMessage.businessRuleArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  for (BusinessRule* element in self.businessRuleArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BusinessRules_Builder()
@property (strong) BusinessRules* result;
@end

@implementation BusinessRules_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BusinessRules alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BusinessRules_Builder*) clear {
  self.result = [[BusinessRules alloc] init];
  return self;
}
- (BusinessRules_Builder*) clone {
  return [BusinessRules builderWithPrototype:result];
}
- (BusinessRules*) defaultInstance {
  return [BusinessRules defaultInstance];
}
- (BusinessRules*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BusinessRules*) buildPartial {
  BusinessRules* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BusinessRules_Builder*) mergeFrom:(BusinessRules*) other {
  if (other == [BusinessRules defaultInstance]) {
    return self;
  }
  if (other.businessRuleArray.count > 0) {
    if (result.businessRuleArray == nil) {
      result.businessRuleArray = [[NSMutableArray alloc] initWithArray:other.businessRuleArray];
    } else {
      [result.businessRuleArray addObjectsFromArray:other.businessRuleArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BusinessRules_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BusinessRules_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BusinessRule_Builder* subBuilder = [BusinessRule builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBusinessRule:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)businessRule {
  return result.businessRuleArray;
}
- (BusinessRule*)businessRuleAtIndex:(NSUInteger)index {
  return [result businessRuleAtIndex:index];
}
- (BusinessRules_Builder *)addBusinessRule:(BusinessRule*)value {
  if (result.businessRuleArray == nil) {
    result.businessRuleArray = [[NSMutableArray alloc]init];
  }
  [result.businessRuleArray addObject:value];
  return self;
}
- (BusinessRules_Builder *)setBusinessRuleArray:(NSArray *)array {
  result.businessRuleArray = [[NSMutableArray alloc]init];
  return self;
}
- (BusinessRules_Builder *)clearBusinessRule {
  result.businessRuleArray = nil;
  return self;
}
@end

