// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "BusinessAction.pb.h"

@implementation BusinessActionRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BusinessActionRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [BusinessCommonRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BusinessActionTypeIsValidValue(BusinessActionType value) {
  switch (value) {
    case BusinessActionTypeNotDefinedAction:
    case BusinessActionTypeCameraOutput:
    case BusinessActionTypeBookmark:
    case BusinessActionTypeCameraRecording:
    case BusinessActionTypePanicRecording:
    case BusinessActionTypeSendMail:
    case BusinessActionTypeDiagnostics:
    case BusinessActionTypeShowPopup:
    case BusinessActionTypeCameraOutputInstant:
    case BusinessActionTypePlaySound:
    case BusinessActionTypeSayText:
    case BusinessActionTypePlaySoundRepeated:
      return YES;
    default:
      return NO;
  }
}
@interface BusinessAction ()
@property BusinessActionType actionType;
@property (strong) PBAppendableArray * actionResourceArray;
@property (strong) NSString* actionParams;
@property int32_t businessRuleId;
@property (strong) NSString* runtimeParams;
@property ToggleStateType toggleState;
@property int32_t aggregationCount;
@end

@implementation BusinessAction

- (BOOL) hasActionType {
  return !!hasActionType_;
}
- (void) setHasActionType:(BOOL) value {
  hasActionType_ = !!value;
}
@synthesize actionType;
@synthesize actionResourceArray;
@dynamic actionResource;
- (BOOL) hasActionParams {
  return !!hasActionParams_;
}
- (void) setHasActionParams:(BOOL) value {
  hasActionParams_ = !!value;
}
@synthesize actionParams;
- (BOOL) hasBusinessRuleId {
  return !!hasBusinessRuleId_;
}
- (void) setHasBusinessRuleId:(BOOL) value {
  hasBusinessRuleId_ = !!value;
}
@synthesize businessRuleId;
- (BOOL) hasRuntimeParams {
  return !!hasRuntimeParams_;
}
- (void) setHasRuntimeParams:(BOOL) value {
  hasRuntimeParams_ = !!value;
}
@synthesize runtimeParams;
- (BOOL) hasToggleState {
  return !!hasToggleState_;
}
- (void) setHasToggleState:(BOOL) value {
  hasToggleState_ = !!value;
}
@synthesize toggleState;
- (BOOL) hasAggregationCount {
  return !!hasAggregationCount_;
}
- (void) setHasAggregationCount:(BOOL) value {
  hasAggregationCount_ = !!value;
}
@synthesize aggregationCount;
- (id) init {
  if ((self = [super init])) {
    self.actionType = BusinessActionTypeNotDefinedAction;
    self.actionParams = @"";
    self.businessRuleId = 0;
    self.runtimeParams = @"";
    self.toggleState = ToggleStateTypeStateOff;
    self.aggregationCount = 0;
  }
  return self;
}
static BusinessAction* defaultBusinessActionInstance = nil;
+ (void) initialize {
  if (self == [BusinessAction class]) {
    defaultBusinessActionInstance = [[BusinessAction alloc] init];
  }
}
+ (BusinessAction*) defaultInstance {
  return defaultBusinessActionInstance;
}
- (BusinessAction*) defaultInstance {
  return defaultBusinessActionInstance;
}
- (PBArray *)actionResource {
  return actionResourceArray;
}
- (int32_t)actionResourceAtIndex:(NSUInteger)index {
  return [actionResourceArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActionType) {
    [output writeEnum:1 value:self.actionType];
  }
  const NSUInteger actionResourceArrayCount = self.actionResourceArray.count;
  if (actionResourceArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.actionResourceArray.data;
    for (NSUInteger i = 0; i < actionResourceArrayCount; ++i) {
      [output writeInt32:2 value:values[i]];
    }
  }
  if (self.hasActionParams) {
    [output writeString:3 value:self.actionParams];
  }
  if (self.hasBusinessRuleId) {
    [output writeInt32:4 value:self.businessRuleId];
  }
  if (self.hasRuntimeParams) {
    [output writeString:5 value:self.runtimeParams];
  }
  if (self.hasToggleState) {
    [output writeEnum:6 value:self.toggleState];
  }
  if (self.hasAggregationCount) {
    [output writeInt32:7 value:self.aggregationCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasActionType) {
    size += computeEnumSize(1, self.actionType);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.actionResourceArray.count;
    const int32_t *values = (const int32_t *)self.actionResourceArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size += dataSize;
    size += 1 * count;
  }
  if (self.hasActionParams) {
    size += computeStringSize(3, self.actionParams);
  }
  if (self.hasBusinessRuleId) {
    size += computeInt32Size(4, self.businessRuleId);
  }
  if (self.hasRuntimeParams) {
    size += computeStringSize(5, self.runtimeParams);
  }
  if (self.hasToggleState) {
    size += computeEnumSize(6, self.toggleState);
  }
  if (self.hasAggregationCount) {
    size += computeInt32Size(7, self.aggregationCount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BusinessAction*) parseFromData:(NSData*) data {
  return (BusinessAction*)[[[BusinessAction builder] mergeFromData:data] build];
}
+ (BusinessAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessAction*)[[[BusinessAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BusinessAction*) parseFromInputStream:(NSInputStream*) input {
  return (BusinessAction*)[[[BusinessAction builder] mergeFromInputStream:input] build];
}
+ (BusinessAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessAction*)[[[BusinessAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BusinessAction*)[[[BusinessAction builder] mergeFromCodedInputStream:input] build];
}
+ (BusinessAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessAction*)[[[BusinessAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessAction_Builder*) builder {
  return [[BusinessAction_Builder alloc] init];
}
+ (BusinessAction_Builder*) builderWithPrototype:(BusinessAction*) prototype {
  return [[BusinessAction builder] mergeFrom:prototype];
}
- (BusinessAction_Builder*) builder {
  return [BusinessAction builder];
}
- (BusinessAction_Builder*) toBuilder {
  return [BusinessAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasActionType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"actionType", self.actionType];
  }
  listCount=self.actionResourceArray.count;
  for(int i=0;i<listCount;i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"actionResource", [self.actionResourceArray int32AtIndex:i]];
  }
  if (self.hasActionParams) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionParams", self.actionParams];
  }
  if (self.hasBusinessRuleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"businessRuleId", [NSNumber numberWithInt:self.businessRuleId]];
  }
  if (self.hasRuntimeParams) {
    [output appendFormat:@"%@%@: %@\n", indent, @"runtimeParams", self.runtimeParams];
  }
  if (self.hasToggleState) {
    [output appendFormat:@"%@%@: %d\n", indent, @"toggleState", self.toggleState];
  }
  if (self.hasAggregationCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aggregationCount", [NSNumber numberWithInt:self.aggregationCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BusinessAction class]]) {
    return NO;
  }
  BusinessAction *otherMessage = other;
  return
      self.hasActionType == otherMessage.hasActionType &&
      (!self.hasActionType || self.actionType != otherMessage.actionType) &&
      [self.actionResourceArray isEqualToArray:otherMessage.actionResourceArray] &&
      self.hasActionParams == otherMessage.hasActionParams &&
      (!self.hasActionParams || [self.actionParams isEqual:otherMessage.actionParams]) &&
      self.hasBusinessRuleId == otherMessage.hasBusinessRuleId &&
      (!self.hasBusinessRuleId || self.businessRuleId == otherMessage.businessRuleId) &&
      self.hasRuntimeParams == otherMessage.hasRuntimeParams &&
      (!self.hasRuntimeParams || [self.runtimeParams isEqual:otherMessage.runtimeParams]) &&
      self.hasToggleState == otherMessage.hasToggleState &&
      (!self.hasToggleState || self.toggleState != otherMessage.toggleState) &&
      self.hasAggregationCount == otherMessage.hasAggregationCount &&
      (!self.hasAggregationCount || self.aggregationCount == otherMessage.aggregationCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasActionType) {
    hashCode = hashCode * 31 + self.actionType;
  }
  listCount=self.actionResourceArray.count;
  for(int i=0;i<listCount;i++){
  hashCode = hashCode * 31 + [self.actionResourceArray int32AtIndex:i];
  }
  if (self.hasActionParams) {
    hashCode = hashCode * 31 + [self.actionParams hash];
  }
  if (self.hasBusinessRuleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.businessRuleId] hash];
  }
  if (self.hasRuntimeParams) {
    hashCode = hashCode * 31 + [self.runtimeParams hash];
  }
  if (self.hasToggleState) {
    hashCode = hashCode * 31 + self.toggleState;
  }
  if (self.hasAggregationCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.aggregationCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BusinessAction_Builder()
@property (strong) BusinessAction* result;
@end

@implementation BusinessAction_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BusinessAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BusinessAction_Builder*) clear {
  self.result = [[BusinessAction alloc] init];
  return self;
}
- (BusinessAction_Builder*) clone {
  return [BusinessAction builderWithPrototype:result];
}
- (BusinessAction*) defaultInstance {
  return [BusinessAction defaultInstance];
}
- (BusinessAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BusinessAction*) buildPartial {
  BusinessAction* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BusinessAction_Builder*) mergeFrom:(BusinessAction*) other {
  if (other == [BusinessAction defaultInstance]) {
    return self;
  }
  if (other.hasActionType) {
    [self setActionType:other.actionType];
  }
  if (other.actionResourceArray.count > 0) {
    if (result.actionResourceArray == nil) {
      result.actionResourceArray = [other.actionResourceArray copy];
    } else {
      [result.actionResourceArray appendArray:other.actionResourceArray];
    }
  }
  if (other.hasActionParams) {
    [self setActionParams:other.actionParams];
  }
  if (other.hasBusinessRuleId) {
    [self setBusinessRuleId:other.businessRuleId];
  }
  if (other.hasRuntimeParams) {
    [self setRuntimeParams:other.runtimeParams];
  }
  if (other.hasToggleState) {
    [self setToggleState:other.toggleState];
  }
  if (other.hasAggregationCount) {
    [self setAggregationCount:other.aggregationCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BusinessAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BusinessAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (BusinessActionTypeIsValidValue(value)) {
          [self setActionType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self addActionResource:[input readInt32]];
        break;
      }
      case 26: {
        [self setActionParams:[input readString]];
        break;
      }
      case 32: {
        [self setBusinessRuleId:[input readInt32]];
        break;
      }
      case 42: {
        [self setRuntimeParams:[input readString]];
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (ToggleStateTypeIsValidValue(value)) {
          [self setToggleState:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setAggregationCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasActionType {
  return result.hasActionType;
}
- (BusinessActionType) actionType {
  return result.actionType;
}
- (BusinessAction_Builder*) setActionType:(BusinessActionType) value {
  result.hasActionType = YES;
  result.actionType = value;
  return self;
}
- (BusinessAction_Builder*) clearActionType {
  result.hasActionType = NO;
  result.actionType = BusinessActionTypeNotDefinedAction;
  return self;
}
- (PBAppendableArray *)actionResource {
  return result.actionResourceArray;
}
- (int32_t)actionResourceAtIndex:(NSUInteger)index {
  return [result actionResourceAtIndex:index];
}
- (BusinessAction_Builder *)addActionResource:(int32_t)value {
  if (result.actionResourceArray == nil) {
    result.actionResourceArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.actionResourceArray addInt32:value];
  return self;
}
- (BusinessAction_Builder *)setActionResourceArray:(NSArray *)array {
  result.actionResourceArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (BusinessAction_Builder *)setActionResourceValues:(const int32_t *)values count:(NSUInteger)count {
  result.actionResourceArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (BusinessAction_Builder *)clearActionResource {
  result.actionResourceArray = nil;
  return self;
}
- (BOOL) hasActionParams {
  return result.hasActionParams;
}
- (NSString*) actionParams {
  return result.actionParams;
}
- (BusinessAction_Builder*) setActionParams:(NSString*) value {
  result.hasActionParams = YES;
  result.actionParams = value;
  return self;
}
- (BusinessAction_Builder*) clearActionParams {
  result.hasActionParams = NO;
  result.actionParams = @"";
  return self;
}
- (BOOL) hasBusinessRuleId {
  return result.hasBusinessRuleId;
}
- (int32_t) businessRuleId {
  return result.businessRuleId;
}
- (BusinessAction_Builder*) setBusinessRuleId:(int32_t) value {
  result.hasBusinessRuleId = YES;
  result.businessRuleId = value;
  return self;
}
- (BusinessAction_Builder*) clearBusinessRuleId {
  result.hasBusinessRuleId = NO;
  result.businessRuleId = 0;
  return self;
}
- (BOOL) hasRuntimeParams {
  return result.hasRuntimeParams;
}
- (NSString*) runtimeParams {
  return result.runtimeParams;
}
- (BusinessAction_Builder*) setRuntimeParams:(NSString*) value {
  result.hasRuntimeParams = YES;
  result.runtimeParams = value;
  return self;
}
- (BusinessAction_Builder*) clearRuntimeParams {
  result.hasRuntimeParams = NO;
  result.runtimeParams = @"";
  return self;
}
- (BOOL) hasToggleState {
  return result.hasToggleState;
}
- (ToggleStateType) toggleState {
  return result.toggleState;
}
- (BusinessAction_Builder*) setToggleState:(ToggleStateType) value {
  result.hasToggleState = YES;
  result.toggleState = value;
  return self;
}
- (BusinessAction_Builder*) clearToggleState {
  result.hasToggleState = NO;
  result.toggleState = ToggleStateTypeStateOff;
  return self;
}
- (BOOL) hasAggregationCount {
  return result.hasAggregationCount;
}
- (int32_t) aggregationCount {
  return result.aggregationCount;
}
- (BusinessAction_Builder*) setAggregationCount:(int32_t) value {
  result.hasAggregationCount = YES;
  result.aggregationCount = value;
  return self;
}
- (BusinessAction_Builder*) clearAggregationCount {
  result.hasAggregationCount = NO;
  result.aggregationCount = 0;
  return self;
}
@end

@interface BusinessActionList ()
@property (strong) NSMutableArray * businessActionArray;
@end

@implementation BusinessActionList

@synthesize businessActionArray;
@dynamic businessAction;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static BusinessActionList* defaultBusinessActionListInstance = nil;
+ (void) initialize {
  if (self == [BusinessActionList class]) {
    defaultBusinessActionListInstance = [[BusinessActionList alloc] init];
  }
}
+ (BusinessActionList*) defaultInstance {
  return defaultBusinessActionListInstance;
}
- (BusinessActionList*) defaultInstance {
  return defaultBusinessActionListInstance;
}
- (NSArray *)businessAction {
  return businessActionArray;
}
- (BusinessAction*)businessActionAtIndex:(NSUInteger)index {
  return [businessActionArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (BusinessAction *element in self.businessActionArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (BusinessAction *element in self.businessActionArray) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BusinessActionList*) parseFromData:(NSData*) data {
  return (BusinessActionList*)[[[BusinessActionList builder] mergeFromData:data] build];
}
+ (BusinessActionList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessActionList*)[[[BusinessActionList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BusinessActionList*) parseFromInputStream:(NSInputStream*) input {
  return (BusinessActionList*)[[[BusinessActionList builder] mergeFromInputStream:input] build];
}
+ (BusinessActionList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessActionList*)[[[BusinessActionList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessActionList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BusinessActionList*)[[[BusinessActionList builder] mergeFromCodedInputStream:input] build];
}
+ (BusinessActionList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BusinessActionList*)[[[BusinessActionList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BusinessActionList_Builder*) builder {
  return [[BusinessActionList_Builder alloc] init];
}
+ (BusinessActionList_Builder*) builderWithPrototype:(BusinessActionList*) prototype {
  return [[BusinessActionList builder] mergeFrom:prototype];
}
- (BusinessActionList_Builder*) builder {
  return [BusinessActionList builder];
}
- (BusinessActionList_Builder*) toBuilder {
  return [BusinessActionList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  for (BusinessAction* element in self.businessActionArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"businessAction"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BusinessActionList class]]) {
    return NO;
  }
  BusinessActionList *otherMessage = other;
  return
      [self.businessActionArray isEqualToArray:otherMessage.businessActionArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  for (BusinessAction* element in self.businessActionArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BusinessActionList_Builder()
@property (strong) BusinessActionList* result;
@end

@implementation BusinessActionList_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BusinessActionList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BusinessActionList_Builder*) clear {
  self.result = [[BusinessActionList alloc] init];
  return self;
}
- (BusinessActionList_Builder*) clone {
  return [BusinessActionList builderWithPrototype:result];
}
- (BusinessActionList*) defaultInstance {
  return [BusinessActionList defaultInstance];
}
- (BusinessActionList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BusinessActionList*) buildPartial {
  BusinessActionList* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BusinessActionList_Builder*) mergeFrom:(BusinessActionList*) other {
  if (other == [BusinessActionList defaultInstance]) {
    return self;
  }
  if (other.businessActionArray.count > 0) {
    if (result.businessActionArray == nil) {
      result.businessActionArray = [[NSMutableArray alloc] initWithArray:other.businessActionArray];
    } else {
      [result.businessActionArray addObjectsFromArray:other.businessActionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BusinessActionList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BusinessActionList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BusinessAction_Builder* subBuilder = [BusinessAction builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBusinessAction:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)businessAction {
  return result.businessActionArray;
}
- (BusinessAction*)businessActionAtIndex:(NSUInteger)index {
  return [result businessActionAtIndex:index];
}
- (BusinessActionList_Builder *)addBusinessAction:(BusinessAction*)value {
  if (result.businessActionArray == nil) {
    result.businessActionArray = [[NSMutableArray alloc]init];
  }
  [result.businessActionArray addObject:value];
  return self;
}
- (BusinessActionList_Builder *)setBusinessActionArray:(NSArray *)array {
  result.businessActionArray = [[NSMutableArray alloc]init];
  return self;
}
- (BusinessActionList_Builder *)clearBusinessAction {
  result.businessActionArray = nil;
  return self;
}
@end

