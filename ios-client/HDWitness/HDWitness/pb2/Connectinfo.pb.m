// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Connectinfo.pb.h"

@implementation ConnectinfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ConnectinfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CompatibilityRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ConnectInfo ()
@property (strong) NSString* version;
@property (strong) CompatibilityItems* compatibilityItems;
@property int32_t proxyPort;
@property (strong) NSString* ecsGuid;
@property (strong) NSString* publicIp;
@property (strong) NSString* oldHardwareId;
@property (strong) NSString* hardwareId1;
@property (strong) NSString* hardwareId2;
@property (strong) NSString* brand;
@property (strong) NSString* hardwareId3;
@property BOOL allowCameraChangesDeprecated;
@end

@implementation ConnectInfo

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasCompatibilityItems {
  return !!hasCompatibilityItems_;
}
- (void) setHasCompatibilityItems:(BOOL) value {
  hasCompatibilityItems_ = !!value;
}
@synthesize compatibilityItems;
- (BOOL) hasProxyPort {
  return !!hasProxyPort_;
}
- (void) setHasProxyPort:(BOOL) value {
  hasProxyPort_ = !!value;
}
@synthesize proxyPort;
- (BOOL) hasEcsGuid {
  return !!hasEcsGuid_;
}
- (void) setHasEcsGuid:(BOOL) value {
  hasEcsGuid_ = !!value;
}
@synthesize ecsGuid;
- (BOOL) hasPublicIp {
  return !!hasPublicIp_;
}
- (void) setHasPublicIp:(BOOL) value {
  hasPublicIp_ = !!value;
}
@synthesize publicIp;
- (BOOL) hasOldHardwareId {
  return !!hasOldHardwareId_;
}
- (void) setHasOldHardwareId:(BOOL) value {
  hasOldHardwareId_ = !!value;
}
@synthesize oldHardwareId;
- (BOOL) hasHardwareId1 {
  return !!hasHardwareId1_;
}
- (void) setHasHardwareId1:(BOOL) value {
  hasHardwareId1_ = !!value;
}
@synthesize hardwareId1;
- (BOOL) hasHardwareId2 {
  return !!hasHardwareId2_;
}
- (void) setHasHardwareId2:(BOOL) value {
  hasHardwareId2_ = !!value;
}
@synthesize hardwareId2;
- (BOOL) hasBrand {
  return !!hasBrand_;
}
- (void) setHasBrand:(BOOL) value {
  hasBrand_ = !!value;
}
@synthesize brand;
- (BOOL) hasHardwareId3 {
  return !!hasHardwareId3_;
}
- (void) setHasHardwareId3:(BOOL) value {
  hasHardwareId3_ = !!value;
}
@synthesize hardwareId3;
- (BOOL) hasAllowCameraChangesDeprecated {
  return !!hasAllowCameraChangesDeprecated_;
}
- (void) setHasAllowCameraChangesDeprecated:(BOOL) value {
  hasAllowCameraChangesDeprecated_ = !!value;
}
- (BOOL) allowCameraChangesDeprecated {
  return !!allowCameraChangesDeprecated_;
}
- (void) setAllowCameraChangesDeprecated:(BOOL) value {
  allowCameraChangesDeprecated_ = !!value;
}
- (id) init {
  if ((self = [super init])) {
    self.version = @"";
    self.compatibilityItems = [CompatibilityItems defaultInstance];
    self.proxyPort = 0;
    self.ecsGuid = @"";
    self.publicIp = @"";
    self.oldHardwareId = @"";
    self.hardwareId1 = @"";
    self.hardwareId2 = @"";
    self.brand = @"";
    self.hardwareId3 = @"";
    self.allowCameraChangesDeprecated = NO;
  }
  return self;
}
static ConnectInfo* defaultConnectInfoInstance = nil;
+ (void) initialize {
  if (self == [ConnectInfo class]) {
    defaultConnectInfoInstance = [[ConnectInfo alloc] init];
  }
}
+ (ConnectInfo*) defaultInstance {
  return defaultConnectInfoInstance;
}
- (ConnectInfo*) defaultInstance {
  return defaultConnectInfoInstance;
}
- (BOOL) isInitialized {
  if (self.hasCompatibilityItems) {
    if (!self.compatibilityItems.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeString:1 value:self.version];
  }
  if (self.hasCompatibilityItems) {
    [output writeMessage:2 value:self.compatibilityItems];
  }
  if (self.hasProxyPort) {
    [output writeInt32:3 value:self.proxyPort];
  }
  if (self.hasEcsGuid) {
    [output writeString:4 value:self.ecsGuid];
  }
  if (self.hasPublicIp) {
    [output writeString:5 value:self.publicIp];
  }
  if (self.hasOldHardwareId) {
    [output writeString:6 value:self.oldHardwareId];
  }
  if (self.hasHardwareId1) {
    [output writeString:7 value:self.hardwareId1];
  }
  if (self.hasHardwareId2) {
    [output writeString:8 value:self.hardwareId2];
  }
  if (self.hasBrand) {
    [output writeString:9 value:self.brand];
  }
  if (self.hasHardwareId3) {
    [output writeString:10 value:self.hardwareId3];
  }
  if (self.hasAllowCameraChangesDeprecated) {
    [output writeBool:12 value:self.allowCameraChangesDeprecated];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasVersion) {
    size += computeStringSize(1, self.version);
  }
  if (self.hasCompatibilityItems) {
    size += computeMessageSize(2, self.compatibilityItems);
  }
  if (self.hasProxyPort) {
    size += computeInt32Size(3, self.proxyPort);
  }
  if (self.hasEcsGuid) {
    size += computeStringSize(4, self.ecsGuid);
  }
  if (self.hasPublicIp) {
    size += computeStringSize(5, self.publicIp);
  }
  if (self.hasOldHardwareId) {
    size += computeStringSize(6, self.oldHardwareId);
  }
  if (self.hasHardwareId1) {
    size += computeStringSize(7, self.hardwareId1);
  }
  if (self.hasHardwareId2) {
    size += computeStringSize(8, self.hardwareId2);
  }
  if (self.hasBrand) {
    size += computeStringSize(9, self.brand);
  }
  if (self.hasHardwareId3) {
    size += computeStringSize(10, self.hardwareId3);
  }
  if (self.hasAllowCameraChangesDeprecated) {
    size += computeBoolSize(12, self.allowCameraChangesDeprecated);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ConnectInfo*) parseFromData:(NSData*) data {
  return (ConnectInfo*)[[[ConnectInfo builder] mergeFromData:data] build];
}
+ (ConnectInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectInfo*)[[[ConnectInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectInfo*)[[[ConnectInfo builder] mergeFromInputStream:input] build];
}
+ (ConnectInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectInfo*)[[[ConnectInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectInfo*)[[[ConnectInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectInfo*)[[[ConnectInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectInfo_Builder*) builder {
  return [[ConnectInfo_Builder alloc] init];
}
+ (ConnectInfo_Builder*) builderWithPrototype:(ConnectInfo*) prototype {
  return [[ConnectInfo builder] mergeFrom:prototype];
}
- (ConnectInfo_Builder*) builder {
  return [ConnectInfo builder];
}
- (ConnectInfo_Builder*) toBuilder {
  return [ConnectInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  NSUInteger listCount = 0;
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasCompatibilityItems) {
    [output appendFormat:@"%@%@ {\n", indent, @"compatibilityItems"];
    [self.compatibilityItems writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProxyPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"proxyPort", [NSNumber numberWithInt:self.proxyPort]];
  }
  if (self.hasEcsGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ecsGuid", self.ecsGuid];
  }
  if (self.hasPublicIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publicIp", self.publicIp];
  }
  if (self.hasOldHardwareId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oldHardwareId", self.oldHardwareId];
  }
  if (self.hasHardwareId1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hardwareId1", self.hardwareId1];
  }
  if (self.hasHardwareId2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hardwareId2", self.hardwareId2];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasHardwareId3) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hardwareId3", self.hardwareId3];
  }
  if (self.hasAllowCameraChangesDeprecated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowCameraChangesDeprecated", [NSNumber numberWithBool:self.allowCameraChangesDeprecated]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectInfo class]]) {
    return NO;
  }
  ConnectInfo *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasCompatibilityItems == otherMessage.hasCompatibilityItems &&
      (!self.hasCompatibilityItems || [self.compatibilityItems isEqual:otherMessage.compatibilityItems]) &&
      self.hasProxyPort == otherMessage.hasProxyPort &&
      (!self.hasProxyPort || self.proxyPort == otherMessage.proxyPort) &&
      self.hasEcsGuid == otherMessage.hasEcsGuid &&
      (!self.hasEcsGuid || [self.ecsGuid isEqual:otherMessage.ecsGuid]) &&
      self.hasPublicIp == otherMessage.hasPublicIp &&
      (!self.hasPublicIp || [self.publicIp isEqual:otherMessage.publicIp]) &&
      self.hasOldHardwareId == otherMessage.hasOldHardwareId &&
      (!self.hasOldHardwareId || [self.oldHardwareId isEqual:otherMessage.oldHardwareId]) &&
      self.hasHardwareId1 == otherMessage.hasHardwareId1 &&
      (!self.hasHardwareId1 || [self.hardwareId1 isEqual:otherMessage.hardwareId1]) &&
      self.hasHardwareId2 == otherMessage.hasHardwareId2 &&
      (!self.hasHardwareId2 || [self.hardwareId2 isEqual:otherMessage.hardwareId2]) &&
      self.hasBrand == otherMessage.hasBrand &&
      (!self.hasBrand || [self.brand isEqual:otherMessage.brand]) &&
      self.hasHardwareId3 == otherMessage.hasHardwareId3 &&
      (!self.hasHardwareId3 || [self.hardwareId3 isEqual:otherMessage.hardwareId3]) &&
      self.hasAllowCameraChangesDeprecated == otherMessage.hasAllowCameraChangesDeprecated &&
      (!self.hasAllowCameraChangesDeprecated || self.allowCameraChangesDeprecated == otherMessage.allowCameraChangesDeprecated) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  NSUInteger listCount = 0;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasCompatibilityItems) {
    hashCode = hashCode * 31 + [self.compatibilityItems hash];
  }
  if (self.hasProxyPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.proxyPort] hash];
  }
  if (self.hasEcsGuid) {
    hashCode = hashCode * 31 + [self.ecsGuid hash];
  }
  if (self.hasPublicIp) {
    hashCode = hashCode * 31 + [self.publicIp hash];
  }
  if (self.hasOldHardwareId) {
    hashCode = hashCode * 31 + [self.oldHardwareId hash];
  }
  if (self.hasHardwareId1) {
    hashCode = hashCode * 31 + [self.hardwareId1 hash];
  }
  if (self.hasHardwareId2) {
    hashCode = hashCode * 31 + [self.hardwareId2 hash];
  }
  if (self.hasBrand) {
    hashCode = hashCode * 31 + [self.brand hash];
  }
  if (self.hasHardwareId3) {
    hashCode = hashCode * 31 + [self.hardwareId3 hash];
  }
  if (self.hasAllowCameraChangesDeprecated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowCameraChangesDeprecated] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectInfo_Builder()
@property (strong) ConnectInfo* result;
@end

@implementation ConnectInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ConnectInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ConnectInfo_Builder*) clear {
  self.result = [[ConnectInfo alloc] init];
  return self;
}
- (ConnectInfo_Builder*) clone {
  return [ConnectInfo builderWithPrototype:result];
}
- (ConnectInfo*) defaultInstance {
  return [ConnectInfo defaultInstance];
}
- (ConnectInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectInfo*) buildPartial {
  ConnectInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ConnectInfo_Builder*) mergeFrom:(ConnectInfo*) other {
  if (other == [ConnectInfo defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasCompatibilityItems) {
    [self mergeCompatibilityItems:other.compatibilityItems];
  }
  if (other.hasProxyPort) {
    [self setProxyPort:other.proxyPort];
  }
  if (other.hasEcsGuid) {
    [self setEcsGuid:other.ecsGuid];
  }
  if (other.hasPublicIp) {
    [self setPublicIp:other.publicIp];
  }
  if (other.hasOldHardwareId) {
    [self setOldHardwareId:other.oldHardwareId];
  }
  if (other.hasHardwareId1) {
    [self setHardwareId1:other.hardwareId1];
  }
  if (other.hasHardwareId2) {
    [self setHardwareId2:other.hardwareId2];
  }
  if (other.hasBrand) {
    [self setBrand:other.brand];
  }
  if (other.hasHardwareId3) {
    [self setHardwareId3:other.hardwareId3];
  }
  if (other.hasAllowCameraChangesDeprecated) {
    [self setAllowCameraChangesDeprecated:other.allowCameraChangesDeprecated];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVersion:[input readString]];
        break;
      }
      case 18: {
        CompatibilityItems_Builder* subBuilder = [CompatibilityItems builder];
        if (self.hasCompatibilityItems) {
          [subBuilder mergeFrom:self.compatibilityItems];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompatibilityItems:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setProxyPort:[input readInt32]];
        break;
      }
      case 34: {
        [self setEcsGuid:[input readString]];
        break;
      }
      case 42: {
        [self setPublicIp:[input readString]];
        break;
      }
      case 50: {
        [self setOldHardwareId:[input readString]];
        break;
      }
      case 58: {
        [self setHardwareId1:[input readString]];
        break;
      }
      case 66: {
        [self setHardwareId2:[input readString]];
        break;
      }
      case 74: {
        [self setBrand:[input readString]];
        break;
      }
      case 82: {
        [self setHardwareId3:[input readString]];
        break;
      }
      case 96: {
        [self setAllowCameraChangesDeprecated:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (NSString*) version {
  return result.version;
}
- (ConnectInfo_Builder*) setVersion:(NSString*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (ConnectInfo_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = @"";
  return self;
}
- (BOOL) hasCompatibilityItems {
  return result.hasCompatibilityItems;
}
- (CompatibilityItems*) compatibilityItems {
  return result.compatibilityItems;
}
- (ConnectInfo_Builder*) setCompatibilityItems:(CompatibilityItems*) value {
  result.hasCompatibilityItems = YES;
  result.compatibilityItems = value;
  return self;
}
- (ConnectInfo_Builder*) setCompatibilityItemsBuilder:(CompatibilityItems_Builder*) builderForValue {
  return [self setCompatibilityItems:[builderForValue build]];
}
- (ConnectInfo_Builder*) mergeCompatibilityItems:(CompatibilityItems*) value {
  if (result.hasCompatibilityItems &&
      result.compatibilityItems != [CompatibilityItems defaultInstance]) {
    result.compatibilityItems =
      [[[CompatibilityItems builderWithPrototype:result.compatibilityItems] mergeFrom:value] buildPartial];
  } else {
    result.compatibilityItems = value;
  }
  result.hasCompatibilityItems = YES;
  return self;
}
- (ConnectInfo_Builder*) clearCompatibilityItems {
  result.hasCompatibilityItems = NO;
  result.compatibilityItems = [CompatibilityItems defaultInstance];
  return self;
}
- (BOOL) hasProxyPort {
  return result.hasProxyPort;
}
- (int32_t) proxyPort {
  return result.proxyPort;
}
- (ConnectInfo_Builder*) setProxyPort:(int32_t) value {
  result.hasProxyPort = YES;
  result.proxyPort = value;
  return self;
}
- (ConnectInfo_Builder*) clearProxyPort {
  result.hasProxyPort = NO;
  result.proxyPort = 0;
  return self;
}
- (BOOL) hasEcsGuid {
  return result.hasEcsGuid;
}
- (NSString*) ecsGuid {
  return result.ecsGuid;
}
- (ConnectInfo_Builder*) setEcsGuid:(NSString*) value {
  result.hasEcsGuid = YES;
  result.ecsGuid = value;
  return self;
}
- (ConnectInfo_Builder*) clearEcsGuid {
  result.hasEcsGuid = NO;
  result.ecsGuid = @"";
  return self;
}
- (BOOL) hasPublicIp {
  return result.hasPublicIp;
}
- (NSString*) publicIp {
  return result.publicIp;
}
- (ConnectInfo_Builder*) setPublicIp:(NSString*) value {
  result.hasPublicIp = YES;
  result.publicIp = value;
  return self;
}
- (ConnectInfo_Builder*) clearPublicIp {
  result.hasPublicIp = NO;
  result.publicIp = @"";
  return self;
}
- (BOOL) hasOldHardwareId {
  return result.hasOldHardwareId;
}
- (NSString*) oldHardwareId {
  return result.oldHardwareId;
}
- (ConnectInfo_Builder*) setOldHardwareId:(NSString*) value {
  result.hasOldHardwareId = YES;
  result.oldHardwareId = value;
  return self;
}
- (ConnectInfo_Builder*) clearOldHardwareId {
  result.hasOldHardwareId = NO;
  result.oldHardwareId = @"";
  return self;
}
- (BOOL) hasHardwareId1 {
  return result.hasHardwareId1;
}
- (NSString*) hardwareId1 {
  return result.hardwareId1;
}
- (ConnectInfo_Builder*) setHardwareId1:(NSString*) value {
  result.hasHardwareId1 = YES;
  result.hardwareId1 = value;
  return self;
}
- (ConnectInfo_Builder*) clearHardwareId1 {
  result.hasHardwareId1 = NO;
  result.hardwareId1 = @"";
  return self;
}
- (BOOL) hasHardwareId2 {
  return result.hasHardwareId2;
}
- (NSString*) hardwareId2 {
  return result.hardwareId2;
}
- (ConnectInfo_Builder*) setHardwareId2:(NSString*) value {
  result.hasHardwareId2 = YES;
  result.hardwareId2 = value;
  return self;
}
- (ConnectInfo_Builder*) clearHardwareId2 {
  result.hasHardwareId2 = NO;
  result.hardwareId2 = @"";
  return self;
}
- (BOOL) hasBrand {
  return result.hasBrand;
}
- (NSString*) brand {
  return result.brand;
}
- (ConnectInfo_Builder*) setBrand:(NSString*) value {
  result.hasBrand = YES;
  result.brand = value;
  return self;
}
- (ConnectInfo_Builder*) clearBrand {
  result.hasBrand = NO;
  result.brand = @"";
  return self;
}
- (BOOL) hasHardwareId3 {
  return result.hasHardwareId3;
}
- (NSString*) hardwareId3 {
  return result.hardwareId3;
}
- (ConnectInfo_Builder*) setHardwareId3:(NSString*) value {
  result.hasHardwareId3 = YES;
  result.hardwareId3 = value;
  return self;
}
- (ConnectInfo_Builder*) clearHardwareId3 {
  result.hasHardwareId3 = NO;
  result.hardwareId3 = @"";
  return self;
}
- (BOOL) hasAllowCameraChangesDeprecated {
  return result.hasAllowCameraChangesDeprecated;
}
- (BOOL) allowCameraChangesDeprecated {
  return result.allowCameraChangesDeprecated;
}
- (ConnectInfo_Builder*) setAllowCameraChangesDeprecated:(BOOL) value {
  result.hasAllowCameraChangesDeprecated = YES;
  result.allowCameraChangesDeprecated = value;
  return self;
}
- (ConnectInfo_Builder*) clearAllowCameraChangesDeprecated {
  result.hasAllowCameraChangesDeprecated = NO;
  result.allowCameraChangesDeprecated = NO;
  return self;
}
@end

