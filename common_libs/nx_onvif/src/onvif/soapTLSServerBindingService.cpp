/* soapTLSServerBindingService.cpp
   Generated by gSOAP 2.8.66 for ../result/interim/onvif.h_

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapTLSServerBindingService.h"

TLSServerBindingService::TLSServerBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	TLSServerBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

TLSServerBindingService::TLSServerBindingService(const TLSServerBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

TLSServerBindingService::TLSServerBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	TLSServerBindingService_init(_soap->imode, _soap->omode);
}

TLSServerBindingService::TLSServerBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	TLSServerBindingService_init(iomode, iomode);
}

TLSServerBindingService::TLSServerBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	TLSServerBindingService_init(imode, omode);
}

TLSServerBindingService::~TLSServerBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void TLSServerBindingService::TLSServerBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"onvifPacs", "http://www.onvif.org/ver10/pacs", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"onvifXsd", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"oasisWsrf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"oasisWsnT1", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"oasisWsrfR2", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"onvifAccessControl", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
        {"onvifAccessRules", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
        {"onvifActionEngine", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
        {"onvifAdvancedSecurity-assb", "http://www.onvif.org/ver10/advancedsecurity/wsdl/AdvancedSecurityServiceBinding", NULL, NULL},
        {"onvifAdvancedSecurity-db", "http://www.onvif.org/ver10/advancedsecurity/wsdl/Dot1XBinding", NULL, NULL},
        {"onvifAdvancedSecurity-kb", "http://www.onvif.org/ver10/advancedsecurity/wsdl/KeystoreBinding", NULL, NULL},
        {"onvifAdvancedSecurity-tsb", "http://www.onvif.org/ver10/advancedsecurity/wsdl/TLSServerBinding", NULL, NULL},
        {"onvifAdvancedSecurity", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
        {"onvifAnalytics-aeb", "http://www.onvif.org/ver20/analytics/wsdl/AnalyticsEngineBinding", NULL, NULL},
        {"onvifAnalytics-reb", "http://www.onvif.org/ver20/analytics/wsdl/RuleEngineBinding", NULL, NULL},
        {"onvifAnalytics", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"onvifAnalyticsDevice", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
        {"onvifCredential", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
        {"onvifDevice", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"onvifDeviceIO", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
        {"onvifDisplay", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"onvifDoorControl", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
        {"onvifEvents-cpb", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
        {"onvifEvents-eb", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
        {"onvifEvents-ncb", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
        {"onvifEvents-npb", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
        {"onvifEvents-ppb", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
        {"onvifEvents", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"onvifEvents-pps", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
        {"onvifEvents-psmb", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
        {"oasisWsnB2", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"onvifEvents-smb", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
        {"onvifImg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"onvifMedia", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"onvifMedia2", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
        {"onvifNetwork-dlb", "http://www.onvif.org/ver10/network/wsdl/DiscoveryLookupBinding", NULL, NULL},
        {"onvifNetwork-rdb", "http://www.onvif.org/ver10/network/wsdl/RemoteDiscoveryBinding", NULL, NULL},
        {"onvifNetwork", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL},
        {"onvifProvisioning", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
        {"onvifPtz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"onvifReceiver", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"onvifRecording", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"onvifReplay", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"onvifScedule", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
        {"onvifSearch", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {"onvifThermal", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void TLSServerBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void TLSServerBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	TLSServerBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
TLSServerBindingService *TLSServerBindingService::copy()
{	TLSServerBindingService *dup = SOAP_NEW_UNMANAGED(TLSServerBindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

TLSServerBindingService& TLSServerBindingService::operator=(const TLSServerBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int TLSServerBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int TLSServerBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int TLSServerBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int TLSServerBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int TLSServerBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int TLSServerBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void TLSServerBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void TLSServerBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *TLSServerBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void TLSServerBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void TLSServerBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence, struct _wsse__Security *wsse__Security, char *subscriptionID)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->subscriptionID = subscriptionID;
}

::SOAP_ENV__Header *TLSServerBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int TLSServerBindingService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int TLSServerBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET TLSServerBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET TLSServerBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int TLSServerBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int TLSServerBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment(struct soap*, TLSServerBindingService*);
static int serve___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies(struct soap*, TLSServerBindingService*);

int TLSServerBindingService::dispatch()
{	return dispatch(this->soap);
}

int TLSServerBindingService::dispatch(struct soap* soap)
{
	TLSServerBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:AddServerCertificateAssignment"))
		return serve___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:RemoveServerCertificateAssignment"))
		return serve___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:ReplaceServerCertificateAssignment"))
		return serve___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:GetAssignedServerCertificates"))
		return serve___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:SetClientAuthenticationRequired"))
		return serve___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:GetClientAuthenticationRequired"))
		return serve___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:AddCertPathValidationPolicyAssignment"))
		return serve___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:RemoveCertPathValidationPolicyAssignment"))
		return serve___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:ReplaceCertPathValidationPolicyAssignment"))
		return serve___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifAdvancedSecurity:GetAssignedCertPathValidationPolicies"))
		return serve___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__AddServerCertificateAssignment soap_tmp___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment;
	_onvifAdvancedSecurity__AddServerCertificateAssignmentResponse onvifAdvancedSecurity__AddServerCertificateAssignmentResponse;
	onvifAdvancedSecurity__AddServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment);
	if (!soap_get___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment, "-onvifAdvancedSecurity-tsb:AddServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddServerCertificateAssignment(soap_tmp___onvifAdvancedSecurity_tsb__AddServerCertificateAssignment.onvifAdvancedSecurity__AddServerCertificateAssignment, onvifAdvancedSecurity__AddServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__AddServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__AddServerCertificateAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:AddServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__AddServerCertificateAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:AddServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment soap_tmp___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment;
	_onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse;
	onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment);
	if (!soap_get___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment, "-onvifAdvancedSecurity-tsb:RemoveServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RemoveServerCertificateAssignment(soap_tmp___onvifAdvancedSecurity_tsb__RemoveServerCertificateAssignment.onvifAdvancedSecurity__RemoveServerCertificateAssignment, onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:RemoveServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__RemoveServerCertificateAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:RemoveServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment soap_tmp___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment;
	_onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse;
	onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment);
	if (!soap_get___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment, "-onvifAdvancedSecurity-tsb:ReplaceServerCertificateAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ReplaceServerCertificateAssignment(soap_tmp___onvifAdvancedSecurity_tsb__ReplaceServerCertificateAssignment.onvifAdvancedSecurity__ReplaceServerCertificateAssignment, onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:ReplaceServerCertificateAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__ReplaceServerCertificateAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:ReplaceServerCertificateAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__GetAssignedServerCertificates soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates;
	_onvifAdvancedSecurity__GetAssignedServerCertificatesResponse onvifAdvancedSecurity__GetAssignedServerCertificatesResponse;
	onvifAdvancedSecurity__GetAssignedServerCertificatesResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates(soap, &soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates);
	if (!soap_get___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates(soap, &soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates, "-onvifAdvancedSecurity-tsb:GetAssignedServerCertificates", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAssignedServerCertificates(soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedServerCertificates.onvifAdvancedSecurity__GetAssignedServerCertificates, onvifAdvancedSecurity__GetAssignedServerCertificatesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__GetAssignedServerCertificatesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__GetAssignedServerCertificatesResponse.soap_put(soap, "onvifAdvancedSecurity:GetAssignedServerCertificatesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__GetAssignedServerCertificatesResponse.soap_put(soap, "onvifAdvancedSecurity:GetAssignedServerCertificatesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired soap_tmp___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired;
	_onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse;
	onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired(soap, &soap_tmp___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired);
	if (!soap_get___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired(soap, &soap_tmp___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired, "-onvifAdvancedSecurity-tsb:SetClientAuthenticationRequired", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetClientAuthenticationRequired(soap_tmp___onvifAdvancedSecurity_tsb__SetClientAuthenticationRequired.onvifAdvancedSecurity__SetClientAuthenticationRequired, onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse.soap_put(soap, "onvifAdvancedSecurity:SetClientAuthenticationRequiredResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__SetClientAuthenticationRequiredResponse.soap_put(soap, "onvifAdvancedSecurity:SetClientAuthenticationRequiredResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired soap_tmp___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired;
	_onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse;
	onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired(soap, &soap_tmp___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired);
	if (!soap_get___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired(soap, &soap_tmp___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired, "-onvifAdvancedSecurity-tsb:GetClientAuthenticationRequired", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetClientAuthenticationRequired(soap_tmp___onvifAdvancedSecurity_tsb__GetClientAuthenticationRequired.onvifAdvancedSecurity__GetClientAuthenticationRequired, onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse.soap_put(soap, "onvifAdvancedSecurity:GetClientAuthenticationRequiredResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__GetClientAuthenticationRequiredResponse.soap_put(soap, "onvifAdvancedSecurity:GetClientAuthenticationRequiredResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment soap_tmp___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment;
	_onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse;
	onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment);
	if (!soap_get___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment, "-onvifAdvancedSecurity-tsb:AddCertPathValidationPolicyAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddCertPathValidationPolicyAssignment(soap_tmp___onvifAdvancedSecurity_tsb__AddCertPathValidationPolicyAssignment.onvifAdvancedSecurity__AddCertPathValidationPolicyAssignment, onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:AddCertPathValidationPolicyAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__AddCertPathValidationPolicyAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:AddCertPathValidationPolicyAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment soap_tmp___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment;
	_onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse;
	onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment);
	if (!soap_get___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment, "-onvifAdvancedSecurity-tsb:RemoveCertPathValidationPolicyAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RemoveCertPathValidationPolicyAssignment(soap_tmp___onvifAdvancedSecurity_tsb__RemoveCertPathValidationPolicyAssignment.onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignment, onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:RemoveCertPathValidationPolicyAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__RemoveCertPathValidationPolicyAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:RemoveCertPathValidationPolicyAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment soap_tmp___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment;
	_onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse;
	onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment);
	if (!soap_get___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment(soap, &soap_tmp___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment, "-onvifAdvancedSecurity-tsb:ReplaceCertPathValidationPolicyAssignment", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ReplaceCertPathValidationPolicyAssignment(soap_tmp___onvifAdvancedSecurity_tsb__ReplaceCertPathValidationPolicyAssignment.onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignment, onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:ReplaceCertPathValidationPolicyAssignmentResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__ReplaceCertPathValidationPolicyAssignmentResponse.soap_put(soap, "onvifAdvancedSecurity:ReplaceCertPathValidationPolicyAssignmentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies(struct soap *soap, TLSServerBindingService *service)
{	struct __onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies;
	_onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse;
	onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse.soap_default(soap);
	soap_default___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies);
	if (!soap_get___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies(soap, &soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies, "-onvifAdvancedSecurity-tsb:GetAssignedCertPathValidationPolicies", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAssignedCertPathValidationPolicies(soap_tmp___onvifAdvancedSecurity_tsb__GetAssignedCertPathValidationPolicies.onvifAdvancedSecurity__GetAssignedCertPathValidationPolicies, onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse.soap_put(soap, "onvifAdvancedSecurity:GetAssignedCertPathValidationPoliciesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifAdvancedSecurity__GetAssignedCertPathValidationPoliciesResponse.soap_put(soap, "onvifAdvancedSecurity:GetAssignedCertPathValidationPoliciesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
