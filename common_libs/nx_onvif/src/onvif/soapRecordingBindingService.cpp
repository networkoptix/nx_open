/* soapRecordingBindingService.cpp
   Generated by gSOAP 2.8.66 for ../result/interim/onvif.h_

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapRecordingBindingService.h"

RecordingBindingService::RecordingBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RecordingBindingService::RecordingBindingService(const RecordingBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

RecordingBindingService::RecordingBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	RecordingBindingService_init(_soap->imode, _soap->omode);
}

RecordingBindingService::RecordingBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingService_init(iomode, iomode);
}

RecordingBindingService::RecordingBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	RecordingBindingService_init(imode, omode);
}

RecordingBindingService::~RecordingBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void RecordingBindingService::RecordingBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"onvifPacs", "http://www.onvif.org/ver10/pacs", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"onvifXsd", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"oasisWsrf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"oasisWsnT1", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"oasisWsrfR2", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"onvifAccessControl", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
        {"onvifAccessRules", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
        {"onvifActionEngine", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
        {"onvifAdvancedSecurity-assb", "http://www.onvif.org/ver10/advancedsecurity/wsdl/AdvancedSecurityServiceBinding", NULL, NULL},
        {"onvifAdvancedSecurity-db", "http://www.onvif.org/ver10/advancedsecurity/wsdl/Dot1XBinding", NULL, NULL},
        {"onvifAdvancedSecurity-kb", "http://www.onvif.org/ver10/advancedsecurity/wsdl/KeystoreBinding", NULL, NULL},
        {"onvifAdvancedSecurity-tsb", "http://www.onvif.org/ver10/advancedsecurity/wsdl/TLSServerBinding", NULL, NULL},
        {"onvifAdvancedSecurity", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
        {"onvifAnalytics-aeb", "http://www.onvif.org/ver20/analytics/wsdl/AnalyticsEngineBinding", NULL, NULL},
        {"onvifAnalytics-reb", "http://www.onvif.org/ver20/analytics/wsdl/RuleEngineBinding", NULL, NULL},
        {"onvifAnalytics", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"onvifAnalyticsDevice", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
        {"onvifCredential", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
        {"onvifDevice", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"onvifDeviceIO", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
        {"onvifDisplay", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"onvifDoorControl", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
        {"onvifEvents-cpb", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL},
        {"onvifEvents-eb", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL},
        {"onvifEvents-ncb", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL},
        {"onvifEvents-npb", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL},
        {"onvifEvents-ppb", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL},
        {"onvifEvents", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"onvifEvents-pps", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL},
        {"onvifEvents-psmb", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL},
        {"oasisWsnB2", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"onvifEvents-smb", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL},
        {"onvifImg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"onvifMedia", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"onvifMedia2", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
        {"onvifNetwork-dlb", "http://www.onvif.org/ver10/network/wsdl/DiscoveryLookupBinding", NULL, NULL},
        {"onvifNetwork-rdb", "http://www.onvif.org/ver10/network/wsdl/RemoteDiscoveryBinding", NULL, NULL},
        {"onvifNetwork", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL},
        {"onvifProvisioning", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
        {"onvifPtz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"onvifReceiver", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"onvifRecording", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"onvifReplay", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"onvifScedule", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
        {"onvifSearch", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {"onvifThermal", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void RecordingBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void RecordingBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	RecordingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
RecordingBindingService *RecordingBindingService::copy()
{	RecordingBindingService *dup = SOAP_NEW_UNMANAGED(RecordingBindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

RecordingBindingService& RecordingBindingService::operator=(const RecordingBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int RecordingBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int RecordingBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int RecordingBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int RecordingBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int RecordingBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int RecordingBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void RecordingBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RecordingBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *RecordingBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void RecordingBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void RecordingBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence, struct _wsse__Security *wsse__Security, char *subscriptionID)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->subscriptionID = subscriptionID;
}

::SOAP_ENV__Header *RecordingBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int RecordingBindingService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int RecordingBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET RecordingBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET RecordingBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int RecordingBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int RecordingBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___onvifRecording__GetServiceCapabilities(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__CreateRecording(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__DeleteRecording(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetRecordings(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__SetRecordingConfiguration(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetRecordingConfiguration(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetRecordingOptions(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__CreateTrack(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__DeleteTrack(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetTrackConfiguration(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__SetTrackConfiguration(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__CreateRecordingJob(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__DeleteRecordingJob(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetRecordingJobs(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__SetRecordingJobConfiguration(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetRecordingJobConfiguration(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__SetRecordingJobMode(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetRecordingJobState(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__ExportRecordedData(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__StopExportRecordedData(struct soap*, RecordingBindingService*);
static int serve___onvifRecording__GetExportRecordedDataState(struct soap*, RecordingBindingService*);

int RecordingBindingService::dispatch()
{	return dispatch(this->soap);
}

int RecordingBindingService::dispatch(struct soap* soap)
{
	RecordingBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetServiceCapabilities"))
		return serve___onvifRecording__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:CreateRecording"))
		return serve___onvifRecording__CreateRecording(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:DeleteRecording"))
		return serve___onvifRecording__DeleteRecording(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetRecordings"))
		return serve___onvifRecording__GetRecordings(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:SetRecordingConfiguration"))
		return serve___onvifRecording__SetRecordingConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetRecordingConfiguration"))
		return serve___onvifRecording__GetRecordingConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetRecordingOptions"))
		return serve___onvifRecording__GetRecordingOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:CreateTrack"))
		return serve___onvifRecording__CreateTrack(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:DeleteTrack"))
		return serve___onvifRecording__DeleteTrack(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetTrackConfiguration"))
		return serve___onvifRecording__GetTrackConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:SetTrackConfiguration"))
		return serve___onvifRecording__SetTrackConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:CreateRecordingJob"))
		return serve___onvifRecording__CreateRecordingJob(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:DeleteRecordingJob"))
		return serve___onvifRecording__DeleteRecordingJob(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetRecordingJobs"))
		return serve___onvifRecording__GetRecordingJobs(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:SetRecordingJobConfiguration"))
		return serve___onvifRecording__SetRecordingJobConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetRecordingJobConfiguration"))
		return serve___onvifRecording__GetRecordingJobConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:SetRecordingJobMode"))
		return serve___onvifRecording__SetRecordingJobMode(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetRecordingJobState"))
		return serve___onvifRecording__GetRecordingJobState(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:ExportRecordedData"))
		return serve___onvifRecording__ExportRecordedData(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:StopExportRecordedData"))
		return serve___onvifRecording__StopExportRecordedData(soap, this);
	if (!soap_match_tag(soap, soap->tag, "onvifRecording:GetExportRecordedDataState"))
		return serve___onvifRecording__GetExportRecordedDataState(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___onvifRecording__GetServiceCapabilities(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetServiceCapabilities soap_tmp___onvifRecording__GetServiceCapabilities;
	_onvifRecording__GetServiceCapabilitiesResponse onvifRecording__GetServiceCapabilitiesResponse;
	onvifRecording__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___onvifRecording__GetServiceCapabilities(soap, &soap_tmp___onvifRecording__GetServiceCapabilities);
	if (!soap_get___onvifRecording__GetServiceCapabilities(soap, &soap_tmp___onvifRecording__GetServiceCapabilities, "-onvifRecording:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___onvifRecording__GetServiceCapabilities.onvifRecording__GetServiceCapabilities, onvifRecording__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetServiceCapabilitiesResponse.soap_put(soap, "onvifRecording:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetServiceCapabilitiesResponse.soap_put(soap, "onvifRecording:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__CreateRecording(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__CreateRecording soap_tmp___onvifRecording__CreateRecording;
	_onvifRecording__CreateRecordingResponse onvifRecording__CreateRecordingResponse;
	onvifRecording__CreateRecordingResponse.soap_default(soap);
	soap_default___onvifRecording__CreateRecording(soap, &soap_tmp___onvifRecording__CreateRecording);
	if (!soap_get___onvifRecording__CreateRecording(soap, &soap_tmp___onvifRecording__CreateRecording, "-onvifRecording:CreateRecording", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRecording(soap_tmp___onvifRecording__CreateRecording.onvifRecording__CreateRecording, onvifRecording__CreateRecordingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__CreateRecordingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__CreateRecordingResponse.soap_put(soap, "onvifRecording:CreateRecordingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__CreateRecordingResponse.soap_put(soap, "onvifRecording:CreateRecordingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__DeleteRecording(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__DeleteRecording soap_tmp___onvifRecording__DeleteRecording;
	_onvifRecording__DeleteRecordingResponse onvifRecording__DeleteRecordingResponse;
	onvifRecording__DeleteRecordingResponse.soap_default(soap);
	soap_default___onvifRecording__DeleteRecording(soap, &soap_tmp___onvifRecording__DeleteRecording);
	if (!soap_get___onvifRecording__DeleteRecording(soap, &soap_tmp___onvifRecording__DeleteRecording, "-onvifRecording:DeleteRecording", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteRecording(soap_tmp___onvifRecording__DeleteRecording.onvifRecording__DeleteRecording, onvifRecording__DeleteRecordingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__DeleteRecordingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__DeleteRecordingResponse.soap_put(soap, "onvifRecording:DeleteRecordingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__DeleteRecordingResponse.soap_put(soap, "onvifRecording:DeleteRecordingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetRecordings(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetRecordings soap_tmp___onvifRecording__GetRecordings;
	_onvifRecording__GetRecordingsResponse onvifRecording__GetRecordingsResponse;
	onvifRecording__GetRecordingsResponse.soap_default(soap);
	soap_default___onvifRecording__GetRecordings(soap, &soap_tmp___onvifRecording__GetRecordings);
	if (!soap_get___onvifRecording__GetRecordings(soap, &soap_tmp___onvifRecording__GetRecordings, "-onvifRecording:GetRecordings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordings(soap_tmp___onvifRecording__GetRecordings.onvifRecording__GetRecordings, onvifRecording__GetRecordingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetRecordingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetRecordingsResponse.soap_put(soap, "onvifRecording:GetRecordingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetRecordingsResponse.soap_put(soap, "onvifRecording:GetRecordingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__SetRecordingConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__SetRecordingConfiguration soap_tmp___onvifRecording__SetRecordingConfiguration;
	_onvifRecording__SetRecordingConfigurationResponse onvifRecording__SetRecordingConfigurationResponse;
	onvifRecording__SetRecordingConfigurationResponse.soap_default(soap);
	soap_default___onvifRecording__SetRecordingConfiguration(soap, &soap_tmp___onvifRecording__SetRecordingConfiguration);
	if (!soap_get___onvifRecording__SetRecordingConfiguration(soap, &soap_tmp___onvifRecording__SetRecordingConfiguration, "-onvifRecording:SetRecordingConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetRecordingConfiguration(soap_tmp___onvifRecording__SetRecordingConfiguration.onvifRecording__SetRecordingConfiguration, onvifRecording__SetRecordingConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__SetRecordingConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__SetRecordingConfigurationResponse.soap_put(soap, "onvifRecording:SetRecordingConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__SetRecordingConfigurationResponse.soap_put(soap, "onvifRecording:SetRecordingConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetRecordingConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetRecordingConfiguration soap_tmp___onvifRecording__GetRecordingConfiguration;
	_onvifRecording__GetRecordingConfigurationResponse onvifRecording__GetRecordingConfigurationResponse;
	onvifRecording__GetRecordingConfigurationResponse.soap_default(soap);
	soap_default___onvifRecording__GetRecordingConfiguration(soap, &soap_tmp___onvifRecording__GetRecordingConfiguration);
	if (!soap_get___onvifRecording__GetRecordingConfiguration(soap, &soap_tmp___onvifRecording__GetRecordingConfiguration, "-onvifRecording:GetRecordingConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingConfiguration(soap_tmp___onvifRecording__GetRecordingConfiguration.onvifRecording__GetRecordingConfiguration, onvifRecording__GetRecordingConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetRecordingConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetRecordingConfigurationResponse.soap_put(soap, "onvifRecording:GetRecordingConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetRecordingConfigurationResponse.soap_put(soap, "onvifRecording:GetRecordingConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetRecordingOptions(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetRecordingOptions soap_tmp___onvifRecording__GetRecordingOptions;
	_onvifRecording__GetRecordingOptionsResponse onvifRecording__GetRecordingOptionsResponse;
	onvifRecording__GetRecordingOptionsResponse.soap_default(soap);
	soap_default___onvifRecording__GetRecordingOptions(soap, &soap_tmp___onvifRecording__GetRecordingOptions);
	if (!soap_get___onvifRecording__GetRecordingOptions(soap, &soap_tmp___onvifRecording__GetRecordingOptions, "-onvifRecording:GetRecordingOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingOptions(soap_tmp___onvifRecording__GetRecordingOptions.onvifRecording__GetRecordingOptions, onvifRecording__GetRecordingOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetRecordingOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetRecordingOptionsResponse.soap_put(soap, "onvifRecording:GetRecordingOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetRecordingOptionsResponse.soap_put(soap, "onvifRecording:GetRecordingOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__CreateTrack(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__CreateTrack soap_tmp___onvifRecording__CreateTrack;
	_onvifRecording__CreateTrackResponse onvifRecording__CreateTrackResponse;
	onvifRecording__CreateTrackResponse.soap_default(soap);
	soap_default___onvifRecording__CreateTrack(soap, &soap_tmp___onvifRecording__CreateTrack);
	if (!soap_get___onvifRecording__CreateTrack(soap, &soap_tmp___onvifRecording__CreateTrack, "-onvifRecording:CreateTrack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateTrack(soap_tmp___onvifRecording__CreateTrack.onvifRecording__CreateTrack, onvifRecording__CreateTrackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__CreateTrackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__CreateTrackResponse.soap_put(soap, "onvifRecording:CreateTrackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__CreateTrackResponse.soap_put(soap, "onvifRecording:CreateTrackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__DeleteTrack(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__DeleteTrack soap_tmp___onvifRecording__DeleteTrack;
	_onvifRecording__DeleteTrackResponse onvifRecording__DeleteTrackResponse;
	onvifRecording__DeleteTrackResponse.soap_default(soap);
	soap_default___onvifRecording__DeleteTrack(soap, &soap_tmp___onvifRecording__DeleteTrack);
	if (!soap_get___onvifRecording__DeleteTrack(soap, &soap_tmp___onvifRecording__DeleteTrack, "-onvifRecording:DeleteTrack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteTrack(soap_tmp___onvifRecording__DeleteTrack.onvifRecording__DeleteTrack, onvifRecording__DeleteTrackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__DeleteTrackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__DeleteTrackResponse.soap_put(soap, "onvifRecording:DeleteTrackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__DeleteTrackResponse.soap_put(soap, "onvifRecording:DeleteTrackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetTrackConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetTrackConfiguration soap_tmp___onvifRecording__GetTrackConfiguration;
	_onvifRecording__GetTrackConfigurationResponse onvifRecording__GetTrackConfigurationResponse;
	onvifRecording__GetTrackConfigurationResponse.soap_default(soap);
	soap_default___onvifRecording__GetTrackConfiguration(soap, &soap_tmp___onvifRecording__GetTrackConfiguration);
	if (!soap_get___onvifRecording__GetTrackConfiguration(soap, &soap_tmp___onvifRecording__GetTrackConfiguration, "-onvifRecording:GetTrackConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetTrackConfiguration(soap_tmp___onvifRecording__GetTrackConfiguration.onvifRecording__GetTrackConfiguration, onvifRecording__GetTrackConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetTrackConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetTrackConfigurationResponse.soap_put(soap, "onvifRecording:GetTrackConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetTrackConfigurationResponse.soap_put(soap, "onvifRecording:GetTrackConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__SetTrackConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__SetTrackConfiguration soap_tmp___onvifRecording__SetTrackConfiguration;
	_onvifRecording__SetTrackConfigurationResponse onvifRecording__SetTrackConfigurationResponse;
	onvifRecording__SetTrackConfigurationResponse.soap_default(soap);
	soap_default___onvifRecording__SetTrackConfiguration(soap, &soap_tmp___onvifRecording__SetTrackConfiguration);
	if (!soap_get___onvifRecording__SetTrackConfiguration(soap, &soap_tmp___onvifRecording__SetTrackConfiguration, "-onvifRecording:SetTrackConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetTrackConfiguration(soap_tmp___onvifRecording__SetTrackConfiguration.onvifRecording__SetTrackConfiguration, onvifRecording__SetTrackConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__SetTrackConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__SetTrackConfigurationResponse.soap_put(soap, "onvifRecording:SetTrackConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__SetTrackConfigurationResponse.soap_put(soap, "onvifRecording:SetTrackConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__CreateRecordingJob(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__CreateRecordingJob soap_tmp___onvifRecording__CreateRecordingJob;
	_onvifRecording__CreateRecordingJobResponse onvifRecording__CreateRecordingJobResponse;
	onvifRecording__CreateRecordingJobResponse.soap_default(soap);
	soap_default___onvifRecording__CreateRecordingJob(soap, &soap_tmp___onvifRecording__CreateRecordingJob);
	if (!soap_get___onvifRecording__CreateRecordingJob(soap, &soap_tmp___onvifRecording__CreateRecordingJob, "-onvifRecording:CreateRecordingJob", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRecordingJob(soap_tmp___onvifRecording__CreateRecordingJob.onvifRecording__CreateRecordingJob, onvifRecording__CreateRecordingJobResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__CreateRecordingJobResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__CreateRecordingJobResponse.soap_put(soap, "onvifRecording:CreateRecordingJobResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__CreateRecordingJobResponse.soap_put(soap, "onvifRecording:CreateRecordingJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__DeleteRecordingJob(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__DeleteRecordingJob soap_tmp___onvifRecording__DeleteRecordingJob;
	_onvifRecording__DeleteRecordingJobResponse onvifRecording__DeleteRecordingJobResponse;
	onvifRecording__DeleteRecordingJobResponse.soap_default(soap);
	soap_default___onvifRecording__DeleteRecordingJob(soap, &soap_tmp___onvifRecording__DeleteRecordingJob);
	if (!soap_get___onvifRecording__DeleteRecordingJob(soap, &soap_tmp___onvifRecording__DeleteRecordingJob, "-onvifRecording:DeleteRecordingJob", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteRecordingJob(soap_tmp___onvifRecording__DeleteRecordingJob.onvifRecording__DeleteRecordingJob, onvifRecording__DeleteRecordingJobResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__DeleteRecordingJobResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__DeleteRecordingJobResponse.soap_put(soap, "onvifRecording:DeleteRecordingJobResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__DeleteRecordingJobResponse.soap_put(soap, "onvifRecording:DeleteRecordingJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetRecordingJobs(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetRecordingJobs soap_tmp___onvifRecording__GetRecordingJobs;
	_onvifRecording__GetRecordingJobsResponse onvifRecording__GetRecordingJobsResponse;
	onvifRecording__GetRecordingJobsResponse.soap_default(soap);
	soap_default___onvifRecording__GetRecordingJobs(soap, &soap_tmp___onvifRecording__GetRecordingJobs);
	if (!soap_get___onvifRecording__GetRecordingJobs(soap, &soap_tmp___onvifRecording__GetRecordingJobs, "-onvifRecording:GetRecordingJobs", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingJobs(soap_tmp___onvifRecording__GetRecordingJobs.onvifRecording__GetRecordingJobs, onvifRecording__GetRecordingJobsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetRecordingJobsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetRecordingJobsResponse.soap_put(soap, "onvifRecording:GetRecordingJobsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetRecordingJobsResponse.soap_put(soap, "onvifRecording:GetRecordingJobsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__SetRecordingJobConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__SetRecordingJobConfiguration soap_tmp___onvifRecording__SetRecordingJobConfiguration;
	_onvifRecording__SetRecordingJobConfigurationResponse onvifRecording__SetRecordingJobConfigurationResponse;
	onvifRecording__SetRecordingJobConfigurationResponse.soap_default(soap);
	soap_default___onvifRecording__SetRecordingJobConfiguration(soap, &soap_tmp___onvifRecording__SetRecordingJobConfiguration);
	if (!soap_get___onvifRecording__SetRecordingJobConfiguration(soap, &soap_tmp___onvifRecording__SetRecordingJobConfiguration, "-onvifRecording:SetRecordingJobConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetRecordingJobConfiguration(soap_tmp___onvifRecording__SetRecordingJobConfiguration.onvifRecording__SetRecordingJobConfiguration, onvifRecording__SetRecordingJobConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__SetRecordingJobConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__SetRecordingJobConfigurationResponse.soap_put(soap, "onvifRecording:SetRecordingJobConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__SetRecordingJobConfigurationResponse.soap_put(soap, "onvifRecording:SetRecordingJobConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetRecordingJobConfiguration(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetRecordingJobConfiguration soap_tmp___onvifRecording__GetRecordingJobConfiguration;
	_onvifRecording__GetRecordingJobConfigurationResponse onvifRecording__GetRecordingJobConfigurationResponse;
	onvifRecording__GetRecordingJobConfigurationResponse.soap_default(soap);
	soap_default___onvifRecording__GetRecordingJobConfiguration(soap, &soap_tmp___onvifRecording__GetRecordingJobConfiguration);
	if (!soap_get___onvifRecording__GetRecordingJobConfiguration(soap, &soap_tmp___onvifRecording__GetRecordingJobConfiguration, "-onvifRecording:GetRecordingJobConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingJobConfiguration(soap_tmp___onvifRecording__GetRecordingJobConfiguration.onvifRecording__GetRecordingJobConfiguration, onvifRecording__GetRecordingJobConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetRecordingJobConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetRecordingJobConfigurationResponse.soap_put(soap, "onvifRecording:GetRecordingJobConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetRecordingJobConfigurationResponse.soap_put(soap, "onvifRecording:GetRecordingJobConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__SetRecordingJobMode(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__SetRecordingJobMode soap_tmp___onvifRecording__SetRecordingJobMode;
	_onvifRecording__SetRecordingJobModeResponse onvifRecording__SetRecordingJobModeResponse;
	onvifRecording__SetRecordingJobModeResponse.soap_default(soap);
	soap_default___onvifRecording__SetRecordingJobMode(soap, &soap_tmp___onvifRecording__SetRecordingJobMode);
	if (!soap_get___onvifRecording__SetRecordingJobMode(soap, &soap_tmp___onvifRecording__SetRecordingJobMode, "-onvifRecording:SetRecordingJobMode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetRecordingJobMode(soap_tmp___onvifRecording__SetRecordingJobMode.onvifRecording__SetRecordingJobMode, onvifRecording__SetRecordingJobModeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__SetRecordingJobModeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__SetRecordingJobModeResponse.soap_put(soap, "onvifRecording:SetRecordingJobModeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__SetRecordingJobModeResponse.soap_put(soap, "onvifRecording:SetRecordingJobModeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetRecordingJobState(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetRecordingJobState soap_tmp___onvifRecording__GetRecordingJobState;
	_onvifRecording__GetRecordingJobStateResponse onvifRecording__GetRecordingJobStateResponse;
	onvifRecording__GetRecordingJobStateResponse.soap_default(soap);
	soap_default___onvifRecording__GetRecordingJobState(soap, &soap_tmp___onvifRecording__GetRecordingJobState);
	if (!soap_get___onvifRecording__GetRecordingJobState(soap, &soap_tmp___onvifRecording__GetRecordingJobState, "-onvifRecording:GetRecordingJobState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRecordingJobState(soap_tmp___onvifRecording__GetRecordingJobState.onvifRecording__GetRecordingJobState, onvifRecording__GetRecordingJobStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetRecordingJobStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetRecordingJobStateResponse.soap_put(soap, "onvifRecording:GetRecordingJobStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetRecordingJobStateResponse.soap_put(soap, "onvifRecording:GetRecordingJobStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__ExportRecordedData(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__ExportRecordedData soap_tmp___onvifRecording__ExportRecordedData;
	_onvifRecording__ExportRecordedDataResponse onvifRecording__ExportRecordedDataResponse;
	onvifRecording__ExportRecordedDataResponse.soap_default(soap);
	soap_default___onvifRecording__ExportRecordedData(soap, &soap_tmp___onvifRecording__ExportRecordedData);
	if (!soap_get___onvifRecording__ExportRecordedData(soap, &soap_tmp___onvifRecording__ExportRecordedData, "-onvifRecording:ExportRecordedData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ExportRecordedData(soap_tmp___onvifRecording__ExportRecordedData.onvifRecording__ExportRecordedData, onvifRecording__ExportRecordedDataResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__ExportRecordedDataResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__ExportRecordedDataResponse.soap_put(soap, "onvifRecording:ExportRecordedDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__ExportRecordedDataResponse.soap_put(soap, "onvifRecording:ExportRecordedDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__StopExportRecordedData(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__StopExportRecordedData soap_tmp___onvifRecording__StopExportRecordedData;
	_onvifRecording__StopExportRecordedDataResponse onvifRecording__StopExportRecordedDataResponse;
	onvifRecording__StopExportRecordedDataResponse.soap_default(soap);
	soap_default___onvifRecording__StopExportRecordedData(soap, &soap_tmp___onvifRecording__StopExportRecordedData);
	if (!soap_get___onvifRecording__StopExportRecordedData(soap, &soap_tmp___onvifRecording__StopExportRecordedData, "-onvifRecording:StopExportRecordedData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->StopExportRecordedData(soap_tmp___onvifRecording__StopExportRecordedData.onvifRecording__StopExportRecordedData, onvifRecording__StopExportRecordedDataResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__StopExportRecordedDataResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__StopExportRecordedDataResponse.soap_put(soap, "onvifRecording:StopExportRecordedDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__StopExportRecordedDataResponse.soap_put(soap, "onvifRecording:StopExportRecordedDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___onvifRecording__GetExportRecordedDataState(struct soap *soap, RecordingBindingService *service)
{	struct __onvifRecording__GetExportRecordedDataState soap_tmp___onvifRecording__GetExportRecordedDataState;
	_onvifRecording__GetExportRecordedDataStateResponse onvifRecording__GetExportRecordedDataStateResponse;
	onvifRecording__GetExportRecordedDataStateResponse.soap_default(soap);
	soap_default___onvifRecording__GetExportRecordedDataState(soap, &soap_tmp___onvifRecording__GetExportRecordedDataState);
	if (!soap_get___onvifRecording__GetExportRecordedDataState(soap, &soap_tmp___onvifRecording__GetExportRecordedDataState, "-onvifRecording:GetExportRecordedDataState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetExportRecordedDataState(soap_tmp___onvifRecording__GetExportRecordedDataState.onvifRecording__GetExportRecordedDataState, onvifRecording__GetExportRecordedDataStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	onvifRecording__GetExportRecordedDataStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || onvifRecording__GetExportRecordedDataStateResponse.soap_put(soap, "onvifRecording:GetExportRecordedDataStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || onvifRecording__GetExportRecordedDataStateResponse.soap_put(soap, "onvifRecording:GetExportRecordedDataStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
