From 78203e6f941d1674031d3603dd400bc3ea42bca1 Mon Sep 17 00:00:00 2001
From: Roman Vasilenko <rvasilenko@networkoptix.com>
Date: Thu, 6 Feb 2020 21:33:49 +0300
Subject: [PATCH] Do not send "moduleInformation" request to himself

Branch: vms_4.1_server
---
 vms/libs/common/src/common/common_globals.h         |  1 +
 vms/libs/common/src/nx/vms/discovery/manager.cpp    |  3 ++-
 vms/libs/nx_sdk/src/camera/camera_plugin.h          | 13 ++++++++-----
 .../nx_vms_server/src/camera/video_camera.cpp       |  6 ++++++
 .../resource/third_party/third_party_resource.cpp   |  3 +++
 .../device/usb_camera_plugin/src/camera_manager.cpp |  3 ++-
 6 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/vms/libs/common/src/common/common_globals.h b/vms/libs/common/src/common/common_globals.h
index 4d10177cd71..775e303638d 100644
--- a/vms/libs/common/src/common/common_globals.h
+++ b/vms/libs/common/src/common/common_globals.h
@@ -57,6 +57,7 @@ QN_DECLARE_METAOBJECT_HEADER(Qn,
         FixedQualityCapability              = 0x40000, //< Camera does not allow to change stream quality/fps
         MulticastStreamCapability           = 0x80000, //< Camera supports multicast streaming.
         ServerBoundCapability               = 0x100000, //< Camera is bound to a particular server.
+        dontAutoOpenCamera                  = 0x200000, //< Server should not open video from camera at its will.
     };
     Q_DECLARE_FLAGS(CameraCapabilities, CameraCapability)
     Q_DECLARE_OPERATORS_FOR_FLAGS(CameraCapabilities)
diff --git a/vms/libs/common/src/nx/vms/discovery/manager.cpp b/vms/libs/common/src/nx/vms/discovery/manager.cpp
index 686eec00716..11e4f1d5ec6 100755
--- a/vms/libs/common/src/nx/vms/discovery/manager.cpp
+++ b/vms/libs/common/src/nx/vms/discovery/manager.cpp
@@ -232,7 +232,8 @@ void Manager::initializeMulticastFinders(bool clientMode)
             nx::network::SocketAddress /*endpoint*/)
         {
             const auto endpoints = ec2::moduleInformationEndpoints(module);
-            m_moduleConnector->newEndpoints({endpoints.cbegin(), endpoints.cend()}, module.id);
+            if (module.id != commonModule()->moduleGUID())
+                m_moduleConnector->newEndpoints({endpoints.cbegin(), endpoints.cend()}, module.id);
         });
 
     if (!clientMode)
diff --git a/vms/libs/nx_sdk/src/camera/camera_plugin.h b/vms/libs/nx_sdk/src/camera/camera_plugin.h
index 7cf3123fe9b..3cb2bf77a2c 100644
--- a/vms/libs/nx_sdk/src/camera/camera_plugin.h
+++ b/vms/libs/nx_sdk/src/camera/camera_plugin.h
@@ -558,11 +558,14 @@ namespace nxcip
             cameraParamsPersistentCapability    = 0x0800,     //!< camera parameters can be read/set even if camera is not accessible at the moment
             searchByMotionMaskCapability        = 0x1000,     //!< if present, \a nxcip::BaseCameraManager2::find supports \a ArchiveSearchOptions::motionMask()
             motionRegionCapability              = 0x2000,     //!< if present, \a nxcip::BaseCameraManager3::setMotionMask is implemented
-            needIFrameDetectionCapability       = 0x4000,      //!< packet will be tested if it's a I-Frame. Use it if plugin can't set \a fKeyPacket
-            relativeTimestampCapability         = 0x8000,      //!< camera provides relative timestamps. It need to align them to the current time.
-            customMediaUrlCapability            = 0x10000,     //!< camera's media streams are editable and can be provided directly via setProperty API call.
-            cameraTimeCapability                = 0x20000,     //!< Camera sends absolute timestamps in media stream
-            fixedQualityCapability              = 0x40000,     //!< Camera does not allow to change stream quality/fps
+            needIFrameDetectionCapability       = 0x4000,     //!< packet will be tested if it's a I-Frame. Use it if plugin can't set \a fKeyPacket
+            relativeTimestampCapability         = 0x8000,     //!< camera provides relative timestamps. It need to align them to the current time.
+            customMediaUrlCapability            = 0x10000,    //!< camera's media streams are editable and can be provided directly via setProperty API call.
+            cameraTimeCapability                = 0x20000,    //!< Camera sends absolute timestamps in media stream
+            fixedQualityCapability              = 0x40000,    //!< Camera does not allow to change stream quality/fps
+            MulticastStreamCapability           = 0x80000,    //!< Camera supports multicast streaming.
+            ServerBoundCapability               = 0x100000,   //!< Camera is bound to a particular server.
+            dontAutoOpenCamera                  = 0x200000,   //!< Server should not open video from camera at its will.
         };
 
         //!Return bit set of camera capabilities (\a CameraCapability enumeration)
diff --git a/vms/server/nx_vms_server/src/camera/video_camera.cpp b/vms/server/nx_vms_server/src/camera/video_camera.cpp
index 096ab11b06a..78267b59dad 100644
--- a/vms/server/nx_vms_server/src/camera/video_camera.cpp
+++ b/vms/server/nx_vms_server/src/camera/video_camera.cpp
@@ -471,6 +471,12 @@ void QnVideoCameraGopKeeper::updateCameraActivity()
         dynamic_cast<QnSecurityCamResource*>(m_resource.data());
     bool canUseProvider = m_catalog == QnServer::HiQualityCatalog
         || !cameraResource || cameraResource->hasDualStreaming();
+    
+    if (auto camera = m_resource.dynamicCast<QnSecurityCamResource>())
+    {
+        if (camera->getCameraCapabilities().testFlag(Qn::dontAutoOpenCamera))
+            return; //< Don't update thumbnails for such cameras.
+    }
 
     if (!m_resource->hasFlags(Qn::foreigner) && m_resource->isInitialized() && canUseProvider &&
        (lastKeyTime == (qint64)AV_NOPTS_VALUE || qnSyncTime->currentUSecsSinceEpoch() - lastKeyTime > CAMERA_UPDATE_INTERNVAL) &&
diff --git a/vms/server/nx_vms_server/src/plugins/resource/third_party/third_party_resource.cpp b/vms/server/nx_vms_server/src/plugins/resource/third_party/third_party_resource.cpp
index 92d236ec923..346c44e816e 100644
--- a/vms/server/nx_vms_server/src/plugins/resource/third_party/third_party_resource.cpp
+++ b/vms/server/nx_vms_server/src/plugins/resource/third_party/third_party_resource.cpp
@@ -39,6 +39,9 @@ static const std::map<Qn::CameraCapability, nxcip::BaseCameraManager::CameraCapa
     {Qn::ShareIpCapability, nxcip::BaseCameraManager::shareIpCapability},
     {Qn::CustomMediaUrlCapability, nxcip::BaseCameraManager::customMediaUrlCapability},
     {Qn::FixedQualityCapability, nxcip::BaseCameraManager::fixedQualityCapability},
+    {Qn::MulticastStreamCapability, nxcip::BaseCameraManager::MulticastStreamCapability},
+    {Qn::ServerBoundCapability, nxcip::BaseCameraManager::ServerBoundCapability},
+    {Qn::dontAutoOpenCamera, nxcip::BaseCameraManager::dontAutoOpenCamera},
 };
 
 static const std::map<Ptz::Capability, nxcip::CameraPtzManager::Capability>
diff --git a/vms/server/plugins/device/usb_camera_plugin/src/camera_manager.cpp b/vms/server/plugins/device/usb_camera_plugin/src/camera_manager.cpp
index f179909208e..1f389308d20 100644
--- a/vms/server/plugins/device/usb_camera_plugin/src/camera_manager.cpp
+++ b/vms/server/plugins/device/usb_camera_plugin/src/camera_manager.cpp
@@ -22,7 +22,8 @@ CameraManager::CameraManager(const std::shared_ptr<Camera> camera):
         nxcip::BaseCameraManager::shareIpCapability |
         nxcip::BaseCameraManager::nativeMediaStreamCapability |
         nxcip::BaseCameraManager::primaryStreamSoftMotionCapability |
-        nxcip::BaseCameraManager::cameraTimeCapability)
+        nxcip::BaseCameraManager::cameraTimeCapability |
+        nxcip::BaseCameraManager::dontAutoOpenCamera)
 {
     m_pluginRef->addRef();
     if (nx::vms::utils::installationInfo().hwPlatform !=
-- 
2.24.1.windows.2

