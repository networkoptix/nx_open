// -* mode: groovy -*-
// Continuous integration main jenkinsfile

import org.codehaus.groovy.runtime.StackTraceUtils

@Library('jenkins')
import org.nx.jenkins.SlaveRunner


NX_REPOSITORY_CREDENTIALS_ID = 'nx-repository-readonly'
PROJECT_NAME = 'ci'
config = null


def main() {
	try {
		unsafe_main()
	} catch (Exception|Error x) {
		echo "Error running test: $x"
		echo "---- sanitized stack: ----"
		org.codehaus.groovy.runtime.StackTraceUtils.sanitize(x).printStackTrace()
		echo "---- full stack: ----"
		x.printStackTrace()
		echo "---------------------"
		if (config) {
			echo "Emailing $config.jenkins_developers"
			def email_body = [
				"Jenkins CI project for branch $env.BRANCH_NAME is failed:",
				"$x",
				"${env.BUILD_URL}console",
			]
			emailext(
				body: email_body.join('\n'),
				subject: "Jenkins CI $env.BRANCH_NAME project is failed",
				to: config.jenkins_developers.join(' '),
			)
			currentBuild.result = 'ABORTED'  // FAILED is used to indicate build failure
		}
		throw x
	}

	pragprog displayLanguageCode: 'en', indicateBuildResult: true
}

def unsafe_main() {
	def action = params?.action ?: 'update_parameters'
	def must_clean_workspace = params?.clean ?: false
	def slave_runner
	def requested_platform_names

	echo "Action: $action"

	stage('Checkout master') {
		node ('master') {
			checkout([
                    $class: 'MercurialSCM',
                    // credentialsId: NX_REPOSITORY_CREDENTIALS_ID,
                    installation: '(Default)',
                    revision: 'default',
                    // source: 'ssh://hg@la.hdw.mx/devtools',
                    source: '/home/vfedorov/repo/jenkins',
                    subdir: 'jenkins',
                ])

			config = readYaml file: 'jenkins/config.yaml'
			echo "config = $config"

			update_job_parameters(config)
			if (action == 'update_parameters') return

			requested_platform_names = config.platforms.keySet().findAll{ params.get(it) }
			echo "Will run $requested_platform_names"
			
			slave_runner = new SlaveRunner(this, config)
			slave_runner.run_master_node_preparations()
		}
	}

	if (action != 'update_parameters') {
		increment_build_number()

		def branch = env.BRANCH_NAME
		def run_params = [
			project_name: PROJECT_NAME,
			requested_platform_names: requested_platform_names,
			branch: branch,
			build_number: env.BUILD_NUMBER.toInteger(),
			configuration: config.ci.configuration,
			customization: config.ci.customization,
			cloud_group: config.ci.cloud_group,
			must_clean_workspace: must_clean_workspace,
		]
		slave_runner.run_slaves_stage(run_params)
		echo "revision_info: $slave_runner.revision_info"
	}
}

// Change parameters for currently running jenkins task; next run will require and use these parameters.
def update_job_parameters(config) {
	def job_params = [
		choice(name: 'action', choices: ['build', 'update_parameters'].join('\n'), description: 'Action to run'),
		booleanParam(name: 'clean', defaultValue: false, description: 'Do clean build')
	]
	def platform_params = config.platforms.collect {
		booleanParam(name: it.key, defaultValue: it.key in config.ci.default_platforms, description: "Build $it.key platform")
	}
	properties([
		parameters(job_params + platform_params),
		buildDiscarder(logRotator(daysToKeepStr: config.ci.days_to_keep_old_build.toString())),
	])
}

def increment_build_number() {
	build job: 'buildnumber', propagate: false
}

// ==============================================================================
main()
// ==============================================================================
